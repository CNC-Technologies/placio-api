version: "3.3"
volumes:
  db_data:
  pgadmin_data:
  redis_data:
services:

  placio-proxy:
    image: traefik:latest
    ports:
      - "80:80"
      - "8090:8080"
      - "443:443"
    env_file:
      - ./.envs/.local

    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml
      - ./traefik/acme.json:/acme.json
      - ./traefik/configurations:/configurations
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      # - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      # - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      # - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - 'traefik.enable=true'
      - 'traefik.docker.network=default'
      - 'traefik.http.routers.traefik-secure.entrypoints=websecure'
      - 'traefik.http.routers.traefik-secure.rule=Host(`traefik.palnight.com`)'
      # - 'traefik.http.routers.traefik-secure.middlewares=user-auth@file'
      - 'traefik.http.routers.traefik-secure.service=api@internal'

  placio-db:
    image: postgres:14
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    env_file:
      - ./.envs/.local
    networks:
      - default

  # zookeeper:
  #   image: 'bitnami/zookeeper:latest'
  #   networks:
  #     - traefik-public
  # kafka:
  #   image: 'bitnami/kafka:latest'
  #   networks:
  #     - traefik-public

  placio-pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:5050"
    networks:
      - default
    depends_on:
      - placio-db
    env_file:
      - ./.envs/.local
    labels:
      - traefik.enable=true
      - traefik.docker.network=default
      - 'traefik.http.routers.pgadmin-secure.entrypoints=websecure'
      - 'traefik.http.routers.pgadmin-secure.rule=Host(`pgadmin.palnight.com`)'
      - 'traefik.http.routers.pgadmin-secure.service=pgadmin'
      - traefik.http.services.pgadmin.loadbalancer.server.port=5050

  placio-redis:
    container_name: placio-redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  placio-backend:
    ports:
      - "7070:7070"
    env_file:
      - ./.envs/.local
    volumes:
      - ./:/app
      - ./cmd/app:/app/cmd/app
      - ./config:/app/config
    build:
      context: ./cmd/app
      dockerfile: Dockerfile
    networks:
      - default
    # command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    labels:
      # - traefik.http.routers.backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      # - traefik.http.services.backend.loadbalancer.server.port=80
      # - traefik.enable=true
      # # - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      # - traefik.http.routers.backend-http.rule=Host(`api.palnight.com`)
      # - traefik.http.routers.backend-http.entrypoints=http
      # # - traefik.http.routers.backend-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
      # - traefik.http.routers.backend-https.rule=Host(`api.palnight.com`)
      # - traefik.http.routers.backend-https.entrypoints=https
      # - traefik.http.routers.backend-https.tls=true
      - traefik.enable=true
      - traefik.docker.network=default
      - 'traefik.http.routers.backend-secure.entrypoints=websecure'
      - 'traefik.http.routers.backend-secure.rule=Host(`api.palnight.com`)'
      - 'traefik.http.routers.backend-secure.service=backend'
      - traefik.http.services.backend.loadbalancer.server.port=80
      # add path prefix strip


# volumes:
#   app-db-data2:
networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
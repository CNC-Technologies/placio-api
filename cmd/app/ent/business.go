// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessaccountsettings"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Business is the model entity for the Business schema.
type Business struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusinessQuery when eager-loading is set.
	Edges        BusinessEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BusinessEdges holds the relations/edges for other nodes in the graph.
type BusinessEdges struct {
	// UserBusinesses holds the value of the userBusinesses edge.
	UserBusinesses []*UserBusiness `json:"userBusinesses,omitempty"`
	// BusinessAccountSettings holds the value of the business_account_settings edge.
	BusinessAccountSettings *BusinessAccountSettings `json:"business_account_settings,omitempty"`
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserBusinessesOrErr returns the UserBusinesses value or an error if the edge
// was not loaded in eager-loading.
func (e BusinessEdges) UserBusinessesOrErr() ([]*UserBusiness, error) {
	if e.loadedTypes[0] {
		return e.UserBusinesses, nil
	}
	return nil, &NotLoadedError{edge: "userBusinesses"}
}

// BusinessAccountSettingsOrErr returns the BusinessAccountSettings value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusinessEdges) BusinessAccountSettingsOrErr() (*BusinessAccountSettings, error) {
	if e.loadedTypes[1] {
		if e.BusinessAccountSettings == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: businessaccountsettings.Label}
		}
		return e.BusinessAccountSettings, nil
	}
	return nil, &NotLoadedError{edge: "business_account_settings"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e BusinessEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[2] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Business) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case business.FieldID:
			values[i] = new(sql.NullInt64)
		case business.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Business fields.
func (b *Business) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case business.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case business.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Business.
// This includes values selected through modifiers, order, etc.
func (b *Business) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryUserBusinesses queries the "userBusinesses" edge of the Business entity.
func (b *Business) QueryUserBusinesses() *UserBusinessQuery {
	return NewBusinessClient(b.config).QueryUserBusinesses(b)
}

// QueryBusinessAccountSettings queries the "business_account_settings" edge of the Business entity.
func (b *Business) QueryBusinessAccountSettings() *BusinessAccountSettingsQuery {
	return NewBusinessClient(b.config).QueryBusinessAccountSettings(b)
}

// QueryPosts queries the "posts" edge of the Business entity.
func (b *Business) QueryPosts() *PostQuery {
	return NewBusinessClient(b.config).QueryPosts(b)
}

// Update returns a builder for updating this Business.
// Note that you need to call Business.Unwrap() before calling this method if this Business
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Business) Update() *BusinessUpdateOne {
	return NewBusinessClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Business entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Business) Unwrap() *Business {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Business is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Business) String() string {
	var builder strings.Builder
	builder.WriteString("Business(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Businesses is a parsable slice of Business.
type Businesses []*Business

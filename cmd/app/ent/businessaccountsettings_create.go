// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessaccountsettings"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessAccountSettingsCreate is the builder for creating a BusinessAccountSettings entity.
type BusinessAccountSettingsCreate struct {
	config
	mutation *BusinessAccountSettingsMutation
	hooks    []Hook
}

// SetBusinessAccountSettingsID sets the "BusinessAccountSettingsID" field.
func (basc *BusinessAccountSettingsCreate) SetBusinessAccountSettingsID(s string) *BusinessAccountSettingsCreate {
	basc.mutation.SetBusinessAccountSettingsID(s)
	return basc
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (basc *BusinessAccountSettingsCreate) SetBusinessAccountID(s string) *BusinessAccountSettingsCreate {
	basc.mutation.SetBusinessAccountID(s)
	return basc
}

// SetTwoFactorAuthentication sets the "TwoFactorAuthentication" field.
func (basc *BusinessAccountSettingsCreate) SetTwoFactorAuthentication(b bool) *BusinessAccountSettingsCreate {
	basc.mutation.SetTwoFactorAuthentication(b)
	return basc
}

// SetBlockedUsers sets the "BlockedUsers" field.
func (basc *BusinessAccountSettingsCreate) SetBlockedUsers(s []string) *BusinessAccountSettingsCreate {
	basc.mutation.SetBlockedUsers(s)
	return basc
}

// SetMutedUsers sets the "MutedUsers" field.
func (basc *BusinessAccountSettingsCreate) SetMutedUsers(s []string) *BusinessAccountSettingsCreate {
	basc.mutation.SetMutedUsers(s)
	return basc
}

// SetBusinessAccountID sets the "business_account" edge to the Business entity by ID.
func (basc *BusinessAccountSettingsCreate) SetBusinessAccountID(id int) *BusinessAccountSettingsCreate {
	basc.mutation.SetBusinessAccountID(id)
	return basc
}

// SetBusinessAccount sets the "business_account" edge to the Business entity.
func (basc *BusinessAccountSettingsCreate) SetBusinessAccount(b *Business) *BusinessAccountSettingsCreate {
	return basc.SetBusinessAccountID(b.ID)
}

// Mutation returns the BusinessAccountSettingsMutation object of the builder.
func (basc *BusinessAccountSettingsCreate) Mutation() *BusinessAccountSettingsMutation {
	return basc.mutation
}

// Save creates the BusinessAccountSettings in the database.
func (basc *BusinessAccountSettingsCreate) Save(ctx context.Context) (*BusinessAccountSettings, error) {
	return withHooks(ctx, basc.sqlSave, basc.mutation, basc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (basc *BusinessAccountSettingsCreate) SaveX(ctx context.Context) *BusinessAccountSettings {
	v, err := basc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (basc *BusinessAccountSettingsCreate) Exec(ctx context.Context) error {
	_, err := basc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (basc *BusinessAccountSettingsCreate) ExecX(ctx context.Context) {
	if err := basc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (basc *BusinessAccountSettingsCreate) check() error {
	if _, ok := basc.mutation.BusinessAccountSettingsID(); !ok {
		return &ValidationError{Name: "BusinessAccountSettingsID", err: errors.New(`ent: missing required field "BusinessAccountSettings.BusinessAccountSettingsID"`)}
	}
	if _, ok := basc.mutation.BusinessAccountID(); !ok {
		return &ValidationError{Name: "BusinessAccountID", err: errors.New(`ent: missing required field "BusinessAccountSettings.BusinessAccountID"`)}
	}
	if _, ok := basc.mutation.TwoFactorAuthentication(); !ok {
		return &ValidationError{Name: "TwoFactorAuthentication", err: errors.New(`ent: missing required field "BusinessAccountSettings.TwoFactorAuthentication"`)}
	}
	if _, ok := basc.mutation.BlockedUsers(); !ok {
		return &ValidationError{Name: "BlockedUsers", err: errors.New(`ent: missing required field "BusinessAccountSettings.BlockedUsers"`)}
	}
	if _, ok := basc.mutation.MutedUsers(); !ok {
		return &ValidationError{Name: "MutedUsers", err: errors.New(`ent: missing required field "BusinessAccountSettings.MutedUsers"`)}
	}
	if _, ok := basc.mutation.BusinessAccountID(); !ok {
		return &ValidationError{Name: "business_account", err: errors.New(`ent: missing required edge "BusinessAccountSettings.business_account"`)}
	}
	return nil
}

func (basc *BusinessAccountSettingsCreate) sqlSave(ctx context.Context) (*BusinessAccountSettings, error) {
	if err := basc.check(); err != nil {
		return nil, err
	}
	_node, _spec := basc.createSpec()
	if err := sqlgraph.CreateNode(ctx, basc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	basc.mutation.id = &_node.ID
	basc.mutation.done = true
	return _node, nil
}

func (basc *BusinessAccountSettingsCreate) createSpec() (*BusinessAccountSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessAccountSettings{config: basc.config}
		_spec = sqlgraph.NewCreateSpec(businessaccountsettings.Table, sqlgraph.NewFieldSpec(businessaccountsettings.FieldID, field.TypeInt))
	)
	if value, ok := basc.mutation.BusinessAccountSettingsID(); ok {
		_spec.SetField(businessaccountsettings.FieldBusinessAccountSettingsID, field.TypeString, value)
		_node.BusinessAccountSettingsID = value
	}
	if value, ok := basc.mutation.BusinessAccountID(); ok {
		_spec.SetField(businessaccountsettings.FieldBusinessAccountID, field.TypeString, value)
		_node.BusinessAccountID = value
	}
	if value, ok := basc.mutation.TwoFactorAuthentication(); ok {
		_spec.SetField(businessaccountsettings.FieldTwoFactorAuthentication, field.TypeBool, value)
		_node.TwoFactorAuthentication = value
	}
	if value, ok := basc.mutation.BlockedUsers(); ok {
		_spec.SetField(businessaccountsettings.FieldBlockedUsers, field.TypeJSON, value)
		_node.BlockedUsers = value
	}
	if value, ok := basc.mutation.MutedUsers(); ok {
		_spec.SetField(businessaccountsettings.FieldMutedUsers, field.TypeJSON, value)
		_node.MutedUsers = value
	}
	if nodes := basc.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessaccountsettings.BusinessAccountTable,
			Columns: []string{businessaccountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_business_account_settings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessAccountSettingsCreateBulk is the builder for creating many BusinessAccountSettings entities in bulk.
type BusinessAccountSettingsCreateBulk struct {
	config
	builders []*BusinessAccountSettingsCreate
}

// Save creates the BusinessAccountSettings entities in the database.
func (bascb *BusinessAccountSettingsCreateBulk) Save(ctx context.Context) ([]*BusinessAccountSettings, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bascb.builders))
	nodes := make([]*BusinessAccountSettings, len(bascb.builders))
	mutators := make([]Mutator, len(bascb.builders))
	for i := range bascb.builders {
		func(i int, root context.Context) {
			builder := bascb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessAccountSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bascb *BusinessAccountSettingsCreateBulk) SaveX(ctx context.Context) []*BusinessAccountSettings {
	v, err := bascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bascb *BusinessAccountSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := bascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bascb *BusinessAccountSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := bascb.Exec(ctx); err != nil {
		panic(err)
	}
}

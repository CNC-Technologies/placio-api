// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BookingsColumns holds the columns for the "bookings" table.
	BookingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// BookingsTable holds the schema information for the "bookings" table.
	BookingsTable = &schema.Table{
		Name:       "bookings",
		Columns:    BookingsColumns,
		PrimaryKey: []*schema.Column{BookingsColumns[0]},
	}
	// BusinessesColumns holds the columns for the "businesses" table.
	BusinessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// BusinessesTable holds the schema information for the "businesses" table.
	BusinessesTable = &schema.Table{
		Name:       "businesses",
		Columns:    BusinessesColumns,
		PrimaryKey: []*schema.Column{BusinessesColumns[0]},
	}
	// BusinessAccountSettingsColumns holds the columns for the "business_account_settings" table.
	BusinessAccountSettingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "business_account_settings_id", Type: field.TypeString, Unique: true},
		{Name: "business_account_id", Type: field.TypeString, Unique: true},
		{Name: "two_factor_authentication", Type: field.TypeBool},
		{Name: "blocked_users", Type: field.TypeJSON},
		{Name: "muted_users", Type: field.TypeJSON},
		{Name: "business_business_account_settings", Type: field.TypeInt, Unique: true},
	}
	// BusinessAccountSettingsTable holds the schema information for the "business_account_settings" table.
	BusinessAccountSettingsTable = &schema.Table{
		Name:       "business_account_settings",
		Columns:    BusinessAccountSettingsColumns,
		PrimaryKey: []*schema.Column{BusinessAccountSettingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "business_account_settings_businesses_business_account_settings",
				Columns:    []*schema.Column{BusinessAccountSettingsColumns[6]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ChatsColumns holds the columns for the "chats" table.
	ChatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// ChatsTable holds the schema information for the "chats" table.
	ChatsTable = &schema.Table{
		Name:       "chats",
		Columns:    ChatsColumns,
		PrimaryKey: []*schema.Column{ChatsColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "comment_post", Type: field.TypeInt, Nullable: true},
		{Name: "post_comments", Type: field.TypeInt, Nullable: true},
		{Name: "user_comments", Type: field.TypeInt, Nullable: true},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_posts_post",
				Columns:    []*schema.Column{CommentsColumns[4]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_posts_comments",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// LikesColumns holds the columns for the "likes" table.
	LikesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "like_post", Type: field.TypeInt, Nullable: true},
		{Name: "post_likes", Type: field.TypeInt, Nullable: true},
		{Name: "user_likes", Type: field.TypeInt, Nullable: true},
	}
	// LikesTable holds the schema information for the "likes" table.
	LikesTable = &schema.Table{
		Name:       "likes",
		Columns:    LikesColumns,
		PrimaryKey: []*schema.Column{LikesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "likes_posts_post",
				Columns:    []*schema.Column{LikesColumns[3]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "likes_posts_likes",
				Columns:    []*schema.Column{LikesColumns[4]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "likes_users_likes",
				Columns:    []*schema.Column{LikesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MediaColumns holds the columns for the "media" table.
	MediaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "url", Type: field.TypeString},
		{Name: "media_type", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "post_medias", Type: field.TypeInt, Nullable: true},
	}
	// MediaTable holds the schema information for the "media" table.
	MediaTable = &schema.Table{
		Name:       "media",
		Columns:    MediaColumns,
		PrimaryKey: []*schema.Column{MediaColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_posts_medias",
				Columns:    []*schema.Column{MediaColumns[5]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
	}
	// PaymentsColumns holds the columns for the "payments" table.
	PaymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// PaymentsTable holds the schema information for the "payments" table.
	PaymentsTable = &schema.Table{
		Name:       "payments",
		Columns:    PaymentsColumns,
		PrimaryKey: []*schema.Column{PaymentsColumns[0]},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "business_posts", Type: field.TypeInt, Nullable: true},
		{Name: "user_posts", Type: field.TypeInt, Nullable: true},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_businesses_posts",
				Columns:    []*schema.Column{PostsColumns[4]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RatingsColumns holds the columns for the "ratings" table.
	RatingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// RatingsTable holds the schema information for the "ratings" table.
	RatingsTable = &schema.Table{
		Name:       "ratings",
		Columns:    RatingsColumns,
		PrimaryKey: []*schema.Column{RatingsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "auth0_id", Type: field.TypeString, Unique: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserBusinessesColumns holds the columns for the "user_businesses" table.
	UserBusinessesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role", Type: field.TypeString},
		{Name: "business_user_businesses", Type: field.TypeInt, Nullable: true},
		{Name: "user_user_businesses", Type: field.TypeInt, Nullable: true},
	}
	// UserBusinessesTable holds the schema information for the "user_businesses" table.
	UserBusinessesTable = &schema.Table{
		Name:       "user_businesses",
		Columns:    UserBusinessesColumns,
		PrimaryKey: []*schema.Column{UserBusinessesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_businesses_businesses_userBusinesses",
				Columns:    []*schema.Column{UserBusinessesColumns[2]},
				RefColumns: []*schema.Column{BusinessesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_businesses_users_userBusinesses",
				Columns:    []*schema.Column{UserBusinessesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BookingsTable,
		BusinessesTable,
		BusinessAccountSettingsTable,
		ChatsTable,
		CommentsTable,
		LikesTable,
		MediaTable,
		OrdersTable,
		PaymentsTable,
		PostsTable,
		RatingsTable,
		UsersTable,
		UserBusinessesTable,
	}
)

func init() {
	BusinessAccountSettingsTable.ForeignKeys[0].RefTable = BusinessesTable
	CommentsTable.ForeignKeys[0].RefTable = PostsTable
	CommentsTable.ForeignKeys[1].RefTable = PostsTable
	CommentsTable.ForeignKeys[2].RefTable = UsersTable
	LikesTable.ForeignKeys[0].RefTable = PostsTable
	LikesTable.ForeignKeys[1].RefTable = PostsTable
	LikesTable.ForeignKeys[2].RefTable = UsersTable
	MediaTable.ForeignKeys[0].RefTable = PostsTable
	PostsTable.ForeignKeys[0].RefTable = BusinessesTable
	PostsTable.ForeignKeys[1].RefTable = UsersTable
	UserBusinessesTable.ForeignKeys[0].RefTable = BusinessesTable
	UserBusinessesTable.ForeignKeys[1].RefTable = UsersTable
}

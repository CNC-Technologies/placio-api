// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/accountsettings"
	"placio-app/ent/businessaccount"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountSettingsCreate is the builder for creating a AccountSettings entity.
type AccountSettingsCreate struct {
	config
	mutation *AccountSettingsMutation
	hooks    []Hook
}

// SetID sets the "ID" field.
func (asc *AccountSettingsCreate) SetID(s string) *AccountSettingsCreate {
	asc.mutation.SetID(s)
	return asc
}

// SetAccountID sets the "AccountID" field.
func (asc *AccountSettingsCreate) SetAccountID(s string) *AccountSettingsCreate {
	asc.mutation.SetAccountID(s)
	return asc
}

// SetTwoFactorAuthentication sets the "TwoFactorAuthentication" field.
func (asc *AccountSettingsCreate) SetTwoFactorAuthentication(b bool) *AccountSettingsCreate {
	asc.mutation.SetTwoFactorAuthentication(b)
	return asc
}

// SetBlockedUsers sets the "BlockedUsers" field.
func (asc *AccountSettingsCreate) SetBlockedUsers(s []string) *AccountSettingsCreate {
	asc.mutation.SetBlockedUsers(s)
	return asc
}

// SetMutedUsers sets the "MutedUsers" field.
func (asc *AccountSettingsCreate) SetMutedUsers(s []string) *AccountSettingsCreate {
	asc.mutation.SetMutedUsers(s)
	return asc
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (asc *AccountSettingsCreate) SetBusinessAccountID(s string) *AccountSettingsCreate {
	asc.mutation.SetBusinessAccountID(s)
	return asc
}

// SetBusinessAccountID sets the "business_account" edge to the BusinessAccount entity by ID.
func (asc *AccountSettingsCreate) SetBusinessAccountID(id int) *AccountSettingsCreate {
	asc.mutation.SetBusinessAccountID(id)
	return asc
}

// SetBusinessAccount sets the "business_account" edge to the BusinessAccount entity.
func (asc *AccountSettingsCreate) SetBusinessAccount(b *BusinessAccount) *AccountSettingsCreate {
	return asc.SetBusinessAccountID(b.ID)
}

// Mutation returns the AccountSettingsMutation object of the builder.
func (asc *AccountSettingsCreate) Mutation() *AccountSettingsMutation {
	return asc.mutation
}

// Save creates the AccountSettings in the database.
func (asc *AccountSettingsCreate) Save(ctx context.Context) (*AccountSettings, error) {
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AccountSettingsCreate) SaveX(ctx context.Context) *AccountSettings {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AccountSettingsCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AccountSettingsCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AccountSettingsCreate) check() error {
	if _, ok := asc.mutation.ID(); !ok {
		return &ValidationError{Name: "ID", err: errors.New(`ent: missing required field "AccountSettings.ID"`)}
	}
	if _, ok := asc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "AccountID", err: errors.New(`ent: missing required field "AccountSettings.AccountID"`)}
	}
	if _, ok := asc.mutation.TwoFactorAuthentication(); !ok {
		return &ValidationError{Name: "TwoFactorAuthentication", err: errors.New(`ent: missing required field "AccountSettings.TwoFactorAuthentication"`)}
	}
	if _, ok := asc.mutation.BlockedUsers(); !ok {
		return &ValidationError{Name: "BlockedUsers", err: errors.New(`ent: missing required field "AccountSettings.BlockedUsers"`)}
	}
	if _, ok := asc.mutation.MutedUsers(); !ok {
		return &ValidationError{Name: "MutedUsers", err: errors.New(`ent: missing required field "AccountSettings.MutedUsers"`)}
	}
	if _, ok := asc.mutation.BusinessAccountID(); !ok {
		return &ValidationError{Name: "BusinessAccountID", err: errors.New(`ent: missing required field "AccountSettings.BusinessAccountID"`)}
	}
	if _, ok := asc.mutation.BusinessAccountID(); !ok {
		return &ValidationError{Name: "business_account", err: errors.New(`ent: missing required edge "AccountSettings.business_account"`)}
	}
	return nil
}

func (asc *AccountSettingsCreate) sqlSave(ctx context.Context) (*AccountSettings, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AccountSettingsCreate) createSpec() (*AccountSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountSettings{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(accountsettings.Table, sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeInt))
	)
	if value, ok := asc.mutation.ID(); ok {
		_spec.SetField(accountsettings.FieldID, field.TypeString, value)
		_node.ID = value
	}
	if value, ok := asc.mutation.AccountID(); ok {
		_spec.SetField(accountsettings.FieldAccountID, field.TypeString, value)
		_node.AccountID = value
	}
	if value, ok := asc.mutation.TwoFactorAuthentication(); ok {
		_spec.SetField(accountsettings.FieldTwoFactorAuthentication, field.TypeBool, value)
		_node.TwoFactorAuthentication = value
	}
	if value, ok := asc.mutation.BlockedUsers(); ok {
		_spec.SetField(accountsettings.FieldBlockedUsers, field.TypeJSON, value)
		_node.BlockedUsers = value
	}
	if value, ok := asc.mutation.MutedUsers(); ok {
		_spec.SetField(accountsettings.FieldMutedUsers, field.TypeJSON, value)
		_node.MutedUsers = value
	}
	if value, ok := asc.mutation.BusinessAccountID(); ok {
		_spec.SetField(accountsettings.FieldBusinessAccountID, field.TypeString, value)
		_node.BusinessAccountID = value
	}
	if nodes := asc.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountsettings.BusinessAccountTable,
			Columns: []string{accountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_account_account_settings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountSettingsCreateBulk is the builder for creating many AccountSettings entities in bulk.
type AccountSettingsCreateBulk struct {
	config
	builders []*AccountSettingsCreate
}

// Save creates the AccountSettings entities in the database.
func (ascb *AccountSettingsCreateBulk) Save(ctx context.Context) ([]*AccountSettings, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AccountSettings, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AccountSettingsCreateBulk) SaveX(ctx context.Context) []*AccountSettings {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AccountSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AccountSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

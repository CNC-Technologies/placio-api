// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/amenity"
	"placio-app/ent/booking"
	"placio-app/ent/business"
	"placio-app/ent/event"
	"placio-app/ent/menu"
	"placio-app/ent/place"
	"placio-app/ent/reservation"
	"placio-app/ent/review"
	"placio-app/ent/room"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceCreate is the builder for creating a Place entity.
type PlaceCreate struct {
	config
	mutation *PlaceMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PlaceCreate) SetName(s string) *PlaceCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetType sets the "type" field.
func (pc *PlaceCreate) SetType(s string) *PlaceCreate {
	pc.mutation.SetType(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PlaceCreate) SetDescription(s string) *PlaceCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableDescription(s *string) *PlaceCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetLocation sets the "location" field.
func (pc *PlaceCreate) SetLocation(s string) *PlaceCreate {
	pc.mutation.SetLocation(s)
	return pc
}

// SetImages sets the "images" field.
func (pc *PlaceCreate) SetImages(s []string) *PlaceCreate {
	pc.mutation.SetImages(s)
	return pc
}

// SetAvailability sets the "availability" field.
func (pc *PlaceCreate) SetAvailability(m map[string]interface{}) *PlaceCreate {
	pc.mutation.SetAvailability(m)
	return pc
}

// SetSpecialOffers sets the "special_offers" field.
func (pc *PlaceCreate) SetSpecialOffers(s string) *PlaceCreate {
	pc.mutation.SetSpecialOffers(s)
	return pc
}

// SetNillableSpecialOffers sets the "special_offers" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableSpecialOffers(s *string) *PlaceCreate {
	if s != nil {
		pc.SetSpecialOffers(*s)
	}
	return pc
}

// SetSustainabilityScore sets the "sustainability_score" field.
func (pc *PlaceCreate) SetSustainabilityScore(f float64) *PlaceCreate {
	pc.mutation.SetSustainabilityScore(f)
	return pc
}

// SetNillableSustainabilityScore sets the "sustainability_score" field if the given value is not nil.
func (pc *PlaceCreate) SetNillableSustainabilityScore(f *float64) *PlaceCreate {
	if f != nil {
		pc.SetSustainabilityScore(*f)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PlaceCreate) SetID(s string) *PlaceCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (pc *PlaceCreate) SetBusinessID(id string) *PlaceCreate {
	pc.mutation.SetBusinessID(id)
	return pc
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (pc *PlaceCreate) SetNillableBusinessID(id *string) *PlaceCreate {
	if id != nil {
		pc = pc.SetBusinessID(*id)
	}
	return pc
}

// SetBusiness sets the "business" edge to the Business entity.
func (pc *PlaceCreate) SetBusiness(b *Business) *PlaceCreate {
	return pc.SetBusinessID(b.ID)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pc *PlaceCreate) AddReviewIDs(ids ...string) *PlaceCreate {
	pc.mutation.AddReviewIDs(ids...)
	return pc
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pc *PlaceCreate) AddReviews(r ...*Review) *PlaceCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReviewIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pc *PlaceCreate) AddEventIDs(ids ...string) *PlaceCreate {
	pc.mutation.AddEventIDs(ids...)
	return pc
}

// AddEvents adds the "events" edges to the Event entity.
func (pc *PlaceCreate) AddEvents(e ...*Event) *PlaceCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pc.AddEventIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (pc *PlaceCreate) AddAmenityIDs(ids ...string) *PlaceCreate {
	pc.mutation.AddAmenityIDs(ids...)
	return pc
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (pc *PlaceCreate) AddAmenities(a ...*Amenity) *PlaceCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAmenityIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (pc *PlaceCreate) AddMenuIDs(ids ...string) *PlaceCreate {
	pc.mutation.AddMenuIDs(ids...)
	return pc
}

// AddMenus adds the "menus" edges to the Menu entity.
func (pc *PlaceCreate) AddMenus(m ...*Menu) *PlaceCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pc.AddMenuIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (pc *PlaceCreate) AddRoomIDs(ids ...string) *PlaceCreate {
	pc.mutation.AddRoomIDs(ids...)
	return pc
}

// AddRooms adds the "rooms" edges to the Room entity.
func (pc *PlaceCreate) AddRooms(r ...*Room) *PlaceCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRoomIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (pc *PlaceCreate) AddReservationIDs(ids ...string) *PlaceCreate {
	pc.mutation.AddReservationIDs(ids...)
	return pc
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (pc *PlaceCreate) AddReservations(r ...*Reservation) *PlaceCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReservationIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (pc *PlaceCreate) AddBookingIDs(ids ...string) *PlaceCreate {
	pc.mutation.AddBookingIDs(ids...)
	return pc
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (pc *PlaceCreate) AddBookings(b ...*Booking) *PlaceCreate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddBookingIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (pc *PlaceCreate) Mutation() *PlaceMutation {
	return pc.mutation
}

// Save creates the Place in the database.
func (pc *PlaceCreate) Save(ctx context.Context) (*Place, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlaceCreate) SaveX(ctx context.Context) *Place {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlaceCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlaceCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlaceCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Place.name"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Place.type"`)}
	}
	if _, ok := pc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Place.location"`)}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := place.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Place.id": %w`, err)}
		}
	}
	return nil
}

func (pc *PlaceCreate) sqlSave(ctx context.Context) (*Place, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Place.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlaceCreate) createSpec() (*Place, *sqlgraph.CreateSpec) {
	var (
		_node = &Place{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(place.Table, sqlgraph.NewFieldSpec(place.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(place.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(place.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(place.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Location(); ok {
		_spec.SetField(place.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := pc.mutation.Images(); ok {
		_spec.SetField(place.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if value, ok := pc.mutation.Availability(); ok {
		_spec.SetField(place.FieldAvailability, field.TypeJSON, value)
		_node.Availability = value
	}
	if value, ok := pc.mutation.SpecialOffers(); ok {
		_spec.SetField(place.FieldSpecialOffers, field.TypeString, value)
		_node.SpecialOffers = value
	}
	if value, ok := pc.mutation.SustainabilityScore(); ok {
		_spec.SetField(place.FieldSustainabilityScore, field.TypeFloat64, value)
		_node.SustainabilityScore = value
	}
	if nodes := pc.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_places = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaceCreateBulk is the builder for creating many Place entities in bulk.
type PlaceCreateBulk struct {
	config
	builders []*PlaceCreate
}

// Save creates the Place entities in the database.
func (pcb *PlaceCreateBulk) Save(ctx context.Context) ([]*Place, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Place, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlaceCreateBulk) SaveX(ctx context.Context) []*Place {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlaceCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlaceCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

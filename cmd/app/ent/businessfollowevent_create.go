// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessfollowevent"
	"placio-app/ent/event"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessFollowEventCreate is the builder for creating a BusinessFollowEvent entity.
type BusinessFollowEventCreate struct {
	config
	mutation *BusinessFollowEventMutation
	hooks    []Hook
}

// SetCreatedAt sets the "createdAt" field.
func (bfec *BusinessFollowEventCreate) SetCreatedAt(t time.Time) *BusinessFollowEventCreate {
	bfec.mutation.SetCreatedAt(t)
	return bfec
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (bfec *BusinessFollowEventCreate) SetNillableCreatedAt(t *time.Time) *BusinessFollowEventCreate {
	if t != nil {
		bfec.SetCreatedAt(*t)
	}
	return bfec
}

// SetUpdatedAt sets the "updatedAt" field.
func (bfec *BusinessFollowEventCreate) SetUpdatedAt(t time.Time) *BusinessFollowEventCreate {
	bfec.mutation.SetUpdatedAt(t)
	return bfec
}

// SetNillableUpdatedAt sets the "updatedAt" field if the given value is not nil.
func (bfec *BusinessFollowEventCreate) SetNillableUpdatedAt(t *time.Time) *BusinessFollowEventCreate {
	if t != nil {
		bfec.SetUpdatedAt(*t)
	}
	return bfec
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (bfec *BusinessFollowEventCreate) SetBusinessID(id string) *BusinessFollowEventCreate {
	bfec.mutation.SetBusinessID(id)
	return bfec
}

// SetBusiness sets the "business" edge to the Business entity.
func (bfec *BusinessFollowEventCreate) SetBusiness(b *Business) *BusinessFollowEventCreate {
	return bfec.SetBusinessID(b.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (bfec *BusinessFollowEventCreate) SetEventID(id string) *BusinessFollowEventCreate {
	bfec.mutation.SetEventID(id)
	return bfec
}

// SetEvent sets the "event" edge to the Event entity.
func (bfec *BusinessFollowEventCreate) SetEvent(e *Event) *BusinessFollowEventCreate {
	return bfec.SetEventID(e.ID)
}

// Mutation returns the BusinessFollowEventMutation object of the builder.
func (bfec *BusinessFollowEventCreate) Mutation() *BusinessFollowEventMutation {
	return bfec.mutation
}

// Save creates the BusinessFollowEvent in the database.
func (bfec *BusinessFollowEventCreate) Save(ctx context.Context) (*BusinessFollowEvent, error) {
	bfec.defaults()
	return withHooks(ctx, bfec.sqlSave, bfec.mutation, bfec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bfec *BusinessFollowEventCreate) SaveX(ctx context.Context) *BusinessFollowEvent {
	v, err := bfec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfec *BusinessFollowEventCreate) Exec(ctx context.Context) error {
	_, err := bfec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfec *BusinessFollowEventCreate) ExecX(ctx context.Context) {
	if err := bfec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfec *BusinessFollowEventCreate) defaults() {
	if _, ok := bfec.mutation.CreatedAt(); !ok {
		v := businessfollowevent.DefaultCreatedAt()
		bfec.mutation.SetCreatedAt(v)
	}
	if _, ok := bfec.mutation.UpdatedAt(); !ok {
		v := businessfollowevent.DefaultUpdatedAt()
		bfec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfec *BusinessFollowEventCreate) check() error {
	if _, ok := bfec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "BusinessFollowEvent.createdAt"`)}
	}
	if _, ok := bfec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "BusinessFollowEvent.updatedAt"`)}
	}
	if _, ok := bfec.mutation.BusinessID(); !ok {
		return &ValidationError{Name: "business", err: errors.New(`ent: missing required edge "BusinessFollowEvent.business"`)}
	}
	if _, ok := bfec.mutation.EventID(); !ok {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "BusinessFollowEvent.event"`)}
	}
	return nil
}

func (bfec *BusinessFollowEventCreate) sqlSave(ctx context.Context) (*BusinessFollowEvent, error) {
	if err := bfec.check(); err != nil {
		return nil, err
	}
	_node, _spec := bfec.createSpec()
	if err := sqlgraph.CreateNode(ctx, bfec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BusinessFollowEvent.ID type: %T", _spec.ID.Value)
		}
	}
	bfec.mutation.id = &_node.ID
	bfec.mutation.done = true
	return _node, nil
}

func (bfec *BusinessFollowEventCreate) createSpec() (*BusinessFollowEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessFollowEvent{config: bfec.config}
		_spec = sqlgraph.NewCreateSpec(businessfollowevent.Table, sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString))
	)
	if value, ok := bfec.mutation.CreatedAt(); ok {
		_spec.SetField(businessfollowevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bfec.mutation.UpdatedAt(); ok {
		_spec.SetField(businessfollowevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bfec.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businessfollowevent.BusinessTable,
			Columns: []string{businessfollowevent.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_business_follow_events = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bfec.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   businessfollowevent.EventTable,
			Columns: []string{businessfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_follow_event_event = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessFollowEventCreateBulk is the builder for creating many BusinessFollowEvent entities in bulk.
type BusinessFollowEventCreateBulk struct {
	config
	builders []*BusinessFollowEventCreate
}

// Save creates the BusinessFollowEvent entities in the database.
func (bfecb *BusinessFollowEventCreateBulk) Save(ctx context.Context) ([]*BusinessFollowEvent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bfecb.builders))
	nodes := make([]*BusinessFollowEvent, len(bfecb.builders))
	mutators := make([]Mutator, len(bfecb.builders))
	for i := range bfecb.builders {
		func(i int, root context.Context) {
			builder := bfecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessFollowEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bfecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bfecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bfecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bfecb *BusinessFollowEventCreateBulk) SaveX(ctx context.Context) []*BusinessFollowEvent {
	v, err := bfecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfecb *BusinessFollowEventCreateBulk) Exec(ctx context.Context) error {
	_, err := bfecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfecb *BusinessFollowEventCreateBulk) ExecX(ctx context.Context) {
	if err := bfecb.Exec(ctx); err != nil {
		panic(err)
	}
}

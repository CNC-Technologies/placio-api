// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"placio-app/ent/amenity"
	"placio-app/ent/booking"
	"placio-app/ent/business"
	"placio-app/ent/event"
	"placio-app/ent/menu"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/reservation"
	"placio-app/ent/review"
	"placio-app/ent/room"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceQuery is the builder for querying Place entities.
type PlaceQuery struct {
	config
	ctx              *QueryContext
	order            []place.OrderOption
	inters           []Interceptor
	predicates       []predicate.Place
	withBusiness     *BusinessQuery
	withReviews      *ReviewQuery
	withEvents       *EventQuery
	withAmenities    *AmenityQuery
	withMenus        *MenuQuery
	withRooms        *RoomQuery
	withReservations *ReservationQuery
	withBookings     *BookingQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaceQuery builder.
func (pq *PlaceQuery) Where(ps ...predicate.Place) *PlaceQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PlaceQuery) Limit(limit int) *PlaceQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PlaceQuery) Offset(offset int) *PlaceQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PlaceQuery) Unique(unique bool) *PlaceQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PlaceQuery) Order(o ...place.OrderOption) *PlaceQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryBusiness chains the current query on the "business" edge.
func (pq *PlaceQuery) QueryBusiness() *BusinessQuery {
	query := (&BusinessClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, place.BusinessTable, place.BusinessColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviews chains the current query on the "reviews" edge.
func (pq *PlaceQuery) QueryReviews() *ReviewQuery {
	query := (&ReviewClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.ReviewsTable, place.ReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (pq *PlaceQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.EventsTable, place.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAmenities chains the current query on the "amenities" edge.
func (pq *PlaceQuery) QueryAmenities() *AmenityQuery {
	query := (&AmenityClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(amenity.Table, amenity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.AmenitiesTable, place.AmenitiesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMenus chains the current query on the "menus" edge.
func (pq *PlaceQuery) QueryMenus() *MenuQuery {
	query := (&MenuClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(menu.Table, menu.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.MenusTable, place.MenusColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRooms chains the current query on the "rooms" edge.
func (pq *PlaceQuery) QueryRooms() *RoomQuery {
	query := (&RoomClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.RoomsTable, place.RoomsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReservations chains the current query on the "reservations" edge.
func (pq *PlaceQuery) QueryReservations() *ReservationQuery {
	query := (&ReservationClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(reservation.Table, reservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.ReservationsTable, place.ReservationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBookings chains the current query on the "bookings" edge.
func (pq *PlaceQuery) QueryBookings() *BookingQuery {
	query := (&BookingClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(booking.Table, booking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.BookingsTable, place.BookingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Place entity from the query.
// Returns a *NotFoundError when no Place was found.
func (pq *PlaceQuery) First(ctx context.Context) (*Place, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{place.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PlaceQuery) FirstX(ctx context.Context) *Place {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Place ID from the query.
// Returns a *NotFoundError when no Place ID was found.
func (pq *PlaceQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{place.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PlaceQuery) FirstIDX(ctx context.Context) string {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Place entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Place entity is found.
// Returns a *NotFoundError when no Place entities are found.
func (pq *PlaceQuery) Only(ctx context.Context) (*Place, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{place.Label}
	default:
		return nil, &NotSingularError{place.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PlaceQuery) OnlyX(ctx context.Context) *Place {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Place ID in the query.
// Returns a *NotSingularError when more than one Place ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PlaceQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{place.Label}
	default:
		err = &NotSingularError{place.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PlaceQuery) OnlyIDX(ctx context.Context) string {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Places.
func (pq *PlaceQuery) All(ctx context.Context) ([]*Place, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Place, *PlaceQuery]()
	return withInterceptors[[]*Place](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PlaceQuery) AllX(ctx context.Context) []*Place {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Place IDs.
func (pq *PlaceQuery) IDs(ctx context.Context) (ids []string, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(place.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PlaceQuery) IDsX(ctx context.Context) []string {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PlaceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PlaceQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PlaceQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PlaceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PlaceQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PlaceQuery) Clone() *PlaceQuery {
	if pq == nil {
		return nil
	}
	return &PlaceQuery{
		config:           pq.config,
		ctx:              pq.ctx.Clone(),
		order:            append([]place.OrderOption{}, pq.order...),
		inters:           append([]Interceptor{}, pq.inters...),
		predicates:       append([]predicate.Place{}, pq.predicates...),
		withBusiness:     pq.withBusiness.Clone(),
		withReviews:      pq.withReviews.Clone(),
		withEvents:       pq.withEvents.Clone(),
		withAmenities:    pq.withAmenities.Clone(),
		withMenus:        pq.withMenus.Clone(),
		withRooms:        pq.withRooms.Clone(),
		withReservations: pq.withReservations.Clone(),
		withBookings:     pq.withBookings.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithBusiness tells the query-builder to eager-load the nodes that are connected to
// the "business" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithBusiness(opts ...func(*BusinessQuery)) *PlaceQuery {
	query := (&BusinessClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withBusiness = query
	return pq
}

// WithReviews tells the query-builder to eager-load the nodes that are connected to
// the "reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithReviews(opts ...func(*ReviewQuery)) *PlaceQuery {
	query := (&ReviewClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withReviews = query
	return pq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithEvents(opts ...func(*EventQuery)) *PlaceQuery {
	query := (&EventClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEvents = query
	return pq
}

// WithAmenities tells the query-builder to eager-load the nodes that are connected to
// the "amenities" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithAmenities(opts ...func(*AmenityQuery)) *PlaceQuery {
	query := (&AmenityClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAmenities = query
	return pq
}

// WithMenus tells the query-builder to eager-load the nodes that are connected to
// the "menus" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithMenus(opts ...func(*MenuQuery)) *PlaceQuery {
	query := (&MenuClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withMenus = query
	return pq
}

// WithRooms tells the query-builder to eager-load the nodes that are connected to
// the "rooms" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithRooms(opts ...func(*RoomQuery)) *PlaceQuery {
	query := (&RoomClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRooms = query
	return pq
}

// WithReservations tells the query-builder to eager-load the nodes that are connected to
// the "reservations" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithReservations(opts ...func(*ReservationQuery)) *PlaceQuery {
	query := (&ReservationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withReservations = query
	return pq
}

// WithBookings tells the query-builder to eager-load the nodes that are connected to
// the "bookings" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithBookings(opts ...func(*BookingQuery)) *PlaceQuery {
	query := (&BookingClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withBookings = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Place.Query().
//		GroupBy(place.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PlaceQuery) GroupBy(field string, fields ...string) *PlaceGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaceGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = place.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Place.Query().
//		Select(place.FieldName).
//		Scan(ctx, &v)
func (pq *PlaceQuery) Select(fields ...string) *PlaceSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PlaceSelect{PlaceQuery: pq}
	sbuild.label = place.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaceSelect configured with the given aggregations.
func (pq *PlaceQuery) Aggregate(fns ...AggregateFunc) *PlaceSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PlaceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !place.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PlaceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Place, error) {
	var (
		nodes       = []*Place{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [8]bool{
			pq.withBusiness != nil,
			pq.withReviews != nil,
			pq.withEvents != nil,
			pq.withAmenities != nil,
			pq.withMenus != nil,
			pq.withRooms != nil,
			pq.withReservations != nil,
			pq.withBookings != nil,
		}
	)
	if pq.withBusiness != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, place.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Place).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Place{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withBusiness; query != nil {
		if err := pq.loadBusiness(ctx, query, nodes, nil,
			func(n *Place, e *Business) { n.Edges.Business = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withReviews; query != nil {
		if err := pq.loadReviews(ctx, query, nodes,
			func(n *Place) { n.Edges.Reviews = []*Review{} },
			func(n *Place, e *Review) { n.Edges.Reviews = append(n.Edges.Reviews, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withEvents; query != nil {
		if err := pq.loadEvents(ctx, query, nodes,
			func(n *Place) { n.Edges.Events = []*Event{} },
			func(n *Place, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withAmenities; query != nil {
		if err := pq.loadAmenities(ctx, query, nodes,
			func(n *Place) { n.Edges.Amenities = []*Amenity{} },
			func(n *Place, e *Amenity) { n.Edges.Amenities = append(n.Edges.Amenities, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withMenus; query != nil {
		if err := pq.loadMenus(ctx, query, nodes,
			func(n *Place) { n.Edges.Menus = []*Menu{} },
			func(n *Place, e *Menu) { n.Edges.Menus = append(n.Edges.Menus, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRooms; query != nil {
		if err := pq.loadRooms(ctx, query, nodes,
			func(n *Place) { n.Edges.Rooms = []*Room{} },
			func(n *Place, e *Room) { n.Edges.Rooms = append(n.Edges.Rooms, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withReservations; query != nil {
		if err := pq.loadReservations(ctx, query, nodes,
			func(n *Place) { n.Edges.Reservations = []*Reservation{} },
			func(n *Place, e *Reservation) { n.Edges.Reservations = append(n.Edges.Reservations, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withBookings; query != nil {
		if err := pq.loadBookings(ctx, query, nodes,
			func(n *Place) { n.Edges.Bookings = []*Booking{} },
			func(n *Place, e *Booking) { n.Edges.Bookings = append(n.Edges.Bookings, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PlaceQuery) loadBusiness(ctx context.Context, query *BusinessQuery, nodes []*Place, init func(*Place), assign func(*Place, *Business)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Place)
	for i := range nodes {
		if nodes[i].business_places == nil {
			continue
		}
		fk := *nodes[i].business_places
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(business.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_places" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadReviews(ctx context.Context, query *ReviewQuery, nodes []*Place, init func(*Place), assign func(*Place, *Review)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Review(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.ReviewsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_reviews
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_reviews" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_reviews" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Place, init func(*Place), assign func(*Place, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadAmenities(ctx context.Context, query *AmenityQuery, nodes []*Place, init func(*Place), assign func(*Place, *Amenity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.AmenitiesTable)
		s.Join(joinT).On(s.C(amenity.FieldID), joinT.C(place.AmenitiesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(place.AmenitiesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.AmenitiesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Amenity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "amenities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadMenus(ctx context.Context, query *MenuQuery, nodes []*Place, init func(*Place), assign func(*Place, *Menu)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.MenusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_menus
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_menus" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_menus" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadRooms(ctx context.Context, query *RoomQuery, nodes []*Place, init func(*Place), assign func(*Place, *Room)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Room(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.RoomsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_rooms
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_rooms" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_rooms" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadReservations(ctx context.Context, query *ReservationQuery, nodes []*Place, init func(*Place), assign func(*Place, *Reservation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.ReservationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_reservations
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_reservations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_reservations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadBookings(ctx context.Context, query *BookingQuery, nodes []*Place, init func(*Place), assign func(*Place, *Booking)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Booking(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.BookingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_bookings
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_bookings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_bookings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *PlaceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PlaceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeString))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, place.FieldID)
		for i := range fields {
			if fields[i] != place.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PlaceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(place.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = place.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlaceGroupBy is the group-by builder for Place entities.
type PlaceGroupBy struct {
	selector
	build *PlaceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PlaceGroupBy) Aggregate(fns ...AggregateFunc) *PlaceGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PlaceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceQuery, *PlaceGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PlaceGroupBy) sqlScan(ctx context.Context, root *PlaceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaceSelect is the builder for selecting fields of Place entities.
type PlaceSelect struct {
	*PlaceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PlaceSelect) Aggregate(fns ...AggregateFunc) *PlaceSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PlaceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceQuery, *PlaceSelect](ctx, ps.PlaceQuery, ps, ps.inters, v)
}

func (ps *PlaceSelect) sqlScan(ctx context.Context, root *PlaceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

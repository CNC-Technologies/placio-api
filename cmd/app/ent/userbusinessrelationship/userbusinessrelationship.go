// Code generated by ent, DO NOT EDIT.

package userbusinessrelationship

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userbusinessrelationship type in the database.
	Label = "user_business_relationship"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the userid field in the database.
	FieldUserID = "user_id"
	// FieldBusinessAccountID holds the string denoting the businessaccountid field in the database.
	FieldBusinessAccountID = "business_account_id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeBusinessAccount holds the string denoting the business_account edge name in mutations.
	EdgeBusinessAccount = "business_account"
	// Table holds the table name of the userbusinessrelationship in the database.
	Table = "user_business_relationships"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_business_relationships"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_relationships"
	// BusinessAccountTable is the table that holds the business_account relation/edge.
	BusinessAccountTable = "user_business_relationships"
	// BusinessAccountInverseTable is the table name for the BusinessAccount entity.
	// It exists in this package in order to avoid circular dependency with the "businessaccount" package.
	BusinessAccountInverseTable = "business_accounts"
	// BusinessAccountColumn is the table column denoting the business_account relation/edge.
	BusinessAccountColumn = "business_account_relationships"
)

// Columns holds all SQL columns for userbusinessrelationship fields.
var Columns = []string{
	FieldID,
	FieldID,
	FieldUserID,
	FieldBusinessAccountID,
	FieldRole,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_business_relationships"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"business_account_relationships",
	"user_relationships",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the UserBusinessRelationship queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByID orders the results by the ID field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the UserID field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBusinessAccountID orders the results by the BusinessAccountID field.
func ByBusinessAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessAccountID, opts...).ToFunc()
}

// ByRole orders the results by the Role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByBusinessAccountField orders the results by business_account field.
func ByBusinessAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessAccountStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newBusinessAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BusinessAccountTable, BusinessAccountColumn),
	)
}

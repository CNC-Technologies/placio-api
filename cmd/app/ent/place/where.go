// Code generated by ent, DO NOT EDIT.

package place

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Place {
	return predicate.Place(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Place {
	return predicate.Place(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldType, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldDescription, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldLocation, v))
}

// SpecialOffers applies equality check predicate on the "special_offers" field. It's identical to SpecialOffersEQ.
func SpecialOffers(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldSpecialOffers, v))
}

// SustainabilityScore applies equality check predicate on the "sustainability_score" field. It's identical to SustainabilityScoreEQ.
func SustainabilityScore(v float64) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldSustainabilityScore, v))
}

// SearchText applies equality check predicate on the "search_text" field. It's identical to SearchTextEQ.
func SearchText(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldSearchText, v))
}

// RelevanceScore applies equality check predicate on the "relevance_score" field. It's identical to RelevanceScoreEQ.
func RelevanceScore(v float64) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldRelevanceScore, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Place {
	return predicate.Place(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Place {
	return predicate.Place(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Place {
	return predicate.Place(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Place {
	return predicate.Place(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Place {
	return predicate.Place(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Place {
	return predicate.Place(sql.FieldContainsFold(FieldType, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Place {
	return predicate.Place(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Place {
	return predicate.Place(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Place {
	return predicate.Place(sql.FieldContainsFold(FieldDescription, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Place {
	return predicate.Place(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Place {
	return predicate.Place(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Place {
	return predicate.Place(sql.FieldContainsFold(FieldLocation, v))
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldImages))
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldImages))
}

// AvailabilityIsNil applies the IsNil predicate on the "availability" field.
func AvailabilityIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldAvailability))
}

// AvailabilityNotNil applies the NotNil predicate on the "availability" field.
func AvailabilityNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldAvailability))
}

// SpecialOffersEQ applies the EQ predicate on the "special_offers" field.
func SpecialOffersEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldSpecialOffers, v))
}

// SpecialOffersNEQ applies the NEQ predicate on the "special_offers" field.
func SpecialOffersNEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldSpecialOffers, v))
}

// SpecialOffersIn applies the In predicate on the "special_offers" field.
func SpecialOffersIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldSpecialOffers, vs...))
}

// SpecialOffersNotIn applies the NotIn predicate on the "special_offers" field.
func SpecialOffersNotIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldSpecialOffers, vs...))
}

// SpecialOffersGT applies the GT predicate on the "special_offers" field.
func SpecialOffersGT(v string) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldSpecialOffers, v))
}

// SpecialOffersGTE applies the GTE predicate on the "special_offers" field.
func SpecialOffersGTE(v string) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldSpecialOffers, v))
}

// SpecialOffersLT applies the LT predicate on the "special_offers" field.
func SpecialOffersLT(v string) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldSpecialOffers, v))
}

// SpecialOffersLTE applies the LTE predicate on the "special_offers" field.
func SpecialOffersLTE(v string) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldSpecialOffers, v))
}

// SpecialOffersContains applies the Contains predicate on the "special_offers" field.
func SpecialOffersContains(v string) predicate.Place {
	return predicate.Place(sql.FieldContains(FieldSpecialOffers, v))
}

// SpecialOffersHasPrefix applies the HasPrefix predicate on the "special_offers" field.
func SpecialOffersHasPrefix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasPrefix(FieldSpecialOffers, v))
}

// SpecialOffersHasSuffix applies the HasSuffix predicate on the "special_offers" field.
func SpecialOffersHasSuffix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasSuffix(FieldSpecialOffers, v))
}

// SpecialOffersIsNil applies the IsNil predicate on the "special_offers" field.
func SpecialOffersIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldSpecialOffers))
}

// SpecialOffersNotNil applies the NotNil predicate on the "special_offers" field.
func SpecialOffersNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldSpecialOffers))
}

// SpecialOffersEqualFold applies the EqualFold predicate on the "special_offers" field.
func SpecialOffersEqualFold(v string) predicate.Place {
	return predicate.Place(sql.FieldEqualFold(FieldSpecialOffers, v))
}

// SpecialOffersContainsFold applies the ContainsFold predicate on the "special_offers" field.
func SpecialOffersContainsFold(v string) predicate.Place {
	return predicate.Place(sql.FieldContainsFold(FieldSpecialOffers, v))
}

// SustainabilityScoreEQ applies the EQ predicate on the "sustainability_score" field.
func SustainabilityScoreEQ(v float64) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldSustainabilityScore, v))
}

// SustainabilityScoreNEQ applies the NEQ predicate on the "sustainability_score" field.
func SustainabilityScoreNEQ(v float64) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldSustainabilityScore, v))
}

// SustainabilityScoreIn applies the In predicate on the "sustainability_score" field.
func SustainabilityScoreIn(vs ...float64) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldSustainabilityScore, vs...))
}

// SustainabilityScoreNotIn applies the NotIn predicate on the "sustainability_score" field.
func SustainabilityScoreNotIn(vs ...float64) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldSustainabilityScore, vs...))
}

// SustainabilityScoreGT applies the GT predicate on the "sustainability_score" field.
func SustainabilityScoreGT(v float64) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldSustainabilityScore, v))
}

// SustainabilityScoreGTE applies the GTE predicate on the "sustainability_score" field.
func SustainabilityScoreGTE(v float64) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldSustainabilityScore, v))
}

// SustainabilityScoreLT applies the LT predicate on the "sustainability_score" field.
func SustainabilityScoreLT(v float64) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldSustainabilityScore, v))
}

// SustainabilityScoreLTE applies the LTE predicate on the "sustainability_score" field.
func SustainabilityScoreLTE(v float64) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldSustainabilityScore, v))
}

// SustainabilityScoreIsNil applies the IsNil predicate on the "sustainability_score" field.
func SustainabilityScoreIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldSustainabilityScore))
}

// SustainabilityScoreNotNil applies the NotNil predicate on the "sustainability_score" field.
func SustainabilityScoreNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldSustainabilityScore))
}

// SearchTextEQ applies the EQ predicate on the "search_text" field.
func SearchTextEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldSearchText, v))
}

// SearchTextNEQ applies the NEQ predicate on the "search_text" field.
func SearchTextNEQ(v string) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldSearchText, v))
}

// SearchTextIn applies the In predicate on the "search_text" field.
func SearchTextIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldSearchText, vs...))
}

// SearchTextNotIn applies the NotIn predicate on the "search_text" field.
func SearchTextNotIn(vs ...string) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldSearchText, vs...))
}

// SearchTextGT applies the GT predicate on the "search_text" field.
func SearchTextGT(v string) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldSearchText, v))
}

// SearchTextGTE applies the GTE predicate on the "search_text" field.
func SearchTextGTE(v string) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldSearchText, v))
}

// SearchTextLT applies the LT predicate on the "search_text" field.
func SearchTextLT(v string) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldSearchText, v))
}

// SearchTextLTE applies the LTE predicate on the "search_text" field.
func SearchTextLTE(v string) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldSearchText, v))
}

// SearchTextContains applies the Contains predicate on the "search_text" field.
func SearchTextContains(v string) predicate.Place {
	return predicate.Place(sql.FieldContains(FieldSearchText, v))
}

// SearchTextHasPrefix applies the HasPrefix predicate on the "search_text" field.
func SearchTextHasPrefix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasPrefix(FieldSearchText, v))
}

// SearchTextHasSuffix applies the HasSuffix predicate on the "search_text" field.
func SearchTextHasSuffix(v string) predicate.Place {
	return predicate.Place(sql.FieldHasSuffix(FieldSearchText, v))
}

// SearchTextIsNil applies the IsNil predicate on the "search_text" field.
func SearchTextIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldSearchText))
}

// SearchTextNotNil applies the NotNil predicate on the "search_text" field.
func SearchTextNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldSearchText))
}

// SearchTextEqualFold applies the EqualFold predicate on the "search_text" field.
func SearchTextEqualFold(v string) predicate.Place {
	return predicate.Place(sql.FieldEqualFold(FieldSearchText, v))
}

// SearchTextContainsFold applies the ContainsFold predicate on the "search_text" field.
func SearchTextContainsFold(v string) predicate.Place {
	return predicate.Place(sql.FieldContainsFold(FieldSearchText, v))
}

// RelevanceScoreEQ applies the EQ predicate on the "relevance_score" field.
func RelevanceScoreEQ(v float64) predicate.Place {
	return predicate.Place(sql.FieldEQ(FieldRelevanceScore, v))
}

// RelevanceScoreNEQ applies the NEQ predicate on the "relevance_score" field.
func RelevanceScoreNEQ(v float64) predicate.Place {
	return predicate.Place(sql.FieldNEQ(FieldRelevanceScore, v))
}

// RelevanceScoreIn applies the In predicate on the "relevance_score" field.
func RelevanceScoreIn(vs ...float64) predicate.Place {
	return predicate.Place(sql.FieldIn(FieldRelevanceScore, vs...))
}

// RelevanceScoreNotIn applies the NotIn predicate on the "relevance_score" field.
func RelevanceScoreNotIn(vs ...float64) predicate.Place {
	return predicate.Place(sql.FieldNotIn(FieldRelevanceScore, vs...))
}

// RelevanceScoreGT applies the GT predicate on the "relevance_score" field.
func RelevanceScoreGT(v float64) predicate.Place {
	return predicate.Place(sql.FieldGT(FieldRelevanceScore, v))
}

// RelevanceScoreGTE applies the GTE predicate on the "relevance_score" field.
func RelevanceScoreGTE(v float64) predicate.Place {
	return predicate.Place(sql.FieldGTE(FieldRelevanceScore, v))
}

// RelevanceScoreLT applies the LT predicate on the "relevance_score" field.
func RelevanceScoreLT(v float64) predicate.Place {
	return predicate.Place(sql.FieldLT(FieldRelevanceScore, v))
}

// RelevanceScoreLTE applies the LTE predicate on the "relevance_score" field.
func RelevanceScoreLTE(v float64) predicate.Place {
	return predicate.Place(sql.FieldLTE(FieldRelevanceScore, v))
}

// RelevanceScoreIsNil applies the IsNil predicate on the "relevance_score" field.
func RelevanceScoreIsNil() predicate.Place {
	return predicate.Place(sql.FieldIsNull(FieldRelevanceScore))
}

// RelevanceScoreNotNil applies the NotNil predicate on the "relevance_score" field.
func RelevanceScoreNotNil() predicate.Place {
	return predicate.Place(sql.FieldNotNull(FieldRelevanceScore))
}

// HasBusiness applies the HasEdge predicate on the "business" edge.
func HasBusiness() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BusinessTable, BusinessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessWith applies the HasEdge predicate on the "business" edge with a given conditions (other predicates).
func HasBusinessWith(preds ...predicate.Business) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newBusinessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviews applies the HasEdge predicate on the "reviews" edge.
func HasReviews() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewsWith applies the HasEdge predicate on the "reviews" edge with a given conditions (other predicates).
func HasReviewsWith(preds ...predicate.Review) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventsTable, EventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAmenities applies the HasEdge predicate on the "amenities" edge.
func HasAmenities() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AmenitiesTable, AmenitiesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAmenitiesWith applies the HasEdge predicate on the "amenities" edge with a given conditions (other predicates).
func HasAmenitiesWith(preds ...predicate.Amenity) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newAmenitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMenus applies the HasEdge predicate on the "menus" edge.
func HasMenus() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MenusTable, MenusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenusWith applies the HasEdge predicate on the "menus" edge with a given conditions (other predicates).
func HasMenusWith(preds ...predicate.Menu) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newMenusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRooms applies the HasEdge predicate on the "rooms" edge.
func HasRooms() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoomsTable, RoomsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomsWith applies the HasEdge predicate on the "rooms" edge with a given conditions (other predicates).
func HasRoomsWith(preds ...predicate.Room) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newRoomsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReservations applies the HasEdge predicate on the "reservations" edge.
func HasReservations() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReservationsTable, ReservationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReservationsWith applies the HasEdge predicate on the "reservations" edge with a given conditions (other predicates).
func HasReservationsWith(preds ...predicate.Reservation) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newReservationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBookings applies the HasEdge predicate on the "bookings" edge.
func HasBookings() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BookingsTable, BookingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookingsWith applies the HasEdge predicate on the "bookings" edge with a given conditions (other predicates).
func HasBookingsWith(preds ...predicate.Booking) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newBookingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.Category) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategoryAssignments applies the HasEdge predicate on the "categoryAssignments" edge.
func HasCategoryAssignments() predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CategoryAssignmentsTable, CategoryAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryAssignmentsWith applies the HasEdge predicate on the "categoryAssignments" edge with a given conditions (other predicates).
func HasCategoryAssignmentsWith(preds ...predicate.CategoryAssignment) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		step := newCategoryAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Place) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Place) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Place) predicate.Place {
	return predicate.Place(func(s *sql.Selector) {
		p(s.Not())
	})
}

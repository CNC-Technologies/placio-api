// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessaccountsettings"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BusinessAccountSettings is the model entity for the BusinessAccountSettings schema.
type BusinessAccountSettings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BusinessAccountSettingsID holds the value of the "BusinessAccountSettingsID" field.
	BusinessAccountSettingsID string `json:"BusinessAccountSettingsID,omitempty"`
	// BusinessAccountID holds the value of the "BusinessAccountID" field.
	BusinessAccountID string `json:"BusinessAccountID,omitempty"`
	// TwoFactorAuthentication holds the value of the "TwoFactorAuthentication" field.
	TwoFactorAuthentication bool `json:"TwoFactorAuthentication,omitempty"`
	// BlockedUsers holds the value of the "BlockedUsers" field.
	BlockedUsers []string `json:"BlockedUsers,omitempty"`
	// MutedUsers holds the value of the "MutedUsers" field.
	MutedUsers []string `json:"MutedUsers,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusinessAccountSettingsQuery when eager-loading is set.
	Edges                              BusinessAccountSettingsEdges `json:"edges"`
	business_business_account_settings *int
	selectValues                       sql.SelectValues
}

// BusinessAccountSettingsEdges holds the relations/edges for other nodes in the graph.
type BusinessAccountSettingsEdges struct {
	// BusinessAccount holds the value of the business_account edge.
	BusinessAccount *Business `json:"business_account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BusinessAccountOrErr returns the BusinessAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusinessAccountSettingsEdges) BusinessAccountOrErr() (*Business, error) {
	if e.loadedTypes[0] {
		if e.BusinessAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: business.Label}
		}
		return e.BusinessAccount, nil
	}
	return nil, &NotLoadedError{edge: "business_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BusinessAccountSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case businessaccountsettings.FieldBlockedUsers, businessaccountsettings.FieldMutedUsers:
			values[i] = new([]byte)
		case businessaccountsettings.FieldTwoFactorAuthentication:
			values[i] = new(sql.NullBool)
		case businessaccountsettings.FieldID:
			values[i] = new(sql.NullInt64)
		case businessaccountsettings.FieldBusinessAccountSettingsID, businessaccountsettings.FieldBusinessAccountID:
			values[i] = new(sql.NullString)
		case businessaccountsettings.ForeignKeys[0]: // business_business_account_settings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BusinessAccountSettings fields.
func (bas *BusinessAccountSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case businessaccountsettings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bas.ID = int(value.Int64)
		case businessaccountsettings.FieldBusinessAccountSettingsID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BusinessAccountSettingsID", values[i])
			} else if value.Valid {
				bas.BusinessAccountSettingsID = value.String
			}
		case businessaccountsettings.FieldBusinessAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BusinessAccountID", values[i])
			} else if value.Valid {
				bas.BusinessAccountID = value.String
			}
		case businessaccountsettings.FieldTwoFactorAuthentication:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field TwoFactorAuthentication", values[i])
			} else if value.Valid {
				bas.TwoFactorAuthentication = value.Bool
			}
		case businessaccountsettings.FieldBlockedUsers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field BlockedUsers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bas.BlockedUsers); err != nil {
					return fmt.Errorf("unmarshal field BlockedUsers: %w", err)
				}
			}
		case businessaccountsettings.FieldMutedUsers:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field MutedUsers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bas.MutedUsers); err != nil {
					return fmt.Errorf("unmarshal field MutedUsers: %w", err)
				}
			}
		case businessaccountsettings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field business_business_account_settings", value)
			} else if value.Valid {
				bas.business_business_account_settings = new(int)
				*bas.business_business_account_settings = int(value.Int64)
			}
		default:
			bas.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BusinessAccountSettings.
// This includes values selected through modifiers, order, etc.
func (bas *BusinessAccountSettings) Value(name string) (ent.Value, error) {
	return bas.selectValues.Get(name)
}

// QueryBusinessAccount queries the "business_account" edge of the BusinessAccountSettings entity.
func (bas *BusinessAccountSettings) QueryBusinessAccount() *BusinessQuery {
	return NewBusinessAccountSettingsClient(bas.config).QueryBusinessAccount(bas)
}

// Update returns a builder for updating this BusinessAccountSettings.
// Note that you need to call BusinessAccountSettings.Unwrap() before calling this method if this BusinessAccountSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (bas *BusinessAccountSettings) Update() *BusinessAccountSettingsUpdateOne {
	return NewBusinessAccountSettingsClient(bas.config).UpdateOne(bas)
}

// Unwrap unwraps the BusinessAccountSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bas *BusinessAccountSettings) Unwrap() *BusinessAccountSettings {
	_tx, ok := bas.config.driver.(*txDriver)
	if !ok {
		panic("ent: BusinessAccountSettings is not a transactional entity")
	}
	bas.config.driver = _tx.drv
	return bas
}

// String implements the fmt.Stringer.
func (bas *BusinessAccountSettings) String() string {
	var builder strings.Builder
	builder.WriteString("BusinessAccountSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bas.ID))
	builder.WriteString("BusinessAccountSettingsID=")
	builder.WriteString(bas.BusinessAccountSettingsID)
	builder.WriteString(", ")
	builder.WriteString("BusinessAccountID=")
	builder.WriteString(bas.BusinessAccountID)
	builder.WriteString(", ")
	builder.WriteString("TwoFactorAuthentication=")
	builder.WriteString(fmt.Sprintf("%v", bas.TwoFactorAuthentication))
	builder.WriteString(", ")
	builder.WriteString("BlockedUsers=")
	builder.WriteString(fmt.Sprintf("%v", bas.BlockedUsers))
	builder.WriteString(", ")
	builder.WriteString("MutedUsers=")
	builder.WriteString(fmt.Sprintf("%v", bas.MutedUsers))
	builder.WriteByte(')')
	return builder.String()
}

// BusinessAccountSettingsSlice is a parsable slice of BusinessAccountSettings.
type BusinessAccountSettingsSlice []*BusinessAccountSettings

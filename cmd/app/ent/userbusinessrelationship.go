// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/businessaccount"
	"placio-app/ent/user"
	"placio-app/ent/userbusinessrelationship"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserBusinessRelationship is the model entity for the UserBusinessRelationship schema.
type UserBusinessRelationship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ID holds the value of the "ID" field.
	ID string `json:"ID,omitempty"`
	// UserID holds the value of the "UserID" field.
	UserID string `json:"UserID,omitempty"`
	// BusinessAccountID holds the value of the "BusinessAccountID" field.
	BusinessAccountID string `json:"BusinessAccountID,omitempty"`
	// Role holds the value of the "Role" field.
	Role string `json:"Role,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserBusinessRelationshipQuery when eager-loading is set.
	Edges                          UserBusinessRelationshipEdges `json:"edges"`
	business_account_relationships *int
	user_relationships             *int
	selectValues                   sql.SelectValues
}

// UserBusinessRelationshipEdges holds the relations/edges for other nodes in the graph.
type UserBusinessRelationshipEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// BusinessAccount holds the value of the business_account edge.
	BusinessAccount *BusinessAccount `json:"business_account,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserBusinessRelationshipEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BusinessAccountOrErr returns the BusinessAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserBusinessRelationshipEdges) BusinessAccountOrErr() (*BusinessAccount, error) {
	if e.loadedTypes[1] {
		if e.BusinessAccount == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: businessaccount.Label}
		}
		return e.BusinessAccount, nil
	}
	return nil, &NotLoadedError{edge: "business_account"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserBusinessRelationship) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userbusinessrelationship.FieldID:
			values[i] = new(sql.NullInt64)
		case userbusinessrelationship.FieldID, userbusinessrelationship.FieldUserID, userbusinessrelationship.FieldBusinessAccountID, userbusinessrelationship.FieldRole:
			values[i] = new(sql.NullString)
		case userbusinessrelationship.FieldCreatedAt, userbusinessrelationship.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userbusinessrelationship.ForeignKeys[0]: // business_account_relationships
			values[i] = new(sql.NullInt64)
		case userbusinessrelationship.ForeignKeys[1]: // user_relationships
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserBusinessRelationship fields.
func (ubr *UserBusinessRelationship) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userbusinessrelationship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ubr.ID = int(value.Int64)
		case userbusinessrelationship.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ID", values[i])
			} else if value.Valid {
				ubr.ID = value.String
			}
		case userbusinessrelationship.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserID", values[i])
			} else if value.Valid {
				ubr.UserID = value.String
			}
		case userbusinessrelationship.FieldBusinessAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field BusinessAccountID", values[i])
			} else if value.Valid {
				ubr.BusinessAccountID = value.String
			}
		case userbusinessrelationship.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Role", values[i])
			} else if value.Valid {
				ubr.Role = value.String
			}
		case userbusinessrelationship.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				ubr.CreatedAt = value.Time
			}
		case userbusinessrelationship.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				ubr.UpdatedAt = value.Time
			}
		case userbusinessrelationship.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field business_account_relationships", value)
			} else if value.Valid {
				ubr.business_account_relationships = new(int)
				*ubr.business_account_relationships = int(value.Int64)
			}
		case userbusinessrelationship.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_relationships", value)
			} else if value.Valid {
				ubr.user_relationships = new(int)
				*ubr.user_relationships = int(value.Int64)
			}
		default:
			ubr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserBusinessRelationship.
// This includes values selected through modifiers, order, etc.
func (ubr *UserBusinessRelationship) Value(name string) (ent.Value, error) {
	return ubr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserBusinessRelationship entity.
func (ubr *UserBusinessRelationship) QueryUser() *UserQuery {
	return NewUserBusinessRelationshipClient(ubr.config).QueryUser(ubr)
}

// QueryBusinessAccount queries the "business_account" edge of the UserBusinessRelationship entity.
func (ubr *UserBusinessRelationship) QueryBusinessAccount() *BusinessAccountQuery {
	return NewUserBusinessRelationshipClient(ubr.config).QueryBusinessAccount(ubr)
}

// Update returns a builder for updating this UserBusinessRelationship.
// Note that you need to call UserBusinessRelationship.Unwrap() before calling this method if this UserBusinessRelationship
// was returned from a transaction, and the transaction was committed or rolled back.
func (ubr *UserBusinessRelationship) Update() *UserBusinessRelationshipUpdateOne {
	return NewUserBusinessRelationshipClient(ubr.config).UpdateOne(ubr)
}

// Unwrap unwraps the UserBusinessRelationship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ubr *UserBusinessRelationship) Unwrap() *UserBusinessRelationship {
	_tx, ok := ubr.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserBusinessRelationship is not a transactional entity")
	}
	ubr.config.driver = _tx.drv
	return ubr
}

// String implements the fmt.Stringer.
func (ubr *UserBusinessRelationship) String() string {
	var builder strings.Builder
	builder.WriteString("UserBusinessRelationship(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ubr.ID))
	builder.WriteString("ID=")
	builder.WriteString(ubr.ID)
	builder.WriteString(", ")
	builder.WriteString("UserID=")
	builder.WriteString(ubr.UserID)
	builder.WriteString(", ")
	builder.WriteString("BusinessAccountID=")
	builder.WriteString(ubr.BusinessAccountID)
	builder.WriteString(", ")
	builder.WriteString("Role=")
	builder.WriteString(ubr.Role)
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(ubr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(ubr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserBusinessRelationships is a parsable slice of UserBusinessRelationship.
type UserBusinessRelationships []*UserBusinessRelationship

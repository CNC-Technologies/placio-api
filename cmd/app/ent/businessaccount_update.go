// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/businessaccount"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessAccountUpdate is the builder for updating BusinessAccount entities.
type BusinessAccountUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessAccountMutation
}

// Where appends a list predicates to the BusinessAccountUpdate builder.
func (bau *BusinessAccountUpdate) Where(ps ...predicate.BusinessAccount) *BusinessAccountUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// Mutation returns the BusinessAccountMutation object of the builder.
func (bau *BusinessAccountUpdate) Mutation() *BusinessAccountMutation {
	return bau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BusinessAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bau.sqlSave, bau.mutation, bau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BusinessAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BusinessAccountUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BusinessAccountUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bau *BusinessAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(businessaccount.Table, businessaccount.Columns, sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt))
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bau.mutation.done = true
	return n, nil
}

// BusinessAccountUpdateOne is the builder for updating a single BusinessAccount entity.
type BusinessAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessAccountMutation
}

// Mutation returns the BusinessAccountMutation object of the builder.
func (bauo *BusinessAccountUpdateOne) Mutation() *BusinessAccountMutation {
	return bauo.mutation
}

// Where appends a list predicates to the BusinessAccountUpdate builder.
func (bauo *BusinessAccountUpdateOne) Where(ps ...predicate.BusinessAccount) *BusinessAccountUpdateOne {
	bauo.mutation.Where(ps...)
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BusinessAccountUpdateOne) Select(field string, fields ...string) *BusinessAccountUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BusinessAccount entity.
func (bauo *BusinessAccountUpdateOne) Save(ctx context.Context) (*BusinessAccount, error) {
	return withHooks(ctx, bauo.sqlSave, bauo.mutation, bauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BusinessAccountUpdateOne) SaveX(ctx context.Context) *BusinessAccount {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BusinessAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BusinessAccountUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bauo *BusinessAccountUpdateOne) sqlSave(ctx context.Context) (_node *BusinessAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(businessaccount.Table, businessaccount.Columns, sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt))
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BusinessAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessaccount.FieldID)
		for _, f := range fields {
			if !businessaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != businessaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &BusinessAccount{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauo.mutation.done = true
	return _node, nil
}

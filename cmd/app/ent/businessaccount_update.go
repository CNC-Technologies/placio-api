// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/accountsettings"
	"placio-app/ent/businessaccount"
	"placio-app/ent/invitation"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/userbusinessrelationship"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessAccountUpdate is the builder for updating BusinessAccount entities.
type BusinessAccountUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessAccountMutation
}

// Where appends a list predicates to the BusinessAccountUpdate builder.
func (bau *BusinessAccountUpdate) Where(ps ...predicate.BusinessAccount) *BusinessAccountUpdate {
	bau.mutation.Where(ps...)
	return bau
}

// SetID sets the "ID" field.
func (bau *BusinessAccountUpdate) SetID(s string) *BusinessAccountUpdate {
	bau.mutation.SetID(s)
	return bau
}

// SetName sets the "Name" field.
func (bau *BusinessAccountUpdate) SetName(s string) *BusinessAccountUpdate {
	bau.mutation.SetName(s)
	return bau
}

// SetActive sets the "Active" field.
func (bau *BusinessAccountUpdate) SetActive(b bool) *BusinessAccountUpdate {
	bau.mutation.SetActive(b)
	return bau
}

// SetNillableActive sets the "Active" field if the given value is not nil.
func (bau *BusinessAccountUpdate) SetNillableActive(b *bool) *BusinessAccountUpdate {
	if b != nil {
		bau.SetActive(*b)
	}
	return bau
}

// SetCreatedAt sets the "CreatedAt" field.
func (bau *BusinessAccountUpdate) SetCreatedAt(t time.Time) *BusinessAccountUpdate {
	bau.mutation.SetCreatedAt(t)
	return bau
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (bau *BusinessAccountUpdate) SetUpdatedAt(t time.Time) *BusinessAccountUpdate {
	bau.mutation.SetUpdatedAt(t)
	return bau
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (bau *BusinessAccountUpdate) AddPostIDs(ids ...int) *BusinessAccountUpdate {
	bau.mutation.AddPostIDs(ids...)
	return bau
}

// AddPosts adds the "posts" edges to the Post entity.
func (bau *BusinessAccountUpdate) AddPosts(p ...*Post) *BusinessAccountUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bau.AddPostIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the UserBusinessRelationship entity by IDs.
func (bau *BusinessAccountUpdate) AddRelationshipIDs(ids ...int) *BusinessAccountUpdate {
	bau.mutation.AddRelationshipIDs(ids...)
	return bau
}

// AddRelationships adds the "relationships" edges to the UserBusinessRelationship entity.
func (bau *BusinessAccountUpdate) AddRelationships(u ...*UserBusinessRelationship) *BusinessAccountUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bau.AddRelationshipIDs(ids...)
}

// AddAccountSettingIDs adds the "account_settings" edge to the AccountSettings entity by IDs.
func (bau *BusinessAccountUpdate) AddAccountSettingIDs(ids ...int) *BusinessAccountUpdate {
	bau.mutation.AddAccountSettingIDs(ids...)
	return bau
}

// AddAccountSettings adds the "account_settings" edges to the AccountSettings entity.
func (bau *BusinessAccountUpdate) AddAccountSettings(a ...*AccountSettings) *BusinessAccountUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bau.AddAccountSettingIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (bau *BusinessAccountUpdate) AddInvitationIDs(ids ...int) *BusinessAccountUpdate {
	bau.mutation.AddInvitationIDs(ids...)
	return bau
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (bau *BusinessAccountUpdate) AddInvitations(i ...*Invitation) *BusinessAccountUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bau.AddInvitationIDs(ids...)
}

// Mutation returns the BusinessAccountMutation object of the builder.
func (bau *BusinessAccountUpdate) Mutation() *BusinessAccountMutation {
	return bau.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (bau *BusinessAccountUpdate) ClearPosts() *BusinessAccountUpdate {
	bau.mutation.ClearPosts()
	return bau
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (bau *BusinessAccountUpdate) RemovePostIDs(ids ...int) *BusinessAccountUpdate {
	bau.mutation.RemovePostIDs(ids...)
	return bau
}

// RemovePosts removes "posts" edges to Post entities.
func (bau *BusinessAccountUpdate) RemovePosts(p ...*Post) *BusinessAccountUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bau.RemovePostIDs(ids...)
}

// ClearRelationships clears all "relationships" edges to the UserBusinessRelationship entity.
func (bau *BusinessAccountUpdate) ClearRelationships() *BusinessAccountUpdate {
	bau.mutation.ClearRelationships()
	return bau
}

// RemoveRelationshipIDs removes the "relationships" edge to UserBusinessRelationship entities by IDs.
func (bau *BusinessAccountUpdate) RemoveRelationshipIDs(ids ...int) *BusinessAccountUpdate {
	bau.mutation.RemoveRelationshipIDs(ids...)
	return bau
}

// RemoveRelationships removes "relationships" edges to UserBusinessRelationship entities.
func (bau *BusinessAccountUpdate) RemoveRelationships(u ...*UserBusinessRelationship) *BusinessAccountUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bau.RemoveRelationshipIDs(ids...)
}

// ClearAccountSettings clears all "account_settings" edges to the AccountSettings entity.
func (bau *BusinessAccountUpdate) ClearAccountSettings() *BusinessAccountUpdate {
	bau.mutation.ClearAccountSettings()
	return bau
}

// RemoveAccountSettingIDs removes the "account_settings" edge to AccountSettings entities by IDs.
func (bau *BusinessAccountUpdate) RemoveAccountSettingIDs(ids ...int) *BusinessAccountUpdate {
	bau.mutation.RemoveAccountSettingIDs(ids...)
	return bau
}

// RemoveAccountSettings removes "account_settings" edges to AccountSettings entities.
func (bau *BusinessAccountUpdate) RemoveAccountSettings(a ...*AccountSettings) *BusinessAccountUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bau.RemoveAccountSettingIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (bau *BusinessAccountUpdate) ClearInvitations() *BusinessAccountUpdate {
	bau.mutation.ClearInvitations()
	return bau
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (bau *BusinessAccountUpdate) RemoveInvitationIDs(ids ...int) *BusinessAccountUpdate {
	bau.mutation.RemoveInvitationIDs(ids...)
	return bau
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (bau *BusinessAccountUpdate) RemoveInvitations(i ...*Invitation) *BusinessAccountUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bau.RemoveInvitationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bau *BusinessAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bau.sqlSave, bau.mutation, bau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bau *BusinessAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := bau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bau *BusinessAccountUpdate) Exec(ctx context.Context) error {
	_, err := bau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bau *BusinessAccountUpdate) ExecX(ctx context.Context) {
	if err := bau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bau *BusinessAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(businessaccount.Table, businessaccount.Columns, sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt))
	if ps := bau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bau.mutation.ID(); ok {
		_spec.SetField(businessaccount.FieldID, field.TypeString, value)
	}
	if value, ok := bau.mutation.Name(); ok {
		_spec.SetField(businessaccount.FieldName, field.TypeString, value)
	}
	if value, ok := bau.mutation.Active(); ok {
		_spec.SetField(businessaccount.FieldActive, field.TypeBool, value)
	}
	if value, ok := bau.mutation.CreatedAt(); ok {
		_spec.SetField(businessaccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bau.mutation.UpdatedAt(); ok {
		_spec.SetField(businessaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if bau.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.PostsTable,
			Columns: []string{businessaccount.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedPostsIDs(); len(nodes) > 0 && !bau.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.PostsTable,
			Columns: []string{businessaccount.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.PostsTable,
			Columns: []string{businessaccount.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.RelationshipsTable,
			Columns: []string{businessaccount.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !bau.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.RelationshipsTable,
			Columns: []string{businessaccount.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.RelationshipsTable,
			Columns: []string{businessaccount.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.AccountSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.AccountSettingsTable,
			Columns: []string{businessaccount.AccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedAccountSettingsIDs(); len(nodes) > 0 && !bau.mutation.AccountSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.AccountSettingsTable,
			Columns: []string{businessaccount.AccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.AccountSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.AccountSettingsTable,
			Columns: []string{businessaccount.AccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bau.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   businessaccount.InvitationsTable,
			Columns: businessaccount.InvitationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !bau.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   businessaccount.InvitationsTable,
			Columns: businessaccount.InvitationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bau.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   businessaccount.InvitationsTable,
			Columns: businessaccount.InvitationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bau.mutation.done = true
	return n, nil
}

// BusinessAccountUpdateOne is the builder for updating a single BusinessAccount entity.
type BusinessAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessAccountMutation
}

// SetID sets the "ID" field.
func (bauo *BusinessAccountUpdateOne) SetID(s string) *BusinessAccountUpdateOne {
	bauo.mutation.SetID(s)
	return bauo
}

// SetName sets the "Name" field.
func (bauo *BusinessAccountUpdateOne) SetName(s string) *BusinessAccountUpdateOne {
	bauo.mutation.SetName(s)
	return bauo
}

// SetActive sets the "Active" field.
func (bauo *BusinessAccountUpdateOne) SetActive(b bool) *BusinessAccountUpdateOne {
	bauo.mutation.SetActive(b)
	return bauo
}

// SetNillableActive sets the "Active" field if the given value is not nil.
func (bauo *BusinessAccountUpdateOne) SetNillableActive(b *bool) *BusinessAccountUpdateOne {
	if b != nil {
		bauo.SetActive(*b)
	}
	return bauo
}

// SetCreatedAt sets the "CreatedAt" field.
func (bauo *BusinessAccountUpdateOne) SetCreatedAt(t time.Time) *BusinessAccountUpdateOne {
	bauo.mutation.SetCreatedAt(t)
	return bauo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (bauo *BusinessAccountUpdateOne) SetUpdatedAt(t time.Time) *BusinessAccountUpdateOne {
	bauo.mutation.SetUpdatedAt(t)
	return bauo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (bauo *BusinessAccountUpdateOne) AddPostIDs(ids ...int) *BusinessAccountUpdateOne {
	bauo.mutation.AddPostIDs(ids...)
	return bauo
}

// AddPosts adds the "posts" edges to the Post entity.
func (bauo *BusinessAccountUpdateOne) AddPosts(p ...*Post) *BusinessAccountUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bauo.AddPostIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the UserBusinessRelationship entity by IDs.
func (bauo *BusinessAccountUpdateOne) AddRelationshipIDs(ids ...int) *BusinessAccountUpdateOne {
	bauo.mutation.AddRelationshipIDs(ids...)
	return bauo
}

// AddRelationships adds the "relationships" edges to the UserBusinessRelationship entity.
func (bauo *BusinessAccountUpdateOne) AddRelationships(u ...*UserBusinessRelationship) *BusinessAccountUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bauo.AddRelationshipIDs(ids...)
}

// AddAccountSettingIDs adds the "account_settings" edge to the AccountSettings entity by IDs.
func (bauo *BusinessAccountUpdateOne) AddAccountSettingIDs(ids ...int) *BusinessAccountUpdateOne {
	bauo.mutation.AddAccountSettingIDs(ids...)
	return bauo
}

// AddAccountSettings adds the "account_settings" edges to the AccountSettings entity.
func (bauo *BusinessAccountUpdateOne) AddAccountSettings(a ...*AccountSettings) *BusinessAccountUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bauo.AddAccountSettingIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (bauo *BusinessAccountUpdateOne) AddInvitationIDs(ids ...int) *BusinessAccountUpdateOne {
	bauo.mutation.AddInvitationIDs(ids...)
	return bauo
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (bauo *BusinessAccountUpdateOne) AddInvitations(i ...*Invitation) *BusinessAccountUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bauo.AddInvitationIDs(ids...)
}

// Mutation returns the BusinessAccountMutation object of the builder.
func (bauo *BusinessAccountUpdateOne) Mutation() *BusinessAccountMutation {
	return bauo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (bauo *BusinessAccountUpdateOne) ClearPosts() *BusinessAccountUpdateOne {
	bauo.mutation.ClearPosts()
	return bauo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (bauo *BusinessAccountUpdateOne) RemovePostIDs(ids ...int) *BusinessAccountUpdateOne {
	bauo.mutation.RemovePostIDs(ids...)
	return bauo
}

// RemovePosts removes "posts" edges to Post entities.
func (bauo *BusinessAccountUpdateOne) RemovePosts(p ...*Post) *BusinessAccountUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bauo.RemovePostIDs(ids...)
}

// ClearRelationships clears all "relationships" edges to the UserBusinessRelationship entity.
func (bauo *BusinessAccountUpdateOne) ClearRelationships() *BusinessAccountUpdateOne {
	bauo.mutation.ClearRelationships()
	return bauo
}

// RemoveRelationshipIDs removes the "relationships" edge to UserBusinessRelationship entities by IDs.
func (bauo *BusinessAccountUpdateOne) RemoveRelationshipIDs(ids ...int) *BusinessAccountUpdateOne {
	bauo.mutation.RemoveRelationshipIDs(ids...)
	return bauo
}

// RemoveRelationships removes "relationships" edges to UserBusinessRelationship entities.
func (bauo *BusinessAccountUpdateOne) RemoveRelationships(u ...*UserBusinessRelationship) *BusinessAccountUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bauo.RemoveRelationshipIDs(ids...)
}

// ClearAccountSettings clears all "account_settings" edges to the AccountSettings entity.
func (bauo *BusinessAccountUpdateOne) ClearAccountSettings() *BusinessAccountUpdateOne {
	bauo.mutation.ClearAccountSettings()
	return bauo
}

// RemoveAccountSettingIDs removes the "account_settings" edge to AccountSettings entities by IDs.
func (bauo *BusinessAccountUpdateOne) RemoveAccountSettingIDs(ids ...int) *BusinessAccountUpdateOne {
	bauo.mutation.RemoveAccountSettingIDs(ids...)
	return bauo
}

// RemoveAccountSettings removes "account_settings" edges to AccountSettings entities.
func (bauo *BusinessAccountUpdateOne) RemoveAccountSettings(a ...*AccountSettings) *BusinessAccountUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bauo.RemoveAccountSettingIDs(ids...)
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (bauo *BusinessAccountUpdateOne) ClearInvitations() *BusinessAccountUpdateOne {
	bauo.mutation.ClearInvitations()
	return bauo
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (bauo *BusinessAccountUpdateOne) RemoveInvitationIDs(ids ...int) *BusinessAccountUpdateOne {
	bauo.mutation.RemoveInvitationIDs(ids...)
	return bauo
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (bauo *BusinessAccountUpdateOne) RemoveInvitations(i ...*Invitation) *BusinessAccountUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bauo.RemoveInvitationIDs(ids...)
}

// Where appends a list predicates to the BusinessAccountUpdate builder.
func (bauo *BusinessAccountUpdateOne) Where(ps ...predicate.BusinessAccount) *BusinessAccountUpdateOne {
	bauo.mutation.Where(ps...)
	return bauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bauo *BusinessAccountUpdateOne) Select(field string, fields ...string) *BusinessAccountUpdateOne {
	bauo.fields = append([]string{field}, fields...)
	return bauo
}

// Save executes the query and returns the updated BusinessAccount entity.
func (bauo *BusinessAccountUpdateOne) Save(ctx context.Context) (*BusinessAccount, error) {
	return withHooks(ctx, bauo.sqlSave, bauo.mutation, bauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bauo *BusinessAccountUpdateOne) SaveX(ctx context.Context) *BusinessAccount {
	node, err := bauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bauo *BusinessAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := bauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bauo *BusinessAccountUpdateOne) ExecX(ctx context.Context) {
	if err := bauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bauo *BusinessAccountUpdateOne) sqlSave(ctx context.Context) (_node *BusinessAccount, err error) {
	_spec := sqlgraph.NewUpdateSpec(businessaccount.Table, businessaccount.Columns, sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt))
	id, ok := bauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BusinessAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessaccount.FieldID)
		for _, f := range fields {
			if !businessaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != businessaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bauo.mutation.ID(); ok {
		_spec.SetField(businessaccount.FieldID, field.TypeString, value)
	}
	if value, ok := bauo.mutation.Name(); ok {
		_spec.SetField(businessaccount.FieldName, field.TypeString, value)
	}
	if value, ok := bauo.mutation.Active(); ok {
		_spec.SetField(businessaccount.FieldActive, field.TypeBool, value)
	}
	if value, ok := bauo.mutation.CreatedAt(); ok {
		_spec.SetField(businessaccount.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bauo.mutation.UpdatedAt(); ok {
		_spec.SetField(businessaccount.FieldUpdatedAt, field.TypeTime, value)
	}
	if bauo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.PostsTable,
			Columns: []string{businessaccount.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !bauo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.PostsTable,
			Columns: []string{businessaccount.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.PostsTable,
			Columns: []string{businessaccount.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.RelationshipsTable,
			Columns: []string{businessaccount.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedRelationshipsIDs(); len(nodes) > 0 && !bauo.mutation.RelationshipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.RelationshipsTable,
			Columns: []string{businessaccount.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.RelationshipsTable,
			Columns: []string{businessaccount.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.AccountSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.AccountSettingsTable,
			Columns: []string{businessaccount.AccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedAccountSettingsIDs(); len(nodes) > 0 && !bauo.mutation.AccountSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.AccountSettingsTable,
			Columns: []string{businessaccount.AccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.AccountSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.AccountSettingsTable,
			Columns: []string{businessaccount.AccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bauo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   businessaccount.InvitationsTable,
			Columns: businessaccount.InvitationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !bauo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   businessaccount.InvitationsTable,
			Columns: businessaccount.InvitationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bauo.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   businessaccount.InvitationsTable,
			Columns: businessaccount.InvitationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BusinessAccount{config: bauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bauo.mutation.done = true
	return _node, nil
}

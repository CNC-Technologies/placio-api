// Code generated by ent, DO NOT EDIT.

package business

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldName, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldName, v))
}

// HasUserBusinesses applies the HasEdge predicate on the "userBusinesses" edge.
func HasUserBusinesses() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserBusinessesTable, UserBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserBusinessesWith applies the HasEdge predicate on the "userBusinesses" edge with a given conditions (other predicates).
func HasUserBusinessesWith(preds ...predicate.UserBusiness) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newUserBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessAccountSettings applies the HasEdge predicate on the "business_account_settings" edge.
func HasBusinessAccountSettings() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BusinessAccountSettingsTable, BusinessAccountSettingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessAccountSettingsWith applies the HasEdge predicate on the "business_account_settings" edge with a given conditions (other predicates).
func HasBusinessAccountSettingsWith(preds ...predicate.AccountSettings) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newBusinessAccountSettingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedUsers applies the HasEdge predicate on the "followedUsers" edge.
func HasFollowedUsers() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedUsersTable, FollowedUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedUsersWith applies the HasEdge predicate on the "followedUsers" edge with a given conditions (other predicates).
func HasFollowedUsersWith(preds ...predicate.BusinessFollowUser) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newFollowedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowerUsers applies the HasEdge predicate on the "followerUsers" edge.
func HasFollowerUsers() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowerUsersTable, FollowerUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowerUsersWith applies the HasEdge predicate on the "followerUsers" edge with a given conditions (other predicates).
func HasFollowerUsersWith(preds ...predicate.UserFollowBusiness) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newFollowerUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedBusinesses applies the HasEdge predicate on the "followedBusinesses" edge.
func HasFollowedBusinesses() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedBusinessesTable, FollowedBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedBusinessesWith applies the HasEdge predicate on the "followedBusinesses" edge with a given conditions (other predicates).
func HasFollowedBusinessesWith(preds ...predicate.BusinessFollowBusiness) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newFollowedBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowerBusinesses applies the HasEdge predicate on the "followerBusinesses" edge.
func HasFollowerBusinesses() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowerBusinessesTable, FollowerBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowerBusinessesWith applies the HasEdge predicate on the "followerBusinesses" edge with a given conditions (other predicates).
func HasFollowerBusinessesWith(preds ...predicate.BusinessFollowBusiness) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newFollowerBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlaces applies the HasEdge predicate on the "places" edge.
func HasPlaces() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlacesTable, PlacesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlacesWith applies the HasEdge predicate on the "places" edge with a given conditions (other predicates).
func HasPlacesWith(preds ...predicate.Place) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newPlacesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		p(s.Not())
	})
}

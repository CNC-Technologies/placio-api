// Code generated by ent, DO NOT EDIT.

package business

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldDescription, v))
}

// Picture applies equality check predicate on the "picture" field. It's identical to PictureEQ.
func Picture(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldPicture, v))
}

// CoverImage applies equality check predicate on the "cover_image" field. It's identical to CoverImageEQ.
func CoverImage(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCoverImage, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldWebsite, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldLocation, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldURL, v))
}

// SearchText applies equality check predicate on the "search_text" field. It's identical to SearchTextEQ.
func SearchText(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldSearchText, v))
}

// RelevanceScore applies equality check predicate on the "relevance_score" field. It's identical to RelevanceScoreEQ.
func RelevanceScore(v float64) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldRelevanceScore, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldDescription, v))
}

// PictureEQ applies the EQ predicate on the "picture" field.
func PictureEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldPicture, v))
}

// PictureNEQ applies the NEQ predicate on the "picture" field.
func PictureNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldPicture, v))
}

// PictureIn applies the In predicate on the "picture" field.
func PictureIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldPicture, vs...))
}

// PictureNotIn applies the NotIn predicate on the "picture" field.
func PictureNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldPicture, vs...))
}

// PictureGT applies the GT predicate on the "picture" field.
func PictureGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldPicture, v))
}

// PictureGTE applies the GTE predicate on the "picture" field.
func PictureGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldPicture, v))
}

// PictureLT applies the LT predicate on the "picture" field.
func PictureLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldPicture, v))
}

// PictureLTE applies the LTE predicate on the "picture" field.
func PictureLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldPicture, v))
}

// PictureContains applies the Contains predicate on the "picture" field.
func PictureContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldPicture, v))
}

// PictureHasPrefix applies the HasPrefix predicate on the "picture" field.
func PictureHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldPicture, v))
}

// PictureHasSuffix applies the HasSuffix predicate on the "picture" field.
func PictureHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldPicture, v))
}

// PictureIsNil applies the IsNil predicate on the "picture" field.
func PictureIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldPicture))
}

// PictureNotNil applies the NotNil predicate on the "picture" field.
func PictureNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldPicture))
}

// PictureEqualFold applies the EqualFold predicate on the "picture" field.
func PictureEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldPicture, v))
}

// PictureContainsFold applies the ContainsFold predicate on the "picture" field.
func PictureContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldPicture, v))
}

// CoverImageEQ applies the EQ predicate on the "cover_image" field.
func CoverImageEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldCoverImage, v))
}

// CoverImageNEQ applies the NEQ predicate on the "cover_image" field.
func CoverImageNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldCoverImage, v))
}

// CoverImageIn applies the In predicate on the "cover_image" field.
func CoverImageIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldCoverImage, vs...))
}

// CoverImageNotIn applies the NotIn predicate on the "cover_image" field.
func CoverImageNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldCoverImage, vs...))
}

// CoverImageGT applies the GT predicate on the "cover_image" field.
func CoverImageGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldCoverImage, v))
}

// CoverImageGTE applies the GTE predicate on the "cover_image" field.
func CoverImageGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldCoverImage, v))
}

// CoverImageLT applies the LT predicate on the "cover_image" field.
func CoverImageLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldCoverImage, v))
}

// CoverImageLTE applies the LTE predicate on the "cover_image" field.
func CoverImageLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldCoverImage, v))
}

// CoverImageContains applies the Contains predicate on the "cover_image" field.
func CoverImageContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldCoverImage, v))
}

// CoverImageHasPrefix applies the HasPrefix predicate on the "cover_image" field.
func CoverImageHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldCoverImage, v))
}

// CoverImageHasSuffix applies the HasSuffix predicate on the "cover_image" field.
func CoverImageHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldCoverImage, v))
}

// CoverImageIsNil applies the IsNil predicate on the "cover_image" field.
func CoverImageIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldCoverImage))
}

// CoverImageNotNil applies the NotNil predicate on the "cover_image" field.
func CoverImageNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldCoverImage))
}

// CoverImageEqualFold applies the EqualFold predicate on the "cover_image" field.
func CoverImageEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldCoverImage, v))
}

// CoverImageContainsFold applies the ContainsFold predicate on the "cover_image" field.
func CoverImageContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldCoverImage, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldWebsite, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldLocation, v))
}

// BusinessSettingsIsNil applies the IsNil predicate on the "business_settings" field.
func BusinessSettingsIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldBusinessSettings))
}

// BusinessSettingsNotNil applies the NotNil predicate on the "business_settings" field.
func BusinessSettingsNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldBusinessSettings))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldURL, v))
}

// SearchTextEQ applies the EQ predicate on the "search_text" field.
func SearchTextEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldSearchText, v))
}

// SearchTextNEQ applies the NEQ predicate on the "search_text" field.
func SearchTextNEQ(v string) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldSearchText, v))
}

// SearchTextIn applies the In predicate on the "search_text" field.
func SearchTextIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldSearchText, vs...))
}

// SearchTextNotIn applies the NotIn predicate on the "search_text" field.
func SearchTextNotIn(vs ...string) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldSearchText, vs...))
}

// SearchTextGT applies the GT predicate on the "search_text" field.
func SearchTextGT(v string) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldSearchText, v))
}

// SearchTextGTE applies the GTE predicate on the "search_text" field.
func SearchTextGTE(v string) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldSearchText, v))
}

// SearchTextLT applies the LT predicate on the "search_text" field.
func SearchTextLT(v string) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldSearchText, v))
}

// SearchTextLTE applies the LTE predicate on the "search_text" field.
func SearchTextLTE(v string) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldSearchText, v))
}

// SearchTextContains applies the Contains predicate on the "search_text" field.
func SearchTextContains(v string) predicate.Business {
	return predicate.Business(sql.FieldContains(FieldSearchText, v))
}

// SearchTextHasPrefix applies the HasPrefix predicate on the "search_text" field.
func SearchTextHasPrefix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasPrefix(FieldSearchText, v))
}

// SearchTextHasSuffix applies the HasSuffix predicate on the "search_text" field.
func SearchTextHasSuffix(v string) predicate.Business {
	return predicate.Business(sql.FieldHasSuffix(FieldSearchText, v))
}

// SearchTextIsNil applies the IsNil predicate on the "search_text" field.
func SearchTextIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldSearchText))
}

// SearchTextNotNil applies the NotNil predicate on the "search_text" field.
func SearchTextNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldSearchText))
}

// SearchTextEqualFold applies the EqualFold predicate on the "search_text" field.
func SearchTextEqualFold(v string) predicate.Business {
	return predicate.Business(sql.FieldEqualFold(FieldSearchText, v))
}

// SearchTextContainsFold applies the ContainsFold predicate on the "search_text" field.
func SearchTextContainsFold(v string) predicate.Business {
	return predicate.Business(sql.FieldContainsFold(FieldSearchText, v))
}

// RelevanceScoreEQ applies the EQ predicate on the "relevance_score" field.
func RelevanceScoreEQ(v float64) predicate.Business {
	return predicate.Business(sql.FieldEQ(FieldRelevanceScore, v))
}

// RelevanceScoreNEQ applies the NEQ predicate on the "relevance_score" field.
func RelevanceScoreNEQ(v float64) predicate.Business {
	return predicate.Business(sql.FieldNEQ(FieldRelevanceScore, v))
}

// RelevanceScoreIn applies the In predicate on the "relevance_score" field.
func RelevanceScoreIn(vs ...float64) predicate.Business {
	return predicate.Business(sql.FieldIn(FieldRelevanceScore, vs...))
}

// RelevanceScoreNotIn applies the NotIn predicate on the "relevance_score" field.
func RelevanceScoreNotIn(vs ...float64) predicate.Business {
	return predicate.Business(sql.FieldNotIn(FieldRelevanceScore, vs...))
}

// RelevanceScoreGT applies the GT predicate on the "relevance_score" field.
func RelevanceScoreGT(v float64) predicate.Business {
	return predicate.Business(sql.FieldGT(FieldRelevanceScore, v))
}

// RelevanceScoreGTE applies the GTE predicate on the "relevance_score" field.
func RelevanceScoreGTE(v float64) predicate.Business {
	return predicate.Business(sql.FieldGTE(FieldRelevanceScore, v))
}

// RelevanceScoreLT applies the LT predicate on the "relevance_score" field.
func RelevanceScoreLT(v float64) predicate.Business {
	return predicate.Business(sql.FieldLT(FieldRelevanceScore, v))
}

// RelevanceScoreLTE applies the LTE predicate on the "relevance_score" field.
func RelevanceScoreLTE(v float64) predicate.Business {
	return predicate.Business(sql.FieldLTE(FieldRelevanceScore, v))
}

// RelevanceScoreIsNil applies the IsNil predicate on the "relevance_score" field.
func RelevanceScoreIsNil() predicate.Business {
	return predicate.Business(sql.FieldIsNull(FieldRelevanceScore))
}

// RelevanceScoreNotNil applies the NotNil predicate on the "relevance_score" field.
func RelevanceScoreNotNil() predicate.Business {
	return predicate.Business(sql.FieldNotNull(FieldRelevanceScore))
}

// HasUserBusinesses applies the HasEdge predicate on the "userBusinesses" edge.
func HasUserBusinesses() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserBusinessesTable, UserBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserBusinessesWith applies the HasEdge predicate on the "userBusinesses" edge with a given conditions (other predicates).
func HasUserBusinessesWith(preds ...predicate.UserBusiness) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newUserBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessAccountSettings applies the HasEdge predicate on the "business_account_settings" edge.
func HasBusinessAccountSettings() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BusinessAccountSettingsTable, BusinessAccountSettingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessAccountSettingsWith applies the HasEdge predicate on the "business_account_settings" edge with a given conditions (other predicates).
func HasBusinessAccountSettingsWith(preds ...predicate.AccountSettings) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newBusinessAccountSettingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedUsers applies the HasEdge predicate on the "followedUsers" edge.
func HasFollowedUsers() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedUsersTable, FollowedUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedUsersWith applies the HasEdge predicate on the "followedUsers" edge with a given conditions (other predicates).
func HasFollowedUsersWith(preds ...predicate.BusinessFollowUser) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newFollowedUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowerUsers applies the HasEdge predicate on the "followerUsers" edge.
func HasFollowerUsers() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowerUsersTable, FollowerUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowerUsersWith applies the HasEdge predicate on the "followerUsers" edge with a given conditions (other predicates).
func HasFollowerUsersWith(preds ...predicate.UserFollowBusiness) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newFollowerUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowedBusinesses applies the HasEdge predicate on the "followedBusinesses" edge.
func HasFollowedBusinesses() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowedBusinessesTable, FollowedBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowedBusinessesWith applies the HasEdge predicate on the "followedBusinesses" edge with a given conditions (other predicates).
func HasFollowedBusinessesWith(preds ...predicate.BusinessFollowBusiness) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newFollowedBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowerBusinesses applies the HasEdge predicate on the "followerBusinesses" edge.
func HasFollowerBusinesses() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowerBusinessesTable, FollowerBusinessesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowerBusinessesWith applies the HasEdge predicate on the "followerBusinesses" edge with a given conditions (other predicates).
func HasFollowerBusinessesWith(preds ...predicate.BusinessFollowBusiness) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newFollowerBusinessesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlaces applies the HasEdge predicate on the "places" edge.
func HasPlaces() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlacesTable, PlacesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlacesWith applies the HasEdge predicate on the "places" edge with a given conditions (other predicates).
func HasPlacesWith(preds ...predicate.Place) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newPlacesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.Category) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategoryAssignments applies the HasEdge predicate on the "categoryAssignments" edge.
func HasCategoryAssignments() predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CategoryAssignmentsTable, CategoryAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryAssignmentsWith applies the HasEdge predicate on the "categoryAssignments" edge with a given conditions (other predicates).
func HasCategoryAssignmentsWith(preds ...predicate.CategoryAssignment) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		step := newCategoryAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Business) predicate.Business {
	return predicate.Business(func(s *sql.Selector) {
		p(s.Not())
	})
}

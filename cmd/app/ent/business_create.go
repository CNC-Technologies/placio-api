// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessaccountsettings"
	"placio-app/ent/post"
	"placio-app/ent/userbusiness"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessCreate is the builder for creating a Business entity.
type BusinessCreate struct {
	config
	mutation *BusinessMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BusinessCreate) SetName(s string) *BusinessCreate {
	bc.mutation.SetName(s)
	return bc
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (bc *BusinessCreate) AddUserBusinessIDs(ids ...int) *BusinessCreate {
	bc.mutation.AddUserBusinessIDs(ids...)
	return bc
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (bc *BusinessCreate) AddUserBusinesses(u ...*UserBusiness) *BusinessCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bc.AddUserBusinessIDs(ids...)
}

// SetBusinessAccountSettingsID sets the "business_account_settings" edge to the BusinessAccountSettings entity by ID.
func (bc *BusinessCreate) SetBusinessAccountSettingsID(id int) *BusinessCreate {
	bc.mutation.SetBusinessAccountSettingsID(id)
	return bc
}

// SetNillableBusinessAccountSettingsID sets the "business_account_settings" edge to the BusinessAccountSettings entity by ID if the given value is not nil.
func (bc *BusinessCreate) SetNillableBusinessAccountSettingsID(id *int) *BusinessCreate {
	if id != nil {
		bc = bc.SetBusinessAccountSettingsID(*id)
	}
	return bc
}

// SetBusinessAccountSettings sets the "business_account_settings" edge to the BusinessAccountSettings entity.
func (bc *BusinessCreate) SetBusinessAccountSettings(b *BusinessAccountSettings) *BusinessCreate {
	return bc.SetBusinessAccountSettingsID(b.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (bc *BusinessCreate) AddPostIDs(ids ...int) *BusinessCreate {
	bc.mutation.AddPostIDs(ids...)
	return bc
}

// AddPosts adds the "posts" edges to the Post entity.
func (bc *BusinessCreate) AddPosts(p ...*Post) *BusinessCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bc.AddPostIDs(ids...)
}

// Mutation returns the BusinessMutation object of the builder.
func (bc *BusinessCreate) Mutation() *BusinessMutation {
	return bc.mutation
}

// Save creates the Business in the database.
func (bc *BusinessCreate) Save(ctx context.Context) (*Business, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BusinessCreate) SaveX(ctx context.Context) *Business {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BusinessCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BusinessCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BusinessCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Business.name"`)}
	}
	return nil
}

func (bc *BusinessCreate) sqlSave(ctx context.Context) (*Business, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BusinessCreate) createSpec() (*Business, *sqlgraph.CreateSpec) {
	var (
		_node = &Business{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(business.Table, sqlgraph.NewFieldSpec(business.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(business.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := bc.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BusinessAccountSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccountsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessCreateBulk is the builder for creating many Business entities in bulk.
type BusinessCreateBulk struct {
	config
	builders []*BusinessCreate
}

// Save creates the Business entities in the database.
func (bcb *BusinessCreateBulk) Save(ctx context.Context) ([]*Business, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Business, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BusinessCreateBulk) SaveX(ctx context.Context) []*Business {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BusinessCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BusinessCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

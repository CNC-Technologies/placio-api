// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/predicate"
	"placio-app/ent/user"
	"placio-app/ent/userbusiness"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBusinessUpdate is the builder for updating UserBusiness entities.
type UserBusinessUpdate struct {
	config
	hooks    []Hook
	mutation *UserBusinessMutation
}

// Where appends a list predicates to the UserBusinessUpdate builder.
func (ubu *UserBusinessUpdate) Where(ps ...predicate.UserBusiness) *UserBusinessUpdate {
	ubu.mutation.Where(ps...)
	return ubu
}

// SetRole sets the "role" field.
func (ubu *UserBusinessUpdate) SetRole(s string) *UserBusinessUpdate {
	ubu.mutation.SetRole(s)
	return ubu
}

// SetPermissions sets the "permissions" field.
func (ubu *UserBusinessUpdate) SetPermissions(s string) *UserBusinessUpdate {
	ubu.mutation.SetPermissions(s)
	return ubu
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (ubu *UserBusinessUpdate) SetNillablePermissions(s *string) *UserBusinessUpdate {
	if s != nil {
		ubu.SetPermissions(*s)
	}
	return ubu
}

// ClearPermissions clears the value of the "permissions" field.
func (ubu *UserBusinessUpdate) ClearPermissions() *UserBusinessUpdate {
	ubu.mutation.ClearPermissions()
	return ubu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ubu *UserBusinessUpdate) SetUserID(id string) *UserBusinessUpdate {
	ubu.mutation.SetUserID(id)
	return ubu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ubu *UserBusinessUpdate) SetNillableUserID(id *string) *UserBusinessUpdate {
	if id != nil {
		ubu = ubu.SetUserID(*id)
	}
	return ubu
}

// SetUser sets the "user" edge to the User entity.
func (ubu *UserBusinessUpdate) SetUser(u *User) *UserBusinessUpdate {
	return ubu.SetUserID(u.ID)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (ubu *UserBusinessUpdate) SetBusinessID(id string) *UserBusinessUpdate {
	ubu.mutation.SetBusinessID(id)
	return ubu
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (ubu *UserBusinessUpdate) SetNillableBusinessID(id *string) *UserBusinessUpdate {
	if id != nil {
		ubu = ubu.SetBusinessID(*id)
	}
	return ubu
}

// SetBusiness sets the "business" edge to the Business entity.
func (ubu *UserBusinessUpdate) SetBusiness(b *Business) *UserBusinessUpdate {
	return ubu.SetBusinessID(b.ID)
}

// Mutation returns the UserBusinessMutation object of the builder.
func (ubu *UserBusinessUpdate) Mutation() *UserBusinessMutation {
	return ubu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ubu *UserBusinessUpdate) ClearUser() *UserBusinessUpdate {
	ubu.mutation.ClearUser()
	return ubu
}

// ClearBusiness clears the "business" edge to the Business entity.
func (ubu *UserBusinessUpdate) ClearBusiness() *UserBusinessUpdate {
	ubu.mutation.ClearBusiness()
	return ubu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubu *UserBusinessUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ubu.sqlSave, ubu.mutation, ubu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubu *UserBusinessUpdate) SaveX(ctx context.Context) int {
	affected, err := ubu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubu *UserBusinessUpdate) Exec(ctx context.Context) error {
	_, err := ubu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubu *UserBusinessUpdate) ExecX(ctx context.Context) {
	if err := ubu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubu *UserBusinessUpdate) check() error {
	if v, ok := ubu.mutation.Permissions(); ok {
		if err := userbusiness.PermissionsValidator(v); err != nil {
			return &ValidationError{Name: "permissions", err: fmt.Errorf(`ent: validator failed for field "UserBusiness.permissions": %w`, err)}
		}
	}
	return nil
}

func (ubu *UserBusinessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ubu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbusiness.Table, userbusiness.Columns, sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString))
	if ps := ubu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubu.mutation.Role(); ok {
		_spec.SetField(userbusiness.FieldRole, field.TypeString, value)
	}
	if value, ok := ubu.mutation.Permissions(); ok {
		_spec.SetField(userbusiness.FieldPermissions, field.TypeString, value)
	}
	if ubu.mutation.PermissionsCleared() {
		_spec.ClearField(userbusiness.FieldPermissions, field.TypeString)
	}
	if ubu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusiness.UserTable,
			Columns: []string{userbusiness.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusiness.UserTable,
			Columns: []string{userbusiness.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ubu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusiness.BusinessTable,
			Columns: []string{userbusiness.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusiness.BusinessTable,
			Columns: []string{userbusiness.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ubu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbusiness.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ubu.mutation.done = true
	return n, nil
}

// UserBusinessUpdateOne is the builder for updating a single UserBusiness entity.
type UserBusinessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserBusinessMutation
}

// SetRole sets the "role" field.
func (ubuo *UserBusinessUpdateOne) SetRole(s string) *UserBusinessUpdateOne {
	ubuo.mutation.SetRole(s)
	return ubuo
}

// SetPermissions sets the "permissions" field.
func (ubuo *UserBusinessUpdateOne) SetPermissions(s string) *UserBusinessUpdateOne {
	ubuo.mutation.SetPermissions(s)
	return ubuo
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (ubuo *UserBusinessUpdateOne) SetNillablePermissions(s *string) *UserBusinessUpdateOne {
	if s != nil {
		ubuo.SetPermissions(*s)
	}
	return ubuo
}

// ClearPermissions clears the value of the "permissions" field.
func (ubuo *UserBusinessUpdateOne) ClearPermissions() *UserBusinessUpdateOne {
	ubuo.mutation.ClearPermissions()
	return ubuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ubuo *UserBusinessUpdateOne) SetUserID(id string) *UserBusinessUpdateOne {
	ubuo.mutation.SetUserID(id)
	return ubuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ubuo *UserBusinessUpdateOne) SetNillableUserID(id *string) *UserBusinessUpdateOne {
	if id != nil {
		ubuo = ubuo.SetUserID(*id)
	}
	return ubuo
}

// SetUser sets the "user" edge to the User entity.
func (ubuo *UserBusinessUpdateOne) SetUser(u *User) *UserBusinessUpdateOne {
	return ubuo.SetUserID(u.ID)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (ubuo *UserBusinessUpdateOne) SetBusinessID(id string) *UserBusinessUpdateOne {
	ubuo.mutation.SetBusinessID(id)
	return ubuo
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (ubuo *UserBusinessUpdateOne) SetNillableBusinessID(id *string) *UserBusinessUpdateOne {
	if id != nil {
		ubuo = ubuo.SetBusinessID(*id)
	}
	return ubuo
}

// SetBusiness sets the "business" edge to the Business entity.
func (ubuo *UserBusinessUpdateOne) SetBusiness(b *Business) *UserBusinessUpdateOne {
	return ubuo.SetBusinessID(b.ID)
}

// Mutation returns the UserBusinessMutation object of the builder.
func (ubuo *UserBusinessUpdateOne) Mutation() *UserBusinessMutation {
	return ubuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ubuo *UserBusinessUpdateOne) ClearUser() *UserBusinessUpdateOne {
	ubuo.mutation.ClearUser()
	return ubuo
}

// ClearBusiness clears the "business" edge to the Business entity.
func (ubuo *UserBusinessUpdateOne) ClearBusiness() *UserBusinessUpdateOne {
	ubuo.mutation.ClearBusiness()
	return ubuo
}

// Where appends a list predicates to the UserBusinessUpdate builder.
func (ubuo *UserBusinessUpdateOne) Where(ps ...predicate.UserBusiness) *UserBusinessUpdateOne {
	ubuo.mutation.Where(ps...)
	return ubuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ubuo *UserBusinessUpdateOne) Select(field string, fields ...string) *UserBusinessUpdateOne {
	ubuo.fields = append([]string{field}, fields...)
	return ubuo
}

// Save executes the query and returns the updated UserBusiness entity.
func (ubuo *UserBusinessUpdateOne) Save(ctx context.Context) (*UserBusiness, error) {
	return withHooks(ctx, ubuo.sqlSave, ubuo.mutation, ubuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubuo *UserBusinessUpdateOne) SaveX(ctx context.Context) *UserBusiness {
	node, err := ubuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubuo *UserBusinessUpdateOne) Exec(ctx context.Context) error {
	_, err := ubuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubuo *UserBusinessUpdateOne) ExecX(ctx context.Context) {
	if err := ubuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubuo *UserBusinessUpdateOne) check() error {
	if v, ok := ubuo.mutation.Permissions(); ok {
		if err := userbusiness.PermissionsValidator(v); err != nil {
			return &ValidationError{Name: "permissions", err: fmt.Errorf(`ent: validator failed for field "UserBusiness.permissions": %w`, err)}
		}
	}
	return nil
}

func (ubuo *UserBusinessUpdateOne) sqlSave(ctx context.Context) (_node *UserBusiness, err error) {
	if err := ubuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbusiness.Table, userbusiness.Columns, sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString))
	id, ok := ubuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserBusiness.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ubuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userbusiness.FieldID)
		for _, f := range fields {
			if !userbusiness.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userbusiness.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ubuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubuo.mutation.Role(); ok {
		_spec.SetField(userbusiness.FieldRole, field.TypeString, value)
	}
	if value, ok := ubuo.mutation.Permissions(); ok {
		_spec.SetField(userbusiness.FieldPermissions, field.TypeString, value)
	}
	if ubuo.mutation.PermissionsCleared() {
		_spec.ClearField(userbusiness.FieldPermissions, field.TypeString)
	}
	if ubuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusiness.UserTable,
			Columns: []string{userbusiness.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusiness.UserTable,
			Columns: []string{userbusiness.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ubuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusiness.BusinessTable,
			Columns: []string{userbusiness.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusiness.BusinessTable,
			Columns: []string{userbusiness.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserBusiness{config: ubuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbusiness.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ubuo.mutation.done = true
	return _node, nil
}

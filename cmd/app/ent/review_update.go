// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/review"
	"placio-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ReviewUpdate is the builder for updating Review entities.
type ReviewUpdate struct {
	config
	hooks    []Hook
	mutation *ReviewMutation
}

// Where appends a list predicates to the ReviewUpdate builder.
func (ru *ReviewUpdate) Where(ps ...predicate.Review) *ReviewUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRating sets the "rating" field.
func (ru *ReviewUpdate) SetRating(f float64) *ReviewUpdate {
	ru.mutation.ResetRating()
	ru.mutation.SetRating(f)
	return ru
}

// AddRating adds f to the "rating" field.
func (ru *ReviewUpdate) AddRating(f float64) *ReviewUpdate {
	ru.mutation.AddRating(f)
	return ru
}

// SetComment sets the "comment" field.
func (ru *ReviewUpdate) SetComment(s string) *ReviewUpdate {
	ru.mutation.SetComment(s)
	return ru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ru *ReviewUpdate) SetNillableComment(s *string) *ReviewUpdate {
	if s != nil {
		ru.SetComment(*s)
	}
	return ru
}

// ClearComment clears the value of the "comment" field.
func (ru *ReviewUpdate) ClearComment() *ReviewUpdate {
	ru.mutation.ClearComment()
	return ru
}

// SetImagesVideos sets the "images_videos" field.
func (ru *ReviewUpdate) SetImagesVideos(s []string) *ReviewUpdate {
	ru.mutation.SetImagesVideos(s)
	return ru
}

// AppendImagesVideos appends s to the "images_videos" field.
func (ru *ReviewUpdate) AppendImagesVideos(s []string) *ReviewUpdate {
	ru.mutation.AppendImagesVideos(s)
	return ru
}

// ClearImagesVideos clears the value of the "images_videos" field.
func (ru *ReviewUpdate) ClearImagesVideos() *ReviewUpdate {
	ru.mutation.ClearImagesVideos()
	return ru
}

// SetTimestamp sets the "timestamp" field.
func (ru *ReviewUpdate) SetTimestamp(t time.Time) *ReviewUpdate {
	ru.mutation.SetTimestamp(t)
	return ru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *ReviewUpdate) SetUserID(id string) *ReviewUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ru *ReviewUpdate) SetNillableUserID(id *string) *ReviewUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *ReviewUpdate) SetUser(u *User) *ReviewUpdate {
	return ru.SetUserID(u.ID)
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ru *ReviewUpdate) SetPlaceID(id string) *ReviewUpdate {
	ru.mutation.SetPlaceID(id)
	return ru
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ru *ReviewUpdate) SetNillablePlaceID(id *string) *ReviewUpdate {
	if id != nil {
		ru = ru.SetPlaceID(*id)
	}
	return ru
}

// SetPlace sets the "place" edge to the Place entity.
func (ru *ReviewUpdate) SetPlace(p *Place) *ReviewUpdate {
	return ru.SetPlaceID(p.ID)
}

// Mutation returns the ReviewMutation object of the builder.
func (ru *ReviewUpdate) Mutation() *ReviewMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *ReviewUpdate) ClearUser() *ReviewUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearPlace clears the "place" edge to the Place entity.
func (ru *ReviewUpdate) ClearPlace() *ReviewUpdate {
	ru.mutation.ClearPlace()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReviewUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReviewUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReviewUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReviewUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(review.Table, review.Columns, sqlgraph.NewFieldSpec(review.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Rating(); ok {
		_spec.SetField(review.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedRating(); ok {
		_spec.AddField(review.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.Comment(); ok {
		_spec.SetField(review.FieldComment, field.TypeString, value)
	}
	if ru.mutation.CommentCleared() {
		_spec.ClearField(review.FieldComment, field.TypeString)
	}
	if value, ok := ru.mutation.ImagesVideos(); ok {
		_spec.SetField(review.FieldImagesVideos, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedImagesVideos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, review.FieldImagesVideos, value)
		})
	}
	if ru.mutation.ImagesVideosCleared() {
		_spec.ClearField(review.FieldImagesVideos, field.TypeJSON)
	}
	if value, ok := ru.mutation.Timestamp(); ok {
		_spec.SetField(review.FieldTimestamp, field.TypeTime, value)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.UserTable,
			Columns: []string{review.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.UserTable,
			Columns: []string{review.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.PlaceTable,
			Columns: []string{review.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.PlaceTable,
			Columns: []string{review.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReviewUpdateOne is the builder for updating a single Review entity.
type ReviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReviewMutation
}

// SetRating sets the "rating" field.
func (ruo *ReviewUpdateOne) SetRating(f float64) *ReviewUpdateOne {
	ruo.mutation.ResetRating()
	ruo.mutation.SetRating(f)
	return ruo
}

// AddRating adds f to the "rating" field.
func (ruo *ReviewUpdateOne) AddRating(f float64) *ReviewUpdateOne {
	ruo.mutation.AddRating(f)
	return ruo
}

// SetComment sets the "comment" field.
func (ruo *ReviewUpdateOne) SetComment(s string) *ReviewUpdateOne {
	ruo.mutation.SetComment(s)
	return ruo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableComment(s *string) *ReviewUpdateOne {
	if s != nil {
		ruo.SetComment(*s)
	}
	return ruo
}

// ClearComment clears the value of the "comment" field.
func (ruo *ReviewUpdateOne) ClearComment() *ReviewUpdateOne {
	ruo.mutation.ClearComment()
	return ruo
}

// SetImagesVideos sets the "images_videos" field.
func (ruo *ReviewUpdateOne) SetImagesVideos(s []string) *ReviewUpdateOne {
	ruo.mutation.SetImagesVideos(s)
	return ruo
}

// AppendImagesVideos appends s to the "images_videos" field.
func (ruo *ReviewUpdateOne) AppendImagesVideos(s []string) *ReviewUpdateOne {
	ruo.mutation.AppendImagesVideos(s)
	return ruo
}

// ClearImagesVideos clears the value of the "images_videos" field.
func (ruo *ReviewUpdateOne) ClearImagesVideos() *ReviewUpdateOne {
	ruo.mutation.ClearImagesVideos()
	return ruo
}

// SetTimestamp sets the "timestamp" field.
func (ruo *ReviewUpdateOne) SetTimestamp(t time.Time) *ReviewUpdateOne {
	ruo.mutation.SetTimestamp(t)
	return ruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *ReviewUpdateOne) SetUserID(id string) *ReviewUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillableUserID(id *string) *ReviewUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *ReviewUpdateOne) SetUser(u *User) *ReviewUpdateOne {
	return ruo.SetUserID(u.ID)
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ruo *ReviewUpdateOne) SetPlaceID(id string) *ReviewUpdateOne {
	ruo.mutation.SetPlaceID(id)
	return ruo
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ruo *ReviewUpdateOne) SetNillablePlaceID(id *string) *ReviewUpdateOne {
	if id != nil {
		ruo = ruo.SetPlaceID(*id)
	}
	return ruo
}

// SetPlace sets the "place" edge to the Place entity.
func (ruo *ReviewUpdateOne) SetPlace(p *Place) *ReviewUpdateOne {
	return ruo.SetPlaceID(p.ID)
}

// Mutation returns the ReviewMutation object of the builder.
func (ruo *ReviewUpdateOne) Mutation() *ReviewMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *ReviewUpdateOne) ClearUser() *ReviewUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearPlace clears the "place" edge to the Place entity.
func (ruo *ReviewUpdateOne) ClearPlace() *ReviewUpdateOne {
	ruo.mutation.ClearPlace()
	return ruo
}

// Where appends a list predicates to the ReviewUpdate builder.
func (ruo *ReviewUpdateOne) Where(ps ...predicate.Review) *ReviewUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReviewUpdateOne) Select(field string, fields ...string) *ReviewUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Review entity.
func (ruo *ReviewUpdateOne) Save(ctx context.Context) (*Review, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReviewUpdateOne) SaveX(ctx context.Context) *Review {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReviewUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReviewUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReviewUpdateOne) sqlSave(ctx context.Context) (_node *Review, err error) {
	_spec := sqlgraph.NewUpdateSpec(review.Table, review.Columns, sqlgraph.NewFieldSpec(review.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Review.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, review.FieldID)
		for _, f := range fields {
			if !review.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != review.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Rating(); ok {
		_spec.SetField(review.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedRating(); ok {
		_spec.AddField(review.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.Comment(); ok {
		_spec.SetField(review.FieldComment, field.TypeString, value)
	}
	if ruo.mutation.CommentCleared() {
		_spec.ClearField(review.FieldComment, field.TypeString)
	}
	if value, ok := ruo.mutation.ImagesVideos(); ok {
		_spec.SetField(review.FieldImagesVideos, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedImagesVideos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, review.FieldImagesVideos, value)
		})
	}
	if ruo.mutation.ImagesVideosCleared() {
		_spec.ClearField(review.FieldImagesVideos, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Timestamp(); ok {
		_spec.SetField(review.FieldTimestamp, field.TypeTime, value)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.UserTable,
			Columns: []string{review.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.UserTable,
			Columns: []string{review.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.PlaceTable,
			Columns: []string{review.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   review.PlaceTable,
			Columns: []string{review.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Review{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{review.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

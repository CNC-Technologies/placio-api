// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"
	"placio-app/ent"

	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AccountSettingsQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AccountSettingsQueryRuleFunc func(context.Context, *ent.AccountSettingsQuery) error

// EvalQuery return f(ctx, q).
func (f AccountSettingsQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccountSettingsQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AccountSettingsQuery", q)
}

// The AccountSettingsMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AccountSettingsMutationRuleFunc func(context.Context, *ent.AccountSettingsMutation) error

// EvalMutation calls f(ctx, m).
func (f AccountSettingsMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AccountSettingsMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AccountSettingsMutation", m)
}

// The BookingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BookingQueryRuleFunc func(context.Context, *ent.BookingQuery) error

// EvalQuery return f(ctx, q).
func (f BookingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BookingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BookingQuery", q)
}

// The BookingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BookingMutationRuleFunc func(context.Context, *ent.BookingMutation) error

// EvalMutation calls f(ctx, m).
func (f BookingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BookingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BookingMutation", m)
}

// The BusinessQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BusinessQueryRuleFunc func(context.Context, *ent.BusinessQuery) error

// EvalQuery return f(ctx, q).
func (f BusinessQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BusinessQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BusinessQuery", q)
}

// The BusinessMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BusinessMutationRuleFunc func(context.Context, *ent.BusinessMutation) error

// EvalMutation calls f(ctx, m).
func (f BusinessMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BusinessMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BusinessMutation", m)
}

// The ChatQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ChatQueryRuleFunc func(context.Context, *ent.ChatQuery) error

// EvalQuery return f(ctx, q).
func (f ChatQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ChatQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ChatQuery", q)
}

// The ChatMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ChatMutationRuleFunc func(context.Context, *ent.ChatMutation) error

// EvalMutation calls f(ctx, m).
func (f ChatMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ChatMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ChatMutation", m)
}

// The CommentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommentQueryRuleFunc func(context.Context, *ent.CommentQuery) error

// EvalQuery return f(ctx, q).
func (f CommentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CommentQuery", q)
}

// The CommentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommentMutationRuleFunc func(context.Context, *ent.CommentMutation) error

// EvalMutation calls f(ctx, m).
func (f CommentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CommentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CommentMutation", m)
}

// The LikeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type LikeQueryRuleFunc func(context.Context, *ent.LikeQuery) error

// EvalQuery return f(ctx, q).
func (f LikeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LikeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.LikeQuery", q)
}

// The LikeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type LikeMutationRuleFunc func(context.Context, *ent.LikeMutation) error

// EvalMutation calls f(ctx, m).
func (f LikeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.LikeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.LikeMutation", m)
}

// The MediaQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MediaQueryRuleFunc func(context.Context, *ent.MediaQuery) error

// EvalQuery return f(ctx, q).
func (f MediaQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MediaQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MediaQuery", q)
}

// The MediaMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MediaMutationRuleFunc func(context.Context, *ent.MediaMutation) error

// EvalMutation calls f(ctx, m).
func (f MediaMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MediaMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MediaMutation", m)
}

// The OrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderQueryRuleFunc func(context.Context, *ent.OrderQuery) error

// EvalQuery return f(ctx, q).
func (f OrderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderQuery", q)
}

// The OrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderMutationRuleFunc func(context.Context, *ent.OrderMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderMutation", m)
}

// The PaymentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PaymentQueryRuleFunc func(context.Context, *ent.PaymentQuery) error

// EvalQuery return f(ctx, q).
func (f PaymentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PaymentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PaymentQuery", q)
}

// The PaymentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PaymentMutationRuleFunc func(context.Context, *ent.PaymentMutation) error

// EvalMutation calls f(ctx, m).
func (f PaymentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PaymentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PaymentMutation", m)
}

// The PostQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PostQueryRuleFunc func(context.Context, *ent.PostQuery) error

// EvalQuery return f(ctx, q).
func (f PostQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PostQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PostQuery", q)
}

// The PostMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PostMutationRuleFunc func(context.Context, *ent.PostMutation) error

// EvalMutation calls f(ctx, m).
func (f PostMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PostMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PostMutation", m)
}

// The RatingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RatingQueryRuleFunc func(context.Context, *ent.RatingQuery) error

// EvalQuery return f(ctx, q).
func (f RatingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RatingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RatingQuery", q)
}

// The RatingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RatingMutationRuleFunc func(context.Context, *ent.RatingMutation) error

// EvalMutation calls f(ctx, m).
func (f RatingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RatingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RatingMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UserBusinessQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserBusinessQueryRuleFunc func(context.Context, *ent.UserBusinessQuery) error

// EvalQuery return f(ctx, q).
func (f UserBusinessQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserBusinessQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserBusinessQuery", q)
}

// The UserBusinessMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserBusinessMutationRuleFunc func(context.Context, *ent.UserBusinessMutation) error

// EvalMutation calls f(ctx, m).
func (f UserBusinessMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserBusinessMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserBusinessMutation", m)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/amenity"
	"placio-app/ent/booking"
	"placio-app/ent/business"
	"placio-app/ent/event"
	"placio-app/ent/menu"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/reservation"
	"placio-app/ent/review"
	"placio-app/ent/room"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PlaceUpdate is the builder for updating Place entities.
type PlaceUpdate struct {
	config
	hooks    []Hook
	mutation *PlaceMutation
}

// Where appends a list predicates to the PlaceUpdate builder.
func (pu *PlaceUpdate) Where(ps ...predicate.Place) *PlaceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlaceUpdate) SetName(s string) *PlaceUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetType sets the "type" field.
func (pu *PlaceUpdate) SetType(s string) *PlaceUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PlaceUpdate) SetDescription(s string) *PlaceUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableDescription(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PlaceUpdate) ClearDescription() *PlaceUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetLocation sets the "location" field.
func (pu *PlaceUpdate) SetLocation(s string) *PlaceUpdate {
	pu.mutation.SetLocation(s)
	return pu
}

// SetImages sets the "images" field.
func (pu *PlaceUpdate) SetImages(s []string) *PlaceUpdate {
	pu.mutation.SetImages(s)
	return pu
}

// AppendImages appends s to the "images" field.
func (pu *PlaceUpdate) AppendImages(s []string) *PlaceUpdate {
	pu.mutation.AppendImages(s)
	return pu
}

// ClearImages clears the value of the "images" field.
func (pu *PlaceUpdate) ClearImages() *PlaceUpdate {
	pu.mutation.ClearImages()
	return pu
}

// SetAvailability sets the "availability" field.
func (pu *PlaceUpdate) SetAvailability(m map[string]interface{}) *PlaceUpdate {
	pu.mutation.SetAvailability(m)
	return pu
}

// ClearAvailability clears the value of the "availability" field.
func (pu *PlaceUpdate) ClearAvailability() *PlaceUpdate {
	pu.mutation.ClearAvailability()
	return pu
}

// SetSpecialOffers sets the "special_offers" field.
func (pu *PlaceUpdate) SetSpecialOffers(s string) *PlaceUpdate {
	pu.mutation.SetSpecialOffers(s)
	return pu
}

// SetNillableSpecialOffers sets the "special_offers" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableSpecialOffers(s *string) *PlaceUpdate {
	if s != nil {
		pu.SetSpecialOffers(*s)
	}
	return pu
}

// ClearSpecialOffers clears the value of the "special_offers" field.
func (pu *PlaceUpdate) ClearSpecialOffers() *PlaceUpdate {
	pu.mutation.ClearSpecialOffers()
	return pu
}

// SetSustainabilityScore sets the "sustainability_score" field.
func (pu *PlaceUpdate) SetSustainabilityScore(f float64) *PlaceUpdate {
	pu.mutation.ResetSustainabilityScore()
	pu.mutation.SetSustainabilityScore(f)
	return pu
}

// SetNillableSustainabilityScore sets the "sustainability_score" field if the given value is not nil.
func (pu *PlaceUpdate) SetNillableSustainabilityScore(f *float64) *PlaceUpdate {
	if f != nil {
		pu.SetSustainabilityScore(*f)
	}
	return pu
}

// AddSustainabilityScore adds f to the "sustainability_score" field.
func (pu *PlaceUpdate) AddSustainabilityScore(f float64) *PlaceUpdate {
	pu.mutation.AddSustainabilityScore(f)
	return pu
}

// ClearSustainabilityScore clears the value of the "sustainability_score" field.
func (pu *PlaceUpdate) ClearSustainabilityScore() *PlaceUpdate {
	pu.mutation.ClearSustainabilityScore()
	return pu
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (pu *PlaceUpdate) SetBusinessID(id string) *PlaceUpdate {
	pu.mutation.SetBusinessID(id)
	return pu
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (pu *PlaceUpdate) SetNillableBusinessID(id *string) *PlaceUpdate {
	if id != nil {
		pu = pu.SetBusinessID(*id)
	}
	return pu
}

// SetBusiness sets the "business" edge to the Business entity.
func (pu *PlaceUpdate) SetBusiness(b *Business) *PlaceUpdate {
	return pu.SetBusinessID(b.ID)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (pu *PlaceUpdate) AddReviewIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddReviewIDs(ids...)
	return pu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (pu *PlaceUpdate) AddReviews(r ...*Review) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReviewIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (pu *PlaceUpdate) AddEventIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddEventIDs(ids...)
	return pu
}

// AddEvents adds the "events" edges to the Event entity.
func (pu *PlaceUpdate) AddEvents(e ...*Event) *PlaceUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEventIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (pu *PlaceUpdate) AddAmenityIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddAmenityIDs(ids...)
	return pu
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (pu *PlaceUpdate) AddAmenities(a ...*Amenity) *PlaceUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAmenityIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (pu *PlaceUpdate) AddMenuIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddMenuIDs(ids...)
	return pu
}

// AddMenus adds the "menus" edges to the Menu entity.
func (pu *PlaceUpdate) AddMenus(m ...*Menu) *PlaceUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMenuIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (pu *PlaceUpdate) AddRoomIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddRoomIDs(ids...)
	return pu
}

// AddRooms adds the "rooms" edges to the Room entity.
func (pu *PlaceUpdate) AddRooms(r ...*Room) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRoomIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (pu *PlaceUpdate) AddReservationIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddReservationIDs(ids...)
	return pu
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (pu *PlaceUpdate) AddReservations(r ...*Reservation) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReservationIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (pu *PlaceUpdate) AddBookingIDs(ids ...string) *PlaceUpdate {
	pu.mutation.AddBookingIDs(ids...)
	return pu
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (pu *PlaceUpdate) AddBookings(b ...*Booking) *PlaceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBookingIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (pu *PlaceUpdate) Mutation() *PlaceMutation {
	return pu.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (pu *PlaceUpdate) ClearBusiness() *PlaceUpdate {
	pu.mutation.ClearBusiness()
	return pu
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (pu *PlaceUpdate) ClearReviews() *PlaceUpdate {
	pu.mutation.ClearReviews()
	return pu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (pu *PlaceUpdate) RemoveReviewIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveReviewIDs(ids...)
	return pu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (pu *PlaceUpdate) RemoveReviews(r ...*Review) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReviewIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (pu *PlaceUpdate) ClearEvents() *PlaceUpdate {
	pu.mutation.ClearEvents()
	return pu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (pu *PlaceUpdate) RemoveEventIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveEventIDs(ids...)
	return pu
}

// RemoveEvents removes "events" edges to Event entities.
func (pu *PlaceUpdate) RemoveEvents(e ...*Event) *PlaceUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEventIDs(ids...)
}

// ClearAmenities clears all "amenities" edges to the Amenity entity.
func (pu *PlaceUpdate) ClearAmenities() *PlaceUpdate {
	pu.mutation.ClearAmenities()
	return pu
}

// RemoveAmenityIDs removes the "amenities" edge to Amenity entities by IDs.
func (pu *PlaceUpdate) RemoveAmenityIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveAmenityIDs(ids...)
	return pu
}

// RemoveAmenities removes "amenities" edges to Amenity entities.
func (pu *PlaceUpdate) RemoveAmenities(a ...*Amenity) *PlaceUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAmenityIDs(ids...)
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (pu *PlaceUpdate) ClearMenus() *PlaceUpdate {
	pu.mutation.ClearMenus()
	return pu
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (pu *PlaceUpdate) RemoveMenuIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveMenuIDs(ids...)
	return pu
}

// RemoveMenus removes "menus" edges to Menu entities.
func (pu *PlaceUpdate) RemoveMenus(m ...*Menu) *PlaceUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMenuIDs(ids...)
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (pu *PlaceUpdate) ClearRooms() *PlaceUpdate {
	pu.mutation.ClearRooms()
	return pu
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (pu *PlaceUpdate) RemoveRoomIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveRoomIDs(ids...)
	return pu
}

// RemoveRooms removes "rooms" edges to Room entities.
func (pu *PlaceUpdate) RemoveRooms(r ...*Room) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRoomIDs(ids...)
}

// ClearReservations clears all "reservations" edges to the Reservation entity.
func (pu *PlaceUpdate) ClearReservations() *PlaceUpdate {
	pu.mutation.ClearReservations()
	return pu
}

// RemoveReservationIDs removes the "reservations" edge to Reservation entities by IDs.
func (pu *PlaceUpdate) RemoveReservationIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveReservationIDs(ids...)
	return pu
}

// RemoveReservations removes "reservations" edges to Reservation entities.
func (pu *PlaceUpdate) RemoveReservations(r ...*Reservation) *PlaceUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReservationIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (pu *PlaceUpdate) ClearBookings() *PlaceUpdate {
	pu.mutation.ClearBookings()
	return pu
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (pu *PlaceUpdate) RemoveBookingIDs(ids ...string) *PlaceUpdate {
	pu.mutation.RemoveBookingIDs(ids...)
	return pu
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (pu *PlaceUpdate) RemoveBookings(b ...*Booking) *PlaceUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBookingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlaceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(place.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(place.FieldType, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(place.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(place.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Location(); ok {
		_spec.SetField(place.FieldLocation, field.TypeString, value)
	}
	if value, ok := pu.mutation.Images(); ok {
		_spec.SetField(place.FieldImages, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, place.FieldImages, value)
		})
	}
	if pu.mutation.ImagesCleared() {
		_spec.ClearField(place.FieldImages, field.TypeJSON)
	}
	if value, ok := pu.mutation.Availability(); ok {
		_spec.SetField(place.FieldAvailability, field.TypeJSON, value)
	}
	if pu.mutation.AvailabilityCleared() {
		_spec.ClearField(place.FieldAvailability, field.TypeJSON)
	}
	if value, ok := pu.mutation.SpecialOffers(); ok {
		_spec.SetField(place.FieldSpecialOffers, field.TypeString, value)
	}
	if pu.mutation.SpecialOffersCleared() {
		_spec.ClearField(place.FieldSpecialOffers, field.TypeString)
	}
	if value, ok := pu.mutation.SustainabilityScore(); ok {
		_spec.SetField(place.FieldSustainabilityScore, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedSustainabilityScore(); ok {
		_spec.AddField(place.FieldSustainabilityScore, field.TypeFloat64, value)
	}
	if pu.mutation.SustainabilityScoreCleared() {
		_spec.ClearField(place.FieldSustainabilityScore, field.TypeFloat64)
	}
	if pu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !pu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !pu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAmenitiesIDs(); len(nodes) > 0 && !pu.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMenusIDs(); len(nodes) > 0 && !pu.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !pu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReservationsIDs(); len(nodes) > 0 && !pu.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !pu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlaceUpdateOne is the builder for updating a single Place entity.
type PlaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaceMutation
}

// SetName sets the "name" field.
func (puo *PlaceUpdateOne) SetName(s string) *PlaceUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetType sets the "type" field.
func (puo *PlaceUpdateOne) SetType(s string) *PlaceUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PlaceUpdateOne) SetDescription(s string) *PlaceUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableDescription(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PlaceUpdateOne) ClearDescription() *PlaceUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetLocation sets the "location" field.
func (puo *PlaceUpdateOne) SetLocation(s string) *PlaceUpdateOne {
	puo.mutation.SetLocation(s)
	return puo
}

// SetImages sets the "images" field.
func (puo *PlaceUpdateOne) SetImages(s []string) *PlaceUpdateOne {
	puo.mutation.SetImages(s)
	return puo
}

// AppendImages appends s to the "images" field.
func (puo *PlaceUpdateOne) AppendImages(s []string) *PlaceUpdateOne {
	puo.mutation.AppendImages(s)
	return puo
}

// ClearImages clears the value of the "images" field.
func (puo *PlaceUpdateOne) ClearImages() *PlaceUpdateOne {
	puo.mutation.ClearImages()
	return puo
}

// SetAvailability sets the "availability" field.
func (puo *PlaceUpdateOne) SetAvailability(m map[string]interface{}) *PlaceUpdateOne {
	puo.mutation.SetAvailability(m)
	return puo
}

// ClearAvailability clears the value of the "availability" field.
func (puo *PlaceUpdateOne) ClearAvailability() *PlaceUpdateOne {
	puo.mutation.ClearAvailability()
	return puo
}

// SetSpecialOffers sets the "special_offers" field.
func (puo *PlaceUpdateOne) SetSpecialOffers(s string) *PlaceUpdateOne {
	puo.mutation.SetSpecialOffers(s)
	return puo
}

// SetNillableSpecialOffers sets the "special_offers" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableSpecialOffers(s *string) *PlaceUpdateOne {
	if s != nil {
		puo.SetSpecialOffers(*s)
	}
	return puo
}

// ClearSpecialOffers clears the value of the "special_offers" field.
func (puo *PlaceUpdateOne) ClearSpecialOffers() *PlaceUpdateOne {
	puo.mutation.ClearSpecialOffers()
	return puo
}

// SetSustainabilityScore sets the "sustainability_score" field.
func (puo *PlaceUpdateOne) SetSustainabilityScore(f float64) *PlaceUpdateOne {
	puo.mutation.ResetSustainabilityScore()
	puo.mutation.SetSustainabilityScore(f)
	return puo
}

// SetNillableSustainabilityScore sets the "sustainability_score" field if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableSustainabilityScore(f *float64) *PlaceUpdateOne {
	if f != nil {
		puo.SetSustainabilityScore(*f)
	}
	return puo
}

// AddSustainabilityScore adds f to the "sustainability_score" field.
func (puo *PlaceUpdateOne) AddSustainabilityScore(f float64) *PlaceUpdateOne {
	puo.mutation.AddSustainabilityScore(f)
	return puo
}

// ClearSustainabilityScore clears the value of the "sustainability_score" field.
func (puo *PlaceUpdateOne) ClearSustainabilityScore() *PlaceUpdateOne {
	puo.mutation.ClearSustainabilityScore()
	return puo
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (puo *PlaceUpdateOne) SetBusinessID(id string) *PlaceUpdateOne {
	puo.mutation.SetBusinessID(id)
	return puo
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (puo *PlaceUpdateOne) SetNillableBusinessID(id *string) *PlaceUpdateOne {
	if id != nil {
		puo = puo.SetBusinessID(*id)
	}
	return puo
}

// SetBusiness sets the "business" edge to the Business entity.
func (puo *PlaceUpdateOne) SetBusiness(b *Business) *PlaceUpdateOne {
	return puo.SetBusinessID(b.ID)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (puo *PlaceUpdateOne) AddReviewIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddReviewIDs(ids...)
	return puo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (puo *PlaceUpdateOne) AddReviews(r ...*Review) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReviewIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (puo *PlaceUpdateOne) AddEventIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddEventIDs(ids...)
	return puo
}

// AddEvents adds the "events" edges to the Event entity.
func (puo *PlaceUpdateOne) AddEvents(e ...*Event) *PlaceUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEventIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (puo *PlaceUpdateOne) AddAmenityIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddAmenityIDs(ids...)
	return puo
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (puo *PlaceUpdateOne) AddAmenities(a ...*Amenity) *PlaceUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAmenityIDs(ids...)
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (puo *PlaceUpdateOne) AddMenuIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddMenuIDs(ids...)
	return puo
}

// AddMenus adds the "menus" edges to the Menu entity.
func (puo *PlaceUpdateOne) AddMenus(m ...*Menu) *PlaceUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMenuIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (puo *PlaceUpdateOne) AddRoomIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddRoomIDs(ids...)
	return puo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (puo *PlaceUpdateOne) AddRooms(r ...*Room) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRoomIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (puo *PlaceUpdateOne) AddReservationIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddReservationIDs(ids...)
	return puo
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (puo *PlaceUpdateOne) AddReservations(r ...*Reservation) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReservationIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (puo *PlaceUpdateOne) AddBookingIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.AddBookingIDs(ids...)
	return puo
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (puo *PlaceUpdateOne) AddBookings(b ...*Booking) *PlaceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBookingIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (puo *PlaceUpdateOne) Mutation() *PlaceMutation {
	return puo.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (puo *PlaceUpdateOne) ClearBusiness() *PlaceUpdateOne {
	puo.mutation.ClearBusiness()
	return puo
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (puo *PlaceUpdateOne) ClearReviews() *PlaceUpdateOne {
	puo.mutation.ClearReviews()
	return puo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (puo *PlaceUpdateOne) RemoveReviewIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveReviewIDs(ids...)
	return puo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (puo *PlaceUpdateOne) RemoveReviews(r ...*Review) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReviewIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (puo *PlaceUpdateOne) ClearEvents() *PlaceUpdateOne {
	puo.mutation.ClearEvents()
	return puo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (puo *PlaceUpdateOne) RemoveEventIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveEventIDs(ids...)
	return puo
}

// RemoveEvents removes "events" edges to Event entities.
func (puo *PlaceUpdateOne) RemoveEvents(e ...*Event) *PlaceUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEventIDs(ids...)
}

// ClearAmenities clears all "amenities" edges to the Amenity entity.
func (puo *PlaceUpdateOne) ClearAmenities() *PlaceUpdateOne {
	puo.mutation.ClearAmenities()
	return puo
}

// RemoveAmenityIDs removes the "amenities" edge to Amenity entities by IDs.
func (puo *PlaceUpdateOne) RemoveAmenityIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveAmenityIDs(ids...)
	return puo
}

// RemoveAmenities removes "amenities" edges to Amenity entities.
func (puo *PlaceUpdateOne) RemoveAmenities(a ...*Amenity) *PlaceUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAmenityIDs(ids...)
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (puo *PlaceUpdateOne) ClearMenus() *PlaceUpdateOne {
	puo.mutation.ClearMenus()
	return puo
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (puo *PlaceUpdateOne) RemoveMenuIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveMenuIDs(ids...)
	return puo
}

// RemoveMenus removes "menus" edges to Menu entities.
func (puo *PlaceUpdateOne) RemoveMenus(m ...*Menu) *PlaceUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMenuIDs(ids...)
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (puo *PlaceUpdateOne) ClearRooms() *PlaceUpdateOne {
	puo.mutation.ClearRooms()
	return puo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (puo *PlaceUpdateOne) RemoveRoomIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveRoomIDs(ids...)
	return puo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (puo *PlaceUpdateOne) RemoveRooms(r ...*Room) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRoomIDs(ids...)
}

// ClearReservations clears all "reservations" edges to the Reservation entity.
func (puo *PlaceUpdateOne) ClearReservations() *PlaceUpdateOne {
	puo.mutation.ClearReservations()
	return puo
}

// RemoveReservationIDs removes the "reservations" edge to Reservation entities by IDs.
func (puo *PlaceUpdateOne) RemoveReservationIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveReservationIDs(ids...)
	return puo
}

// RemoveReservations removes "reservations" edges to Reservation entities.
func (puo *PlaceUpdateOne) RemoveReservations(r ...*Reservation) *PlaceUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReservationIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (puo *PlaceUpdateOne) ClearBookings() *PlaceUpdateOne {
	puo.mutation.ClearBookings()
	return puo
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (puo *PlaceUpdateOne) RemoveBookingIDs(ids ...string) *PlaceUpdateOne {
	puo.mutation.RemoveBookingIDs(ids...)
	return puo
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (puo *PlaceUpdateOne) RemoveBookings(b ...*Booking) *PlaceUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBookingIDs(ids...)
}

// Where appends a list predicates to the PlaceUpdate builder.
func (puo *PlaceUpdateOne) Where(ps ...predicate.Place) *PlaceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlaceUpdateOne) Select(field string, fields ...string) *PlaceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Place entity.
func (puo *PlaceUpdateOne) Save(ctx context.Context) (*Place, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaceUpdateOne) SaveX(ctx context.Context) *Place {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlaceUpdateOne) sqlSave(ctx context.Context) (_node *Place, err error) {
	_spec := sqlgraph.NewUpdateSpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Place.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, place.FieldID)
		for _, f := range fields {
			if !place.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != place.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(place.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(place.FieldType, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(place.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(place.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Location(); ok {
		_spec.SetField(place.FieldLocation, field.TypeString, value)
	}
	if value, ok := puo.mutation.Images(); ok {
		_spec.SetField(place.FieldImages, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, place.FieldImages, value)
		})
	}
	if puo.mutation.ImagesCleared() {
		_spec.ClearField(place.FieldImages, field.TypeJSON)
	}
	if value, ok := puo.mutation.Availability(); ok {
		_spec.SetField(place.FieldAvailability, field.TypeJSON, value)
	}
	if puo.mutation.AvailabilityCleared() {
		_spec.ClearField(place.FieldAvailability, field.TypeJSON)
	}
	if value, ok := puo.mutation.SpecialOffers(); ok {
		_spec.SetField(place.FieldSpecialOffers, field.TypeString, value)
	}
	if puo.mutation.SpecialOffersCleared() {
		_spec.ClearField(place.FieldSpecialOffers, field.TypeString)
	}
	if value, ok := puo.mutation.SustainabilityScore(); ok {
		_spec.SetField(place.FieldSustainabilityScore, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedSustainabilityScore(); ok {
		_spec.AddField(place.FieldSustainabilityScore, field.TypeFloat64, value)
	}
	if puo.mutation.SustainabilityScoreCleared() {
		_spec.ClearField(place.FieldSustainabilityScore, field.TypeFloat64)
	}
	if puo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   place.BusinessTable,
			Columns: []string{place.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !puo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReviewsTable,
			Columns: []string{place.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !puo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.EventsTable,
			Columns: []string{place.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAmenitiesIDs(); len(nodes) > 0 && !puo.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   place.AmenitiesTable,
			Columns: place.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMenusIDs(); len(nodes) > 0 && !puo.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.MenusTable,
			Columns: []string{place.MenusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !puo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.RoomsTable,
			Columns: []string{place.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReservationsIDs(); len(nodes) > 0 && !puo.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.ReservationsTable,
			Columns: []string{place.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !puo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.BookingsTable,
			Columns: []string{place.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Place{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

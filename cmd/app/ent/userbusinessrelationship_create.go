// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/businessaccount"
	"placio-app/ent/user"
	"placio-app/ent/userbusinessrelationship"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBusinessRelationshipCreate is the builder for creating a UserBusinessRelationship entity.
type UserBusinessRelationshipCreate struct {
	config
	mutation *UserBusinessRelationshipMutation
	hooks    []Hook
}

// SetID sets the "ID" field.
func (ubrc *UserBusinessRelationshipCreate) SetID(s string) *UserBusinessRelationshipCreate {
	ubrc.mutation.SetID(s)
	return ubrc
}

// SetUserID sets the "UserID" field.
func (ubrc *UserBusinessRelationshipCreate) SetUserID(s string) *UserBusinessRelationshipCreate {
	ubrc.mutation.SetUserID(s)
	return ubrc
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (ubrc *UserBusinessRelationshipCreate) SetBusinessAccountID(s string) *UserBusinessRelationshipCreate {
	ubrc.mutation.SetBusinessAccountID(s)
	return ubrc
}

// SetRole sets the "Role" field.
func (ubrc *UserBusinessRelationshipCreate) SetRole(s string) *UserBusinessRelationshipCreate {
	ubrc.mutation.SetRole(s)
	return ubrc
}

// SetCreatedAt sets the "CreatedAt" field.
func (ubrc *UserBusinessRelationshipCreate) SetCreatedAt(t time.Time) *UserBusinessRelationshipCreate {
	ubrc.mutation.SetCreatedAt(t)
	return ubrc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ubrc *UserBusinessRelationshipCreate) SetUpdatedAt(t time.Time) *UserBusinessRelationshipCreate {
	ubrc.mutation.SetUpdatedAt(t)
	return ubrc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ubrc *UserBusinessRelationshipCreate) SetUserID(id int) *UserBusinessRelationshipCreate {
	ubrc.mutation.SetUserID(id)
	return ubrc
}

// SetUser sets the "user" edge to the User entity.
func (ubrc *UserBusinessRelationshipCreate) SetUser(u *User) *UserBusinessRelationshipCreate {
	return ubrc.SetUserID(u.ID)
}

// SetBusinessAccountID sets the "business_account" edge to the BusinessAccount entity by ID.
func (ubrc *UserBusinessRelationshipCreate) SetBusinessAccountID(id int) *UserBusinessRelationshipCreate {
	ubrc.mutation.SetBusinessAccountID(id)
	return ubrc
}

// SetBusinessAccount sets the "business_account" edge to the BusinessAccount entity.
func (ubrc *UserBusinessRelationshipCreate) SetBusinessAccount(b *BusinessAccount) *UserBusinessRelationshipCreate {
	return ubrc.SetBusinessAccountID(b.ID)
}

// Mutation returns the UserBusinessRelationshipMutation object of the builder.
func (ubrc *UserBusinessRelationshipCreate) Mutation() *UserBusinessRelationshipMutation {
	return ubrc.mutation
}

// Save creates the UserBusinessRelationship in the database.
func (ubrc *UserBusinessRelationshipCreate) Save(ctx context.Context) (*UserBusinessRelationship, error) {
	return withHooks(ctx, ubrc.sqlSave, ubrc.mutation, ubrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ubrc *UserBusinessRelationshipCreate) SaveX(ctx context.Context) *UserBusinessRelationship {
	v, err := ubrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubrc *UserBusinessRelationshipCreate) Exec(ctx context.Context) error {
	_, err := ubrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubrc *UserBusinessRelationshipCreate) ExecX(ctx context.Context) {
	if err := ubrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubrc *UserBusinessRelationshipCreate) check() error {
	if _, ok := ubrc.mutation.ID(); !ok {
		return &ValidationError{Name: "ID", err: errors.New(`ent: missing required field "UserBusinessRelationship.ID"`)}
	}
	if _, ok := ubrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "UserID", err: errors.New(`ent: missing required field "UserBusinessRelationship.UserID"`)}
	}
	if _, ok := ubrc.mutation.BusinessAccountID(); !ok {
		return &ValidationError{Name: "BusinessAccountID", err: errors.New(`ent: missing required field "UserBusinessRelationship.BusinessAccountID"`)}
	}
	if _, ok := ubrc.mutation.Role(); !ok {
		return &ValidationError{Name: "Role", err: errors.New(`ent: missing required field "UserBusinessRelationship.Role"`)}
	}
	if _, ok := ubrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "UserBusinessRelationship.CreatedAt"`)}
	}
	if _, ok := ubrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`ent: missing required field "UserBusinessRelationship.UpdatedAt"`)}
	}
	if _, ok := ubrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserBusinessRelationship.user"`)}
	}
	if _, ok := ubrc.mutation.BusinessAccountID(); !ok {
		return &ValidationError{Name: "business_account", err: errors.New(`ent: missing required edge "UserBusinessRelationship.business_account"`)}
	}
	return nil
}

func (ubrc *UserBusinessRelationshipCreate) sqlSave(ctx context.Context) (*UserBusinessRelationship, error) {
	if err := ubrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ubrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ubrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ubrc.mutation.id = &_node.ID
	ubrc.mutation.done = true
	return _node, nil
}

func (ubrc *UserBusinessRelationshipCreate) createSpec() (*UserBusinessRelationship, *sqlgraph.CreateSpec) {
	var (
		_node = &UserBusinessRelationship{config: ubrc.config}
		_spec = sqlgraph.NewCreateSpec(userbusinessrelationship.Table, sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt))
	)
	if value, ok := ubrc.mutation.ID(); ok {
		_spec.SetField(userbusinessrelationship.FieldID, field.TypeString, value)
		_node.ID = value
	}
	if value, ok := ubrc.mutation.UserID(); ok {
		_spec.SetField(userbusinessrelationship.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := ubrc.mutation.BusinessAccountID(); ok {
		_spec.SetField(userbusinessrelationship.FieldBusinessAccountID, field.TypeString, value)
		_node.BusinessAccountID = value
	}
	if value, ok := ubrc.mutation.Role(); ok {
		_spec.SetField(userbusinessrelationship.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := ubrc.mutation.CreatedAt(); ok {
		_spec.SetField(userbusinessrelationship.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ubrc.mutation.UpdatedAt(); ok {
		_spec.SetField(userbusinessrelationship.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ubrc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.UserTable,
			Columns: []string{userbusinessrelationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_relationships = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ubrc.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.BusinessAccountTable,
			Columns: []string{userbusinessrelationship.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_account_relationships = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserBusinessRelationshipCreateBulk is the builder for creating many UserBusinessRelationship entities in bulk.
type UserBusinessRelationshipCreateBulk struct {
	config
	builders []*UserBusinessRelationshipCreate
}

// Save creates the UserBusinessRelationship entities in the database.
func (ubrcb *UserBusinessRelationshipCreateBulk) Save(ctx context.Context) ([]*UserBusinessRelationship, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ubrcb.builders))
	nodes := make([]*UserBusinessRelationship, len(ubrcb.builders))
	mutators := make([]Mutator, len(ubrcb.builders))
	for i := range ubrcb.builders {
		func(i int, root context.Context) {
			builder := ubrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserBusinessRelationshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ubrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ubrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ubrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ubrcb *UserBusinessRelationshipCreateBulk) SaveX(ctx context.Context) []*UserBusinessRelationship {
	v, err := ubrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubrcb *UserBusinessRelationshipCreateBulk) Exec(ctx context.Context) error {
	_, err := ubrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubrcb *UserBusinessRelationshipCreateBulk) ExecX(ctx context.Context) {
	if err := ubrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

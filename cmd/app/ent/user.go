// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"placio-app/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auth0/go-auth0/management"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Auth0ID holds the value of the "auth0_id" field.
	Auth0ID string `json:"auth0_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// GivenName holds the value of the "given_name" field.
	GivenName string `json:"given_name,omitempty"`
	// FamilyName holds the value of the "family_name" field.
	FamilyName string `json:"family_name,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// Auth0Data holds the value of the "auth0_data" field.
	Auth0Data *management.User `json:"auth0_data,omitempty"`
	// AppSettings holds the value of the "app_settings" field.
	AppSettings map[string]interface{} `json:"app_settings,omitempty"`
	// UserSettings holds the value of the "user_settings" field.
	UserSettings map[string]interface{} `json:"user_settings,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// UserBusinesses holds the value of the userBusinesses edge.
	UserBusinesses []*UserBusiness `json:"userBusinesses,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// Likes holds the value of the likes edge.
	Likes []*Like `json:"likes,omitempty"`
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// FollowedUsers holds the value of the followedUsers edge.
	FollowedUsers []*UserFollowUser `json:"followedUsers,omitempty"`
	// FollowerUsers holds the value of the followerUsers edge.
	FollowerUsers []*UserFollowUser `json:"followerUsers,omitempty"`
	// FollowedBusinesses holds the value of the followedBusinesses edge.
	FollowedBusinesses []*UserFollowBusiness `json:"followedBusinesses,omitempty"`
	// FollowerBusinesses holds the value of the followerBusinesses edge.
	FollowerBusinesses []*BusinessFollowUser `json:"followerBusinesses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// UserBusinessesOrErr returns the UserBusinesses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserBusinessesOrErr() ([]*UserBusiness, error) {
	if e.loadedTypes[0] {
		return e.UserBusinesses, nil
	}
	return nil, &NotLoadedError{edge: "userBusinesses"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikesOrErr() ([]*Like, error) {
	if e.loadedTypes[2] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[3] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// FollowedUsersOrErr returns the FollowedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowedUsersOrErr() ([]*UserFollowUser, error) {
	if e.loadedTypes[4] {
		return e.FollowedUsers, nil
	}
	return nil, &NotLoadedError{edge: "followedUsers"}
}

// FollowerUsersOrErr returns the FollowerUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowerUsersOrErr() ([]*UserFollowUser, error) {
	if e.loadedTypes[5] {
		return e.FollowerUsers, nil
	}
	return nil, &NotLoadedError{edge: "followerUsers"}
}

// FollowedBusinessesOrErr returns the FollowedBusinesses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowedBusinessesOrErr() ([]*UserFollowBusiness, error) {
	if e.loadedTypes[6] {
		return e.FollowedBusinesses, nil
	}
	return nil, &NotLoadedError{edge: "followedBusinesses"}
}

// FollowerBusinessesOrErr returns the FollowerBusinesses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowerBusinessesOrErr() ([]*BusinessFollowUser, error) {
	if e.loadedTypes[7] {
		return e.FollowerBusinesses, nil
	}
	return nil, &NotLoadedError{edge: "followerBusinesses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAuth0Data, user.FieldAppSettings, user.FieldUserSettings:
			values[i] = new([]byte)
		case user.FieldID, user.FieldAuth0ID, user.FieldName, user.FieldGivenName, user.FieldFamilyName, user.FieldNickname, user.FieldPicture:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldAuth0ID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth0_id", values[i])
			} else if value.Valid {
				u.Auth0ID = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldGivenName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field given_name", values[i])
			} else if value.Valid {
				u.GivenName = value.String
			}
		case user.FieldFamilyName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field family_name", values[i])
			} else if value.Valid {
				u.FamilyName = value.String
			}
		case user.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				u.Nickname = value.String
			}
		case user.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				u.Picture = value.String
			}
		case user.FieldAuth0Data:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field auth0_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.Auth0Data); err != nil {
					return fmt.Errorf("unmarshal field auth0_data: %w", err)
				}
			}
		case user.FieldAppSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field app_settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.AppSettings); err != nil {
					return fmt.Errorf("unmarshal field app_settings: %w", err)
				}
			}
		case user.FieldUserSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field user_settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.UserSettings); err != nil {
					return fmt.Errorf("unmarshal field user_settings: %w", err)
				}
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryUserBusinesses queries the "userBusinesses" edge of the User entity.
func (u *User) QueryUserBusinesses() *UserBusinessQuery {
	return NewUserClient(u.config).QueryUserBusinesses(u)
}

// QueryComments queries the "comments" edge of the User entity.
func (u *User) QueryComments() *CommentQuery {
	return NewUserClient(u.config).QueryComments(u)
}

// QueryLikes queries the "likes" edge of the User entity.
func (u *User) QueryLikes() *LikeQuery {
	return NewUserClient(u.config).QueryLikes(u)
}

// QueryPosts queries the "posts" edge of the User entity.
func (u *User) QueryPosts() *PostQuery {
	return NewUserClient(u.config).QueryPosts(u)
}

// QueryFollowedUsers queries the "followedUsers" edge of the User entity.
func (u *User) QueryFollowedUsers() *UserFollowUserQuery {
	return NewUserClient(u.config).QueryFollowedUsers(u)
}

// QueryFollowerUsers queries the "followerUsers" edge of the User entity.
func (u *User) QueryFollowerUsers() *UserFollowUserQuery {
	return NewUserClient(u.config).QueryFollowerUsers(u)
}

// QueryFollowedBusinesses queries the "followedBusinesses" edge of the User entity.
func (u *User) QueryFollowedBusinesses() *UserFollowBusinessQuery {
	return NewUserClient(u.config).QueryFollowedBusinesses(u)
}

// QueryFollowerBusinesses queries the "followerBusinesses" edge of the User entity.
func (u *User) QueryFollowerBusinesses() *BusinessFollowUserQuery {
	return NewUserClient(u.config).QueryFollowerBusinesses(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("auth0_id=")
	builder.WriteString(u.Auth0ID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("given_name=")
	builder.WriteString(u.GivenName)
	builder.WriteString(", ")
	builder.WriteString("family_name=")
	builder.WriteString(u.FamilyName)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(u.Nickname)
	builder.WriteString(", ")
	builder.WriteString("picture=")
	builder.WriteString(u.Picture)
	builder.WriteString(", ")
	builder.WriteString("auth0_data=")
	builder.WriteString(fmt.Sprintf("%v", u.Auth0Data))
	builder.WriteString(", ")
	builder.WriteString("app_settings=")
	builder.WriteString(fmt.Sprintf("%v", u.AppSettings))
	builder.WriteString(", ")
	builder.WriteString("user_settings=")
	builder.WriteString(fmt.Sprintf("%v", u.UserSettings))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

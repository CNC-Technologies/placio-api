// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"placio-app/ent/accountsettings"
	"placio-app/ent/businessaccount"
	"placio-app/ent/invitation"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/userbusinessrelationship"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessAccountQuery is the builder for querying BusinessAccount entities.
type BusinessAccountQuery struct {
	config
	ctx                 *QueryContext
	order               []businessaccount.OrderOption
	inters              []Interceptor
	predicates          []predicate.BusinessAccount
	withPosts           *PostQuery
	withRelationships   *UserBusinessRelationshipQuery
	withAccountSettings *AccountSettingsQuery
	withInvitations     *InvitationQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BusinessAccountQuery builder.
func (baq *BusinessAccountQuery) Where(ps ...predicate.BusinessAccount) *BusinessAccountQuery {
	baq.predicates = append(baq.predicates, ps...)
	return baq
}

// Limit the number of records to be returned by this query.
func (baq *BusinessAccountQuery) Limit(limit int) *BusinessAccountQuery {
	baq.ctx.Limit = &limit
	return baq
}

// Offset to start from.
func (baq *BusinessAccountQuery) Offset(offset int) *BusinessAccountQuery {
	baq.ctx.Offset = &offset
	return baq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (baq *BusinessAccountQuery) Unique(unique bool) *BusinessAccountQuery {
	baq.ctx.Unique = &unique
	return baq
}

// Order specifies how the records should be ordered.
func (baq *BusinessAccountQuery) Order(o ...businessaccount.OrderOption) *BusinessAccountQuery {
	baq.order = append(baq.order, o...)
	return baq
}

// QueryPosts chains the current query on the "posts" edge.
func (baq *BusinessAccountQuery) QueryPosts() *PostQuery {
	query := (&PostClient{config: baq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(businessaccount.Table, businessaccount.FieldID, selector),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, businessaccount.PostsTable, businessaccount.PostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelationships chains the current query on the "relationships" edge.
func (baq *BusinessAccountQuery) QueryRelationships() *UserBusinessRelationshipQuery {
	query := (&UserBusinessRelationshipClient{config: baq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(businessaccount.Table, businessaccount.FieldID, selector),
			sqlgraph.To(userbusinessrelationship.Table, userbusinessrelationship.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, businessaccount.RelationshipsTable, businessaccount.RelationshipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAccountSettings chains the current query on the "account_settings" edge.
func (baq *BusinessAccountQuery) QueryAccountSettings() *AccountSettingsQuery {
	query := (&AccountSettingsClient{config: baq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(businessaccount.Table, businessaccount.FieldID, selector),
			sqlgraph.To(accountsettings.Table, accountsettings.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, businessaccount.AccountSettingsTable, businessaccount.AccountSettingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitations chains the current query on the "invitations" edge.
func (baq *BusinessAccountQuery) QueryInvitations() *InvitationQuery {
	query := (&InvitationClient{config: baq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := baq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := baq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(businessaccount.Table, businessaccount.FieldID, selector),
			sqlgraph.To(invitation.Table, invitation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, businessaccount.InvitationsTable, businessaccount.InvitationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(baq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BusinessAccount entity from the query.
// Returns a *NotFoundError when no BusinessAccount was found.
func (baq *BusinessAccountQuery) First(ctx context.Context) (*BusinessAccount, error) {
	nodes, err := baq.Limit(1).All(setContextOp(ctx, baq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{businessaccount.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (baq *BusinessAccountQuery) FirstX(ctx context.Context) *BusinessAccount {
	node, err := baq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BusinessAccount ID from the query.
// Returns a *NotFoundError when no BusinessAccount ID was found.
func (baq *BusinessAccountQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = baq.Limit(1).IDs(setContextOp(ctx, baq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{businessaccount.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (baq *BusinessAccountQuery) FirstIDX(ctx context.Context) int {
	id, err := baq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BusinessAccount entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BusinessAccount entity is found.
// Returns a *NotFoundError when no BusinessAccount entities are found.
func (baq *BusinessAccountQuery) Only(ctx context.Context) (*BusinessAccount, error) {
	nodes, err := baq.Limit(2).All(setContextOp(ctx, baq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{businessaccount.Label}
	default:
		return nil, &NotSingularError{businessaccount.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (baq *BusinessAccountQuery) OnlyX(ctx context.Context) *BusinessAccount {
	node, err := baq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BusinessAccount ID in the query.
// Returns a *NotSingularError when more than one BusinessAccount ID is found.
// Returns a *NotFoundError when no entities are found.
func (baq *BusinessAccountQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = baq.Limit(2).IDs(setContextOp(ctx, baq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{businessaccount.Label}
	default:
		err = &NotSingularError{businessaccount.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (baq *BusinessAccountQuery) OnlyIDX(ctx context.Context) int {
	id, err := baq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BusinessAccounts.
func (baq *BusinessAccountQuery) All(ctx context.Context) ([]*BusinessAccount, error) {
	ctx = setContextOp(ctx, baq.ctx, "All")
	if err := baq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BusinessAccount, *BusinessAccountQuery]()
	return withInterceptors[[]*BusinessAccount](ctx, baq, qr, baq.inters)
}

// AllX is like All, but panics if an error occurs.
func (baq *BusinessAccountQuery) AllX(ctx context.Context) []*BusinessAccount {
	nodes, err := baq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BusinessAccount IDs.
func (baq *BusinessAccountQuery) IDs(ctx context.Context) (ids []int, err error) {
	if baq.ctx.Unique == nil && baq.path != nil {
		baq.Unique(true)
	}
	ctx = setContextOp(ctx, baq.ctx, "IDs")
	if err = baq.Select(businessaccount.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (baq *BusinessAccountQuery) IDsX(ctx context.Context) []int {
	ids, err := baq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (baq *BusinessAccountQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, baq.ctx, "Count")
	if err := baq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, baq, querierCount[*BusinessAccountQuery](), baq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (baq *BusinessAccountQuery) CountX(ctx context.Context) int {
	count, err := baq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (baq *BusinessAccountQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, baq.ctx, "Exist")
	switch _, err := baq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (baq *BusinessAccountQuery) ExistX(ctx context.Context) bool {
	exist, err := baq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BusinessAccountQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (baq *BusinessAccountQuery) Clone() *BusinessAccountQuery {
	if baq == nil {
		return nil
	}
	return &BusinessAccountQuery{
		config:              baq.config,
		ctx:                 baq.ctx.Clone(),
		order:               append([]businessaccount.OrderOption{}, baq.order...),
		inters:              append([]Interceptor{}, baq.inters...),
		predicates:          append([]predicate.BusinessAccount{}, baq.predicates...),
		withPosts:           baq.withPosts.Clone(),
		withRelationships:   baq.withRelationships.Clone(),
		withAccountSettings: baq.withAccountSettings.Clone(),
		withInvitations:     baq.withInvitations.Clone(),
		// clone intermediate query.
		sql:  baq.sql.Clone(),
		path: baq.path,
	}
}

// WithPosts tells the query-builder to eager-load the nodes that are connected to
// the "posts" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BusinessAccountQuery) WithPosts(opts ...func(*PostQuery)) *BusinessAccountQuery {
	query := (&PostClient{config: baq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	baq.withPosts = query
	return baq
}

// WithRelationships tells the query-builder to eager-load the nodes that are connected to
// the "relationships" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BusinessAccountQuery) WithRelationships(opts ...func(*UserBusinessRelationshipQuery)) *BusinessAccountQuery {
	query := (&UserBusinessRelationshipClient{config: baq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	baq.withRelationships = query
	return baq
}

// WithAccountSettings tells the query-builder to eager-load the nodes that are connected to
// the "account_settings" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BusinessAccountQuery) WithAccountSettings(opts ...func(*AccountSettingsQuery)) *BusinessAccountQuery {
	query := (&AccountSettingsClient{config: baq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	baq.withAccountSettings = query
	return baq
}

// WithInvitations tells the query-builder to eager-load the nodes that are connected to
// the "invitations" edge. The optional arguments are used to configure the query builder of the edge.
func (baq *BusinessAccountQuery) WithInvitations(opts ...func(*InvitationQuery)) *BusinessAccountQuery {
	query := (&InvitationClient{config: baq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	baq.withInvitations = query
	return baq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ID string `json:"ID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BusinessAccount.Query().
//		GroupBy(businessaccount.FieldID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (baq *BusinessAccountQuery) GroupBy(field string, fields ...string) *BusinessAccountGroupBy {
	baq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BusinessAccountGroupBy{build: baq}
	grbuild.flds = &baq.ctx.Fields
	grbuild.label = businessaccount.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ID string `json:"ID,omitempty"`
//	}
//
//	client.BusinessAccount.Query().
//		Select(businessaccount.FieldID).
//		Scan(ctx, &v)
func (baq *BusinessAccountQuery) Select(fields ...string) *BusinessAccountSelect {
	baq.ctx.Fields = append(baq.ctx.Fields, fields...)
	sbuild := &BusinessAccountSelect{BusinessAccountQuery: baq}
	sbuild.label = businessaccount.Label
	sbuild.flds, sbuild.scan = &baq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BusinessAccountSelect configured with the given aggregations.
func (baq *BusinessAccountQuery) Aggregate(fns ...AggregateFunc) *BusinessAccountSelect {
	return baq.Select().Aggregate(fns...)
}

func (baq *BusinessAccountQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range baq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, baq); err != nil {
				return err
			}
		}
	}
	for _, f := range baq.ctx.Fields {
		if !businessaccount.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if baq.path != nil {
		prev, err := baq.path(ctx)
		if err != nil {
			return err
		}
		baq.sql = prev
	}
	return nil
}

func (baq *BusinessAccountQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BusinessAccount, error) {
	var (
		nodes       = []*BusinessAccount{}
		_spec       = baq.querySpec()
		loadedTypes = [4]bool{
			baq.withPosts != nil,
			baq.withRelationships != nil,
			baq.withAccountSettings != nil,
			baq.withInvitations != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BusinessAccount).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BusinessAccount{config: baq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, baq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := baq.withPosts; query != nil {
		if err := baq.loadPosts(ctx, query, nodes,
			func(n *BusinessAccount) { n.Edges.Posts = []*Post{} },
			func(n *BusinessAccount, e *Post) { n.Edges.Posts = append(n.Edges.Posts, e) }); err != nil {
			return nil, err
		}
	}
	if query := baq.withRelationships; query != nil {
		if err := baq.loadRelationships(ctx, query, nodes,
			func(n *BusinessAccount) { n.Edges.Relationships = []*UserBusinessRelationship{} },
			func(n *BusinessAccount, e *UserBusinessRelationship) {
				n.Edges.Relationships = append(n.Edges.Relationships, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := baq.withAccountSettings; query != nil {
		if err := baq.loadAccountSettings(ctx, query, nodes,
			func(n *BusinessAccount) { n.Edges.AccountSettings = []*AccountSettings{} },
			func(n *BusinessAccount, e *AccountSettings) {
				n.Edges.AccountSettings = append(n.Edges.AccountSettings, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := baq.withInvitations; query != nil {
		if err := baq.loadInvitations(ctx, query, nodes,
			func(n *BusinessAccount) { n.Edges.Invitations = []*Invitation{} },
			func(n *BusinessAccount, e *Invitation) { n.Edges.Invitations = append(n.Edges.Invitations, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (baq *BusinessAccountQuery) loadPosts(ctx context.Context, query *PostQuery, nodes []*BusinessAccount, init func(*BusinessAccount), assign func(*BusinessAccount, *Post)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*BusinessAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Post(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(businessaccount.PostsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_account_posts
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_account_posts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_account_posts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (baq *BusinessAccountQuery) loadRelationships(ctx context.Context, query *UserBusinessRelationshipQuery, nodes []*BusinessAccount, init func(*BusinessAccount), assign func(*BusinessAccount, *UserBusinessRelationship)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*BusinessAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserBusinessRelationship(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(businessaccount.RelationshipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_account_relationships
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_account_relationships" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_account_relationships" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (baq *BusinessAccountQuery) loadAccountSettings(ctx context.Context, query *AccountSettingsQuery, nodes []*BusinessAccount, init func(*BusinessAccount), assign func(*BusinessAccount, *AccountSettings)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*BusinessAccount)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AccountSettings(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(businessaccount.AccountSettingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_account_account_settings
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_account_account_settings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_account_account_settings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (baq *BusinessAccountQuery) loadInvitations(ctx context.Context, query *InvitationQuery, nodes []*BusinessAccount, init func(*BusinessAccount), assign func(*BusinessAccount, *Invitation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*BusinessAccount)
	nids := make(map[int]map[*BusinessAccount]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(businessaccount.InvitationsTable)
		s.Join(joinT).On(s.C(invitation.FieldID), joinT.C(businessaccount.InvitationsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(businessaccount.InvitationsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(businessaccount.InvitationsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*BusinessAccount]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Invitation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "invitations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (baq *BusinessAccountQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := baq.querySpec()
	_spec.Node.Columns = baq.ctx.Fields
	if len(baq.ctx.Fields) > 0 {
		_spec.Unique = baq.ctx.Unique != nil && *baq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, baq.driver, _spec)
}

func (baq *BusinessAccountQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(businessaccount.Table, businessaccount.Columns, sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt))
	_spec.From = baq.sql
	if unique := baq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if baq.path != nil {
		_spec.Unique = true
	}
	if fields := baq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessaccount.FieldID)
		for i := range fields {
			if fields[i] != businessaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := baq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := baq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := baq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := baq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (baq *BusinessAccountQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(baq.driver.Dialect())
	t1 := builder.Table(businessaccount.Table)
	columns := baq.ctx.Fields
	if len(columns) == 0 {
		columns = businessaccount.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if baq.sql != nil {
		selector = baq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if baq.ctx.Unique != nil && *baq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range baq.predicates {
		p(selector)
	}
	for _, p := range baq.order {
		p(selector)
	}
	if offset := baq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := baq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BusinessAccountGroupBy is the group-by builder for BusinessAccount entities.
type BusinessAccountGroupBy struct {
	selector
	build *BusinessAccountQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bagb *BusinessAccountGroupBy) Aggregate(fns ...AggregateFunc) *BusinessAccountGroupBy {
	bagb.fns = append(bagb.fns, fns...)
	return bagb
}

// Scan applies the selector query and scans the result into the given value.
func (bagb *BusinessAccountGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bagb.build.ctx, "GroupBy")
	if err := bagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessAccountQuery, *BusinessAccountGroupBy](ctx, bagb.build, bagb, bagb.build.inters, v)
}

func (bagb *BusinessAccountGroupBy) sqlScan(ctx context.Context, root *BusinessAccountQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bagb.fns))
	for _, fn := range bagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bagb.flds)+len(bagb.fns))
		for _, f := range *bagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BusinessAccountSelect is the builder for selecting fields of BusinessAccount entities.
type BusinessAccountSelect struct {
	*BusinessAccountQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bas *BusinessAccountSelect) Aggregate(fns ...AggregateFunc) *BusinessAccountSelect {
	bas.fns = append(bas.fns, fns...)
	return bas
}

// Scan applies the selector query and scans the result into the given value.
func (bas *BusinessAccountSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bas.ctx, "Select")
	if err := bas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessAccountQuery, *BusinessAccountSelect](ctx, bas.BusinessAccountQuery, bas, bas.inters, v)
}

func (bas *BusinessAccountSelect) sqlScan(ctx context.Context, root *BusinessAccountQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bas.fns))
	for _, fn := range bas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

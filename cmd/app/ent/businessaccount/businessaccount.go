// Code generated by ent, DO NOT EDIT.

package businessaccount

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the businessaccount type in the database.
	Label = "business_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeRelationships holds the string denoting the relationships edge name in mutations.
	EdgeRelationships = "relationships"
	// EdgeAccountSettings holds the string denoting the account_settings edge name in mutations.
	EdgeAccountSettings = "account_settings"
	// EdgeInvitations holds the string denoting the invitations edge name in mutations.
	EdgeInvitations = "invitations"
	// Table holds the table name of the businessaccount in the database.
	Table = "business_accounts"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "business_account_posts"
	// RelationshipsTable is the table that holds the relationships relation/edge.
	RelationshipsTable = "user_business_relationships"
	// RelationshipsInverseTable is the table name for the UserBusinessRelationship entity.
	// It exists in this package in order to avoid circular dependency with the "userbusinessrelationship" package.
	RelationshipsInverseTable = "user_business_relationships"
	// RelationshipsColumn is the table column denoting the relationships relation/edge.
	RelationshipsColumn = "business_account_relationships"
	// AccountSettingsTable is the table that holds the account_settings relation/edge.
	AccountSettingsTable = "account_settings"
	// AccountSettingsInverseTable is the table name for the AccountSettings entity.
	// It exists in this package in order to avoid circular dependency with the "accountsettings" package.
	AccountSettingsInverseTable = "account_settings"
	// AccountSettingsColumn is the table column denoting the account_settings relation/edge.
	AccountSettingsColumn = "business_account_account_settings"
	// InvitationsTable is the table that holds the invitations relation/edge. The primary key declared below.
	InvitationsTable = "invitation_business_account"
	// InvitationsInverseTable is the table name for the Invitation entity.
	// It exists in this package in order to avoid circular dependency with the "invitation" package.
	InvitationsInverseTable = "invitations"
)

// Columns holds all SQL columns for businessaccount fields.
var Columns = []string{
	FieldID,
	FieldID,
	FieldName,
	FieldActive,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// InvitationsPrimaryKey and InvitationsColumn2 are the table columns denoting the
	// primary key for the invitations relation (M2M).
	InvitationsPrimaryKey = []string{"invitation_id", "business_account_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultActive holds the default value on creation for the "Active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the BusinessAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByID orders the results by the ID field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByActive orders the results by the Active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPostsCount orders the results by posts count.
func ByPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostsStep(), opts...)
	}
}

// ByPosts orders the results by posts terms.
func ByPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelationshipsCount orders the results by relationships count.
func ByRelationshipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelationshipsStep(), opts...)
	}
}

// ByRelationships orders the results by relationships terms.
func ByRelationships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelationshipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAccountSettingsCount orders the results by account_settings count.
func ByAccountSettingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccountSettingsStep(), opts...)
	}
}

// ByAccountSettings orders the results by account_settings terms.
func ByAccountSettings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccountSettingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvitationsCount orders the results by invitations count.
func ByInvitationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvitationsStep(), opts...)
	}
}

// ByInvitations orders the results by invitations terms.
func ByInvitations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvitationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
	)
}
func newRelationshipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelationshipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RelationshipsTable, RelationshipsColumn),
	)
}
func newAccountSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccountSettingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccountSettingsTable, AccountSettingsColumn),
	)
}
func newInvitationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvitationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InvitationsTable, InvitationsPrimaryKey...),
	)
}

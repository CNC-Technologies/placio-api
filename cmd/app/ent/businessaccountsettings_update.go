// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessaccountsettings"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BusinessAccountSettingsUpdate is the builder for updating BusinessAccountSettings entities.
type BusinessAccountSettingsUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessAccountSettingsMutation
}

// Where appends a list predicates to the BusinessAccountSettingsUpdate builder.
func (basu *BusinessAccountSettingsUpdate) Where(ps ...predicate.BusinessAccountSettings) *BusinessAccountSettingsUpdate {
	basu.mutation.Where(ps...)
	return basu
}

// SetBusinessAccountSettingsID sets the "BusinessAccountSettingsID" field.
func (basu *BusinessAccountSettingsUpdate) SetBusinessAccountSettingsID(s string) *BusinessAccountSettingsUpdate {
	basu.mutation.SetBusinessAccountSettingsID(s)
	return basu
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (basu *BusinessAccountSettingsUpdate) SetBusinessAccountID(s string) *BusinessAccountSettingsUpdate {
	basu.mutation.SetBusinessAccountID(s)
	return basu
}

// SetTwoFactorAuthentication sets the "TwoFactorAuthentication" field.
func (basu *BusinessAccountSettingsUpdate) SetTwoFactorAuthentication(b bool) *BusinessAccountSettingsUpdate {
	basu.mutation.SetTwoFactorAuthentication(b)
	return basu
}

// SetBlockedUsers sets the "BlockedUsers" field.
func (basu *BusinessAccountSettingsUpdate) SetBlockedUsers(s []string) *BusinessAccountSettingsUpdate {
	basu.mutation.SetBlockedUsers(s)
	return basu
}

// AppendBlockedUsers appends s to the "BlockedUsers" field.
func (basu *BusinessAccountSettingsUpdate) AppendBlockedUsers(s []string) *BusinessAccountSettingsUpdate {
	basu.mutation.AppendBlockedUsers(s)
	return basu
}

// SetMutedUsers sets the "MutedUsers" field.
func (basu *BusinessAccountSettingsUpdate) SetMutedUsers(s []string) *BusinessAccountSettingsUpdate {
	basu.mutation.SetMutedUsers(s)
	return basu
}

// AppendMutedUsers appends s to the "MutedUsers" field.
func (basu *BusinessAccountSettingsUpdate) AppendMutedUsers(s []string) *BusinessAccountSettingsUpdate {
	basu.mutation.AppendMutedUsers(s)
	return basu
}

// SetBusinessAccountID sets the "business_account" edge to the Business entity by ID.
func (basu *BusinessAccountSettingsUpdate) SetBusinessAccountID(id int) *BusinessAccountSettingsUpdate {
	basu.mutation.SetBusinessAccountID(id)
	return basu
}

// SetBusinessAccount sets the "business_account" edge to the Business entity.
func (basu *BusinessAccountSettingsUpdate) SetBusinessAccount(b *Business) *BusinessAccountSettingsUpdate {
	return basu.SetBusinessAccountID(b.ID)
}

// Mutation returns the BusinessAccountSettingsMutation object of the builder.
func (basu *BusinessAccountSettingsUpdate) Mutation() *BusinessAccountSettingsMutation {
	return basu.mutation
}

// ClearBusinessAccount clears the "business_account" edge to the Business entity.
func (basu *BusinessAccountSettingsUpdate) ClearBusinessAccount() *BusinessAccountSettingsUpdate {
	basu.mutation.ClearBusinessAccount()
	return basu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (basu *BusinessAccountSettingsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, basu.sqlSave, basu.mutation, basu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (basu *BusinessAccountSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := basu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (basu *BusinessAccountSettingsUpdate) Exec(ctx context.Context) error {
	_, err := basu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (basu *BusinessAccountSettingsUpdate) ExecX(ctx context.Context) {
	if err := basu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (basu *BusinessAccountSettingsUpdate) check() error {
	if _, ok := basu.mutation.BusinessAccountID(); basu.mutation.BusinessAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BusinessAccountSettings.business_account"`)
	}
	return nil
}

func (basu *BusinessAccountSettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := basu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(businessaccountsettings.Table, businessaccountsettings.Columns, sqlgraph.NewFieldSpec(businessaccountsettings.FieldID, field.TypeInt))
	if ps := basu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := basu.mutation.BusinessAccountSettingsID(); ok {
		_spec.SetField(businessaccountsettings.FieldBusinessAccountSettingsID, field.TypeString, value)
	}
	if value, ok := basu.mutation.BusinessAccountID(); ok {
		_spec.SetField(businessaccountsettings.FieldBusinessAccountID, field.TypeString, value)
	}
	if value, ok := basu.mutation.TwoFactorAuthentication(); ok {
		_spec.SetField(businessaccountsettings.FieldTwoFactorAuthentication, field.TypeBool, value)
	}
	if value, ok := basu.mutation.BlockedUsers(); ok {
		_spec.SetField(businessaccountsettings.FieldBlockedUsers, field.TypeJSON, value)
	}
	if value, ok := basu.mutation.AppendedBlockedUsers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, businessaccountsettings.FieldBlockedUsers, value)
		})
	}
	if value, ok := basu.mutation.MutedUsers(); ok {
		_spec.SetField(businessaccountsettings.FieldMutedUsers, field.TypeJSON, value)
	}
	if value, ok := basu.mutation.AppendedMutedUsers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, businessaccountsettings.FieldMutedUsers, value)
		})
	}
	if basu.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessaccountsettings.BusinessAccountTable,
			Columns: []string{businessaccountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := basu.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessaccountsettings.BusinessAccountTable,
			Columns: []string{businessaccountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, basu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessaccountsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	basu.mutation.done = true
	return n, nil
}

// BusinessAccountSettingsUpdateOne is the builder for updating a single BusinessAccountSettings entity.
type BusinessAccountSettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessAccountSettingsMutation
}

// SetBusinessAccountSettingsID sets the "BusinessAccountSettingsID" field.
func (basuo *BusinessAccountSettingsUpdateOne) SetBusinessAccountSettingsID(s string) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.SetBusinessAccountSettingsID(s)
	return basuo
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (basuo *BusinessAccountSettingsUpdateOne) SetBusinessAccountID(s string) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.SetBusinessAccountID(s)
	return basuo
}

// SetTwoFactorAuthentication sets the "TwoFactorAuthentication" field.
func (basuo *BusinessAccountSettingsUpdateOne) SetTwoFactorAuthentication(b bool) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.SetTwoFactorAuthentication(b)
	return basuo
}

// SetBlockedUsers sets the "BlockedUsers" field.
func (basuo *BusinessAccountSettingsUpdateOne) SetBlockedUsers(s []string) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.SetBlockedUsers(s)
	return basuo
}

// AppendBlockedUsers appends s to the "BlockedUsers" field.
func (basuo *BusinessAccountSettingsUpdateOne) AppendBlockedUsers(s []string) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.AppendBlockedUsers(s)
	return basuo
}

// SetMutedUsers sets the "MutedUsers" field.
func (basuo *BusinessAccountSettingsUpdateOne) SetMutedUsers(s []string) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.SetMutedUsers(s)
	return basuo
}

// AppendMutedUsers appends s to the "MutedUsers" field.
func (basuo *BusinessAccountSettingsUpdateOne) AppendMutedUsers(s []string) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.AppendMutedUsers(s)
	return basuo
}

// SetBusinessAccountID sets the "business_account" edge to the Business entity by ID.
func (basuo *BusinessAccountSettingsUpdateOne) SetBusinessAccountID(id int) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.SetBusinessAccountID(id)
	return basuo
}

// SetBusinessAccount sets the "business_account" edge to the Business entity.
func (basuo *BusinessAccountSettingsUpdateOne) SetBusinessAccount(b *Business) *BusinessAccountSettingsUpdateOne {
	return basuo.SetBusinessAccountID(b.ID)
}

// Mutation returns the BusinessAccountSettingsMutation object of the builder.
func (basuo *BusinessAccountSettingsUpdateOne) Mutation() *BusinessAccountSettingsMutation {
	return basuo.mutation
}

// ClearBusinessAccount clears the "business_account" edge to the Business entity.
func (basuo *BusinessAccountSettingsUpdateOne) ClearBusinessAccount() *BusinessAccountSettingsUpdateOne {
	basuo.mutation.ClearBusinessAccount()
	return basuo
}

// Where appends a list predicates to the BusinessAccountSettingsUpdate builder.
func (basuo *BusinessAccountSettingsUpdateOne) Where(ps ...predicate.BusinessAccountSettings) *BusinessAccountSettingsUpdateOne {
	basuo.mutation.Where(ps...)
	return basuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (basuo *BusinessAccountSettingsUpdateOne) Select(field string, fields ...string) *BusinessAccountSettingsUpdateOne {
	basuo.fields = append([]string{field}, fields...)
	return basuo
}

// Save executes the query and returns the updated BusinessAccountSettings entity.
func (basuo *BusinessAccountSettingsUpdateOne) Save(ctx context.Context) (*BusinessAccountSettings, error) {
	return withHooks(ctx, basuo.sqlSave, basuo.mutation, basuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (basuo *BusinessAccountSettingsUpdateOne) SaveX(ctx context.Context) *BusinessAccountSettings {
	node, err := basuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (basuo *BusinessAccountSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := basuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (basuo *BusinessAccountSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := basuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (basuo *BusinessAccountSettingsUpdateOne) check() error {
	if _, ok := basuo.mutation.BusinessAccountID(); basuo.mutation.BusinessAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BusinessAccountSettings.business_account"`)
	}
	return nil
}

func (basuo *BusinessAccountSettingsUpdateOne) sqlSave(ctx context.Context) (_node *BusinessAccountSettings, err error) {
	if err := basuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(businessaccountsettings.Table, businessaccountsettings.Columns, sqlgraph.NewFieldSpec(businessaccountsettings.FieldID, field.TypeInt))
	id, ok := basuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BusinessAccountSettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := basuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessaccountsettings.FieldID)
		for _, f := range fields {
			if !businessaccountsettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != businessaccountsettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := basuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := basuo.mutation.BusinessAccountSettingsID(); ok {
		_spec.SetField(businessaccountsettings.FieldBusinessAccountSettingsID, field.TypeString, value)
	}
	if value, ok := basuo.mutation.BusinessAccountID(); ok {
		_spec.SetField(businessaccountsettings.FieldBusinessAccountID, field.TypeString, value)
	}
	if value, ok := basuo.mutation.TwoFactorAuthentication(); ok {
		_spec.SetField(businessaccountsettings.FieldTwoFactorAuthentication, field.TypeBool, value)
	}
	if value, ok := basuo.mutation.BlockedUsers(); ok {
		_spec.SetField(businessaccountsettings.FieldBlockedUsers, field.TypeJSON, value)
	}
	if value, ok := basuo.mutation.AppendedBlockedUsers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, businessaccountsettings.FieldBlockedUsers, value)
		})
	}
	if value, ok := basuo.mutation.MutedUsers(); ok {
		_spec.SetField(businessaccountsettings.FieldMutedUsers, field.TypeJSON, value)
	}
	if value, ok := basuo.mutation.AppendedMutedUsers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, businessaccountsettings.FieldMutedUsers, value)
		})
	}
	if basuo.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessaccountsettings.BusinessAccountTable,
			Columns: []string{businessaccountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := basuo.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   businessaccountsettings.BusinessAccountTable,
			Columns: []string{businessaccountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BusinessAccountSettings{config: basuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, basuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessaccountsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	basuo.mutation.done = true
	return _node, nil
}

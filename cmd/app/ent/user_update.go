// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/businessfollowuser"
	"placio-app/ent/comment"
	"placio-app/ent/like"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/user"
	"placio-app/ent/userbusiness"
	"placio-app/ent/userfollowbusiness"
	"placio-app/ent/userfollowuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auth0/go-auth0/management"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetAuth0ID sets the "auth0_id" field.
func (uu *UserUpdate) SetAuth0ID(s string) *UserUpdate {
	uu.mutation.SetAuth0ID(s)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetPicture sets the "picture" field.
func (uu *UserUpdate) SetPicture(s string) *UserUpdate {
	uu.mutation.SetPicture(s)
	return uu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePicture(s *string) *UserUpdate {
	if s != nil {
		uu.SetPicture(*s)
	}
	return uu
}

// ClearPicture clears the value of the "picture" field.
func (uu *UserUpdate) ClearPicture() *UserUpdate {
	uu.mutation.ClearPicture()
	return uu
}

// SetAuth0Data sets the "auth0_data" field.
func (uu *UserUpdate) SetAuth0Data(m *management.User) *UserUpdate {
	uu.mutation.SetAuth0Data(m)
	return uu
}

// ClearAuth0Data clears the value of the "auth0_data" field.
func (uu *UserUpdate) ClearAuth0Data() *UserUpdate {
	uu.mutation.ClearAuth0Data()
	return uu
}

// SetAppSettings sets the "app_settings" field.
func (uu *UserUpdate) SetAppSettings(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetAppSettings(m)
	return uu
}

// ClearAppSettings clears the value of the "app_settings" field.
func (uu *UserUpdate) ClearAppSettings() *UserUpdate {
	uu.mutation.ClearAppSettings()
	return uu
}

// SetUserSettings sets the "user_settings" field.
func (uu *UserUpdate) SetUserSettings(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetUserSettings(m)
	return uu
}

// ClearUserSettings clears the value of the "user_settings" field.
func (uu *UserUpdate) ClearUserSettings() *UserUpdate {
	uu.mutation.ClearUserSettings()
	return uu
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (uu *UserUpdate) AddUserBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserBusinessIDs(ids...)
	return uu
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (uu *UserUpdate) AddUserBusinesses(u ...*UserBusiness) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserBusinessIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uu *UserUpdate) AddCommentIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCommentIDs(ids...)
	return uu
}

// AddComments adds the "comments" edges to the Comment entity.
func (uu *UserUpdate) AddComments(c ...*Comment) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCommentIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (uu *UserUpdate) AddLikeIDs(ids ...string) *UserUpdate {
	uu.mutation.AddLikeIDs(ids...)
	return uu
}

// AddLikes adds the "likes" edges to the Like entity.
func (uu *UserUpdate) AddLikes(l ...*Like) *UserUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.AddLikeIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uu *UserUpdate) AddPostIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPostIDs(ids...)
	return uu
}

// AddPosts adds the "posts" edges to the Post entity.
func (uu *UserUpdate) AddPosts(p ...*Post) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPostIDs(ids...)
}

// AddFollowedUserIDs adds the "followedUsers" edge to the UserFollowUser entity by IDs.
func (uu *UserUpdate) AddFollowedUserIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowedUserIDs(ids...)
	return uu
}

// AddFollowedUsers adds the "followedUsers" edges to the UserFollowUser entity.
func (uu *UserUpdate) AddFollowedUsers(u ...*UserFollowUser) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFollowedUserIDs(ids...)
}

// AddFollowerUserIDs adds the "followerUsers" edge to the UserFollowUser entity by IDs.
func (uu *UserUpdate) AddFollowerUserIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowerUserIDs(ids...)
	return uu
}

// AddFollowerUsers adds the "followerUsers" edges to the UserFollowUser entity.
func (uu *UserUpdate) AddFollowerUsers(u ...*UserFollowUser) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFollowerUserIDs(ids...)
}

// AddFollowedBusinessIDs adds the "followedBusinesses" edge to the UserFollowBusiness entity by IDs.
func (uu *UserUpdate) AddFollowedBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowedBusinessIDs(ids...)
	return uu
}

// AddFollowedBusinesses adds the "followedBusinesses" edges to the UserFollowBusiness entity.
func (uu *UserUpdate) AddFollowedBusinesses(u ...*UserFollowBusiness) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFollowedBusinessIDs(ids...)
}

// AddFollowerBusinessIDs adds the "followerBusinesses" edge to the BusinessFollowUser entity by IDs.
func (uu *UserUpdate) AddFollowerBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowerBusinessIDs(ids...)
	return uu
}

// AddFollowerBusinesses adds the "followerBusinesses" edges to the BusinessFollowUser entity.
func (uu *UserUpdate) AddFollowerBusinesses(b ...*BusinessFollowUser) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddFollowerBusinessIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUserBusinesses clears all "userBusinesses" edges to the UserBusiness entity.
func (uu *UserUpdate) ClearUserBusinesses() *UserUpdate {
	uu.mutation.ClearUserBusinesses()
	return uu
}

// RemoveUserBusinessIDs removes the "userBusinesses" edge to UserBusiness entities by IDs.
func (uu *UserUpdate) RemoveUserBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserBusinessIDs(ids...)
	return uu
}

// RemoveUserBusinesses removes "userBusinesses" edges to UserBusiness entities.
func (uu *UserUpdate) RemoveUserBusinesses(u ...*UserBusiness) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserBusinessIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (uu *UserUpdate) ClearComments() *UserUpdate {
	uu.mutation.ClearComments()
	return uu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (uu *UserUpdate) RemoveCommentIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCommentIDs(ids...)
	return uu
}

// RemoveComments removes "comments" edges to Comment entities.
func (uu *UserUpdate) RemoveComments(c ...*Comment) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCommentIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (uu *UserUpdate) ClearLikes() *UserUpdate {
	uu.mutation.ClearLikes()
	return uu
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (uu *UserUpdate) RemoveLikeIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveLikeIDs(ids...)
	return uu
}

// RemoveLikes removes "likes" edges to Like entities.
func (uu *UserUpdate) RemoveLikes(l ...*Like) *UserUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.RemoveLikeIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (uu *UserUpdate) ClearPosts() *UserUpdate {
	uu.mutation.ClearPosts()
	return uu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (uu *UserUpdate) RemovePostIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePostIDs(ids...)
	return uu
}

// RemovePosts removes "posts" edges to Post entities.
func (uu *UserUpdate) RemovePosts(p ...*Post) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePostIDs(ids...)
}

// ClearFollowedUsers clears all "followedUsers" edges to the UserFollowUser entity.
func (uu *UserUpdate) ClearFollowedUsers() *UserUpdate {
	uu.mutation.ClearFollowedUsers()
	return uu
}

// RemoveFollowedUserIDs removes the "followedUsers" edge to UserFollowUser entities by IDs.
func (uu *UserUpdate) RemoveFollowedUserIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowedUserIDs(ids...)
	return uu
}

// RemoveFollowedUsers removes "followedUsers" edges to UserFollowUser entities.
func (uu *UserUpdate) RemoveFollowedUsers(u ...*UserFollowUser) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFollowedUserIDs(ids...)
}

// ClearFollowerUsers clears all "followerUsers" edges to the UserFollowUser entity.
func (uu *UserUpdate) ClearFollowerUsers() *UserUpdate {
	uu.mutation.ClearFollowerUsers()
	return uu
}

// RemoveFollowerUserIDs removes the "followerUsers" edge to UserFollowUser entities by IDs.
func (uu *UserUpdate) RemoveFollowerUserIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowerUserIDs(ids...)
	return uu
}

// RemoveFollowerUsers removes "followerUsers" edges to UserFollowUser entities.
func (uu *UserUpdate) RemoveFollowerUsers(u ...*UserFollowUser) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFollowerUserIDs(ids...)
}

// ClearFollowedBusinesses clears all "followedBusinesses" edges to the UserFollowBusiness entity.
func (uu *UserUpdate) ClearFollowedBusinesses() *UserUpdate {
	uu.mutation.ClearFollowedBusinesses()
	return uu
}

// RemoveFollowedBusinessIDs removes the "followedBusinesses" edge to UserFollowBusiness entities by IDs.
func (uu *UserUpdate) RemoveFollowedBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowedBusinessIDs(ids...)
	return uu
}

// RemoveFollowedBusinesses removes "followedBusinesses" edges to UserFollowBusiness entities.
func (uu *UserUpdate) RemoveFollowedBusinesses(u ...*UserFollowBusiness) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFollowedBusinessIDs(ids...)
}

// ClearFollowerBusinesses clears all "followerBusinesses" edges to the BusinessFollowUser entity.
func (uu *UserUpdate) ClearFollowerBusinesses() *UserUpdate {
	uu.mutation.ClearFollowerBusinesses()
	return uu
}

// RemoveFollowerBusinessIDs removes the "followerBusinesses" edge to BusinessFollowUser entities by IDs.
func (uu *UserUpdate) RemoveFollowerBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowerBusinessIDs(ids...)
	return uu
}

// RemoveFollowerBusinesses removes "followerBusinesses" edges to BusinessFollowUser entities.
func (uu *UserUpdate) RemoveFollowerBusinesses(b ...*BusinessFollowUser) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveFollowerBusinessIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Auth0ID(); ok {
		_spec.SetField(user.FieldAuth0ID, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if uu.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := uu.mutation.Auth0Data(); ok {
		_spec.SetField(user.FieldAuth0Data, field.TypeJSON, value)
	}
	if uu.mutation.Auth0DataCleared() {
		_spec.ClearField(user.FieldAuth0Data, field.TypeJSON)
	}
	if value, ok := uu.mutation.AppSettings(); ok {
		_spec.SetField(user.FieldAppSettings, field.TypeJSON, value)
	}
	if uu.mutation.AppSettingsCleared() {
		_spec.ClearField(user.FieldAppSettings, field.TypeJSON)
	}
	if value, ok := uu.mutation.UserSettings(); ok {
		_spec.SetField(user.FieldUserSettings, field.TypeJSON, value)
	}
	if uu.mutation.UserSettingsCleared() {
		_spec.ClearField(user.FieldUserSettings, field.TypeJSON)
	}
	if uu.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserBusinessesIDs(); len(nodes) > 0 && !uu.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !uu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLikesIDs(); len(nodes) > 0 && !uu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !uu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowedUsersIDs(); len(nodes) > 0 && !uu.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowerUsersIDs(); len(nodes) > 0 && !uu.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowedBusinessesIDs(); len(nodes) > 0 && !uu.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowedBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowerBusinessesIDs(); len(nodes) > 0 && !uu.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowerBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetAuth0ID sets the "auth0_id" field.
func (uuo *UserUpdateOne) SetAuth0ID(s string) *UserUpdateOne {
	uuo.mutation.SetAuth0ID(s)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetPicture sets the "picture" field.
func (uuo *UserUpdateOne) SetPicture(s string) *UserUpdateOne {
	uuo.mutation.SetPicture(s)
	return uuo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePicture(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPicture(*s)
	}
	return uuo
}

// ClearPicture clears the value of the "picture" field.
func (uuo *UserUpdateOne) ClearPicture() *UserUpdateOne {
	uuo.mutation.ClearPicture()
	return uuo
}

// SetAuth0Data sets the "auth0_data" field.
func (uuo *UserUpdateOne) SetAuth0Data(m *management.User) *UserUpdateOne {
	uuo.mutation.SetAuth0Data(m)
	return uuo
}

// ClearAuth0Data clears the value of the "auth0_data" field.
func (uuo *UserUpdateOne) ClearAuth0Data() *UserUpdateOne {
	uuo.mutation.ClearAuth0Data()
	return uuo
}

// SetAppSettings sets the "app_settings" field.
func (uuo *UserUpdateOne) SetAppSettings(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetAppSettings(m)
	return uuo
}

// ClearAppSettings clears the value of the "app_settings" field.
func (uuo *UserUpdateOne) ClearAppSettings() *UserUpdateOne {
	uuo.mutation.ClearAppSettings()
	return uuo
}

// SetUserSettings sets the "user_settings" field.
func (uuo *UserUpdateOne) SetUserSettings(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetUserSettings(m)
	return uuo
}

// ClearUserSettings clears the value of the "user_settings" field.
func (uuo *UserUpdateOne) ClearUserSettings() *UserUpdateOne {
	uuo.mutation.ClearUserSettings()
	return uuo
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (uuo *UserUpdateOne) AddUserBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserBusinessIDs(ids...)
	return uuo
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (uuo *UserUpdateOne) AddUserBusinesses(u ...*UserBusiness) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserBusinessIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uuo *UserUpdateOne) AddCommentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCommentIDs(ids...)
	return uuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (uuo *UserUpdateOne) AddComments(c ...*Comment) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCommentIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (uuo *UserUpdateOne) AddLikeIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddLikeIDs(ids...)
	return uuo
}

// AddLikes adds the "likes" edges to the Like entity.
func (uuo *UserUpdateOne) AddLikes(l ...*Like) *UserUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.AddLikeIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uuo *UserUpdateOne) AddPostIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPostIDs(ids...)
	return uuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (uuo *UserUpdateOne) AddPosts(p ...*Post) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPostIDs(ids...)
}

// AddFollowedUserIDs adds the "followedUsers" edge to the UserFollowUser entity by IDs.
func (uuo *UserUpdateOne) AddFollowedUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowedUserIDs(ids...)
	return uuo
}

// AddFollowedUsers adds the "followedUsers" edges to the UserFollowUser entity.
func (uuo *UserUpdateOne) AddFollowedUsers(u ...*UserFollowUser) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFollowedUserIDs(ids...)
}

// AddFollowerUserIDs adds the "followerUsers" edge to the UserFollowUser entity by IDs.
func (uuo *UserUpdateOne) AddFollowerUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowerUserIDs(ids...)
	return uuo
}

// AddFollowerUsers adds the "followerUsers" edges to the UserFollowUser entity.
func (uuo *UserUpdateOne) AddFollowerUsers(u ...*UserFollowUser) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFollowerUserIDs(ids...)
}

// AddFollowedBusinessIDs adds the "followedBusinesses" edge to the UserFollowBusiness entity by IDs.
func (uuo *UserUpdateOne) AddFollowedBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowedBusinessIDs(ids...)
	return uuo
}

// AddFollowedBusinesses adds the "followedBusinesses" edges to the UserFollowBusiness entity.
func (uuo *UserUpdateOne) AddFollowedBusinesses(u ...*UserFollowBusiness) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFollowedBusinessIDs(ids...)
}

// AddFollowerBusinessIDs adds the "followerBusinesses" edge to the BusinessFollowUser entity by IDs.
func (uuo *UserUpdateOne) AddFollowerBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowerBusinessIDs(ids...)
	return uuo
}

// AddFollowerBusinesses adds the "followerBusinesses" edges to the BusinessFollowUser entity.
func (uuo *UserUpdateOne) AddFollowerBusinesses(b ...*BusinessFollowUser) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddFollowerBusinessIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUserBusinesses clears all "userBusinesses" edges to the UserBusiness entity.
func (uuo *UserUpdateOne) ClearUserBusinesses() *UserUpdateOne {
	uuo.mutation.ClearUserBusinesses()
	return uuo
}

// RemoveUserBusinessIDs removes the "userBusinesses" edge to UserBusiness entities by IDs.
func (uuo *UserUpdateOne) RemoveUserBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserBusinessIDs(ids...)
	return uuo
}

// RemoveUserBusinesses removes "userBusinesses" edges to UserBusiness entities.
func (uuo *UserUpdateOne) RemoveUserBusinesses(u ...*UserBusiness) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserBusinessIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (uuo *UserUpdateOne) ClearComments() *UserUpdateOne {
	uuo.mutation.ClearComments()
	return uuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (uuo *UserUpdateOne) RemoveCommentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCommentIDs(ids...)
	return uuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (uuo *UserUpdateOne) RemoveComments(c ...*Comment) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCommentIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (uuo *UserUpdateOne) ClearLikes() *UserUpdateOne {
	uuo.mutation.ClearLikes()
	return uuo
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (uuo *UserUpdateOne) RemoveLikeIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveLikeIDs(ids...)
	return uuo
}

// RemoveLikes removes "likes" edges to Like entities.
func (uuo *UserUpdateOne) RemoveLikes(l ...*Like) *UserUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.RemoveLikeIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (uuo *UserUpdateOne) ClearPosts() *UserUpdateOne {
	uuo.mutation.ClearPosts()
	return uuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (uuo *UserUpdateOne) RemovePostIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePostIDs(ids...)
	return uuo
}

// RemovePosts removes "posts" edges to Post entities.
func (uuo *UserUpdateOne) RemovePosts(p ...*Post) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePostIDs(ids...)
}

// ClearFollowedUsers clears all "followedUsers" edges to the UserFollowUser entity.
func (uuo *UserUpdateOne) ClearFollowedUsers() *UserUpdateOne {
	uuo.mutation.ClearFollowedUsers()
	return uuo
}

// RemoveFollowedUserIDs removes the "followedUsers" edge to UserFollowUser entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowedUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowedUserIDs(ids...)
	return uuo
}

// RemoveFollowedUsers removes "followedUsers" edges to UserFollowUser entities.
func (uuo *UserUpdateOne) RemoveFollowedUsers(u ...*UserFollowUser) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFollowedUserIDs(ids...)
}

// ClearFollowerUsers clears all "followerUsers" edges to the UserFollowUser entity.
func (uuo *UserUpdateOne) ClearFollowerUsers() *UserUpdateOne {
	uuo.mutation.ClearFollowerUsers()
	return uuo
}

// RemoveFollowerUserIDs removes the "followerUsers" edge to UserFollowUser entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowerUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowerUserIDs(ids...)
	return uuo
}

// RemoveFollowerUsers removes "followerUsers" edges to UserFollowUser entities.
func (uuo *UserUpdateOne) RemoveFollowerUsers(u ...*UserFollowUser) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFollowerUserIDs(ids...)
}

// ClearFollowedBusinesses clears all "followedBusinesses" edges to the UserFollowBusiness entity.
func (uuo *UserUpdateOne) ClearFollowedBusinesses() *UserUpdateOne {
	uuo.mutation.ClearFollowedBusinesses()
	return uuo
}

// RemoveFollowedBusinessIDs removes the "followedBusinesses" edge to UserFollowBusiness entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowedBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowedBusinessIDs(ids...)
	return uuo
}

// RemoveFollowedBusinesses removes "followedBusinesses" edges to UserFollowBusiness entities.
func (uuo *UserUpdateOne) RemoveFollowedBusinesses(u ...*UserFollowBusiness) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFollowedBusinessIDs(ids...)
}

// ClearFollowerBusinesses clears all "followerBusinesses" edges to the BusinessFollowUser entity.
func (uuo *UserUpdateOne) ClearFollowerBusinesses() *UserUpdateOne {
	uuo.mutation.ClearFollowerBusinesses()
	return uuo
}

// RemoveFollowerBusinessIDs removes the "followerBusinesses" edge to BusinessFollowUser entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowerBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowerBusinessIDs(ids...)
	return uuo
}

// RemoveFollowerBusinesses removes "followerBusinesses" edges to BusinessFollowUser entities.
func (uuo *UserUpdateOne) RemoveFollowerBusinesses(b ...*BusinessFollowUser) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveFollowerBusinessIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Auth0ID(); ok {
		_spec.SetField(user.FieldAuth0ID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if uuo.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := uuo.mutation.Auth0Data(); ok {
		_spec.SetField(user.FieldAuth0Data, field.TypeJSON, value)
	}
	if uuo.mutation.Auth0DataCleared() {
		_spec.ClearField(user.FieldAuth0Data, field.TypeJSON)
	}
	if value, ok := uuo.mutation.AppSettings(); ok {
		_spec.SetField(user.FieldAppSettings, field.TypeJSON, value)
	}
	if uuo.mutation.AppSettingsCleared() {
		_spec.ClearField(user.FieldAppSettings, field.TypeJSON)
	}
	if value, ok := uuo.mutation.UserSettings(); ok {
		_spec.SetField(user.FieldUserSettings, field.TypeJSON, value)
	}
	if uuo.mutation.UserSettingsCleared() {
		_spec.ClearField(user.FieldUserSettings, field.TypeJSON)
	}
	if uuo.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserBusinessesIDs(); len(nodes) > 0 && !uuo.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !uuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !uuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !uuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowedUsersIDs(); len(nodes) > 0 && !uuo.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowerUsersIDs(); len(nodes) > 0 && !uuo.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowedBusinessesIDs(); len(nodes) > 0 && !uuo.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowedBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowerBusinessesIDs(); len(nodes) > 0 && !uuo.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowerBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/accountsettings"
	"placio-app/ent/businessaccount"
	"placio-app/ent/invitation"
	"placio-app/ent/post"
	"placio-app/ent/userbusinessrelationship"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessAccountCreate is the builder for creating a BusinessAccount entity.
type BusinessAccountCreate struct {
	config
	mutation *BusinessAccountMutation
	hooks    []Hook
}

// SetID sets the "ID" field.
func (bac *BusinessAccountCreate) SetID(s string) *BusinessAccountCreate {
	bac.mutation.SetID(s)
	return bac
}

// SetName sets the "Name" field.
func (bac *BusinessAccountCreate) SetName(s string) *BusinessAccountCreate {
	bac.mutation.SetName(s)
	return bac
}

// SetActive sets the "Active" field.
func (bac *BusinessAccountCreate) SetActive(b bool) *BusinessAccountCreate {
	bac.mutation.SetActive(b)
	return bac
}

// SetNillableActive sets the "Active" field if the given value is not nil.
func (bac *BusinessAccountCreate) SetNillableActive(b *bool) *BusinessAccountCreate {
	if b != nil {
		bac.SetActive(*b)
	}
	return bac
}

// SetCreatedAt sets the "CreatedAt" field.
func (bac *BusinessAccountCreate) SetCreatedAt(t time.Time) *BusinessAccountCreate {
	bac.mutation.SetCreatedAt(t)
	return bac
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (bac *BusinessAccountCreate) SetUpdatedAt(t time.Time) *BusinessAccountCreate {
	bac.mutation.SetUpdatedAt(t)
	return bac
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (bac *BusinessAccountCreate) AddPostIDs(ids ...int) *BusinessAccountCreate {
	bac.mutation.AddPostIDs(ids...)
	return bac
}

// AddPosts adds the "posts" edges to the Post entity.
func (bac *BusinessAccountCreate) AddPosts(p ...*Post) *BusinessAccountCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bac.AddPostIDs(ids...)
}

// AddRelationshipIDs adds the "relationships" edge to the UserBusinessRelationship entity by IDs.
func (bac *BusinessAccountCreate) AddRelationshipIDs(ids ...int) *BusinessAccountCreate {
	bac.mutation.AddRelationshipIDs(ids...)
	return bac
}

// AddRelationships adds the "relationships" edges to the UserBusinessRelationship entity.
func (bac *BusinessAccountCreate) AddRelationships(u ...*UserBusinessRelationship) *BusinessAccountCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bac.AddRelationshipIDs(ids...)
}

// AddAccountSettingIDs adds the "account_settings" edge to the AccountSettings entity by IDs.
func (bac *BusinessAccountCreate) AddAccountSettingIDs(ids ...int) *BusinessAccountCreate {
	bac.mutation.AddAccountSettingIDs(ids...)
	return bac
}

// AddAccountSettings adds the "account_settings" edges to the AccountSettings entity.
func (bac *BusinessAccountCreate) AddAccountSettings(a ...*AccountSettings) *BusinessAccountCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bac.AddAccountSettingIDs(ids...)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (bac *BusinessAccountCreate) AddInvitationIDs(ids ...int) *BusinessAccountCreate {
	bac.mutation.AddInvitationIDs(ids...)
	return bac
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (bac *BusinessAccountCreate) AddInvitations(i ...*Invitation) *BusinessAccountCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bac.AddInvitationIDs(ids...)
}

// Mutation returns the BusinessAccountMutation object of the builder.
func (bac *BusinessAccountCreate) Mutation() *BusinessAccountMutation {
	return bac.mutation
}

// Save creates the BusinessAccount in the database.
func (bac *BusinessAccountCreate) Save(ctx context.Context) (*BusinessAccount, error) {
	bac.defaults()
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BusinessAccountCreate) SaveX(ctx context.Context) *BusinessAccount {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BusinessAccountCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BusinessAccountCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bac *BusinessAccountCreate) defaults() {
	if _, ok := bac.mutation.Active(); !ok {
		v := businessaccount.DefaultActive
		bac.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BusinessAccountCreate) check() error {
	if _, ok := bac.mutation.ID(); !ok {
		return &ValidationError{Name: "ID", err: errors.New(`ent: missing required field "BusinessAccount.ID"`)}
	}
	if _, ok := bac.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "BusinessAccount.Name"`)}
	}
	if _, ok := bac.mutation.Active(); !ok {
		return &ValidationError{Name: "Active", err: errors.New(`ent: missing required field "BusinessAccount.Active"`)}
	}
	if _, ok := bac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "BusinessAccount.CreatedAt"`)}
	}
	if _, ok := bac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`ent: missing required field "BusinessAccount.UpdatedAt"`)}
	}
	return nil
}

func (bac *BusinessAccountCreate) sqlSave(ctx context.Context) (*BusinessAccount, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BusinessAccountCreate) createSpec() (*BusinessAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessAccount{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(businessaccount.Table, sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt))
	)
	if value, ok := bac.mutation.ID(); ok {
		_spec.SetField(businessaccount.FieldID, field.TypeString, value)
		_node.ID = value
	}
	if value, ok := bac.mutation.Name(); ok {
		_spec.SetField(businessaccount.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bac.mutation.Active(); ok {
		_spec.SetField(businessaccount.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := bac.mutation.CreatedAt(); ok {
		_spec.SetField(businessaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bac.mutation.UpdatedAt(); ok {
		_spec.SetField(businessaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bac.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.PostsTable,
			Columns: []string{businessaccount.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bac.mutation.RelationshipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.RelationshipsTable,
			Columns: []string{businessaccount.RelationshipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bac.mutation.AccountSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   businessaccount.AccountSettingsTable,
			Columns: []string{businessaccount.AccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bac.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   businessaccount.InvitationsTable,
			Columns: businessaccount.InvitationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessAccountCreateBulk is the builder for creating many BusinessAccount entities in bulk.
type BusinessAccountCreateBulk struct {
	config
	builders []*BusinessAccountCreate
}

// Save creates the BusinessAccount entities in the database.
func (bacb *BusinessAccountCreateBulk) Save(ctx context.Context) ([]*BusinessAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BusinessAccount, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BusinessAccountCreateBulk) SaveX(ctx context.Context) []*BusinessAccount {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BusinessAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BusinessAccountCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}

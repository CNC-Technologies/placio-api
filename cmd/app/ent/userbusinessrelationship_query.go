// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"placio-app/ent/businessaccount"
	"placio-app/ent/predicate"
	"placio-app/ent/user"
	"placio-app/ent/userbusinessrelationship"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBusinessRelationshipQuery is the builder for querying UserBusinessRelationship entities.
type UserBusinessRelationshipQuery struct {
	config
	ctx                 *QueryContext
	order               []userbusinessrelationship.OrderOption
	inters              []Interceptor
	predicates          []predicate.UserBusinessRelationship
	withUser            *UserQuery
	withBusinessAccount *BusinessAccountQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserBusinessRelationshipQuery builder.
func (ubrq *UserBusinessRelationshipQuery) Where(ps ...predicate.UserBusinessRelationship) *UserBusinessRelationshipQuery {
	ubrq.predicates = append(ubrq.predicates, ps...)
	return ubrq
}

// Limit the number of records to be returned by this query.
func (ubrq *UserBusinessRelationshipQuery) Limit(limit int) *UserBusinessRelationshipQuery {
	ubrq.ctx.Limit = &limit
	return ubrq
}

// Offset to start from.
func (ubrq *UserBusinessRelationshipQuery) Offset(offset int) *UserBusinessRelationshipQuery {
	ubrq.ctx.Offset = &offset
	return ubrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ubrq *UserBusinessRelationshipQuery) Unique(unique bool) *UserBusinessRelationshipQuery {
	ubrq.ctx.Unique = &unique
	return ubrq
}

// Order specifies how the records should be ordered.
func (ubrq *UserBusinessRelationshipQuery) Order(o ...userbusinessrelationship.OrderOption) *UserBusinessRelationshipQuery {
	ubrq.order = append(ubrq.order, o...)
	return ubrq
}

// QueryUser chains the current query on the "user" edge.
func (ubrq *UserBusinessRelationshipQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ubrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ubrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ubrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userbusinessrelationship.Table, userbusinessrelationship.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userbusinessrelationship.UserTable, userbusinessrelationship.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ubrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBusinessAccount chains the current query on the "business_account" edge.
func (ubrq *UserBusinessRelationshipQuery) QueryBusinessAccount() *BusinessAccountQuery {
	query := (&BusinessAccountClient{config: ubrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ubrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ubrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userbusinessrelationship.Table, userbusinessrelationship.FieldID, selector),
			sqlgraph.To(businessaccount.Table, businessaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userbusinessrelationship.BusinessAccountTable, userbusinessrelationship.BusinessAccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(ubrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserBusinessRelationship entity from the query.
// Returns a *NotFoundError when no UserBusinessRelationship was found.
func (ubrq *UserBusinessRelationshipQuery) First(ctx context.Context) (*UserBusinessRelationship, error) {
	nodes, err := ubrq.Limit(1).All(setContextOp(ctx, ubrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userbusinessrelationship.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ubrq *UserBusinessRelationshipQuery) FirstX(ctx context.Context) *UserBusinessRelationship {
	node, err := ubrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserBusinessRelationship ID from the query.
// Returns a *NotFoundError when no UserBusinessRelationship ID was found.
func (ubrq *UserBusinessRelationshipQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ubrq.Limit(1).IDs(setContextOp(ctx, ubrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userbusinessrelationship.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ubrq *UserBusinessRelationshipQuery) FirstIDX(ctx context.Context) int {
	id, err := ubrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserBusinessRelationship entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserBusinessRelationship entity is found.
// Returns a *NotFoundError when no UserBusinessRelationship entities are found.
func (ubrq *UserBusinessRelationshipQuery) Only(ctx context.Context) (*UserBusinessRelationship, error) {
	nodes, err := ubrq.Limit(2).All(setContextOp(ctx, ubrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userbusinessrelationship.Label}
	default:
		return nil, &NotSingularError{userbusinessrelationship.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ubrq *UserBusinessRelationshipQuery) OnlyX(ctx context.Context) *UserBusinessRelationship {
	node, err := ubrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserBusinessRelationship ID in the query.
// Returns a *NotSingularError when more than one UserBusinessRelationship ID is found.
// Returns a *NotFoundError when no entities are found.
func (ubrq *UserBusinessRelationshipQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ubrq.Limit(2).IDs(setContextOp(ctx, ubrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userbusinessrelationship.Label}
	default:
		err = &NotSingularError{userbusinessrelationship.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ubrq *UserBusinessRelationshipQuery) OnlyIDX(ctx context.Context) int {
	id, err := ubrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserBusinessRelationships.
func (ubrq *UserBusinessRelationshipQuery) All(ctx context.Context) ([]*UserBusinessRelationship, error) {
	ctx = setContextOp(ctx, ubrq.ctx, "All")
	if err := ubrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserBusinessRelationship, *UserBusinessRelationshipQuery]()
	return withInterceptors[[]*UserBusinessRelationship](ctx, ubrq, qr, ubrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ubrq *UserBusinessRelationshipQuery) AllX(ctx context.Context) []*UserBusinessRelationship {
	nodes, err := ubrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserBusinessRelationship IDs.
func (ubrq *UserBusinessRelationshipQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ubrq.ctx.Unique == nil && ubrq.path != nil {
		ubrq.Unique(true)
	}
	ctx = setContextOp(ctx, ubrq.ctx, "IDs")
	if err = ubrq.Select(userbusinessrelationship.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ubrq *UserBusinessRelationshipQuery) IDsX(ctx context.Context) []int {
	ids, err := ubrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ubrq *UserBusinessRelationshipQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ubrq.ctx, "Count")
	if err := ubrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ubrq, querierCount[*UserBusinessRelationshipQuery](), ubrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ubrq *UserBusinessRelationshipQuery) CountX(ctx context.Context) int {
	count, err := ubrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ubrq *UserBusinessRelationshipQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ubrq.ctx, "Exist")
	switch _, err := ubrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ubrq *UserBusinessRelationshipQuery) ExistX(ctx context.Context) bool {
	exist, err := ubrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserBusinessRelationshipQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ubrq *UserBusinessRelationshipQuery) Clone() *UserBusinessRelationshipQuery {
	if ubrq == nil {
		return nil
	}
	return &UserBusinessRelationshipQuery{
		config:              ubrq.config,
		ctx:                 ubrq.ctx.Clone(),
		order:               append([]userbusinessrelationship.OrderOption{}, ubrq.order...),
		inters:              append([]Interceptor{}, ubrq.inters...),
		predicates:          append([]predicate.UserBusinessRelationship{}, ubrq.predicates...),
		withUser:            ubrq.withUser.Clone(),
		withBusinessAccount: ubrq.withBusinessAccount.Clone(),
		// clone intermediate query.
		sql:  ubrq.sql.Clone(),
		path: ubrq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ubrq *UserBusinessRelationshipQuery) WithUser(opts ...func(*UserQuery)) *UserBusinessRelationshipQuery {
	query := (&UserClient{config: ubrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ubrq.withUser = query
	return ubrq
}

// WithBusinessAccount tells the query-builder to eager-load the nodes that are connected to
// the "business_account" edge. The optional arguments are used to configure the query builder of the edge.
func (ubrq *UserBusinessRelationshipQuery) WithBusinessAccount(opts ...func(*BusinessAccountQuery)) *UserBusinessRelationshipQuery {
	query := (&BusinessAccountClient{config: ubrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ubrq.withBusinessAccount = query
	return ubrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ID string `json:"ID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserBusinessRelationship.Query().
//		GroupBy(userbusinessrelationship.FieldID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ubrq *UserBusinessRelationshipQuery) GroupBy(field string, fields ...string) *UserBusinessRelationshipGroupBy {
	ubrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserBusinessRelationshipGroupBy{build: ubrq}
	grbuild.flds = &ubrq.ctx.Fields
	grbuild.label = userbusinessrelationship.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ID string `json:"ID,omitempty"`
//	}
//
//	client.UserBusinessRelationship.Query().
//		Select(userbusinessrelationship.FieldID).
//		Scan(ctx, &v)
func (ubrq *UserBusinessRelationshipQuery) Select(fields ...string) *UserBusinessRelationshipSelect {
	ubrq.ctx.Fields = append(ubrq.ctx.Fields, fields...)
	sbuild := &UserBusinessRelationshipSelect{UserBusinessRelationshipQuery: ubrq}
	sbuild.label = userbusinessrelationship.Label
	sbuild.flds, sbuild.scan = &ubrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserBusinessRelationshipSelect configured with the given aggregations.
func (ubrq *UserBusinessRelationshipQuery) Aggregate(fns ...AggregateFunc) *UserBusinessRelationshipSelect {
	return ubrq.Select().Aggregate(fns...)
}

func (ubrq *UserBusinessRelationshipQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ubrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ubrq); err != nil {
				return err
			}
		}
	}
	for _, f := range ubrq.ctx.Fields {
		if !userbusinessrelationship.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ubrq.path != nil {
		prev, err := ubrq.path(ctx)
		if err != nil {
			return err
		}
		ubrq.sql = prev
	}
	return nil
}

func (ubrq *UserBusinessRelationshipQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserBusinessRelationship, error) {
	var (
		nodes       = []*UserBusinessRelationship{}
		withFKs     = ubrq.withFKs
		_spec       = ubrq.querySpec()
		loadedTypes = [2]bool{
			ubrq.withUser != nil,
			ubrq.withBusinessAccount != nil,
		}
	)
	if ubrq.withUser != nil || ubrq.withBusinessAccount != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, userbusinessrelationship.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserBusinessRelationship).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserBusinessRelationship{config: ubrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ubrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ubrq.withUser; query != nil {
		if err := ubrq.loadUser(ctx, query, nodes, nil,
			func(n *UserBusinessRelationship, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ubrq.withBusinessAccount; query != nil {
		if err := ubrq.loadBusinessAccount(ctx, query, nodes, nil,
			func(n *UserBusinessRelationship, e *BusinessAccount) { n.Edges.BusinessAccount = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ubrq *UserBusinessRelationshipQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserBusinessRelationship, init func(*UserBusinessRelationship), assign func(*UserBusinessRelationship, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserBusinessRelationship)
	for i := range nodes {
		if nodes[i].user_relationships == nil {
			continue
		}
		fk := *nodes[i].user_relationships
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_relationships" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ubrq *UserBusinessRelationshipQuery) loadBusinessAccount(ctx context.Context, query *BusinessAccountQuery, nodes []*UserBusinessRelationship, init func(*UserBusinessRelationship), assign func(*UserBusinessRelationship, *BusinessAccount)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserBusinessRelationship)
	for i := range nodes {
		if nodes[i].business_account_relationships == nil {
			continue
		}
		fk := *nodes[i].business_account_relationships
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(businessaccount.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_account_relationships" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ubrq *UserBusinessRelationshipQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ubrq.querySpec()
	_spec.Node.Columns = ubrq.ctx.Fields
	if len(ubrq.ctx.Fields) > 0 {
		_spec.Unique = ubrq.ctx.Unique != nil && *ubrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ubrq.driver, _spec)
}

func (ubrq *UserBusinessRelationshipQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userbusinessrelationship.Table, userbusinessrelationship.Columns, sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt))
	_spec.From = ubrq.sql
	if unique := ubrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ubrq.path != nil {
		_spec.Unique = true
	}
	if fields := ubrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userbusinessrelationship.FieldID)
		for i := range fields {
			if fields[i] != userbusinessrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ubrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ubrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ubrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ubrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ubrq *UserBusinessRelationshipQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ubrq.driver.Dialect())
	t1 := builder.Table(userbusinessrelationship.Table)
	columns := ubrq.ctx.Fields
	if len(columns) == 0 {
		columns = userbusinessrelationship.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ubrq.sql != nil {
		selector = ubrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ubrq.ctx.Unique != nil && *ubrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ubrq.predicates {
		p(selector)
	}
	for _, p := range ubrq.order {
		p(selector)
	}
	if offset := ubrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ubrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserBusinessRelationshipGroupBy is the group-by builder for UserBusinessRelationship entities.
type UserBusinessRelationshipGroupBy struct {
	selector
	build *UserBusinessRelationshipQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ubrgb *UserBusinessRelationshipGroupBy) Aggregate(fns ...AggregateFunc) *UserBusinessRelationshipGroupBy {
	ubrgb.fns = append(ubrgb.fns, fns...)
	return ubrgb
}

// Scan applies the selector query and scans the result into the given value.
func (ubrgb *UserBusinessRelationshipGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ubrgb.build.ctx, "GroupBy")
	if err := ubrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserBusinessRelationshipQuery, *UserBusinessRelationshipGroupBy](ctx, ubrgb.build, ubrgb, ubrgb.build.inters, v)
}

func (ubrgb *UserBusinessRelationshipGroupBy) sqlScan(ctx context.Context, root *UserBusinessRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ubrgb.fns))
	for _, fn := range ubrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ubrgb.flds)+len(ubrgb.fns))
		for _, f := range *ubrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ubrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ubrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserBusinessRelationshipSelect is the builder for selecting fields of UserBusinessRelationship entities.
type UserBusinessRelationshipSelect struct {
	*UserBusinessRelationshipQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ubrs *UserBusinessRelationshipSelect) Aggregate(fns ...AggregateFunc) *UserBusinessRelationshipSelect {
	ubrs.fns = append(ubrs.fns, fns...)
	return ubrs
}

// Scan applies the selector query and scans the result into the given value.
func (ubrs *UserBusinessRelationshipSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ubrs.ctx, "Select")
	if err := ubrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserBusinessRelationshipQuery, *UserBusinessRelationshipSelect](ctx, ubrs.UserBusinessRelationshipQuery, ubrs, ubrs.inters, v)
}

func (ubrs *UserBusinessRelationshipSelect) sqlScan(ctx context.Context, root *UserBusinessRelationshipQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ubrs.fns))
	for _, fn := range ubrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ubrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ubrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

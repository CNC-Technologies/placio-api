// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"placio-app/ent/predicate"
	"placio-app/ent/userbusinessrelationship"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBusinessRelationshipDelete is the builder for deleting a UserBusinessRelationship entity.
type UserBusinessRelationshipDelete struct {
	config
	hooks    []Hook
	mutation *UserBusinessRelationshipMutation
}

// Where appends a list predicates to the UserBusinessRelationshipDelete builder.
func (ubrd *UserBusinessRelationshipDelete) Where(ps ...predicate.UserBusinessRelationship) *UserBusinessRelationshipDelete {
	ubrd.mutation.Where(ps...)
	return ubrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ubrd *UserBusinessRelationshipDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ubrd.sqlExec, ubrd.mutation, ubrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ubrd *UserBusinessRelationshipDelete) ExecX(ctx context.Context) int {
	n, err := ubrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ubrd *UserBusinessRelationshipDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userbusinessrelationship.Table, sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt))
	if ps := ubrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ubrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ubrd.mutation.done = true
	return affected, err
}

// UserBusinessRelationshipDeleteOne is the builder for deleting a single UserBusinessRelationship entity.
type UserBusinessRelationshipDeleteOne struct {
	ubrd *UserBusinessRelationshipDelete
}

// Where appends a list predicates to the UserBusinessRelationshipDelete builder.
func (ubrdo *UserBusinessRelationshipDeleteOne) Where(ps ...predicate.UserBusinessRelationship) *UserBusinessRelationshipDeleteOne {
	ubrdo.ubrd.mutation.Where(ps...)
	return ubrdo
}

// Exec executes the deletion query.
func (ubrdo *UserBusinessRelationshipDeleteOne) Exec(ctx context.Context) error {
	n, err := ubrdo.ubrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userbusinessrelationship.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ubrdo *UserBusinessRelationshipDeleteOne) ExecX(ctx context.Context) {
	if err := ubrdo.Exec(ctx); err != nil {
		panic(err)
	}
}

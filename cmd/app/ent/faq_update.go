// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/faq"
	"placio-app/ent/place"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FAQUpdate is the builder for updating FAQ entities.
type FAQUpdate struct {
	config
	hooks    []Hook
	mutation *FAQMutation
}

// Where appends a list predicates to the FAQUpdate builder.
func (fu *FAQUpdate) Where(ps ...predicate.FAQ) *FAQUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetQuestion sets the "question" field.
func (fu *FAQUpdate) SetQuestion(s string) *FAQUpdate {
	fu.mutation.SetQuestion(s)
	return fu
}

// SetAnswer sets the "answer" field.
func (fu *FAQUpdate) SetAnswer(s string) *FAQUpdate {
	fu.mutation.SetAnswer(s)
	return fu
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (fu *FAQUpdate) SetBusinessID(id string) *FAQUpdate {
	fu.mutation.SetBusinessID(id)
	return fu
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (fu *FAQUpdate) SetNillableBusinessID(id *string) *FAQUpdate {
	if id != nil {
		fu = fu.SetBusinessID(*id)
	}
	return fu
}

// SetBusiness sets the "business" edge to the Business entity.
func (fu *FAQUpdate) SetBusiness(b *Business) *FAQUpdate {
	return fu.SetBusinessID(b.ID)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (fu *FAQUpdate) AddPlaceIDs(ids ...string) *FAQUpdate {
	fu.mutation.AddPlaceIDs(ids...)
	return fu
}

// AddPlace adds the "place" edges to the Place entity.
func (fu *FAQUpdate) AddPlace(p ...*Place) *FAQUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddPlaceIDs(ids...)
}

// Mutation returns the FAQMutation object of the builder.
func (fu *FAQUpdate) Mutation() *FAQMutation {
	return fu.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (fu *FAQUpdate) ClearBusiness() *FAQUpdate {
	fu.mutation.ClearBusiness()
	return fu
}

// ClearPlace clears all "place" edges to the Place entity.
func (fu *FAQUpdate) ClearPlace() *FAQUpdate {
	fu.mutation.ClearPlace()
	return fu
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (fu *FAQUpdate) RemovePlaceIDs(ids ...string) *FAQUpdate {
	fu.mutation.RemovePlaceIDs(ids...)
	return fu
}

// RemovePlace removes "place" edges to Place entities.
func (fu *FAQUpdate) RemovePlace(p ...*Place) *FAQUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemovePlaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FAQUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FAQUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FAQUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FAQUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FAQUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(faq.Table, faq.Columns, sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Question(); ok {
		_spec.SetField(faq.FieldQuestion, field.TypeString, value)
	}
	if value, ok := fu.mutation.Answer(); ok {
		_spec.SetField(faq.FieldAnswer, field.TypeString, value)
	}
	if fu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faq.BusinessTable,
			Columns: []string{faq.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faq.BusinessTable,
			Columns: []string{faq.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   faq.PlaceTable,
			Columns: faq.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !fu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   faq.PlaceTable,
			Columns: faq.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   faq.PlaceTable,
			Columns: faq.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{faq.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FAQUpdateOne is the builder for updating a single FAQ entity.
type FAQUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FAQMutation
}

// SetQuestion sets the "question" field.
func (fuo *FAQUpdateOne) SetQuestion(s string) *FAQUpdateOne {
	fuo.mutation.SetQuestion(s)
	return fuo
}

// SetAnswer sets the "answer" field.
func (fuo *FAQUpdateOne) SetAnswer(s string) *FAQUpdateOne {
	fuo.mutation.SetAnswer(s)
	return fuo
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (fuo *FAQUpdateOne) SetBusinessID(id string) *FAQUpdateOne {
	fuo.mutation.SetBusinessID(id)
	return fuo
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (fuo *FAQUpdateOne) SetNillableBusinessID(id *string) *FAQUpdateOne {
	if id != nil {
		fuo = fuo.SetBusinessID(*id)
	}
	return fuo
}

// SetBusiness sets the "business" edge to the Business entity.
func (fuo *FAQUpdateOne) SetBusiness(b *Business) *FAQUpdateOne {
	return fuo.SetBusinessID(b.ID)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (fuo *FAQUpdateOne) AddPlaceIDs(ids ...string) *FAQUpdateOne {
	fuo.mutation.AddPlaceIDs(ids...)
	return fuo
}

// AddPlace adds the "place" edges to the Place entity.
func (fuo *FAQUpdateOne) AddPlace(p ...*Place) *FAQUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddPlaceIDs(ids...)
}

// Mutation returns the FAQMutation object of the builder.
func (fuo *FAQUpdateOne) Mutation() *FAQMutation {
	return fuo.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (fuo *FAQUpdateOne) ClearBusiness() *FAQUpdateOne {
	fuo.mutation.ClearBusiness()
	return fuo
}

// ClearPlace clears all "place" edges to the Place entity.
func (fuo *FAQUpdateOne) ClearPlace() *FAQUpdateOne {
	fuo.mutation.ClearPlace()
	return fuo
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (fuo *FAQUpdateOne) RemovePlaceIDs(ids ...string) *FAQUpdateOne {
	fuo.mutation.RemovePlaceIDs(ids...)
	return fuo
}

// RemovePlace removes "place" edges to Place entities.
func (fuo *FAQUpdateOne) RemovePlace(p ...*Place) *FAQUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemovePlaceIDs(ids...)
}

// Where appends a list predicates to the FAQUpdate builder.
func (fuo *FAQUpdateOne) Where(ps ...predicate.FAQ) *FAQUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FAQUpdateOne) Select(field string, fields ...string) *FAQUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated FAQ entity.
func (fuo *FAQUpdateOne) Save(ctx context.Context) (*FAQ, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FAQUpdateOne) SaveX(ctx context.Context) *FAQ {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FAQUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FAQUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FAQUpdateOne) sqlSave(ctx context.Context) (_node *FAQ, err error) {
	_spec := sqlgraph.NewUpdateSpec(faq.Table, faq.Columns, sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FAQ.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, faq.FieldID)
		for _, f := range fields {
			if !faq.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != faq.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Question(); ok {
		_spec.SetField(faq.FieldQuestion, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Answer(); ok {
		_spec.SetField(faq.FieldAnswer, field.TypeString, value)
	}
	if fuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faq.BusinessTable,
			Columns: []string{faq.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faq.BusinessTable,
			Columns: []string{faq.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   faq.PlaceTable,
			Columns: faq.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !fuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   faq.PlaceTable,
			Columns: faq.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   faq.PlaceTable,
			Columns: faq.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FAQ{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{faq.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/businessaccount"
	"placio-app/ent/predicate"
	"placio-app/ent/user"
	"placio-app/ent/userbusinessrelationship"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBusinessRelationshipUpdate is the builder for updating UserBusinessRelationship entities.
type UserBusinessRelationshipUpdate struct {
	config
	hooks    []Hook
	mutation *UserBusinessRelationshipMutation
}

// Where appends a list predicates to the UserBusinessRelationshipUpdate builder.
func (ubru *UserBusinessRelationshipUpdate) Where(ps ...predicate.UserBusinessRelationship) *UserBusinessRelationshipUpdate {
	ubru.mutation.Where(ps...)
	return ubru
}

// SetID sets the "ID" field.
func (ubru *UserBusinessRelationshipUpdate) SetID(s string) *UserBusinessRelationshipUpdate {
	ubru.mutation.SetID(s)
	return ubru
}

// SetUserID sets the "UserID" field.
func (ubru *UserBusinessRelationshipUpdate) SetUserID(s string) *UserBusinessRelationshipUpdate {
	ubru.mutation.SetUserID(s)
	return ubru
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (ubru *UserBusinessRelationshipUpdate) SetBusinessAccountID(s string) *UserBusinessRelationshipUpdate {
	ubru.mutation.SetBusinessAccountID(s)
	return ubru
}

// SetRole sets the "Role" field.
func (ubru *UserBusinessRelationshipUpdate) SetRole(s string) *UserBusinessRelationshipUpdate {
	ubru.mutation.SetRole(s)
	return ubru
}

// SetCreatedAt sets the "CreatedAt" field.
func (ubru *UserBusinessRelationshipUpdate) SetCreatedAt(t time.Time) *UserBusinessRelationshipUpdate {
	ubru.mutation.SetCreatedAt(t)
	return ubru
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ubru *UserBusinessRelationshipUpdate) SetUpdatedAt(t time.Time) *UserBusinessRelationshipUpdate {
	ubru.mutation.SetUpdatedAt(t)
	return ubru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ubru *UserBusinessRelationshipUpdate) SetUserID(id int) *UserBusinessRelationshipUpdate {
	ubru.mutation.SetUserID(id)
	return ubru
}

// SetUser sets the "user" edge to the User entity.
func (ubru *UserBusinessRelationshipUpdate) SetUser(u *User) *UserBusinessRelationshipUpdate {
	return ubru.SetUserID(u.ID)
}

// SetBusinessAccountID sets the "business_account" edge to the BusinessAccount entity by ID.
func (ubru *UserBusinessRelationshipUpdate) SetBusinessAccountID(id int) *UserBusinessRelationshipUpdate {
	ubru.mutation.SetBusinessAccountID(id)
	return ubru
}

// SetBusinessAccount sets the "business_account" edge to the BusinessAccount entity.
func (ubru *UserBusinessRelationshipUpdate) SetBusinessAccount(b *BusinessAccount) *UserBusinessRelationshipUpdate {
	return ubru.SetBusinessAccountID(b.ID)
}

// Mutation returns the UserBusinessRelationshipMutation object of the builder.
func (ubru *UserBusinessRelationshipUpdate) Mutation() *UserBusinessRelationshipMutation {
	return ubru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ubru *UserBusinessRelationshipUpdate) ClearUser() *UserBusinessRelationshipUpdate {
	ubru.mutation.ClearUser()
	return ubru
}

// ClearBusinessAccount clears the "business_account" edge to the BusinessAccount entity.
func (ubru *UserBusinessRelationshipUpdate) ClearBusinessAccount() *UserBusinessRelationshipUpdate {
	ubru.mutation.ClearBusinessAccount()
	return ubru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubru *UserBusinessRelationshipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ubru.sqlSave, ubru.mutation, ubru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubru *UserBusinessRelationshipUpdate) SaveX(ctx context.Context) int {
	affected, err := ubru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubru *UserBusinessRelationshipUpdate) Exec(ctx context.Context) error {
	_, err := ubru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubru *UserBusinessRelationshipUpdate) ExecX(ctx context.Context) {
	if err := ubru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubru *UserBusinessRelationshipUpdate) check() error {
	if _, ok := ubru.mutation.UserID(); ubru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserBusinessRelationship.user"`)
	}
	if _, ok := ubru.mutation.BusinessAccountID(); ubru.mutation.BusinessAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserBusinessRelationship.business_account"`)
	}
	return nil
}

func (ubru *UserBusinessRelationshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ubru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbusinessrelationship.Table, userbusinessrelationship.Columns, sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt))
	if ps := ubru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubru.mutation.ID(); ok {
		_spec.SetField(userbusinessrelationship.FieldID, field.TypeString, value)
	}
	if value, ok := ubru.mutation.UserID(); ok {
		_spec.SetField(userbusinessrelationship.FieldUserID, field.TypeString, value)
	}
	if value, ok := ubru.mutation.BusinessAccountID(); ok {
		_spec.SetField(userbusinessrelationship.FieldBusinessAccountID, field.TypeString, value)
	}
	if value, ok := ubru.mutation.Role(); ok {
		_spec.SetField(userbusinessrelationship.FieldRole, field.TypeString, value)
	}
	if value, ok := ubru.mutation.CreatedAt(); ok {
		_spec.SetField(userbusinessrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ubru.mutation.UpdatedAt(); ok {
		_spec.SetField(userbusinessrelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if ubru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.UserTable,
			Columns: []string{userbusinessrelationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.UserTable,
			Columns: []string{userbusinessrelationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ubru.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.BusinessAccountTable,
			Columns: []string{userbusinessrelationship.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubru.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.BusinessAccountTable,
			Columns: []string{userbusinessrelationship.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ubru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbusinessrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ubru.mutation.done = true
	return n, nil
}

// UserBusinessRelationshipUpdateOne is the builder for updating a single UserBusinessRelationship entity.
type UserBusinessRelationshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserBusinessRelationshipMutation
}

// SetID sets the "ID" field.
func (ubruo *UserBusinessRelationshipUpdateOne) SetID(s string) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.SetID(s)
	return ubruo
}

// SetUserID sets the "UserID" field.
func (ubruo *UserBusinessRelationshipUpdateOne) SetUserID(s string) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.SetUserID(s)
	return ubruo
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (ubruo *UserBusinessRelationshipUpdateOne) SetBusinessAccountID(s string) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.SetBusinessAccountID(s)
	return ubruo
}

// SetRole sets the "Role" field.
func (ubruo *UserBusinessRelationshipUpdateOne) SetRole(s string) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.SetRole(s)
	return ubruo
}

// SetCreatedAt sets the "CreatedAt" field.
func (ubruo *UserBusinessRelationshipUpdateOne) SetCreatedAt(t time.Time) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.SetCreatedAt(t)
	return ubruo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ubruo *UserBusinessRelationshipUpdateOne) SetUpdatedAt(t time.Time) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.SetUpdatedAt(t)
	return ubruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ubruo *UserBusinessRelationshipUpdateOne) SetUserID(id int) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.SetUserID(id)
	return ubruo
}

// SetUser sets the "user" edge to the User entity.
func (ubruo *UserBusinessRelationshipUpdateOne) SetUser(u *User) *UserBusinessRelationshipUpdateOne {
	return ubruo.SetUserID(u.ID)
}

// SetBusinessAccountID sets the "business_account" edge to the BusinessAccount entity by ID.
func (ubruo *UserBusinessRelationshipUpdateOne) SetBusinessAccountID(id int) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.SetBusinessAccountID(id)
	return ubruo
}

// SetBusinessAccount sets the "business_account" edge to the BusinessAccount entity.
func (ubruo *UserBusinessRelationshipUpdateOne) SetBusinessAccount(b *BusinessAccount) *UserBusinessRelationshipUpdateOne {
	return ubruo.SetBusinessAccountID(b.ID)
}

// Mutation returns the UserBusinessRelationshipMutation object of the builder.
func (ubruo *UserBusinessRelationshipUpdateOne) Mutation() *UserBusinessRelationshipMutation {
	return ubruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ubruo *UserBusinessRelationshipUpdateOne) ClearUser() *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.ClearUser()
	return ubruo
}

// ClearBusinessAccount clears the "business_account" edge to the BusinessAccount entity.
func (ubruo *UserBusinessRelationshipUpdateOne) ClearBusinessAccount() *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.ClearBusinessAccount()
	return ubruo
}

// Where appends a list predicates to the UserBusinessRelationshipUpdate builder.
func (ubruo *UserBusinessRelationshipUpdateOne) Where(ps ...predicate.UserBusinessRelationship) *UserBusinessRelationshipUpdateOne {
	ubruo.mutation.Where(ps...)
	return ubruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ubruo *UserBusinessRelationshipUpdateOne) Select(field string, fields ...string) *UserBusinessRelationshipUpdateOne {
	ubruo.fields = append([]string{field}, fields...)
	return ubruo
}

// Save executes the query and returns the updated UserBusinessRelationship entity.
func (ubruo *UserBusinessRelationshipUpdateOne) Save(ctx context.Context) (*UserBusinessRelationship, error) {
	return withHooks(ctx, ubruo.sqlSave, ubruo.mutation, ubruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubruo *UserBusinessRelationshipUpdateOne) SaveX(ctx context.Context) *UserBusinessRelationship {
	node, err := ubruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubruo *UserBusinessRelationshipUpdateOne) Exec(ctx context.Context) error {
	_, err := ubruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubruo *UserBusinessRelationshipUpdateOne) ExecX(ctx context.Context) {
	if err := ubruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubruo *UserBusinessRelationshipUpdateOne) check() error {
	if _, ok := ubruo.mutation.UserID(); ubruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserBusinessRelationship.user"`)
	}
	if _, ok := ubruo.mutation.BusinessAccountID(); ubruo.mutation.BusinessAccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserBusinessRelationship.business_account"`)
	}
	return nil
}

func (ubruo *UserBusinessRelationshipUpdateOne) sqlSave(ctx context.Context) (_node *UserBusinessRelationship, err error) {
	if err := ubruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbusinessrelationship.Table, userbusinessrelationship.Columns, sqlgraph.NewFieldSpec(userbusinessrelationship.FieldID, field.TypeInt))
	id, ok := ubruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserBusinessRelationship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ubruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userbusinessrelationship.FieldID)
		for _, f := range fields {
			if !userbusinessrelationship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userbusinessrelationship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ubruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubruo.mutation.ID(); ok {
		_spec.SetField(userbusinessrelationship.FieldID, field.TypeString, value)
	}
	if value, ok := ubruo.mutation.UserID(); ok {
		_spec.SetField(userbusinessrelationship.FieldUserID, field.TypeString, value)
	}
	if value, ok := ubruo.mutation.BusinessAccountID(); ok {
		_spec.SetField(userbusinessrelationship.FieldBusinessAccountID, field.TypeString, value)
	}
	if value, ok := ubruo.mutation.Role(); ok {
		_spec.SetField(userbusinessrelationship.FieldRole, field.TypeString, value)
	}
	if value, ok := ubruo.mutation.CreatedAt(); ok {
		_spec.SetField(userbusinessrelationship.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ubruo.mutation.UpdatedAt(); ok {
		_spec.SetField(userbusinessrelationship.FieldUpdatedAt, field.TypeTime, value)
	}
	if ubruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.UserTable,
			Columns: []string{userbusinessrelationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.UserTable,
			Columns: []string{userbusinessrelationship.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ubruo.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.BusinessAccountTable,
			Columns: []string{userbusinessrelationship.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ubruo.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userbusinessrelationship.BusinessAccountTable,
			Columns: []string{userbusinessrelationship.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserBusinessRelationship{config: ubruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbusinessrelationship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ubruo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package invitation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the invitation type in the database.
	Label = "invitation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldBusinessAccountID holds the string denoting the businessaccountid field in the database.
	FieldBusinessAccountID = "business_account_id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBusinessAccount holds the string denoting the business_account edge name in mutations.
	EdgeBusinessAccount = "business_account"
	// Table holds the table name of the invitation in the database.
	Table = "invitations"
	// BusinessAccountTable is the table that holds the business_account relation/edge. The primary key declared below.
	BusinessAccountTable = "invitation_business_account"
	// BusinessAccountInverseTable is the table name for the BusinessAccount entity.
	// It exists in this package in order to avoid circular dependency with the "businessaccount" package.
	BusinessAccountInverseTable = "business_accounts"
)

// Columns holds all SQL columns for invitation fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldRole,
	FieldBusinessAccountID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// BusinessAccountPrimaryKey and BusinessAccountColumn2 are the table columns denoting the
	// primary key for the business_account relation (M2M).
	BusinessAccountPrimaryKey = []string{"invitation_id", "business_account_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Invitation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the Email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByRole orders the results by the Role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByBusinessAccountID orders the results by the BusinessAccountID field.
func ByBusinessAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessAccountID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBusinessAccountCount orders the results by business_account count.
func ByBusinessAccountCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBusinessAccountStep(), opts...)
	}
}

// ByBusinessAccount orders the results by business_account terms.
func ByBusinessAccount(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessAccountStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBusinessAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BusinessAccountTable, BusinessAccountPrimaryKey...),
	)
}

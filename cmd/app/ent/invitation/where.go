// Code generated by ent, DO NOT EDIT.

package invitation

import (
	"placio-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "Email" field. It's identical to EmailEQ.
func Email(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldEmail, v))
}

// Role applies equality check predicate on the "Role" field. It's identical to RoleEQ.
func Role(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldRole, v))
}

// BusinessAccountID applies equality check predicate on the "BusinessAccountID" field. It's identical to BusinessAccountIDEQ.
func BusinessAccountID(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldBusinessAccountID, v))
}

// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldUpdatedAt, v))
}

// EmailEQ applies the EQ predicate on the "Email" field.
func EmailEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "Email" field.
func EmailNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "Email" field.
func EmailIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "Email" field.
func EmailNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "Email" field.
func EmailGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "Email" field.
func EmailGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "Email" field.
func EmailLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "Email" field.
func EmailLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "Email" field.
func EmailContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "Email" field.
func EmailHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "Email" field.
func EmailHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "Email" field.
func EmailEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "Email" field.
func EmailContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldEmail, v))
}

// RoleEQ applies the EQ predicate on the "Role" field.
func RoleEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "Role" field.
func RoleNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "Role" field.
func RoleIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "Role" field.
func RoleNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "Role" field.
func RoleGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "Role" field.
func RoleGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "Role" field.
func RoleLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "Role" field.
func RoleLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "Role" field.
func RoleContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "Role" field.
func RoleHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "Role" field.
func RoleHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "Role" field.
func RoleEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "Role" field.
func RoleContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldRole, v))
}

// BusinessAccountIDEQ applies the EQ predicate on the "BusinessAccountID" field.
func BusinessAccountIDEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldBusinessAccountID, v))
}

// BusinessAccountIDNEQ applies the NEQ predicate on the "BusinessAccountID" field.
func BusinessAccountIDNEQ(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldBusinessAccountID, v))
}

// BusinessAccountIDIn applies the In predicate on the "BusinessAccountID" field.
func BusinessAccountIDIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldBusinessAccountID, vs...))
}

// BusinessAccountIDNotIn applies the NotIn predicate on the "BusinessAccountID" field.
func BusinessAccountIDNotIn(vs ...string) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldBusinessAccountID, vs...))
}

// BusinessAccountIDGT applies the GT predicate on the "BusinessAccountID" field.
func BusinessAccountIDGT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldBusinessAccountID, v))
}

// BusinessAccountIDGTE applies the GTE predicate on the "BusinessAccountID" field.
func BusinessAccountIDGTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldBusinessAccountID, v))
}

// BusinessAccountIDLT applies the LT predicate on the "BusinessAccountID" field.
func BusinessAccountIDLT(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldBusinessAccountID, v))
}

// BusinessAccountIDLTE applies the LTE predicate on the "BusinessAccountID" field.
func BusinessAccountIDLTE(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldBusinessAccountID, v))
}

// BusinessAccountIDContains applies the Contains predicate on the "BusinessAccountID" field.
func BusinessAccountIDContains(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContains(FieldBusinessAccountID, v))
}

// BusinessAccountIDHasPrefix applies the HasPrefix predicate on the "BusinessAccountID" field.
func BusinessAccountIDHasPrefix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasPrefix(FieldBusinessAccountID, v))
}

// BusinessAccountIDHasSuffix applies the HasSuffix predicate on the "BusinessAccountID" field.
func BusinessAccountIDHasSuffix(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldHasSuffix(FieldBusinessAccountID, v))
}

// BusinessAccountIDEqualFold applies the EqualFold predicate on the "BusinessAccountID" field.
func BusinessAccountIDEqualFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldEqualFold(FieldBusinessAccountID, v))
}

// BusinessAccountIDContainsFold applies the ContainsFold predicate on the "BusinessAccountID" field.
func BusinessAccountIDContainsFold(v string) predicate.Invitation {
	return predicate.Invitation(sql.FieldContainsFold(FieldBusinessAccountID, v))
}

// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
func CreatedAtEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
func CreatedAtNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "CreatedAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
func CreatedAtGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
func CreatedAtGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
func CreatedAtLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
func CreatedAtLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Invitation {
	return predicate.Invitation(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasBusinessAccount applies the HasEdge predicate on the "business_account" edge.
func HasBusinessAccount() predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, BusinessAccountTable, BusinessAccountPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessAccountWith applies the HasEdge predicate on the "business_account" edge with a given conditions (other predicates).
func HasBusinessAccountWith(preds ...predicate.BusinessAccount) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		step := newBusinessAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invitation) predicate.Invitation {
	return predicate.Invitation(func(s *sql.Selector) {
		p(s.Not())
	})
}

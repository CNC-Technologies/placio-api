// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/event"
	"placio-app/ent/predicate"
	"placio-app/ent/ticket"
	"placio-app/ent/ticketoption"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetCreatedAt sets the "createdAt" field.
func (eu *EventUpdate) SetCreatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCreatedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetUpdatedAt sets the "updatedAt" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetSearchText sets the "search_text" field.
func (eu *EventUpdate) SetSearchText(s string) *EventUpdate {
	eu.mutation.SetSearchText(s)
	return eu
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (eu *EventUpdate) SetNillableSearchText(s *string) *EventUpdate {
	if s != nil {
		eu.SetSearchText(*s)
	}
	return eu
}

// ClearSearchText clears the value of the "search_text" field.
func (eu *EventUpdate) ClearSearchText() *EventUpdate {
	eu.mutation.ClearSearchText()
	return eu
}

// SetRelevanceScore sets the "relevance_score" field.
func (eu *EventUpdate) SetRelevanceScore(f float64) *EventUpdate {
	eu.mutation.ResetRelevanceScore()
	eu.mutation.SetRelevanceScore(f)
	return eu
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (eu *EventUpdate) SetNillableRelevanceScore(f *float64) *EventUpdate {
	if f != nil {
		eu.SetRelevanceScore(*f)
	}
	return eu
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (eu *EventUpdate) AddRelevanceScore(f float64) *EventUpdate {
	eu.mutation.AddRelevanceScore(f)
	return eu
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (eu *EventUpdate) ClearRelevanceScore() *EventUpdate {
	eu.mutation.ClearRelevanceScore()
	return eu
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (eu *EventUpdate) AddTicketIDs(ids ...string) *EventUpdate {
	eu.mutation.AddTicketIDs(ids...)
	return eu
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (eu *EventUpdate) AddTickets(t ...*Ticket) *EventUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTicketIDs(ids...)
}

// AddTicketOptionIDs adds the "ticket_options" edge to the TicketOption entity by IDs.
func (eu *EventUpdate) AddTicketOptionIDs(ids ...string) *EventUpdate {
	eu.mutation.AddTicketOptionIDs(ids...)
	return eu
}

// AddTicketOptions adds the "ticket_options" edges to the TicketOption entity.
func (eu *EventUpdate) AddTicketOptions(t ...*TicketOption) *EventUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTicketOptionIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (eu *EventUpdate) ClearTickets() *EventUpdate {
	eu.mutation.ClearTickets()
	return eu
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (eu *EventUpdate) RemoveTicketIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveTicketIDs(ids...)
	return eu
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (eu *EventUpdate) RemoveTickets(t ...*Ticket) *EventUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTicketIDs(ids...)
}

// ClearTicketOptions clears all "ticket_options" edges to the TicketOption entity.
func (eu *EventUpdate) ClearTicketOptions() *EventUpdate {
	eu.mutation.ClearTicketOptions()
	return eu
}

// RemoveTicketOptionIDs removes the "ticket_options" edge to TicketOption entities by IDs.
func (eu *EventUpdate) RemoveTicketOptionIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveTicketOptionIDs(ids...)
	return eu
}

// RemoveTicketOptions removes "ticket_options" edges to TicketOption entities.
func (eu *EventUpdate) RemoveTicketOptions(t ...*TicketOption) *EventUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTicketOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.SearchText(); ok {
		_spec.SetField(event.FieldSearchText, field.TypeString, value)
	}
	if eu.mutation.SearchTextCleared() {
		_spec.ClearField(event.FieldSearchText, field.TypeString)
	}
	if value, ok := eu.mutation.RelevanceScore(); ok {
		_spec.SetField(event.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(event.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if eu.mutation.RelevanceScoreCleared() {
		_spec.ClearField(event.FieldRelevanceScore, field.TypeFloat64)
	}
	if eu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !eu.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TicketOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTicketOptionsIDs(); len(nodes) > 0 && !eu.mutation.TicketOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TicketOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetCreatedAt sets the "createdAt" field.
func (euo *EventUpdateOne) SetCreatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCreatedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetUpdatedAt sets the "updatedAt" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetSearchText sets the "search_text" field.
func (euo *EventUpdateOne) SetSearchText(s string) *EventUpdateOne {
	euo.mutation.SetSearchText(s)
	return euo
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableSearchText(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetSearchText(*s)
	}
	return euo
}

// ClearSearchText clears the value of the "search_text" field.
func (euo *EventUpdateOne) ClearSearchText() *EventUpdateOne {
	euo.mutation.ClearSearchText()
	return euo
}

// SetRelevanceScore sets the "relevance_score" field.
func (euo *EventUpdateOne) SetRelevanceScore(f float64) *EventUpdateOne {
	euo.mutation.ResetRelevanceScore()
	euo.mutation.SetRelevanceScore(f)
	return euo
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableRelevanceScore(f *float64) *EventUpdateOne {
	if f != nil {
		euo.SetRelevanceScore(*f)
	}
	return euo
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (euo *EventUpdateOne) AddRelevanceScore(f float64) *EventUpdateOne {
	euo.mutation.AddRelevanceScore(f)
	return euo
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (euo *EventUpdateOne) ClearRelevanceScore() *EventUpdateOne {
	euo.mutation.ClearRelevanceScore()
	return euo
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (euo *EventUpdateOne) AddTicketIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddTicketIDs(ids...)
	return euo
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (euo *EventUpdateOne) AddTickets(t ...*Ticket) *EventUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTicketIDs(ids...)
}

// AddTicketOptionIDs adds the "ticket_options" edge to the TicketOption entity by IDs.
func (euo *EventUpdateOne) AddTicketOptionIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddTicketOptionIDs(ids...)
	return euo
}

// AddTicketOptions adds the "ticket_options" edges to the TicketOption entity.
func (euo *EventUpdateOne) AddTicketOptions(t ...*TicketOption) *EventUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTicketOptionIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (euo *EventUpdateOne) ClearTickets() *EventUpdateOne {
	euo.mutation.ClearTickets()
	return euo
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (euo *EventUpdateOne) RemoveTicketIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveTicketIDs(ids...)
	return euo
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (euo *EventUpdateOne) RemoveTickets(t ...*Ticket) *EventUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTicketIDs(ids...)
}

// ClearTicketOptions clears all "ticket_options" edges to the TicketOption entity.
func (euo *EventUpdateOne) ClearTicketOptions() *EventUpdateOne {
	euo.mutation.ClearTicketOptions()
	return euo
}

// RemoveTicketOptionIDs removes the "ticket_options" edge to TicketOption entities by IDs.
func (euo *EventUpdateOne) RemoveTicketOptionIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveTicketOptionIDs(ids...)
	return euo
}

// RemoveTicketOptions removes "ticket_options" edges to TicketOption entities.
func (euo *EventUpdateOne) RemoveTicketOptions(t ...*TicketOption) *EventUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTicketOptionIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.SearchText(); ok {
		_spec.SetField(event.FieldSearchText, field.TypeString, value)
	}
	if euo.mutation.SearchTextCleared() {
		_spec.ClearField(event.FieldSearchText, field.TypeString)
	}
	if value, ok := euo.mutation.RelevanceScore(); ok {
		_spec.SetField(event.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(event.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if euo.mutation.RelevanceScoreCleared() {
		_spec.ClearField(event.FieldRelevanceScore, field.TypeFloat64)
	}
	if euo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !euo.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TicketOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTicketOptionsIDs(); len(nodes) > 0 && !euo.mutation.TicketOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TicketOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketOptionsTable,
			Columns: []string{event.TicketOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}

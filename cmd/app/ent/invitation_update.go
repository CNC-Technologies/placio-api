// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/businessaccount"
	"placio-app/ent/invitation"
	"placio-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InvitationUpdate is the builder for updating Invitation entities.
type InvitationUpdate struct {
	config
	hooks    []Hook
	mutation *InvitationMutation
}

// Where appends a list predicates to the InvitationUpdate builder.
func (iu *InvitationUpdate) Where(ps ...predicate.Invitation) *InvitationUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetEmail sets the "Email" field.
func (iu *InvitationUpdate) SetEmail(s string) *InvitationUpdate {
	iu.mutation.SetEmail(s)
	return iu
}

// SetRole sets the "Role" field.
func (iu *InvitationUpdate) SetRole(s string) *InvitationUpdate {
	iu.mutation.SetRole(s)
	return iu
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (iu *InvitationUpdate) SetBusinessAccountID(s string) *InvitationUpdate {
	iu.mutation.SetBusinessAccountID(s)
	return iu
}

// SetCreatedAt sets the "CreatedAt" field.
func (iu *InvitationUpdate) SetCreatedAt(t time.Time) *InvitationUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (iu *InvitationUpdate) SetUpdatedAt(t time.Time) *InvitationUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// AddBusinessAccountIDs adds the "business_account" edge to the BusinessAccount entity by IDs.
func (iu *InvitationUpdate) AddBusinessAccountIDs(ids ...int) *InvitationUpdate {
	iu.mutation.AddBusinessAccountIDs(ids...)
	return iu
}

// AddBusinessAccount adds the "business_account" edges to the BusinessAccount entity.
func (iu *InvitationUpdate) AddBusinessAccount(b ...*BusinessAccount) *InvitationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.AddBusinessAccountIDs(ids...)
}

// Mutation returns the InvitationMutation object of the builder.
func (iu *InvitationUpdate) Mutation() *InvitationMutation {
	return iu.mutation
}

// ClearBusinessAccount clears all "business_account" edges to the BusinessAccount entity.
func (iu *InvitationUpdate) ClearBusinessAccount() *InvitationUpdate {
	iu.mutation.ClearBusinessAccount()
	return iu
}

// RemoveBusinessAccountIDs removes the "business_account" edge to BusinessAccount entities by IDs.
func (iu *InvitationUpdate) RemoveBusinessAccountIDs(ids ...int) *InvitationUpdate {
	iu.mutation.RemoveBusinessAccountIDs(ids...)
	return iu
}

// RemoveBusinessAccount removes "business_account" edges to BusinessAccount entities.
func (iu *InvitationUpdate) RemoveBusinessAccount(b ...*BusinessAccount) *InvitationUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.RemoveBusinessAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvitationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvitationUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvitationUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvitationUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InvitationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(invitation.Table, invitation.Columns, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Email(); ok {
		_spec.SetField(invitation.FieldEmail, field.TypeString, value)
	}
	if value, ok := iu.mutation.Role(); ok {
		_spec.SetField(invitation.FieldRole, field.TypeString, value)
	}
	if value, ok := iu.mutation.BusinessAccountID(); ok {
		_spec.SetField(invitation.FieldBusinessAccountID, field.TypeString, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(invitation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(invitation.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invitation.BusinessAccountTable,
			Columns: invitation.BusinessAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedBusinessAccountIDs(); len(nodes) > 0 && !iu.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invitation.BusinessAccountTable,
			Columns: invitation.BusinessAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invitation.BusinessAccountTable,
			Columns: invitation.BusinessAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvitationUpdateOne is the builder for updating a single Invitation entity.
type InvitationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvitationMutation
}

// SetEmail sets the "Email" field.
func (iuo *InvitationUpdateOne) SetEmail(s string) *InvitationUpdateOne {
	iuo.mutation.SetEmail(s)
	return iuo
}

// SetRole sets the "Role" field.
func (iuo *InvitationUpdateOne) SetRole(s string) *InvitationUpdateOne {
	iuo.mutation.SetRole(s)
	return iuo
}

// SetBusinessAccountID sets the "BusinessAccountID" field.
func (iuo *InvitationUpdateOne) SetBusinessAccountID(s string) *InvitationUpdateOne {
	iuo.mutation.SetBusinessAccountID(s)
	return iuo
}

// SetCreatedAt sets the "CreatedAt" field.
func (iuo *InvitationUpdateOne) SetCreatedAt(t time.Time) *InvitationUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (iuo *InvitationUpdateOne) SetUpdatedAt(t time.Time) *InvitationUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// AddBusinessAccountIDs adds the "business_account" edge to the BusinessAccount entity by IDs.
func (iuo *InvitationUpdateOne) AddBusinessAccountIDs(ids ...int) *InvitationUpdateOne {
	iuo.mutation.AddBusinessAccountIDs(ids...)
	return iuo
}

// AddBusinessAccount adds the "business_account" edges to the BusinessAccount entity.
func (iuo *InvitationUpdateOne) AddBusinessAccount(b ...*BusinessAccount) *InvitationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.AddBusinessAccountIDs(ids...)
}

// Mutation returns the InvitationMutation object of the builder.
func (iuo *InvitationUpdateOne) Mutation() *InvitationMutation {
	return iuo.mutation
}

// ClearBusinessAccount clears all "business_account" edges to the BusinessAccount entity.
func (iuo *InvitationUpdateOne) ClearBusinessAccount() *InvitationUpdateOne {
	iuo.mutation.ClearBusinessAccount()
	return iuo
}

// RemoveBusinessAccountIDs removes the "business_account" edge to BusinessAccount entities by IDs.
func (iuo *InvitationUpdateOne) RemoveBusinessAccountIDs(ids ...int) *InvitationUpdateOne {
	iuo.mutation.RemoveBusinessAccountIDs(ids...)
	return iuo
}

// RemoveBusinessAccount removes "business_account" edges to BusinessAccount entities.
func (iuo *InvitationUpdateOne) RemoveBusinessAccount(b ...*BusinessAccount) *InvitationUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.RemoveBusinessAccountIDs(ids...)
}

// Where appends a list predicates to the InvitationUpdate builder.
func (iuo *InvitationUpdateOne) Where(ps ...predicate.Invitation) *InvitationUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvitationUpdateOne) Select(field string, fields ...string) *InvitationUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invitation entity.
func (iuo *InvitationUpdateOne) Save(ctx context.Context) (*Invitation, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvitationUpdateOne) SaveX(ctx context.Context) *Invitation {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvitationUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvitationUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InvitationUpdateOne) sqlSave(ctx context.Context) (_node *Invitation, err error) {
	_spec := sqlgraph.NewUpdateSpec(invitation.Table, invitation.Columns, sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invitation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invitation.FieldID)
		for _, f := range fields {
			if !invitation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invitation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Email(); ok {
		_spec.SetField(invitation.FieldEmail, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Role(); ok {
		_spec.SetField(invitation.FieldRole, field.TypeString, value)
	}
	if value, ok := iuo.mutation.BusinessAccountID(); ok {
		_spec.SetField(invitation.FieldBusinessAccountID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(invitation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invitation.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invitation.BusinessAccountTable,
			Columns: invitation.BusinessAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedBusinessAccountIDs(); len(nodes) > 0 && !iuo.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invitation.BusinessAccountTable,
			Columns: invitation.BusinessAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   invitation.BusinessAccountTable,
			Columns: invitation.BusinessAccountPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invitation{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invitation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}

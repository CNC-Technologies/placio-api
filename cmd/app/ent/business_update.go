// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessaccountsettings"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/userbusiness"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessUpdate is the builder for updating Business entities.
type BusinessUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessMutation
}

// Where appends a list predicates to the BusinessUpdate builder.
func (bu *BusinessUpdate) Where(ps ...predicate.Business) *BusinessUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BusinessUpdate) SetName(s string) *BusinessUpdate {
	bu.mutation.SetName(s)
	return bu
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (bu *BusinessUpdate) AddUserBusinessIDs(ids ...int) *BusinessUpdate {
	bu.mutation.AddUserBusinessIDs(ids...)
	return bu
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (bu *BusinessUpdate) AddUserBusinesses(u ...*UserBusiness) *BusinessUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.AddUserBusinessIDs(ids...)
}

// SetBusinessAccountSettingsID sets the "business_account_settings" edge to the BusinessAccountSettings entity by ID.
func (bu *BusinessUpdate) SetBusinessAccountSettingsID(id int) *BusinessUpdate {
	bu.mutation.SetBusinessAccountSettingsID(id)
	return bu
}

// SetNillableBusinessAccountSettingsID sets the "business_account_settings" edge to the BusinessAccountSettings entity by ID if the given value is not nil.
func (bu *BusinessUpdate) SetNillableBusinessAccountSettingsID(id *int) *BusinessUpdate {
	if id != nil {
		bu = bu.SetBusinessAccountSettingsID(*id)
	}
	return bu
}

// SetBusinessAccountSettings sets the "business_account_settings" edge to the BusinessAccountSettings entity.
func (bu *BusinessUpdate) SetBusinessAccountSettings(b *BusinessAccountSettings) *BusinessUpdate {
	return bu.SetBusinessAccountSettingsID(b.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (bu *BusinessUpdate) AddPostIDs(ids ...int) *BusinessUpdate {
	bu.mutation.AddPostIDs(ids...)
	return bu
}

// AddPosts adds the "posts" edges to the Post entity.
func (bu *BusinessUpdate) AddPosts(p ...*Post) *BusinessUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddPostIDs(ids...)
}

// Mutation returns the BusinessMutation object of the builder.
func (bu *BusinessUpdate) Mutation() *BusinessMutation {
	return bu.mutation
}

// ClearUserBusinesses clears all "userBusinesses" edges to the UserBusiness entity.
func (bu *BusinessUpdate) ClearUserBusinesses() *BusinessUpdate {
	bu.mutation.ClearUserBusinesses()
	return bu
}

// RemoveUserBusinessIDs removes the "userBusinesses" edge to UserBusiness entities by IDs.
func (bu *BusinessUpdate) RemoveUserBusinessIDs(ids ...int) *BusinessUpdate {
	bu.mutation.RemoveUserBusinessIDs(ids...)
	return bu
}

// RemoveUserBusinesses removes "userBusinesses" edges to UserBusiness entities.
func (bu *BusinessUpdate) RemoveUserBusinesses(u ...*UserBusiness) *BusinessUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.RemoveUserBusinessIDs(ids...)
}

// ClearBusinessAccountSettings clears the "business_account_settings" edge to the BusinessAccountSettings entity.
func (bu *BusinessUpdate) ClearBusinessAccountSettings() *BusinessUpdate {
	bu.mutation.ClearBusinessAccountSettings()
	return bu
}

// ClearPosts clears all "posts" edges to the Post entity.
func (bu *BusinessUpdate) ClearPosts() *BusinessUpdate {
	bu.mutation.ClearPosts()
	return bu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (bu *BusinessUpdate) RemovePostIDs(ids ...int) *BusinessUpdate {
	bu.mutation.RemovePostIDs(ids...)
	return bu
}

// RemovePosts removes "posts" edges to Post entities.
func (bu *BusinessUpdate) RemovePosts(p ...*Post) *BusinessUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BusinessUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BusinessUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BusinessUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BusinessUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BusinessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(business.FieldName, field.TypeString, value)
	}
	if bu.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedUserBusinessesIDs(); len(nodes) > 0 && !bu.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BusinessAccountSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccountsettings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BusinessAccountSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccountsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !bu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BusinessUpdateOne is the builder for updating a single Business entity.
type BusinessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessMutation
}

// SetName sets the "name" field.
func (buo *BusinessUpdateOne) SetName(s string) *BusinessUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (buo *BusinessUpdateOne) AddUserBusinessIDs(ids ...int) *BusinessUpdateOne {
	buo.mutation.AddUserBusinessIDs(ids...)
	return buo
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (buo *BusinessUpdateOne) AddUserBusinesses(u ...*UserBusiness) *BusinessUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.AddUserBusinessIDs(ids...)
}

// SetBusinessAccountSettingsID sets the "business_account_settings" edge to the BusinessAccountSettings entity by ID.
func (buo *BusinessUpdateOne) SetBusinessAccountSettingsID(id int) *BusinessUpdateOne {
	buo.mutation.SetBusinessAccountSettingsID(id)
	return buo
}

// SetNillableBusinessAccountSettingsID sets the "business_account_settings" edge to the BusinessAccountSettings entity by ID if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableBusinessAccountSettingsID(id *int) *BusinessUpdateOne {
	if id != nil {
		buo = buo.SetBusinessAccountSettingsID(*id)
	}
	return buo
}

// SetBusinessAccountSettings sets the "business_account_settings" edge to the BusinessAccountSettings entity.
func (buo *BusinessUpdateOne) SetBusinessAccountSettings(b *BusinessAccountSettings) *BusinessUpdateOne {
	return buo.SetBusinessAccountSettingsID(b.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (buo *BusinessUpdateOne) AddPostIDs(ids ...int) *BusinessUpdateOne {
	buo.mutation.AddPostIDs(ids...)
	return buo
}

// AddPosts adds the "posts" edges to the Post entity.
func (buo *BusinessUpdateOne) AddPosts(p ...*Post) *BusinessUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddPostIDs(ids...)
}

// Mutation returns the BusinessMutation object of the builder.
func (buo *BusinessUpdateOne) Mutation() *BusinessMutation {
	return buo.mutation
}

// ClearUserBusinesses clears all "userBusinesses" edges to the UserBusiness entity.
func (buo *BusinessUpdateOne) ClearUserBusinesses() *BusinessUpdateOne {
	buo.mutation.ClearUserBusinesses()
	return buo
}

// RemoveUserBusinessIDs removes the "userBusinesses" edge to UserBusiness entities by IDs.
func (buo *BusinessUpdateOne) RemoveUserBusinessIDs(ids ...int) *BusinessUpdateOne {
	buo.mutation.RemoveUserBusinessIDs(ids...)
	return buo
}

// RemoveUserBusinesses removes "userBusinesses" edges to UserBusiness entities.
func (buo *BusinessUpdateOne) RemoveUserBusinesses(u ...*UserBusiness) *BusinessUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.RemoveUserBusinessIDs(ids...)
}

// ClearBusinessAccountSettings clears the "business_account_settings" edge to the BusinessAccountSettings entity.
func (buo *BusinessUpdateOne) ClearBusinessAccountSettings() *BusinessUpdateOne {
	buo.mutation.ClearBusinessAccountSettings()
	return buo
}

// ClearPosts clears all "posts" edges to the Post entity.
func (buo *BusinessUpdateOne) ClearPosts() *BusinessUpdateOne {
	buo.mutation.ClearPosts()
	return buo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (buo *BusinessUpdateOne) RemovePostIDs(ids ...int) *BusinessUpdateOne {
	buo.mutation.RemovePostIDs(ids...)
	return buo
}

// RemovePosts removes "posts" edges to Post entities.
func (buo *BusinessUpdateOne) RemovePosts(p ...*Post) *BusinessUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemovePostIDs(ids...)
}

// Where appends a list predicates to the BusinessUpdate builder.
func (buo *BusinessUpdateOne) Where(ps ...predicate.Business) *BusinessUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BusinessUpdateOne) Select(field string, fields ...string) *BusinessUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Business entity.
func (buo *BusinessUpdateOne) Save(ctx context.Context) (*Business, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BusinessUpdateOne) SaveX(ctx context.Context) *Business {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BusinessUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BusinessUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BusinessUpdateOne) sqlSave(ctx context.Context) (_node *Business, err error) {
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Business.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, business.FieldID)
		for _, f := range fields {
			if !business.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != business.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(business.FieldName, field.TypeString, value)
	}
	if buo.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedUserBusinessesIDs(); len(nodes) > 0 && !buo.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BusinessAccountSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccountsettings.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BusinessAccountSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessaccountsettings.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !buo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Business{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}

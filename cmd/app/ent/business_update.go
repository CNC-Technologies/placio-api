// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/accountsettings"
	"placio-app/ent/business"
	"placio-app/ent/businessfollowbusiness"
	"placio-app/ent/businessfollowuser"
	"placio-app/ent/category"
	"placio-app/ent/categoryassignment"
	"placio-app/ent/place"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/userbusiness"
	"placio-app/ent/userfollowbusiness"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessUpdate is the builder for updating Business entities.
type BusinessUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessMutation
}

// Where appends a list predicates to the BusinessUpdate builder.
func (bu *BusinessUpdate) Where(ps ...predicate.Business) *BusinessUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BusinessUpdate) SetName(s string) *BusinessUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetDescription sets the "description" field.
func (bu *BusinessUpdate) SetDescription(s string) *BusinessUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableDescription(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetDescription(*s)
	}
	return bu
}

// ClearDescription clears the value of the "description" field.
func (bu *BusinessUpdate) ClearDescription() *BusinessUpdate {
	bu.mutation.ClearDescription()
	return bu
}

// SetPicture sets the "picture" field.
func (bu *BusinessUpdate) SetPicture(s string) *BusinessUpdate {
	bu.mutation.SetPicture(s)
	return bu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillablePicture(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetPicture(*s)
	}
	return bu
}

// ClearPicture clears the value of the "picture" field.
func (bu *BusinessUpdate) ClearPicture() *BusinessUpdate {
	bu.mutation.ClearPicture()
	return bu
}

// SetCoverImage sets the "cover_image" field.
func (bu *BusinessUpdate) SetCoverImage(s string) *BusinessUpdate {
	bu.mutation.SetCoverImage(s)
	return bu
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableCoverImage(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetCoverImage(*s)
	}
	return bu
}

// ClearCoverImage clears the value of the "cover_image" field.
func (bu *BusinessUpdate) ClearCoverImage() *BusinessUpdate {
	bu.mutation.ClearCoverImage()
	return bu
}

// SetWebsite sets the "website" field.
func (bu *BusinessUpdate) SetWebsite(s string) *BusinessUpdate {
	bu.mutation.SetWebsite(s)
	return bu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableWebsite(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetWebsite(*s)
	}
	return bu
}

// ClearWebsite clears the value of the "website" field.
func (bu *BusinessUpdate) ClearWebsite() *BusinessUpdate {
	bu.mutation.ClearWebsite()
	return bu
}

// SetLocation sets the "location" field.
func (bu *BusinessUpdate) SetLocation(s string) *BusinessUpdate {
	bu.mutation.SetLocation(s)
	return bu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableLocation(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetLocation(*s)
	}
	return bu
}

// ClearLocation clears the value of the "location" field.
func (bu *BusinessUpdate) ClearLocation() *BusinessUpdate {
	bu.mutation.ClearLocation()
	return bu
}

// SetEmail sets the "email" field.
func (bu *BusinessUpdate) SetEmail(s string) *BusinessUpdate {
	bu.mutation.SetEmail(s)
	return bu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableEmail(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetEmail(*s)
	}
	return bu
}

// ClearEmail clears the value of the "email" field.
func (bu *BusinessUpdate) ClearEmail() *BusinessUpdate {
	bu.mutation.ClearEmail()
	return bu
}

// SetPhone sets the "phone" field.
func (bu *BusinessUpdate) SetPhone(s string) *BusinessUpdate {
	bu.mutation.SetPhone(s)
	return bu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillablePhone(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetPhone(*s)
	}
	return bu
}

// ClearPhone clears the value of the "phone" field.
func (bu *BusinessUpdate) ClearPhone() *BusinessUpdate {
	bu.mutation.ClearPhone()
	return bu
}

// SetBusinessSettings sets the "business_settings" field.
func (bu *BusinessUpdate) SetBusinessSettings(m map[string]interface{}) *BusinessUpdate {
	bu.mutation.SetBusinessSettings(m)
	return bu
}

// ClearBusinessSettings clears the value of the "business_settings" field.
func (bu *BusinessUpdate) ClearBusinessSettings() *BusinessUpdate {
	bu.mutation.ClearBusinessSettings()
	return bu
}

// SetSearchText sets the "search_text" field.
func (bu *BusinessUpdate) SetSearchText(s string) *BusinessUpdate {
	bu.mutation.SetSearchText(s)
	return bu
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableSearchText(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetSearchText(*s)
	}
	return bu
}

// ClearSearchText clears the value of the "search_text" field.
func (bu *BusinessUpdate) ClearSearchText() *BusinessUpdate {
	bu.mutation.ClearSearchText()
	return bu
}

// SetRelevanceScore sets the "relevance_score" field.
func (bu *BusinessUpdate) SetRelevanceScore(f float64) *BusinessUpdate {
	bu.mutation.ResetRelevanceScore()
	bu.mutation.SetRelevanceScore(f)
	return bu
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableRelevanceScore(f *float64) *BusinessUpdate {
	if f != nil {
		bu.SetRelevanceScore(*f)
	}
	return bu
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (bu *BusinessUpdate) AddRelevanceScore(f float64) *BusinessUpdate {
	bu.mutation.AddRelevanceScore(f)
	return bu
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (bu *BusinessUpdate) ClearRelevanceScore() *BusinessUpdate {
	bu.mutation.ClearRelevanceScore()
	return bu
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (bu *BusinessUpdate) AddUserBusinessIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddUserBusinessIDs(ids...)
	return bu
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (bu *BusinessUpdate) AddUserBusinesses(u ...*UserBusiness) *BusinessUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.AddUserBusinessIDs(ids...)
}

// SetBusinessAccountSettingsID sets the "business_account_settings" edge to the AccountSettings entity by ID.
func (bu *BusinessUpdate) SetBusinessAccountSettingsID(id string) *BusinessUpdate {
	bu.mutation.SetBusinessAccountSettingsID(id)
	return bu
}

// SetNillableBusinessAccountSettingsID sets the "business_account_settings" edge to the AccountSettings entity by ID if the given value is not nil.
func (bu *BusinessUpdate) SetNillableBusinessAccountSettingsID(id *string) *BusinessUpdate {
	if id != nil {
		bu = bu.SetBusinessAccountSettingsID(*id)
	}
	return bu
}

// SetBusinessAccountSettings sets the "business_account_settings" edge to the AccountSettings entity.
func (bu *BusinessUpdate) SetBusinessAccountSettings(a *AccountSettings) *BusinessUpdate {
	return bu.SetBusinessAccountSettingsID(a.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (bu *BusinessUpdate) AddPostIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddPostIDs(ids...)
	return bu
}

// AddPosts adds the "posts" edges to the Post entity.
func (bu *BusinessUpdate) AddPosts(p ...*Post) *BusinessUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddPostIDs(ids...)
}

// AddFollowedUserIDs adds the "followedUsers" edge to the BusinessFollowUser entity by IDs.
func (bu *BusinessUpdate) AddFollowedUserIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddFollowedUserIDs(ids...)
	return bu
}

// AddFollowedUsers adds the "followedUsers" edges to the BusinessFollowUser entity.
func (bu *BusinessUpdate) AddFollowedUsers(b ...*BusinessFollowUser) *BusinessUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddFollowedUserIDs(ids...)
}

// AddFollowerUserIDs adds the "followerUsers" edge to the UserFollowBusiness entity by IDs.
func (bu *BusinessUpdate) AddFollowerUserIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddFollowerUserIDs(ids...)
	return bu
}

// AddFollowerUsers adds the "followerUsers" edges to the UserFollowBusiness entity.
func (bu *BusinessUpdate) AddFollowerUsers(u ...*UserFollowBusiness) *BusinessUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.AddFollowerUserIDs(ids...)
}

// AddFollowedBusinessIDs adds the "followedBusinesses" edge to the BusinessFollowBusiness entity by IDs.
func (bu *BusinessUpdate) AddFollowedBusinessIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddFollowedBusinessIDs(ids...)
	return bu
}

// AddFollowedBusinesses adds the "followedBusinesses" edges to the BusinessFollowBusiness entity.
func (bu *BusinessUpdate) AddFollowedBusinesses(b ...*BusinessFollowBusiness) *BusinessUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddFollowedBusinessIDs(ids...)
}

// AddFollowerBusinessIDs adds the "followerBusinesses" edge to the BusinessFollowBusiness entity by IDs.
func (bu *BusinessUpdate) AddFollowerBusinessIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddFollowerBusinessIDs(ids...)
	return bu
}

// AddFollowerBusinesses adds the "followerBusinesses" edges to the BusinessFollowBusiness entity.
func (bu *BusinessUpdate) AddFollowerBusinesses(b ...*BusinessFollowBusiness) *BusinessUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddFollowerBusinessIDs(ids...)
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (bu *BusinessUpdate) AddPlaceIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddPlaceIDs(ids...)
	return bu
}

// AddPlaces adds the "places" edges to the Place entity.
func (bu *BusinessUpdate) AddPlaces(p ...*Place) *BusinessUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.AddPlaceIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (bu *BusinessUpdate) AddCategoryIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddCategoryIDs(ids...)
	return bu
}

// AddCategories adds the "categories" edges to the Category entity.
func (bu *BusinessUpdate) AddCategories(c ...*Category) *BusinessUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCategoryIDs(ids...)
}

// AddCategoryAssignmentIDs adds the "categoryAssignments" edge to the CategoryAssignment entity by IDs.
func (bu *BusinessUpdate) AddCategoryAssignmentIDs(ids ...string) *BusinessUpdate {
	bu.mutation.AddCategoryAssignmentIDs(ids...)
	return bu
}

// AddCategoryAssignments adds the "categoryAssignments" edges to the CategoryAssignment entity.
func (bu *BusinessUpdate) AddCategoryAssignments(c ...*CategoryAssignment) *BusinessUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCategoryAssignmentIDs(ids...)
}

// Mutation returns the BusinessMutation object of the builder.
func (bu *BusinessUpdate) Mutation() *BusinessMutation {
	return bu.mutation
}

// ClearUserBusinesses clears all "userBusinesses" edges to the UserBusiness entity.
func (bu *BusinessUpdate) ClearUserBusinesses() *BusinessUpdate {
	bu.mutation.ClearUserBusinesses()
	return bu
}

// RemoveUserBusinessIDs removes the "userBusinesses" edge to UserBusiness entities by IDs.
func (bu *BusinessUpdate) RemoveUserBusinessIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemoveUserBusinessIDs(ids...)
	return bu
}

// RemoveUserBusinesses removes "userBusinesses" edges to UserBusiness entities.
func (bu *BusinessUpdate) RemoveUserBusinesses(u ...*UserBusiness) *BusinessUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.RemoveUserBusinessIDs(ids...)
}

// ClearBusinessAccountSettings clears the "business_account_settings" edge to the AccountSettings entity.
func (bu *BusinessUpdate) ClearBusinessAccountSettings() *BusinessUpdate {
	bu.mutation.ClearBusinessAccountSettings()
	return bu
}

// ClearPosts clears all "posts" edges to the Post entity.
func (bu *BusinessUpdate) ClearPosts() *BusinessUpdate {
	bu.mutation.ClearPosts()
	return bu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (bu *BusinessUpdate) RemovePostIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemovePostIDs(ids...)
	return bu
}

// RemovePosts removes "posts" edges to Post entities.
func (bu *BusinessUpdate) RemovePosts(p ...*Post) *BusinessUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemovePostIDs(ids...)
}

// ClearFollowedUsers clears all "followedUsers" edges to the BusinessFollowUser entity.
func (bu *BusinessUpdate) ClearFollowedUsers() *BusinessUpdate {
	bu.mutation.ClearFollowedUsers()
	return bu
}

// RemoveFollowedUserIDs removes the "followedUsers" edge to BusinessFollowUser entities by IDs.
func (bu *BusinessUpdate) RemoveFollowedUserIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemoveFollowedUserIDs(ids...)
	return bu
}

// RemoveFollowedUsers removes "followedUsers" edges to BusinessFollowUser entities.
func (bu *BusinessUpdate) RemoveFollowedUsers(b ...*BusinessFollowUser) *BusinessUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveFollowedUserIDs(ids...)
}

// ClearFollowerUsers clears all "followerUsers" edges to the UserFollowBusiness entity.
func (bu *BusinessUpdate) ClearFollowerUsers() *BusinessUpdate {
	bu.mutation.ClearFollowerUsers()
	return bu
}

// RemoveFollowerUserIDs removes the "followerUsers" edge to UserFollowBusiness entities by IDs.
func (bu *BusinessUpdate) RemoveFollowerUserIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemoveFollowerUserIDs(ids...)
	return bu
}

// RemoveFollowerUsers removes "followerUsers" edges to UserFollowBusiness entities.
func (bu *BusinessUpdate) RemoveFollowerUsers(u ...*UserFollowBusiness) *BusinessUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return bu.RemoveFollowerUserIDs(ids...)
}

// ClearFollowedBusinesses clears all "followedBusinesses" edges to the BusinessFollowBusiness entity.
func (bu *BusinessUpdate) ClearFollowedBusinesses() *BusinessUpdate {
	bu.mutation.ClearFollowedBusinesses()
	return bu
}

// RemoveFollowedBusinessIDs removes the "followedBusinesses" edge to BusinessFollowBusiness entities by IDs.
func (bu *BusinessUpdate) RemoveFollowedBusinessIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemoveFollowedBusinessIDs(ids...)
	return bu
}

// RemoveFollowedBusinesses removes "followedBusinesses" edges to BusinessFollowBusiness entities.
func (bu *BusinessUpdate) RemoveFollowedBusinesses(b ...*BusinessFollowBusiness) *BusinessUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveFollowedBusinessIDs(ids...)
}

// ClearFollowerBusinesses clears all "followerBusinesses" edges to the BusinessFollowBusiness entity.
func (bu *BusinessUpdate) ClearFollowerBusinesses() *BusinessUpdate {
	bu.mutation.ClearFollowerBusinesses()
	return bu
}

// RemoveFollowerBusinessIDs removes the "followerBusinesses" edge to BusinessFollowBusiness entities by IDs.
func (bu *BusinessUpdate) RemoveFollowerBusinessIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemoveFollowerBusinessIDs(ids...)
	return bu
}

// RemoveFollowerBusinesses removes "followerBusinesses" edges to BusinessFollowBusiness entities.
func (bu *BusinessUpdate) RemoveFollowerBusinesses(b ...*BusinessFollowBusiness) *BusinessUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveFollowerBusinessIDs(ids...)
}

// ClearPlaces clears all "places" edges to the Place entity.
func (bu *BusinessUpdate) ClearPlaces() *BusinessUpdate {
	bu.mutation.ClearPlaces()
	return bu
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (bu *BusinessUpdate) RemovePlaceIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemovePlaceIDs(ids...)
	return bu
}

// RemovePlaces removes "places" edges to Place entities.
func (bu *BusinessUpdate) RemovePlaces(p ...*Place) *BusinessUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bu.RemovePlaceIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (bu *BusinessUpdate) ClearCategories() *BusinessUpdate {
	bu.mutation.ClearCategories()
	return bu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (bu *BusinessUpdate) RemoveCategoryIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemoveCategoryIDs(ids...)
	return bu
}

// RemoveCategories removes "categories" edges to Category entities.
func (bu *BusinessUpdate) RemoveCategories(c ...*Category) *BusinessUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCategoryIDs(ids...)
}

// ClearCategoryAssignments clears all "categoryAssignments" edges to the CategoryAssignment entity.
func (bu *BusinessUpdate) ClearCategoryAssignments() *BusinessUpdate {
	bu.mutation.ClearCategoryAssignments()
	return bu
}

// RemoveCategoryAssignmentIDs removes the "categoryAssignments" edge to CategoryAssignment entities by IDs.
func (bu *BusinessUpdate) RemoveCategoryAssignmentIDs(ids ...string) *BusinessUpdate {
	bu.mutation.RemoveCategoryAssignmentIDs(ids...)
	return bu
}

// RemoveCategoryAssignments removes "categoryAssignments" edges to CategoryAssignment entities.
func (bu *BusinessUpdate) RemoveCategoryAssignments(c ...*CategoryAssignment) *BusinessUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCategoryAssignmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BusinessUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BusinessUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BusinessUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BusinessUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BusinessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeString))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(business.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(business.FieldDescription, field.TypeString, value)
	}
	if bu.mutation.DescriptionCleared() {
		_spec.ClearField(business.FieldDescription, field.TypeString)
	}
	if value, ok := bu.mutation.Picture(); ok {
		_spec.SetField(business.FieldPicture, field.TypeString, value)
	}
	if bu.mutation.PictureCleared() {
		_spec.ClearField(business.FieldPicture, field.TypeString)
	}
	if value, ok := bu.mutation.CoverImage(); ok {
		_spec.SetField(business.FieldCoverImage, field.TypeString, value)
	}
	if bu.mutation.CoverImageCleared() {
		_spec.ClearField(business.FieldCoverImage, field.TypeString)
	}
	if value, ok := bu.mutation.Website(); ok {
		_spec.SetField(business.FieldWebsite, field.TypeString, value)
	}
	if bu.mutation.WebsiteCleared() {
		_spec.ClearField(business.FieldWebsite, field.TypeString)
	}
	if value, ok := bu.mutation.Location(); ok {
		_spec.SetField(business.FieldLocation, field.TypeString, value)
	}
	if bu.mutation.LocationCleared() {
		_spec.ClearField(business.FieldLocation, field.TypeString)
	}
	if value, ok := bu.mutation.Email(); ok {
		_spec.SetField(business.FieldEmail, field.TypeString, value)
	}
	if bu.mutation.EmailCleared() {
		_spec.ClearField(business.FieldEmail, field.TypeString)
	}
	if value, ok := bu.mutation.Phone(); ok {
		_spec.SetField(business.FieldPhone, field.TypeString, value)
	}
	if bu.mutation.PhoneCleared() {
		_spec.ClearField(business.FieldPhone, field.TypeString)
	}
	if value, ok := bu.mutation.BusinessSettings(); ok {
		_spec.SetField(business.FieldBusinessSettings, field.TypeJSON, value)
	}
	if bu.mutation.BusinessSettingsCleared() {
		_spec.ClearField(business.FieldBusinessSettings, field.TypeJSON)
	}
	if value, ok := bu.mutation.SearchText(); ok {
		_spec.SetField(business.FieldSearchText, field.TypeString, value)
	}
	if bu.mutation.SearchTextCleared() {
		_spec.ClearField(business.FieldSearchText, field.TypeString)
	}
	if value, ok := bu.mutation.RelevanceScore(); ok {
		_spec.SetField(business.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(business.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if bu.mutation.RelevanceScoreCleared() {
		_spec.ClearField(business.FieldRelevanceScore, field.TypeFloat64)
	}
	if bu.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedUserBusinessesIDs(); len(nodes) > 0 && !bu.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BusinessAccountSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BusinessAccountSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !bu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedUsersTable,
			Columns: []string{business.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedFollowedUsersIDs(); len(nodes) > 0 && !bu.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedUsersTable,
			Columns: []string{business.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FollowedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedUsersTable,
			Columns: []string{business.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerUsersTable,
			Columns: []string{business.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedFollowerUsersIDs(); len(nodes) > 0 && !bu.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerUsersTable,
			Columns: []string{business.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FollowerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerUsersTable,
			Columns: []string{business.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedBusinessesTable,
			Columns: []string{business.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedFollowedBusinessesIDs(); len(nodes) > 0 && !bu.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedBusinessesTable,
			Columns: []string{business.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FollowedBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedBusinessesTable,
			Columns: []string{business.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerBusinessesTable,
			Columns: []string{business.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedFollowerBusinessesIDs(); len(nodes) > 0 && !bu.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerBusinessesTable,
			Columns: []string{business.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FollowerBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerBusinessesTable,
			Columns: []string{business.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PlacesTable,
			Columns: []string{business.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !bu.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PlacesTable,
			Columns: []string{business.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PlacesTable,
			Columns: []string{business.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoriesTable,
			Columns: []string{business.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !bu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoriesTable,
			Columns: []string{business.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoriesTable,
			Columns: []string{business.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoryAssignmentsTable,
			Columns: []string{business.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCategoryAssignmentsIDs(); len(nodes) > 0 && !bu.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoryAssignmentsTable,
			Columns: []string{business.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CategoryAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoryAssignmentsTable,
			Columns: []string{business.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BusinessUpdateOne is the builder for updating a single Business entity.
type BusinessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessMutation
}

// SetName sets the "name" field.
func (buo *BusinessUpdateOne) SetName(s string) *BusinessUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetDescription sets the "description" field.
func (buo *BusinessUpdateOne) SetDescription(s string) *BusinessUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableDescription(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetDescription(*s)
	}
	return buo
}

// ClearDescription clears the value of the "description" field.
func (buo *BusinessUpdateOne) ClearDescription() *BusinessUpdateOne {
	buo.mutation.ClearDescription()
	return buo
}

// SetPicture sets the "picture" field.
func (buo *BusinessUpdateOne) SetPicture(s string) *BusinessUpdateOne {
	buo.mutation.SetPicture(s)
	return buo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillablePicture(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetPicture(*s)
	}
	return buo
}

// ClearPicture clears the value of the "picture" field.
func (buo *BusinessUpdateOne) ClearPicture() *BusinessUpdateOne {
	buo.mutation.ClearPicture()
	return buo
}

// SetCoverImage sets the "cover_image" field.
func (buo *BusinessUpdateOne) SetCoverImage(s string) *BusinessUpdateOne {
	buo.mutation.SetCoverImage(s)
	return buo
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableCoverImage(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetCoverImage(*s)
	}
	return buo
}

// ClearCoverImage clears the value of the "cover_image" field.
func (buo *BusinessUpdateOne) ClearCoverImage() *BusinessUpdateOne {
	buo.mutation.ClearCoverImage()
	return buo
}

// SetWebsite sets the "website" field.
func (buo *BusinessUpdateOne) SetWebsite(s string) *BusinessUpdateOne {
	buo.mutation.SetWebsite(s)
	return buo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableWebsite(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetWebsite(*s)
	}
	return buo
}

// ClearWebsite clears the value of the "website" field.
func (buo *BusinessUpdateOne) ClearWebsite() *BusinessUpdateOne {
	buo.mutation.ClearWebsite()
	return buo
}

// SetLocation sets the "location" field.
func (buo *BusinessUpdateOne) SetLocation(s string) *BusinessUpdateOne {
	buo.mutation.SetLocation(s)
	return buo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableLocation(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetLocation(*s)
	}
	return buo
}

// ClearLocation clears the value of the "location" field.
func (buo *BusinessUpdateOne) ClearLocation() *BusinessUpdateOne {
	buo.mutation.ClearLocation()
	return buo
}

// SetEmail sets the "email" field.
func (buo *BusinessUpdateOne) SetEmail(s string) *BusinessUpdateOne {
	buo.mutation.SetEmail(s)
	return buo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableEmail(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetEmail(*s)
	}
	return buo
}

// ClearEmail clears the value of the "email" field.
func (buo *BusinessUpdateOne) ClearEmail() *BusinessUpdateOne {
	buo.mutation.ClearEmail()
	return buo
}

// SetPhone sets the "phone" field.
func (buo *BusinessUpdateOne) SetPhone(s string) *BusinessUpdateOne {
	buo.mutation.SetPhone(s)
	return buo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillablePhone(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetPhone(*s)
	}
	return buo
}

// ClearPhone clears the value of the "phone" field.
func (buo *BusinessUpdateOne) ClearPhone() *BusinessUpdateOne {
	buo.mutation.ClearPhone()
	return buo
}

// SetBusinessSettings sets the "business_settings" field.
func (buo *BusinessUpdateOne) SetBusinessSettings(m map[string]interface{}) *BusinessUpdateOne {
	buo.mutation.SetBusinessSettings(m)
	return buo
}

// ClearBusinessSettings clears the value of the "business_settings" field.
func (buo *BusinessUpdateOne) ClearBusinessSettings() *BusinessUpdateOne {
	buo.mutation.ClearBusinessSettings()
	return buo
}

// SetSearchText sets the "search_text" field.
func (buo *BusinessUpdateOne) SetSearchText(s string) *BusinessUpdateOne {
	buo.mutation.SetSearchText(s)
	return buo
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableSearchText(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetSearchText(*s)
	}
	return buo
}

// ClearSearchText clears the value of the "search_text" field.
func (buo *BusinessUpdateOne) ClearSearchText() *BusinessUpdateOne {
	buo.mutation.ClearSearchText()
	return buo
}

// SetRelevanceScore sets the "relevance_score" field.
func (buo *BusinessUpdateOne) SetRelevanceScore(f float64) *BusinessUpdateOne {
	buo.mutation.ResetRelevanceScore()
	buo.mutation.SetRelevanceScore(f)
	return buo
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableRelevanceScore(f *float64) *BusinessUpdateOne {
	if f != nil {
		buo.SetRelevanceScore(*f)
	}
	return buo
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (buo *BusinessUpdateOne) AddRelevanceScore(f float64) *BusinessUpdateOne {
	buo.mutation.AddRelevanceScore(f)
	return buo
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (buo *BusinessUpdateOne) ClearRelevanceScore() *BusinessUpdateOne {
	buo.mutation.ClearRelevanceScore()
	return buo
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (buo *BusinessUpdateOne) AddUserBusinessIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddUserBusinessIDs(ids...)
	return buo
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (buo *BusinessUpdateOne) AddUserBusinesses(u ...*UserBusiness) *BusinessUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.AddUserBusinessIDs(ids...)
}

// SetBusinessAccountSettingsID sets the "business_account_settings" edge to the AccountSettings entity by ID.
func (buo *BusinessUpdateOne) SetBusinessAccountSettingsID(id string) *BusinessUpdateOne {
	buo.mutation.SetBusinessAccountSettingsID(id)
	return buo
}

// SetNillableBusinessAccountSettingsID sets the "business_account_settings" edge to the AccountSettings entity by ID if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableBusinessAccountSettingsID(id *string) *BusinessUpdateOne {
	if id != nil {
		buo = buo.SetBusinessAccountSettingsID(*id)
	}
	return buo
}

// SetBusinessAccountSettings sets the "business_account_settings" edge to the AccountSettings entity.
func (buo *BusinessUpdateOne) SetBusinessAccountSettings(a *AccountSettings) *BusinessUpdateOne {
	return buo.SetBusinessAccountSettingsID(a.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (buo *BusinessUpdateOne) AddPostIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddPostIDs(ids...)
	return buo
}

// AddPosts adds the "posts" edges to the Post entity.
func (buo *BusinessUpdateOne) AddPosts(p ...*Post) *BusinessUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddPostIDs(ids...)
}

// AddFollowedUserIDs adds the "followedUsers" edge to the BusinessFollowUser entity by IDs.
func (buo *BusinessUpdateOne) AddFollowedUserIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddFollowedUserIDs(ids...)
	return buo
}

// AddFollowedUsers adds the "followedUsers" edges to the BusinessFollowUser entity.
func (buo *BusinessUpdateOne) AddFollowedUsers(b ...*BusinessFollowUser) *BusinessUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddFollowedUserIDs(ids...)
}

// AddFollowerUserIDs adds the "followerUsers" edge to the UserFollowBusiness entity by IDs.
func (buo *BusinessUpdateOne) AddFollowerUserIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddFollowerUserIDs(ids...)
	return buo
}

// AddFollowerUsers adds the "followerUsers" edges to the UserFollowBusiness entity.
func (buo *BusinessUpdateOne) AddFollowerUsers(u ...*UserFollowBusiness) *BusinessUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.AddFollowerUserIDs(ids...)
}

// AddFollowedBusinessIDs adds the "followedBusinesses" edge to the BusinessFollowBusiness entity by IDs.
func (buo *BusinessUpdateOne) AddFollowedBusinessIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddFollowedBusinessIDs(ids...)
	return buo
}

// AddFollowedBusinesses adds the "followedBusinesses" edges to the BusinessFollowBusiness entity.
func (buo *BusinessUpdateOne) AddFollowedBusinesses(b ...*BusinessFollowBusiness) *BusinessUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddFollowedBusinessIDs(ids...)
}

// AddFollowerBusinessIDs adds the "followerBusinesses" edge to the BusinessFollowBusiness entity by IDs.
func (buo *BusinessUpdateOne) AddFollowerBusinessIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddFollowerBusinessIDs(ids...)
	return buo
}

// AddFollowerBusinesses adds the "followerBusinesses" edges to the BusinessFollowBusiness entity.
func (buo *BusinessUpdateOne) AddFollowerBusinesses(b ...*BusinessFollowBusiness) *BusinessUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddFollowerBusinessIDs(ids...)
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (buo *BusinessUpdateOne) AddPlaceIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddPlaceIDs(ids...)
	return buo
}

// AddPlaces adds the "places" edges to the Place entity.
func (buo *BusinessUpdateOne) AddPlaces(p ...*Place) *BusinessUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.AddPlaceIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (buo *BusinessUpdateOne) AddCategoryIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddCategoryIDs(ids...)
	return buo
}

// AddCategories adds the "categories" edges to the Category entity.
func (buo *BusinessUpdateOne) AddCategories(c ...*Category) *BusinessUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCategoryIDs(ids...)
}

// AddCategoryAssignmentIDs adds the "categoryAssignments" edge to the CategoryAssignment entity by IDs.
func (buo *BusinessUpdateOne) AddCategoryAssignmentIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.AddCategoryAssignmentIDs(ids...)
	return buo
}

// AddCategoryAssignments adds the "categoryAssignments" edges to the CategoryAssignment entity.
func (buo *BusinessUpdateOne) AddCategoryAssignments(c ...*CategoryAssignment) *BusinessUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCategoryAssignmentIDs(ids...)
}

// Mutation returns the BusinessMutation object of the builder.
func (buo *BusinessUpdateOne) Mutation() *BusinessMutation {
	return buo.mutation
}

// ClearUserBusinesses clears all "userBusinesses" edges to the UserBusiness entity.
func (buo *BusinessUpdateOne) ClearUserBusinesses() *BusinessUpdateOne {
	buo.mutation.ClearUserBusinesses()
	return buo
}

// RemoveUserBusinessIDs removes the "userBusinesses" edge to UserBusiness entities by IDs.
func (buo *BusinessUpdateOne) RemoveUserBusinessIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemoveUserBusinessIDs(ids...)
	return buo
}

// RemoveUserBusinesses removes "userBusinesses" edges to UserBusiness entities.
func (buo *BusinessUpdateOne) RemoveUserBusinesses(u ...*UserBusiness) *BusinessUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.RemoveUserBusinessIDs(ids...)
}

// ClearBusinessAccountSettings clears the "business_account_settings" edge to the AccountSettings entity.
func (buo *BusinessUpdateOne) ClearBusinessAccountSettings() *BusinessUpdateOne {
	buo.mutation.ClearBusinessAccountSettings()
	return buo
}

// ClearPosts clears all "posts" edges to the Post entity.
func (buo *BusinessUpdateOne) ClearPosts() *BusinessUpdateOne {
	buo.mutation.ClearPosts()
	return buo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (buo *BusinessUpdateOne) RemovePostIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemovePostIDs(ids...)
	return buo
}

// RemovePosts removes "posts" edges to Post entities.
func (buo *BusinessUpdateOne) RemovePosts(p ...*Post) *BusinessUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemovePostIDs(ids...)
}

// ClearFollowedUsers clears all "followedUsers" edges to the BusinessFollowUser entity.
func (buo *BusinessUpdateOne) ClearFollowedUsers() *BusinessUpdateOne {
	buo.mutation.ClearFollowedUsers()
	return buo
}

// RemoveFollowedUserIDs removes the "followedUsers" edge to BusinessFollowUser entities by IDs.
func (buo *BusinessUpdateOne) RemoveFollowedUserIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemoveFollowedUserIDs(ids...)
	return buo
}

// RemoveFollowedUsers removes "followedUsers" edges to BusinessFollowUser entities.
func (buo *BusinessUpdateOne) RemoveFollowedUsers(b ...*BusinessFollowUser) *BusinessUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveFollowedUserIDs(ids...)
}

// ClearFollowerUsers clears all "followerUsers" edges to the UserFollowBusiness entity.
func (buo *BusinessUpdateOne) ClearFollowerUsers() *BusinessUpdateOne {
	buo.mutation.ClearFollowerUsers()
	return buo
}

// RemoveFollowerUserIDs removes the "followerUsers" edge to UserFollowBusiness entities by IDs.
func (buo *BusinessUpdateOne) RemoveFollowerUserIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemoveFollowerUserIDs(ids...)
	return buo
}

// RemoveFollowerUsers removes "followerUsers" edges to UserFollowBusiness entities.
func (buo *BusinessUpdateOne) RemoveFollowerUsers(u ...*UserFollowBusiness) *BusinessUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return buo.RemoveFollowerUserIDs(ids...)
}

// ClearFollowedBusinesses clears all "followedBusinesses" edges to the BusinessFollowBusiness entity.
func (buo *BusinessUpdateOne) ClearFollowedBusinesses() *BusinessUpdateOne {
	buo.mutation.ClearFollowedBusinesses()
	return buo
}

// RemoveFollowedBusinessIDs removes the "followedBusinesses" edge to BusinessFollowBusiness entities by IDs.
func (buo *BusinessUpdateOne) RemoveFollowedBusinessIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemoveFollowedBusinessIDs(ids...)
	return buo
}

// RemoveFollowedBusinesses removes "followedBusinesses" edges to BusinessFollowBusiness entities.
func (buo *BusinessUpdateOne) RemoveFollowedBusinesses(b ...*BusinessFollowBusiness) *BusinessUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveFollowedBusinessIDs(ids...)
}

// ClearFollowerBusinesses clears all "followerBusinesses" edges to the BusinessFollowBusiness entity.
func (buo *BusinessUpdateOne) ClearFollowerBusinesses() *BusinessUpdateOne {
	buo.mutation.ClearFollowerBusinesses()
	return buo
}

// RemoveFollowerBusinessIDs removes the "followerBusinesses" edge to BusinessFollowBusiness entities by IDs.
func (buo *BusinessUpdateOne) RemoveFollowerBusinessIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemoveFollowerBusinessIDs(ids...)
	return buo
}

// RemoveFollowerBusinesses removes "followerBusinesses" edges to BusinessFollowBusiness entities.
func (buo *BusinessUpdateOne) RemoveFollowerBusinesses(b ...*BusinessFollowBusiness) *BusinessUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveFollowerBusinessIDs(ids...)
}

// ClearPlaces clears all "places" edges to the Place entity.
func (buo *BusinessUpdateOne) ClearPlaces() *BusinessUpdateOne {
	buo.mutation.ClearPlaces()
	return buo
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (buo *BusinessUpdateOne) RemovePlaceIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemovePlaceIDs(ids...)
	return buo
}

// RemovePlaces removes "places" edges to Place entities.
func (buo *BusinessUpdateOne) RemovePlaces(p ...*Place) *BusinessUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return buo.RemovePlaceIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (buo *BusinessUpdateOne) ClearCategories() *BusinessUpdateOne {
	buo.mutation.ClearCategories()
	return buo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (buo *BusinessUpdateOne) RemoveCategoryIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemoveCategoryIDs(ids...)
	return buo
}

// RemoveCategories removes "categories" edges to Category entities.
func (buo *BusinessUpdateOne) RemoveCategories(c ...*Category) *BusinessUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCategoryIDs(ids...)
}

// ClearCategoryAssignments clears all "categoryAssignments" edges to the CategoryAssignment entity.
func (buo *BusinessUpdateOne) ClearCategoryAssignments() *BusinessUpdateOne {
	buo.mutation.ClearCategoryAssignments()
	return buo
}

// RemoveCategoryAssignmentIDs removes the "categoryAssignments" edge to CategoryAssignment entities by IDs.
func (buo *BusinessUpdateOne) RemoveCategoryAssignmentIDs(ids ...string) *BusinessUpdateOne {
	buo.mutation.RemoveCategoryAssignmentIDs(ids...)
	return buo
}

// RemoveCategoryAssignments removes "categoryAssignments" edges to CategoryAssignment entities.
func (buo *BusinessUpdateOne) RemoveCategoryAssignments(c ...*CategoryAssignment) *BusinessUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCategoryAssignmentIDs(ids...)
}

// Where appends a list predicates to the BusinessUpdate builder.
func (buo *BusinessUpdateOne) Where(ps ...predicate.Business) *BusinessUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BusinessUpdateOne) Select(field string, fields ...string) *BusinessUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Business entity.
func (buo *BusinessUpdateOne) Save(ctx context.Context) (*Business, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BusinessUpdateOne) SaveX(ctx context.Context) *Business {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BusinessUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BusinessUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BusinessUpdateOne) sqlSave(ctx context.Context) (_node *Business, err error) {
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeString))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Business.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, business.FieldID)
		for _, f := range fields {
			if !business.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != business.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(business.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(business.FieldDescription, field.TypeString, value)
	}
	if buo.mutation.DescriptionCleared() {
		_spec.ClearField(business.FieldDescription, field.TypeString)
	}
	if value, ok := buo.mutation.Picture(); ok {
		_spec.SetField(business.FieldPicture, field.TypeString, value)
	}
	if buo.mutation.PictureCleared() {
		_spec.ClearField(business.FieldPicture, field.TypeString)
	}
	if value, ok := buo.mutation.CoverImage(); ok {
		_spec.SetField(business.FieldCoverImage, field.TypeString, value)
	}
	if buo.mutation.CoverImageCleared() {
		_spec.ClearField(business.FieldCoverImage, field.TypeString)
	}
	if value, ok := buo.mutation.Website(); ok {
		_spec.SetField(business.FieldWebsite, field.TypeString, value)
	}
	if buo.mutation.WebsiteCleared() {
		_spec.ClearField(business.FieldWebsite, field.TypeString)
	}
	if value, ok := buo.mutation.Location(); ok {
		_spec.SetField(business.FieldLocation, field.TypeString, value)
	}
	if buo.mutation.LocationCleared() {
		_spec.ClearField(business.FieldLocation, field.TypeString)
	}
	if value, ok := buo.mutation.Email(); ok {
		_spec.SetField(business.FieldEmail, field.TypeString, value)
	}
	if buo.mutation.EmailCleared() {
		_spec.ClearField(business.FieldEmail, field.TypeString)
	}
	if value, ok := buo.mutation.Phone(); ok {
		_spec.SetField(business.FieldPhone, field.TypeString, value)
	}
	if buo.mutation.PhoneCleared() {
		_spec.ClearField(business.FieldPhone, field.TypeString)
	}
	if value, ok := buo.mutation.BusinessSettings(); ok {
		_spec.SetField(business.FieldBusinessSettings, field.TypeJSON, value)
	}
	if buo.mutation.BusinessSettingsCleared() {
		_spec.ClearField(business.FieldBusinessSettings, field.TypeJSON)
	}
	if value, ok := buo.mutation.SearchText(); ok {
		_spec.SetField(business.FieldSearchText, field.TypeString, value)
	}
	if buo.mutation.SearchTextCleared() {
		_spec.ClearField(business.FieldSearchText, field.TypeString)
	}
	if value, ok := buo.mutation.RelevanceScore(); ok {
		_spec.SetField(business.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(business.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if buo.mutation.RelevanceScoreCleared() {
		_spec.ClearField(business.FieldRelevanceScore, field.TypeFloat64)
	}
	if buo.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedUserBusinessesIDs(); len(nodes) > 0 && !buo.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.UserBusinessesTable,
			Columns: []string{business.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BusinessAccountSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BusinessAccountSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   business.BusinessAccountSettingsTable,
			Columns: []string{business.BusinessAccountSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !buo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PostsTable,
			Columns: []string{business.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedUsersTable,
			Columns: []string{business.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedFollowedUsersIDs(); len(nodes) > 0 && !buo.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedUsersTable,
			Columns: []string{business.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FollowedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedUsersTable,
			Columns: []string{business.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerUsersTable,
			Columns: []string{business.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedFollowerUsersIDs(); len(nodes) > 0 && !buo.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerUsersTable,
			Columns: []string{business.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FollowerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerUsersTable,
			Columns: []string{business.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedBusinessesTable,
			Columns: []string{business.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedFollowedBusinessesIDs(); len(nodes) > 0 && !buo.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedBusinessesTable,
			Columns: []string{business.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FollowedBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowedBusinessesTable,
			Columns: []string{business.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerBusinessesTable,
			Columns: []string{business.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedFollowerBusinessesIDs(); len(nodes) > 0 && !buo.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerBusinessesTable,
			Columns: []string{business.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FollowerBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.FollowerBusinessesTable,
			Columns: []string{business.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PlacesTable,
			Columns: []string{business.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !buo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PlacesTable,
			Columns: []string{business.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.PlacesTable,
			Columns: []string{business.PlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoriesTable,
			Columns: []string{business.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !buo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoriesTable,
			Columns: []string{business.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoriesTable,
			Columns: []string{business.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoryAssignmentsTable,
			Columns: []string{business.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCategoryAssignmentsIDs(); len(nodes) > 0 && !buo.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoryAssignmentsTable,
			Columns: []string{business.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CategoryAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   business.CategoryAssignmentsTable,
			Columns: []string{business.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Business{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}

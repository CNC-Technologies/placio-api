// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/place"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Place is the model entity for the Place schema.
type Place struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Images holds the value of the "images" field.
	Images []string `json:"images,omitempty"`
	// Availability holds the value of the "availability" field.
	Availability map[string]interface{} `json:"availability,omitempty"`
	// SpecialOffers holds the value of the "special_offers" field.
	SpecialOffers string `json:"special_offers,omitempty"`
	// SustainabilityScore holds the value of the "sustainability_score" field.
	SustainabilityScore float64 `json:"sustainability_score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaceQuery when eager-loading is set.
	Edges           PlaceEdges `json:"edges"`
	business_places *string
	selectValues    sql.SelectValues
}

// PlaceEdges holds the relations/edges for other nodes in the graph.
type PlaceEdges struct {
	// Business holds the value of the business edge.
	Business *Business `json:"business,omitempty"`
	// Reviews holds the value of the reviews edge.
	Reviews []*Review `json:"reviews,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Amenities holds the value of the amenities edge.
	Amenities []*Amenity `json:"amenities,omitempty"`
	// Menus holds the value of the menus edge.
	Menus []*Menu `json:"menus,omitempty"`
	// Rooms holds the value of the rooms edge.
	Rooms []*Room `json:"rooms,omitempty"`
	// Reservations holds the value of the reservations edge.
	Reservations []*Reservation `json:"reservations,omitempty"`
	// Bookings holds the value of the bookings edge.
	Bookings []*Booking `json:"bookings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// BusinessOrErr returns the Business value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaceEdges) BusinessOrErr() (*Business, error) {
	if e.loadedTypes[0] {
		if e.Business == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: business.Label}
		}
		return e.Business, nil
	}
	return nil, &NotLoadedError{edge: "business"}
}

// ReviewsOrErr returns the Reviews value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceEdges) ReviewsOrErr() ([]*Review, error) {
	if e.loadedTypes[1] {
		return e.Reviews, nil
	}
	return nil, &NotLoadedError{edge: "reviews"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[2] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// AmenitiesOrErr returns the Amenities value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceEdges) AmenitiesOrErr() ([]*Amenity, error) {
	if e.loadedTypes[3] {
		return e.Amenities, nil
	}
	return nil, &NotLoadedError{edge: "amenities"}
}

// MenusOrErr returns the Menus value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceEdges) MenusOrErr() ([]*Menu, error) {
	if e.loadedTypes[4] {
		return e.Menus, nil
	}
	return nil, &NotLoadedError{edge: "menus"}
}

// RoomsOrErr returns the Rooms value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceEdges) RoomsOrErr() ([]*Room, error) {
	if e.loadedTypes[5] {
		return e.Rooms, nil
	}
	return nil, &NotLoadedError{edge: "rooms"}
}

// ReservationsOrErr returns the Reservations value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceEdges) ReservationsOrErr() ([]*Reservation, error) {
	if e.loadedTypes[6] {
		return e.Reservations, nil
	}
	return nil, &NotLoadedError{edge: "reservations"}
}

// BookingsOrErr returns the Bookings value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceEdges) BookingsOrErr() ([]*Booking, error) {
	if e.loadedTypes[7] {
		return e.Bookings, nil
	}
	return nil, &NotLoadedError{edge: "bookings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Place) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case place.FieldImages, place.FieldAvailability:
			values[i] = new([]byte)
		case place.FieldSustainabilityScore:
			values[i] = new(sql.NullFloat64)
		case place.FieldID, place.FieldName, place.FieldType, place.FieldDescription, place.FieldLocation, place.FieldSpecialOffers:
			values[i] = new(sql.NullString)
		case place.ForeignKeys[0]: // business_places
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Place fields.
func (pl *Place) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case place.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pl.ID = value.String
			}
		case place.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case place.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pl.Type = value.String
			}
		case place.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pl.Description = value.String
			}
		case place.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				pl.Location = value.String
			}
		case place.FieldImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Images); err != nil {
					return fmt.Errorf("unmarshal field images: %w", err)
				}
			}
		case place.FieldAvailability:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field availability", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Availability); err != nil {
					return fmt.Errorf("unmarshal field availability: %w", err)
				}
			}
		case place.FieldSpecialOffers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field special_offers", values[i])
			} else if value.Valid {
				pl.SpecialOffers = value.String
			}
		case place.FieldSustainabilityScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field sustainability_score", values[i])
			} else if value.Valid {
				pl.SustainabilityScore = value.Float64
			}
		case place.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_places", values[i])
			} else if value.Valid {
				pl.business_places = new(string)
				*pl.business_places = value.String
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Place.
// This includes values selected through modifiers, order, etc.
func (pl *Place) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryBusiness queries the "business" edge of the Place entity.
func (pl *Place) QueryBusiness() *BusinessQuery {
	return NewPlaceClient(pl.config).QueryBusiness(pl)
}

// QueryReviews queries the "reviews" edge of the Place entity.
func (pl *Place) QueryReviews() *ReviewQuery {
	return NewPlaceClient(pl.config).QueryReviews(pl)
}

// QueryEvents queries the "events" edge of the Place entity.
func (pl *Place) QueryEvents() *EventQuery {
	return NewPlaceClient(pl.config).QueryEvents(pl)
}

// QueryAmenities queries the "amenities" edge of the Place entity.
func (pl *Place) QueryAmenities() *AmenityQuery {
	return NewPlaceClient(pl.config).QueryAmenities(pl)
}

// QueryMenus queries the "menus" edge of the Place entity.
func (pl *Place) QueryMenus() *MenuQuery {
	return NewPlaceClient(pl.config).QueryMenus(pl)
}

// QueryRooms queries the "rooms" edge of the Place entity.
func (pl *Place) QueryRooms() *RoomQuery {
	return NewPlaceClient(pl.config).QueryRooms(pl)
}

// QueryReservations queries the "reservations" edge of the Place entity.
func (pl *Place) QueryReservations() *ReservationQuery {
	return NewPlaceClient(pl.config).QueryReservations(pl)
}

// QueryBookings queries the "bookings" edge of the Place entity.
func (pl *Place) QueryBookings() *BookingQuery {
	return NewPlaceClient(pl.config).QueryBookings(pl)
}

// Update returns a builder for updating this Place.
// Note that you need to call Place.Unwrap() before calling this method if this Place
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Place) Update() *PlaceUpdateOne {
	return NewPlaceClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Place entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Place) Unwrap() *Place {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Place is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Place) String() string {
	var builder strings.Builder
	builder.WriteString("Place(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pl.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pl.Description)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(pl.Location)
	builder.WriteString(", ")
	builder.WriteString("images=")
	builder.WriteString(fmt.Sprintf("%v", pl.Images))
	builder.WriteString(", ")
	builder.WriteString("availability=")
	builder.WriteString(fmt.Sprintf("%v", pl.Availability))
	builder.WriteString(", ")
	builder.WriteString("special_offers=")
	builder.WriteString(pl.SpecialOffers)
	builder.WriteString(", ")
	builder.WriteString("sustainability_score=")
	builder.WriteString(fmt.Sprintf("%v", pl.SustainabilityScore))
	builder.WriteByte(')')
	return builder.String()
}

// Places is a parsable slice of Place.
type Places []*Place

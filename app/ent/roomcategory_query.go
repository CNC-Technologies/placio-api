// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"placio-app/ent/amenity"
	"placio-app/ent/media"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/room"
	"placio-app/ent/roomcategory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomCategoryQuery is the builder for querying RoomCategory entities.
type RoomCategoryQuery struct {
	config
	ctx           *QueryContext
	order         []roomcategory.OrderOption
	inters        []Interceptor
	predicates    []predicate.RoomCategory
	withPlace     *PlaceQuery
	withRooms     *RoomQuery
	withMedia     *MediaQuery
	withAmenities *AmenityQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RoomCategoryQuery builder.
func (rcq *RoomCategoryQuery) Where(ps ...predicate.RoomCategory) *RoomCategoryQuery {
	rcq.predicates = append(rcq.predicates, ps...)
	return rcq
}

// Limit the number of records to be returned by this query.
func (rcq *RoomCategoryQuery) Limit(limit int) *RoomCategoryQuery {
	rcq.ctx.Limit = &limit
	return rcq
}

// Offset to start from.
func (rcq *RoomCategoryQuery) Offset(offset int) *RoomCategoryQuery {
	rcq.ctx.Offset = &offset
	return rcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rcq *RoomCategoryQuery) Unique(unique bool) *RoomCategoryQuery {
	rcq.ctx.Unique = &unique
	return rcq
}

// Order specifies how the records should be ordered.
func (rcq *RoomCategoryQuery) Order(o ...roomcategory.OrderOption) *RoomCategoryQuery {
	rcq.order = append(rcq.order, o...)
	return rcq
}

// QueryPlace chains the current query on the "place" edge.
func (rcq *RoomCategoryQuery) QueryPlace() *PlaceQuery {
	query := (&PlaceClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roomcategory.Table, roomcategory.FieldID, selector),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, roomcategory.PlaceTable, roomcategory.PlacePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRooms chains the current query on the "rooms" edge.
func (rcq *RoomCategoryQuery) QueryRooms() *RoomQuery {
	query := (&RoomClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roomcategory.Table, roomcategory.FieldID, selector),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, roomcategory.RoomsTable, roomcategory.RoomsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedia chains the current query on the "media" edge.
func (rcq *RoomCategoryQuery) QueryMedia() *MediaQuery {
	query := (&MediaClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roomcategory.Table, roomcategory.FieldID, selector),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, roomcategory.MediaTable, roomcategory.MediaPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAmenities chains the current query on the "amenities" edge.
func (rcq *RoomCategoryQuery) QueryAmenities() *AmenityQuery {
	query := (&AmenityClient{config: rcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(roomcategory.Table, roomcategory.FieldID, selector),
			sqlgraph.To(amenity.Table, amenity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, roomcategory.AmenitiesTable, roomcategory.AmenitiesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(rcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RoomCategory entity from the query.
// Returns a *NotFoundError when no RoomCategory was found.
func (rcq *RoomCategoryQuery) First(ctx context.Context) (*RoomCategory, error) {
	nodes, err := rcq.Limit(1).All(setContextOp(ctx, rcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{roomcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rcq *RoomCategoryQuery) FirstX(ctx context.Context) *RoomCategory {
	node, err := rcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RoomCategory ID from the query.
// Returns a *NotFoundError when no RoomCategory ID was found.
func (rcq *RoomCategoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rcq.Limit(1).IDs(setContextOp(ctx, rcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{roomcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rcq *RoomCategoryQuery) FirstIDX(ctx context.Context) string {
	id, err := rcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RoomCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RoomCategory entity is found.
// Returns a *NotFoundError when no RoomCategory entities are found.
func (rcq *RoomCategoryQuery) Only(ctx context.Context) (*RoomCategory, error) {
	nodes, err := rcq.Limit(2).All(setContextOp(ctx, rcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{roomcategory.Label}
	default:
		return nil, &NotSingularError{roomcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rcq *RoomCategoryQuery) OnlyX(ctx context.Context) *RoomCategory {
	node, err := rcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RoomCategory ID in the query.
// Returns a *NotSingularError when more than one RoomCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (rcq *RoomCategoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rcq.Limit(2).IDs(setContextOp(ctx, rcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{roomcategory.Label}
	default:
		err = &NotSingularError{roomcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rcq *RoomCategoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := rcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RoomCategories.
func (rcq *RoomCategoryQuery) All(ctx context.Context) ([]*RoomCategory, error) {
	ctx = setContextOp(ctx, rcq.ctx, "All")
	if err := rcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RoomCategory, *RoomCategoryQuery]()
	return withInterceptors[[]*RoomCategory](ctx, rcq, qr, rcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rcq *RoomCategoryQuery) AllX(ctx context.Context) []*RoomCategory {
	nodes, err := rcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RoomCategory IDs.
func (rcq *RoomCategoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if rcq.ctx.Unique == nil && rcq.path != nil {
		rcq.Unique(true)
	}
	ctx = setContextOp(ctx, rcq.ctx, "IDs")
	if err = rcq.Select(roomcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rcq *RoomCategoryQuery) IDsX(ctx context.Context) []string {
	ids, err := rcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rcq *RoomCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rcq.ctx, "Count")
	if err := rcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rcq, querierCount[*RoomCategoryQuery](), rcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rcq *RoomCategoryQuery) CountX(ctx context.Context) int {
	count, err := rcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rcq *RoomCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rcq.ctx, "Exist")
	switch _, err := rcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rcq *RoomCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := rcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RoomCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rcq *RoomCategoryQuery) Clone() *RoomCategoryQuery {
	if rcq == nil {
		return nil
	}
	return &RoomCategoryQuery{
		config:        rcq.config,
		ctx:           rcq.ctx.Clone(),
		order:         append([]roomcategory.OrderOption{}, rcq.order...),
		inters:        append([]Interceptor{}, rcq.inters...),
		predicates:    append([]predicate.RoomCategory{}, rcq.predicates...),
		withPlace:     rcq.withPlace.Clone(),
		withRooms:     rcq.withRooms.Clone(),
		withMedia:     rcq.withMedia.Clone(),
		withAmenities: rcq.withAmenities.Clone(),
		// clone intermediate query.
		sql:  rcq.sql.Clone(),
		path: rcq.path,
	}
}

// WithPlace tells the query-builder to eager-load the nodes that are connected to
// the "place" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RoomCategoryQuery) WithPlace(opts ...func(*PlaceQuery)) *RoomCategoryQuery {
	query := (&PlaceClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withPlace = query
	return rcq
}

// WithRooms tells the query-builder to eager-load the nodes that are connected to
// the "rooms" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RoomCategoryQuery) WithRooms(opts ...func(*RoomQuery)) *RoomCategoryQuery {
	query := (&RoomClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withRooms = query
	return rcq
}

// WithMedia tells the query-builder to eager-load the nodes that are connected to
// the "media" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RoomCategoryQuery) WithMedia(opts ...func(*MediaQuery)) *RoomCategoryQuery {
	query := (&MediaClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withMedia = query
	return rcq
}

// WithAmenities tells the query-builder to eager-load the nodes that are connected to
// the "amenities" edge. The optional arguments are used to configure the query builder of the edge.
func (rcq *RoomCategoryQuery) WithAmenities(opts ...func(*AmenityQuery)) *RoomCategoryQuery {
	query := (&AmenityClient{config: rcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rcq.withAmenities = query
	return rcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RoomCategory.Query().
//		GroupBy(roomcategory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rcq *RoomCategoryQuery) GroupBy(field string, fields ...string) *RoomCategoryGroupBy {
	rcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RoomCategoryGroupBy{build: rcq}
	grbuild.flds = &rcq.ctx.Fields
	grbuild.label = roomcategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.RoomCategory.Query().
//		Select(roomcategory.FieldName).
//		Scan(ctx, &v)
func (rcq *RoomCategoryQuery) Select(fields ...string) *RoomCategorySelect {
	rcq.ctx.Fields = append(rcq.ctx.Fields, fields...)
	sbuild := &RoomCategorySelect{RoomCategoryQuery: rcq}
	sbuild.label = roomcategory.Label
	sbuild.flds, sbuild.scan = &rcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RoomCategorySelect configured with the given aggregations.
func (rcq *RoomCategoryQuery) Aggregate(fns ...AggregateFunc) *RoomCategorySelect {
	return rcq.Select().Aggregate(fns...)
}

func (rcq *RoomCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rcq); err != nil {
				return err
			}
		}
	}
	for _, f := range rcq.ctx.Fields {
		if !roomcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rcq.path != nil {
		prev, err := rcq.path(ctx)
		if err != nil {
			return err
		}
		rcq.sql = prev
	}
	return nil
}

func (rcq *RoomCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RoomCategory, error) {
	var (
		nodes       = []*RoomCategory{}
		_spec       = rcq.querySpec()
		loadedTypes = [4]bool{
			rcq.withPlace != nil,
			rcq.withRooms != nil,
			rcq.withMedia != nil,
			rcq.withAmenities != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RoomCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RoomCategory{config: rcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rcq.withPlace; query != nil {
		if err := rcq.loadPlace(ctx, query, nodes,
			func(n *RoomCategory) { n.Edges.Place = []*Place{} },
			func(n *RoomCategory, e *Place) { n.Edges.Place = append(n.Edges.Place, e) }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withRooms; query != nil {
		if err := rcq.loadRooms(ctx, query, nodes,
			func(n *RoomCategory) { n.Edges.Rooms = []*Room{} },
			func(n *RoomCategory, e *Room) { n.Edges.Rooms = append(n.Edges.Rooms, e) }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withMedia; query != nil {
		if err := rcq.loadMedia(ctx, query, nodes,
			func(n *RoomCategory) { n.Edges.Media = []*Media{} },
			func(n *RoomCategory, e *Media) { n.Edges.Media = append(n.Edges.Media, e) }); err != nil {
			return nil, err
		}
	}
	if query := rcq.withAmenities; query != nil {
		if err := rcq.loadAmenities(ctx, query, nodes,
			func(n *RoomCategory) { n.Edges.Amenities = []*Amenity{} },
			func(n *RoomCategory, e *Amenity) { n.Edges.Amenities = append(n.Edges.Amenities, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rcq *RoomCategoryQuery) loadPlace(ctx context.Context, query *PlaceQuery, nodes []*RoomCategory, init func(*RoomCategory), assign func(*RoomCategory, *Place)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*RoomCategory)
	nids := make(map[string]map[*RoomCategory]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(roomcategory.PlaceTable)
		s.Join(joinT).On(s.C(place.FieldID), joinT.C(roomcategory.PlacePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(roomcategory.PlacePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(roomcategory.PlacePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*RoomCategory]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Place](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "place" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rcq *RoomCategoryQuery) loadRooms(ctx context.Context, query *RoomQuery, nodes []*RoomCategory, init func(*RoomCategory), assign func(*RoomCategory, *Room)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*RoomCategory)
	nids := make(map[string]map[*RoomCategory]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(roomcategory.RoomsTable)
		s.Join(joinT).On(s.C(room.FieldID), joinT.C(roomcategory.RoomsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(roomcategory.RoomsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(roomcategory.RoomsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*RoomCategory]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Room](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rooms" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rcq *RoomCategoryQuery) loadMedia(ctx context.Context, query *MediaQuery, nodes []*RoomCategory, init func(*RoomCategory), assign func(*RoomCategory, *Media)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*RoomCategory)
	nids := make(map[string]map[*RoomCategory]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(roomcategory.MediaTable)
		s.Join(joinT).On(s.C(media.FieldID), joinT.C(roomcategory.MediaPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(roomcategory.MediaPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(roomcategory.MediaPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*RoomCategory]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Media](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "media" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (rcq *RoomCategoryQuery) loadAmenities(ctx context.Context, query *AmenityQuery, nodes []*RoomCategory, init func(*RoomCategory), assign func(*RoomCategory, *Amenity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*RoomCategory)
	nids := make(map[string]map[*RoomCategory]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(roomcategory.AmenitiesTable)
		s.Join(joinT).On(s.C(amenity.FieldID), joinT.C(roomcategory.AmenitiesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(roomcategory.AmenitiesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(roomcategory.AmenitiesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*RoomCategory]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Amenity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "amenities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (rcq *RoomCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rcq.querySpec()
	_spec.Node.Columns = rcq.ctx.Fields
	if len(rcq.ctx.Fields) > 0 {
		_spec.Unique = rcq.ctx.Unique != nil && *rcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rcq.driver, _spec)
}

func (rcq *RoomCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(roomcategory.Table, roomcategory.Columns, sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString))
	_spec.From = rcq.sql
	if unique := rcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rcq.path != nil {
		_spec.Unique = true
	}
	if fields := rcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roomcategory.FieldID)
		for i := range fields {
			if fields[i] != roomcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rcq *RoomCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rcq.driver.Dialect())
	t1 := builder.Table(roomcategory.Table)
	columns := rcq.ctx.Fields
	if len(columns) == 0 {
		columns = roomcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rcq.sql != nil {
		selector = rcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rcq.ctx.Unique != nil && *rcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rcq.predicates {
		p(selector)
	}
	for _, p := range rcq.order {
		p(selector)
	}
	if offset := rcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RoomCategoryGroupBy is the group-by builder for RoomCategory entities.
type RoomCategoryGroupBy struct {
	selector
	build *RoomCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rcgb *RoomCategoryGroupBy) Aggregate(fns ...AggregateFunc) *RoomCategoryGroupBy {
	rcgb.fns = append(rcgb.fns, fns...)
	return rcgb
}

// Scan applies the selector query and scans the result into the given value.
func (rcgb *RoomCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcgb.build.ctx, "GroupBy")
	if err := rcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoomCategoryQuery, *RoomCategoryGroupBy](ctx, rcgb.build, rcgb, rcgb.build.inters, v)
}

func (rcgb *RoomCategoryGroupBy) sqlScan(ctx context.Context, root *RoomCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rcgb.fns))
	for _, fn := range rcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rcgb.flds)+len(rcgb.fns))
		for _, f := range *rcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RoomCategorySelect is the builder for selecting fields of RoomCategory entities.
type RoomCategorySelect struct {
	*RoomCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rcs *RoomCategorySelect) Aggregate(fns ...AggregateFunc) *RoomCategorySelect {
	rcs.fns = append(rcs.fns, fns...)
	return rcs
}

// Scan applies the selector query and scans the result into the given value.
func (rcs *RoomCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rcs.ctx, "Select")
	if err := rcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RoomCategoryQuery, *RoomCategorySelect](ctx, rcs.RoomCategoryQuery, rcs, rcs.inters, v)
}

func (rcs *RoomCategorySelect) sqlScan(ctx context.Context, root *RoomCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rcs.fns))
	for _, fn := range rcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}





// Code generated by ent, DO NOT EDIT.



package ent



	
import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"
			 "placio-app/ent/customblock"
			 "placio-app/ent/website"

)




		// CustomBlock is the model entity for the CustomBlock schema.
type CustomBlock struct {
	config `json:"-"`
		// ID of the ent.
		ID string `json:"id,omitempty"`
		// Content holds the value of the "content" field.
		Content string `json:"content,omitempty"`
		// Edges holds the relations/edges for other nodes in the graph.
		// The values are being populated by the CustomBlockQuery when eager-loading is set.
		Edges CustomBlockEdges `json:"edges"`
		website_custom_blocks *string
	selectValues sql.SelectValues

}
// CustomBlockEdges holds the relations/edges for other nodes in the graph.
type CustomBlockEdges struct {
		// Website holds the value of the website edge.
		Website *Website `json:"website,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool


}
	// WebsiteOrErr returns the Website value or an error if the edge
	// was not loaded in eager-loading, or loaded but was not found.
	func (e CustomBlockEdges) WebsiteOrErr() (*Website, error) {
		if e.loadedTypes[0] {
				if e.Website == nil {
					// Edge was loaded but was not found.
					return nil, &NotFoundError{label: website.Label}
				}
			return e.Website, nil
		}
		return nil, &NotLoadedError{edge: "website"}
	}







	
	


	
	
		
	
	
	


// scanValues returns the types for scanning values from sql.Rows.
func (*CustomBlock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
				case customblock.FieldID,customblock.FieldContent:
					values[i] = new(sql.NullString)
				case customblock.ForeignKeys[0]: // website_custom_blocks
					values[i] = new(sql.NullString)
			default:
				values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomBlock fields.
func (cb *CustomBlock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
			case customblock.FieldID:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
					cb.ID = value.String
		}
			case customblock.FieldContent:
					if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
					cb.Content = value.String
		}
			case customblock.ForeignKeys[0]:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field website_custom_blocks", values[i])
			} else if value.Valid {
					cb.website_custom_blocks = new(string)
					*cb.website_custom_blocks = value.String
		}
		default:
			cb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomBlock.
// This includes values selected through modifiers, order, etc.
func (cb *CustomBlock) Value(name string) (ent.Value, error) {
	return cb.selectValues.Get(name)
}





	
	// QueryWebsite queries the "website" edge of the CustomBlock entity.
	func (cb *CustomBlock) QueryWebsite() *WebsiteQuery {
		return NewCustomBlockClient(cb.config).QueryWebsite(cb)
	}


// Update returns a builder for updating this CustomBlock.
// Note that you need to call CustomBlock.Unwrap() before calling this method if this CustomBlock
// was returned from a transaction, and the transaction was committed or rolled back.
func (cb *CustomBlock) Update() *CustomBlockUpdateOne {
	return NewCustomBlockClient(cb.config).UpdateOne(cb)
}

// Unwrap unwraps the CustomBlock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cb *CustomBlock) Unwrap() *CustomBlock {
	_tx, ok := cb.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomBlock is not a transactional entity")
	}
	cb.config.driver = _tx.drv
	return cb
}


	

	// String implements the fmt.Stringer.
	func (cb *CustomBlock) String() string {
		var builder strings.Builder
		builder.WriteString("CustomBlock(")
			builder.WriteString(fmt.Sprintf("id=%v, ", cb.ID))
					builder.WriteString("content=")
						builder.WriteString(cb.Content)
		builder.WriteByte(')')
		return builder.String()
	}







// CustomBlocks is a parsable slice of CustomBlock.
type CustomBlocks []*CustomBlock


	
	



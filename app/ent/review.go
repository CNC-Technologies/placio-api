// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/event"
	"placio-app/ent/place"
	"placio-app/ent/review"
	"placio-app/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Review is the model entity for the Review schema.
type Review struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Score should be between 1 and 5.
	Score float64 `json:"score,omitempty"`
	// User's review to the business/place/event.
	Content string `json:"content,omitempty"`
	// When the review was created.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// Count of likes for this review.
	LikeCount int `json:"likeCount,omitempty"`
	// Count of dislikes for this review.
	DislikeCount int `json:"dislikeCount,omitempty"`
	// Flag for this review.
	Flag string `json:"flag,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReviewQuery when eager-loading is set.
	Edges               ReviewEdges `json:"edges"`
	event_event_reviews *string
	place_reviews       *string
	review_business     *string
	review_place        *string
	review_event        *string
	user_reviews        *string
	selectValues        sql.SelectValues
}

// ReviewEdges holds the relations/edges for other nodes in the graph.
type ReviewEdges struct {
	// The user who wrote the review.
	User *User `json:"user,omitempty"`
	// The business that was reviewed.
	Business *Business `json:"business,omitempty"`
	// The place that was reviewed.
	Place *Place `json:"place,omitempty"`
	// The event that was reviewed.
	Event *Event `json:"event,omitempty"`
	// The media content related to the review.
	Medias []*Media `json:"medias,omitempty"`
	// The comments related to the review.
	Comments []*Comment `json:"comments,omitempty"`
	// The likes related to the review.
	Likes []*Like `json:"likes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BusinessOrErr returns the Business value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) BusinessOrErr() (*Business, error) {
	if e.loadedTypes[1] {
		if e.Business == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: business.Label}
		}
		return e.Business, nil
	}
	return nil, &NotLoadedError{edge: "business"}
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) PlaceOrErr() (*Place, error) {
	if e.loadedTypes[2] {
		if e.Place == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: place.Label}
		}
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReviewEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[3] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// MediasOrErr returns the Medias value or an error if the edge
// was not loaded in eager-loading.
func (e ReviewEdges) MediasOrErr() ([]*Media, error) {
	if e.loadedTypes[4] {
		return e.Medias, nil
	}
	return nil, &NotLoadedError{edge: "medias"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e ReviewEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[5] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e ReviewEdges) LikesOrErr() ([]*Like, error) {
	if e.loadedTypes[6] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Review) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case review.FieldScore:
			values[i] = new(sql.NullFloat64)
		case review.FieldLikeCount, review.FieldDislikeCount:
			values[i] = new(sql.NullInt64)
		case review.FieldID, review.FieldContent, review.FieldFlag:
			values[i] = new(sql.NullString)
		case review.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case review.ForeignKeys[0]: // event_event_reviews
			values[i] = new(sql.NullString)
		case review.ForeignKeys[1]: // place_reviews
			values[i] = new(sql.NullString)
		case review.ForeignKeys[2]: // review_business
			values[i] = new(sql.NullString)
		case review.ForeignKeys[3]: // review_place
			values[i] = new(sql.NullString)
		case review.ForeignKeys[4]: // review_event
			values[i] = new(sql.NullString)
		case review.ForeignKeys[5]: // user_reviews
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Review fields.
func (r *Review) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case review.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case review.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				r.Score = value.Float64
			}
		case review.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				r.Content = value.String
			}
		case review.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case review.FieldLikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likeCount", values[i])
			} else if value.Valid {
				r.LikeCount = int(value.Int64)
			}
		case review.FieldDislikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dislikeCount", values[i])
			} else if value.Valid {
				r.DislikeCount = int(value.Int64)
			}
		case review.FieldFlag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flag", values[i])
			} else if value.Valid {
				r.Flag = value.String
			}
		case review.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_event_reviews", values[i])
			} else if value.Valid {
				r.event_event_reviews = new(string)
				*r.event_event_reviews = value.String
			}
		case review.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place_reviews", values[i])
			} else if value.Valid {
				r.place_reviews = new(string)
				*r.place_reviews = value.String
			}
		case review.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_business", values[i])
			} else if value.Valid {
				r.review_business = new(string)
				*r.review_business = value.String
			}
		case review.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_place", values[i])
			} else if value.Valid {
				r.review_place = new(string)
				*r.review_place = value.String
			}
		case review.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_event", values[i])
			} else if value.Valid {
				r.review_event = new(string)
				*r.review_event = value.String
			}
		case review.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_reviews", values[i])
			} else if value.Valid {
				r.user_reviews = new(string)
				*r.user_reviews = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Review.
// This includes values selected through modifiers, order, etc.
func (r *Review) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Review entity.
func (r *Review) QueryUser() *UserQuery {
	return NewReviewClient(r.config).QueryUser(r)
}

// QueryBusiness queries the "business" edge of the Review entity.
func (r *Review) QueryBusiness() *BusinessQuery {
	return NewReviewClient(r.config).QueryBusiness(r)
}

// QueryPlace queries the "place" edge of the Review entity.
func (r *Review) QueryPlace() *PlaceQuery {
	return NewReviewClient(r.config).QueryPlace(r)
}

// QueryEvent queries the "event" edge of the Review entity.
func (r *Review) QueryEvent() *EventQuery {
	return NewReviewClient(r.config).QueryEvent(r)
}

// QueryMedias queries the "medias" edge of the Review entity.
func (r *Review) QueryMedias() *MediaQuery {
	return NewReviewClient(r.config).QueryMedias(r)
}

// QueryComments queries the "comments" edge of the Review entity.
func (r *Review) QueryComments() *CommentQuery {
	return NewReviewClient(r.config).QueryComments(r)
}

// QueryLikes queries the "likes" edge of the Review entity.
func (r *Review) QueryLikes() *LikeQuery {
	return NewReviewClient(r.config).QueryLikes(r)
}

// Update returns a builder for updating this Review.
// Note that you need to call Review.Unwrap() before calling this method if this Review
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Review) Update() *ReviewUpdateOne {
	return NewReviewClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Review entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Review) Unwrap() *Review {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Review is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Review) String() string {
	var builder strings.Builder
	builder.WriteString("Review(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", r.Score))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(r.Content)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("likeCount=")
	builder.WriteString(fmt.Sprintf("%v", r.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("dislikeCount=")
	builder.WriteString(fmt.Sprintf("%v", r.DislikeCount))
	builder.WriteString(", ")
	builder.WriteString("flag=")
	builder.WriteString(r.Flag)
	builder.WriteByte(')')
	return builder.String()
}

// Reviews is a parsable slice of Review.
type Reviews []*Review

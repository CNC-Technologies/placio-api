// Code generated by ent, DO NOT EDIT.

package amenity

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the amenity type in the database.
	Label = "amenity"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// EdgePlaces holds the string denoting the places edge name in mutations.
	EdgePlaces = "places"
	// EdgeRooms holds the string denoting the rooms edge name in mutations.
	EdgeRooms = "rooms"
	// EdgeRoomCategories holds the string denoting the room_categories edge name in mutations.
	EdgeRoomCategories = "room_categories"
	// Table holds the table name of the amenity in the database.
	Table = "amenities"
	// PlacesTable is the table that holds the places relation/edge. The primary key declared below.
	PlacesTable = "amenity_places"
	// PlacesInverseTable is the table name for the Place entity.
	// It exists in this package in order to avoid circular dependency with the "place" package.
	PlacesInverseTable = "places"
	// RoomsTable is the table that holds the rooms relation/edge. The primary key declared below.
	RoomsTable = "room_amenities"
	// RoomsInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	RoomsInverseTable = "rooms"
	// RoomCategoriesTable is the table that holds the room_categories relation/edge. The primary key declared below.
	RoomCategoriesTable = "room_category_amenities"
	// RoomCategoriesInverseTable is the table name for the RoomCategory entity.
	// It exists in this package in order to avoid circular dependency with the "roomcategory" package.
	RoomCategoriesInverseTable = "room_categories"
)

// Columns holds all SQL columns for amenity fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldIcon,
}

var (
	// PlacesPrimaryKey and PlacesColumn2 are the table columns denoting the
	// primary key for the places relation (M2M).
	PlacesPrimaryKey = []string{"amenity_id", "place_id"}
	// RoomsPrimaryKey and RoomsColumn2 are the table columns denoting the
	// primary key for the rooms relation (M2M).
	RoomsPrimaryKey = []string{"room_id", "amenity_id"}
	// RoomCategoriesPrimaryKey and RoomCategoriesColumn2 are the table columns denoting the
	// primary key for the room_categories relation (M2M).
	RoomCategoriesPrimaryKey = []string{"room_category_id", "amenity_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Amenity queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByPlacesCount orders the results by places count.
func ByPlacesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlacesStep(), opts...)
	}
}

// ByPlaces orders the results by places terms.
func ByPlaces(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlacesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoomsCount orders the results by rooms count.
func ByRoomsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoomsStep(), opts...)
	}
}

// ByRooms orders the results by rooms terms.
func ByRooms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoomCategoriesCount orders the results by room_categories count.
func ByRoomCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoomCategoriesStep(), opts...)
	}
}

// ByRoomCategories orders the results by room_categories terms.
func ByRoomCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlacesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlacesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PlacesTable, PlacesPrimaryKey...),
	)
}
func newRoomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RoomsTable, RoomsPrimaryKey...),
	)
}
func newRoomCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomCategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RoomCategoriesTable, RoomCategoriesPrimaryKey...),
	)
}

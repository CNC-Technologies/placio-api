// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessfollowuser"
	"placio-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessFollowUserCreate is the builder for creating a BusinessFollowUser entity.
type BusinessFollowUserCreate struct {
	config
	mutation *BusinessFollowUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "CreatedAt" field.
func (bfuc *BusinessFollowUserCreate) SetCreatedAt(t time.Time) *BusinessFollowUserCreate {
	bfuc.mutation.SetCreatedAt(t)
	return bfuc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (bfuc *BusinessFollowUserCreate) SetNillableCreatedAt(t *time.Time) *BusinessFollowUserCreate {
	if t != nil {
		bfuc.SetCreatedAt(*t)
	}
	return bfuc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (bfuc *BusinessFollowUserCreate) SetUpdatedAt(t time.Time) *BusinessFollowUserCreate {
	bfuc.mutation.SetUpdatedAt(t)
	return bfuc
}

// SetID sets the "id" field.
func (bfuc *BusinessFollowUserCreate) SetID(s string) *BusinessFollowUserCreate {
	bfuc.mutation.SetID(s)
	return bfuc
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (bfuc *BusinessFollowUserCreate) SetBusinessID(id string) *BusinessFollowUserCreate {
	bfuc.mutation.SetBusinessID(id)
	return bfuc
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (bfuc *BusinessFollowUserCreate) SetNillableBusinessID(id *string) *BusinessFollowUserCreate {
	if id != nil {
		bfuc = bfuc.SetBusinessID(*id)
	}
	return bfuc
}

// SetBusiness sets the "business" edge to the Business entity.
func (bfuc *BusinessFollowUserCreate) SetBusiness(b *Business) *BusinessFollowUserCreate {
	return bfuc.SetBusinessID(b.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bfuc *BusinessFollowUserCreate) SetUserID(id string) *BusinessFollowUserCreate {
	bfuc.mutation.SetUserID(id)
	return bfuc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bfuc *BusinessFollowUserCreate) SetNillableUserID(id *string) *BusinessFollowUserCreate {
	if id != nil {
		bfuc = bfuc.SetUserID(*id)
	}
	return bfuc
}

// SetUser sets the "user" edge to the User entity.
func (bfuc *BusinessFollowUserCreate) SetUser(u *User) *BusinessFollowUserCreate {
	return bfuc.SetUserID(u.ID)
}

// Mutation returns the BusinessFollowUserMutation object of the builder.
func (bfuc *BusinessFollowUserCreate) Mutation() *BusinessFollowUserMutation {
	return bfuc.mutation
}

// Save creates the BusinessFollowUser in the db.
func (bfuc *BusinessFollowUserCreate) Save(ctx context.Context) (*BusinessFollowUser, error) {
	bfuc.defaults()
	return withHooks(ctx, bfuc.sqlSave, bfuc.mutation, bfuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bfuc *BusinessFollowUserCreate) SaveX(ctx context.Context) *BusinessFollowUser {
	v, err := bfuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfuc *BusinessFollowUserCreate) Exec(ctx context.Context) error {
	_, err := bfuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfuc *BusinessFollowUserCreate) ExecX(ctx context.Context) {
	if err := bfuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfuc *BusinessFollowUserCreate) defaults() {
	if _, ok := bfuc.mutation.CreatedAt(); !ok {
		v := businessfollowuser.DefaultCreatedAt()
		bfuc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfuc *BusinessFollowUserCreate) check() error {
	if _, ok := bfuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "BusinessFollowUser.CreatedAt"`)}
	}
	if _, ok := bfuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`ent: missing required field "BusinessFollowUser.UpdatedAt"`)}
	}
	return nil
}

func (bfuc *BusinessFollowUserCreate) sqlSave(ctx context.Context) (*BusinessFollowUser, error) {
	if err := bfuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bfuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bfuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BusinessFollowUser.ID type: %T", _spec.ID.Value)
		}
	}
	bfuc.mutation.id = &_node.ID
	bfuc.mutation.done = true
	return _node, nil
}

func (bfuc *BusinessFollowUserCreate) createSpec() (*BusinessFollowUser, *sqlgraph.CreateSpec) {
	var (
		_node = &BusinessFollowUser{config: bfuc.config}
		_spec = sqlgraph.NewCreateSpec(businessfollowuser.Table, sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString))
	)
	if id, ok := bfuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bfuc.mutation.CreatedAt(); ok {
		_spec.SetField(businessfollowuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bfuc.mutation.UpdatedAt(); ok {
		_spec.SetField(businessfollowuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bfuc.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businessfollowuser.BusinessTable,
			Columns: []string{businessfollowuser.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_followed_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bfuc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businessfollowuser.UserTable,
			Columns: []string{businessfollowuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_follower_businesses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BusinessFollowUserCreateBulk is the builder for creating many BusinessFollowUser entities in bulk.
type BusinessFollowUserCreateBulk struct {
	config
	builders []*BusinessFollowUserCreate
}

// Save creates the BusinessFollowUser entities in the db.
func (bfucb *BusinessFollowUserCreateBulk) Save(ctx context.Context) ([]*BusinessFollowUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bfucb.builders))
	nodes := make([]*BusinessFollowUser, len(bfucb.builders))
	mutators := make([]Mutator, len(bfucb.builders))
	for i := range bfucb.builders {
		func(i int, root context.Context) {
			builder := bfucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessFollowUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bfucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bfucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bfucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bfucb *BusinessFollowUserCreateBulk) SaveX(ctx context.Context) []*BusinessFollowUser {
	v, err := bfucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfucb *BusinessFollowUserCreateBulk) Exec(ctx context.Context) error {
	_, err := bfucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfucb *BusinessFollowUserCreateBulk) ExecX(ctx context.Context) {
	if err := bfucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/placeinventory"
	"placio-app/ent/reservationblock"
	"placio-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReservationBlockCreate is the builder for creating a ReservationBlock entity.
type ReservationBlockCreate struct {
	config
	mutation *ReservationBlockMutation
	hooks    []Hook
}

// SetStartTime sets the "start_time" field.
func (rbc *ReservationBlockCreate) SetStartTime(t time.Time) *ReservationBlockCreate {
	rbc.mutation.SetStartTime(t)
	return rbc
}

// SetEndTime sets the "end_time" field.
func (rbc *ReservationBlockCreate) SetEndTime(t time.Time) *ReservationBlockCreate {
	rbc.mutation.SetEndTime(t)
	return rbc
}

// SetStatus sets the "status" field.
func (rbc *ReservationBlockCreate) SetStatus(r reservationblock.Status) *ReservationBlockCreate {
	rbc.mutation.SetStatus(r)
	return rbc
}

// SetPlaceInventoryID sets the "place_inventory" edge to the PlaceInventory entity by ID.
func (rbc *ReservationBlockCreate) SetPlaceInventoryID(id string) *ReservationBlockCreate {
	rbc.mutation.SetPlaceInventoryID(id)
	return rbc
}

// SetNillablePlaceInventoryID sets the "place_inventory" edge to the PlaceInventory entity by ID if the given value is not nil.
func (rbc *ReservationBlockCreate) SetNillablePlaceInventoryID(id *string) *ReservationBlockCreate {
	if id != nil {
		rbc = rbc.SetPlaceInventoryID(*id)
	}
	return rbc
}

// SetPlaceInventory sets the "place_inventory" edge to the PlaceInventory entity.
func (rbc *ReservationBlockCreate) SetPlaceInventory(p *PlaceInventory) *ReservationBlockCreate {
	return rbc.SetPlaceInventoryID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rbc *ReservationBlockCreate) SetUserID(id string) *ReservationBlockCreate {
	rbc.mutation.SetUserID(id)
	return rbc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (rbc *ReservationBlockCreate) SetNillableUserID(id *string) *ReservationBlockCreate {
	if id != nil {
		rbc = rbc.SetUserID(*id)
	}
	return rbc
}

// SetUser sets the "user" edge to the User entity.
func (rbc *ReservationBlockCreate) SetUser(u *User) *ReservationBlockCreate {
	return rbc.SetUserID(u.ID)
}

// Mutation returns the ReservationBlockMutation object of the builder.
func (rbc *ReservationBlockCreate) Mutation() *ReservationBlockMutation {
	return rbc.mutation
}

// Save creates the ReservationBlock in the database.
func (rbc *ReservationBlockCreate) Save(ctx context.Context) (*ReservationBlock, error) {
	return withHooks(ctx, rbc.sqlSave, rbc.mutation, rbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rbc *ReservationBlockCreate) SaveX(ctx context.Context) *ReservationBlock {
	v, err := rbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rbc *ReservationBlockCreate) Exec(ctx context.Context) error {
	_, err := rbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbc *ReservationBlockCreate) ExecX(ctx context.Context) {
	if err := rbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rbc *ReservationBlockCreate) check() error {
	if _, ok := rbc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "ReservationBlock.start_time"`)}
	}
	if _, ok := rbc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "ReservationBlock.end_time"`)}
	}
	if _, ok := rbc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ReservationBlock.status"`)}
	}
	if v, ok := rbc.mutation.Status(); ok {
		if err := reservationblock.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ReservationBlock.status": %w`, err)}
		}
	}
	return nil
}

func (rbc *ReservationBlockCreate) sqlSave(ctx context.Context) (*ReservationBlock, error) {
	if err := rbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ReservationBlock.ID type: %T", _spec.ID.Value)
		}
	}
	rbc.mutation.id = &_node.ID
	rbc.mutation.done = true
	return _node, nil
}

func (rbc *ReservationBlockCreate) createSpec() (*ReservationBlock, *sqlgraph.CreateSpec) {
	var (
		_node = &ReservationBlock{config: rbc.config}
		_spec = sqlgraph.NewCreateSpec(reservationblock.Table, sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString))
	)
	if value, ok := rbc.mutation.StartTime(); ok {
		_spec.SetField(reservationblock.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := rbc.mutation.EndTime(); ok {
		_spec.SetField(reservationblock.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := rbc.mutation.Status(); ok {
		_spec.SetField(reservationblock.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := rbc.mutation.PlaceInventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservationblock.PlaceInventoryTable,
			Columns: []string{reservationblock.PlaceInventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.place_inventory_reservation_blocks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rbc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservationblock.UserTable,
			Columns: []string{reservationblock.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_reservation_blocks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReservationBlockCreateBulk is the builder for creating many ReservationBlock entities in bulk.
type ReservationBlockCreateBulk struct {
	config
	err      error
	builders []*ReservationBlockCreate
}

// Save creates the ReservationBlock entities in the database.
func (rbcb *ReservationBlockCreateBulk) Save(ctx context.Context) ([]*ReservationBlock, error) {
	if rbcb.err != nil {
		return nil, rbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rbcb.builders))
	nodes := make([]*ReservationBlock, len(rbcb.builders))
	mutators := make([]Mutator, len(rbcb.builders))
	for i := range rbcb.builders {
		func(i int, root context.Context) {
			builder := rbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReservationBlockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rbcb *ReservationBlockCreateBulk) SaveX(ctx context.Context) []*ReservationBlock {
	v, err := rbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rbcb *ReservationBlockCreateBulk) Exec(ctx context.Context) error {
	_, err := rbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbcb *ReservationBlockCreateBulk) ExecX(ctx context.Context) {
	if err := rbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

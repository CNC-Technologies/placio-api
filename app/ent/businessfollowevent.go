// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/businessfollowevent"
	"placio-app/ent/event"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BusinessFollowEvent is the model entity for the BusinessFollowEvent schema.
type BusinessFollowEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BusinessFollowEventQuery when eager-loading is set.
	Edges                           BusinessFollowEventEdges `json:"edges"`
	business_business_follow_events *string
	business_follow_event_event     *string
	selectValues                    sql.SelectValues
}

// BusinessFollowEventEdges holds the relations/edges for other nodes in the graph.
type BusinessFollowEventEdges struct {
	// Business holds the value of the business edge.
	Business *Business `json:"business,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// BusinessOrErr returns the Business value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusinessFollowEventEdges) BusinessOrErr() (*Business, error) {
	if e.loadedTypes[0] {
		if e.Business == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: business.Label}
		}
		return e.Business, nil
	}
	return nil, &NotLoadedError{edge: "business"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BusinessFollowEventEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[1] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BusinessFollowEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case businessfollowevent.FieldID:
			values[i] = new(sql.NullString)
		case businessfollowevent.FieldCreatedAt, businessfollowevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case businessfollowevent.ForeignKeys[0]: // business_business_follow_events
			values[i] = new(sql.NullString)
		case businessfollowevent.ForeignKeys[1]: // business_follow_event_event
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BusinessFollowEvent fields.
func (bfe *BusinessFollowEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case businessfollowevent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bfe.ID = value.String
			}
		case businessfollowevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				bfe.CreatedAt = value.Time
			}
		case businessfollowevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				bfe.UpdatedAt = value.Time
			}
		case businessfollowevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_business_follow_events", values[i])
			} else if value.Valid {
				bfe.business_business_follow_events = new(string)
				*bfe.business_business_follow_events = value.String
			}
		case businessfollowevent.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_follow_event_event", values[i])
			} else if value.Valid {
				bfe.business_follow_event_event = new(string)
				*bfe.business_follow_event_event = value.String
			}
		default:
			bfe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BusinessFollowEvent.
// This includes values selected through modifiers, order, etc.
func (bfe *BusinessFollowEvent) Value(name string) (ent.Value, error) {
	return bfe.selectValues.Get(name)
}

// QueryBusiness queries the "business" edge of the BusinessFollowEvent entity.
func (bfe *BusinessFollowEvent) QueryBusiness() *BusinessQuery {
	return NewBusinessFollowEventClient(bfe.config).QueryBusiness(bfe)
}

// QueryEvent queries the "event" edge of the BusinessFollowEvent entity.
func (bfe *BusinessFollowEvent) QueryEvent() *EventQuery {
	return NewBusinessFollowEventClient(bfe.config).QueryEvent(bfe)
}

// Update returns a builder for updating this BusinessFollowEvent.
// Note that you need to call BusinessFollowEvent.Unwrap() before calling this method if this BusinessFollowEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (bfe *BusinessFollowEvent) Update() *BusinessFollowEventUpdateOne {
	return NewBusinessFollowEventClient(bfe.config).UpdateOne(bfe)
}

// Unwrap unwraps the BusinessFollowEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bfe *BusinessFollowEvent) Unwrap() *BusinessFollowEvent {
	_tx, ok := bfe.config.driver.(*txDriver)
	if !ok {
		panic("ent: BusinessFollowEvent is not a transactional entity")
	}
	bfe.config.driver = _tx.drv
	return bfe
}

// String implements the fmt.Stringer.
func (bfe *BusinessFollowEvent) String() string {
	var builder strings.Builder
	builder.WriteString("BusinessFollowEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bfe.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(bfe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(bfe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BusinessFollowEvents is a parsable slice of BusinessFollowEvent.
type BusinessFollowEvents []*BusinessFollowEvent

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/place"
	"placio-app/ent/user"
	"placio-app/ent/userfollowplace"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserFollowPlace is the model entity for the UserFollowPlace schema.
type UserFollowPlace struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserFollowPlaceQuery when eager-loading is set.
	Edges                   UserFollowPlaceEdges `json:"edges"`
	place_follower_users    *string
	user_followed_places    *string
	user_follow_place_place *string
	selectValues            sql.SelectValues
}

// UserFollowPlaceEdges holds the relations/edges for other nodes in the graph.
type UserFollowPlaceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Place holds the value of the place edge.
	Place *Place `json:"place,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserFollowPlaceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserFollowPlaceEdges) PlaceOrErr() (*Place, error) {
	if e.loadedTypes[1] {
		if e.Place == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: place.Label}
		}
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserFollowPlace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userfollowplace.FieldID:
			values[i] = new(sql.NullString)
		case userfollowplace.FieldCreatedAt, userfollowplace.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userfollowplace.ForeignKeys[0]: // place_follower_users
			values[i] = new(sql.NullString)
		case userfollowplace.ForeignKeys[1]: // user_followed_places
			values[i] = new(sql.NullString)
		case userfollowplace.ForeignKeys[2]: // user_follow_place_place
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserFollowPlace fields.
func (ufp *UserFollowPlace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userfollowplace.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ufp.ID = value.String
			}
		case userfollowplace.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				ufp.CreatedAt = value.Time
			}
		case userfollowplace.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				ufp.UpdatedAt = value.Time
			}
		case userfollowplace.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place_follower_users", values[i])
			} else if value.Valid {
				ufp.place_follower_users = new(string)
				*ufp.place_follower_users = value.String
			}
		case userfollowplace.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_followed_places", values[i])
			} else if value.Valid {
				ufp.user_followed_places = new(string)
				*ufp.user_followed_places = value.String
			}
		case userfollowplace.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_follow_place_place", values[i])
			} else if value.Valid {
				ufp.user_follow_place_place = new(string)
				*ufp.user_follow_place_place = value.String
			}
		default:
			ufp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserFollowPlace.
// This includes values selected through modifiers, order, etc.
func (ufp *UserFollowPlace) Value(name string) (ent.Value, error) {
	return ufp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserFollowPlace entity.
func (ufp *UserFollowPlace) QueryUser() *UserQuery {
	return NewUserFollowPlaceClient(ufp.config).QueryUser(ufp)
}

// QueryPlace queries the "place" edge of the UserFollowPlace entity.
func (ufp *UserFollowPlace) QueryPlace() *PlaceQuery {
	return NewUserFollowPlaceClient(ufp.config).QueryPlace(ufp)
}

// Update returns a builder for updating this UserFollowPlace.
// Note that you need to call UserFollowPlace.Unwrap() before calling this method if this UserFollowPlace
// was returned from a transaction, and the transaction was committed or rolled back.
func (ufp *UserFollowPlace) Update() *UserFollowPlaceUpdateOne {
	return NewUserFollowPlaceClient(ufp.config).UpdateOne(ufp)
}

// Unwrap unwraps the UserFollowPlace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ufp *UserFollowPlace) Unwrap() *UserFollowPlace {
	_tx, ok := ufp.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserFollowPlace is not a transactional entity")
	}
	ufp.config.driver = _tx.drv
	return ufp
}

// String implements the fmt.Stringer.
func (ufp *UserFollowPlace) String() string {
	var builder strings.Builder
	builder.WriteString("UserFollowPlace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ufp.ID))
	builder.WriteString("CreatedAt=")
	builder.WriteString(ufp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(ufp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserFollowPlaces is a parsable slice of UserFollowPlace.
type UserFollowPlaces []*UserFollowPlace

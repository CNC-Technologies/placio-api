// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"placio-app/ent/business"
	"placio-app/ent/media"
	"placio-app/ent/place"
	"placio-app/ent/plan"
	"placio-app/ent/predicate"
	"placio-app/ent/price"
	"placio-app/ent/subscription"
	"placio-app/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanQuery is the builder for querying Plan entities.
type PlanQuery struct {
	config
	ctx               *QueryContext
	order             []plan.OrderOption
	inters            []Interceptor
	predicates        []predicate.Plan
	withUsers         *UserQuery
	withBusinesses    *BusinessQuery
	withPlaces        *PlaceQuery
	withMedia         *MediaQuery
	withPrices        *PriceQuery
	withSubscriptions *SubscriptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlanQuery builder.
func (pq *PlanQuery) Where(ps ...predicate.Plan) *PlanQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PlanQuery) Limit(limit int) *PlanQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PlanQuery) Offset(offset int) *PlanQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PlanQuery) Unique(unique bool) *PlanQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PlanQuery) Order(o ...plan.OrderOption) *PlanQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryUsers chains the current query on the "users" edge.
func (pq *PlanQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.UsersTable, plan.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBusinesses chains the current query on the "businesses" edge.
func (pq *PlanQuery) QueryBusinesses() *BusinessQuery {
	query := (&BusinessClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.BusinessesTable, plan.BusinessesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlaces chains the current query on the "places" edge.
func (pq *PlanQuery) QueryPlaces() *PlaceQuery {
	query := (&PlaceClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.PlacesTable, plan.PlacesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedia chains the current query on the "media" edge.
func (pq *PlanQuery) QueryMedia() *MediaQuery {
	query := (&MediaClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.MediaTable, plan.MediaColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrices chains the current query on the "prices" edge.
func (pq *PlanQuery) QueryPrices() *PriceQuery {
	query := (&PriceClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(price.Table, price.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.PricesTable, plan.PricesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscriptions chains the current query on the "subscriptions" edge.
func (pq *PlanQuery) QuerySubscriptions() *SubscriptionQuery {
	query := (&SubscriptionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, selector),
			sqlgraph.To(subscription.Table, subscription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.SubscriptionsTable, plan.SubscriptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Plan entity from the query.
// Returns a *NotFoundError when no Plan was found.
func (pq *PlanQuery) First(ctx context.Context) (*Plan, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{plan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PlanQuery) FirstX(ctx context.Context) *Plan {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Plan ID from the query.
// Returns a *NotFoundError when no Plan ID was found.
func (pq *PlanQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{plan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PlanQuery) FirstIDX(ctx context.Context) string {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Plan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Plan entity is found.
// Returns a *NotFoundError when no Plan entities are found.
func (pq *PlanQuery) Only(ctx context.Context) (*Plan, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{plan.Label}
	default:
		return nil, &NotSingularError{plan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PlanQuery) OnlyX(ctx context.Context) *Plan {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Plan ID in the query.
// Returns a *NotSingularError when more than one Plan ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PlanQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{plan.Label}
	default:
		err = &NotSingularError{plan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PlanQuery) OnlyIDX(ctx context.Context) string {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Plans.
func (pq *PlanQuery) All(ctx context.Context) ([]*Plan, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Plan, *PlanQuery]()
	return withInterceptors[[]*Plan](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PlanQuery) AllX(ctx context.Context) []*Plan {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Plan IDs.
func (pq *PlanQuery) IDs(ctx context.Context) (ids []string, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(plan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PlanQuery) IDsX(ctx context.Context) []string {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PlanQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PlanQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PlanQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PlanQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PlanQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PlanQuery) Clone() *PlanQuery {
	if pq == nil {
		return nil
	}
	return &PlanQuery{
		config:            pq.config,
		ctx:               pq.ctx.Clone(),
		order:             append([]plan.OrderOption{}, pq.order...),
		inters:            append([]Interceptor{}, pq.inters...),
		predicates:        append([]predicate.Plan{}, pq.predicates...),
		withUsers:         pq.withUsers.Clone(),
		withBusinesses:    pq.withBusinesses.Clone(),
		withPlaces:        pq.withPlaces.Clone(),
		withMedia:         pq.withMedia.Clone(),
		withPrices:        pq.withPrices.Clone(),
		withSubscriptions: pq.withSubscriptions.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithUsers(opts ...func(*UserQuery)) *PlanQuery {
	query := (&UserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withUsers = query
	return pq
}

// WithBusinesses tells the query-builder to eager-load the nodes that are connected to
// the "businesses" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithBusinesses(opts ...func(*BusinessQuery)) *PlanQuery {
	query := (&BusinessClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withBusinesses = query
	return pq
}

// WithPlaces tells the query-builder to eager-load the nodes that are connected to
// the "places" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPlaces(opts ...func(*PlaceQuery)) *PlanQuery {
	query := (&PlaceClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlaces = query
	return pq
}

// WithMedia tells the query-builder to eager-load the nodes that are connected to
// the "media" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithMedia(opts ...func(*MediaQuery)) *PlanQuery {
	query := (&MediaClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withMedia = query
	return pq
}

// WithPrices tells the query-builder to eager-load the nodes that are connected to
// the "prices" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithPrices(opts ...func(*PriceQuery)) *PlanQuery {
	query := (&PriceClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPrices = query
	return pq
}

// WithSubscriptions tells the query-builder to eager-load the nodes that are connected to
// the "subscriptions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlanQuery) WithSubscriptions(opts ...func(*SubscriptionQuery)) *PlanQuery {
	query := (&SubscriptionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withSubscriptions = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Plan.Query().
//		GroupBy(plan.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PlanQuery) GroupBy(field string, fields ...string) *PlanGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlanGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = plan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Plan.Query().
//		Select(plan.FieldName).
//		Scan(ctx, &v)
func (pq *PlanQuery) Select(fields ...string) *PlanSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PlanSelect{PlanQuery: pq}
	sbuild.label = plan.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlanSelect configured with the given aggregations.
func (pq *PlanQuery) Aggregate(fns ...AggregateFunc) *PlanSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PlanQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !plan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Plan, error) {
	var (
		nodes       = []*Plan{}
		_spec       = pq.querySpec()
		loadedTypes = [6]bool{
			pq.withUsers != nil,
			pq.withBusinesses != nil,
			pq.withPlaces != nil,
			pq.withMedia != nil,
			pq.withPrices != nil,
			pq.withSubscriptions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Plan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Plan{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withUsers; query != nil {
		if err := pq.loadUsers(ctx, query, nodes,
			func(n *Plan) { n.Edges.Users = []*User{} },
			func(n *Plan, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withBusinesses; query != nil {
		if err := pq.loadBusinesses(ctx, query, nodes,
			func(n *Plan) { n.Edges.Businesses = []*Business{} },
			func(n *Plan, e *Business) { n.Edges.Businesses = append(n.Edges.Businesses, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlaces; query != nil {
		if err := pq.loadPlaces(ctx, query, nodes,
			func(n *Plan) { n.Edges.Places = []*Place{} },
			func(n *Plan, e *Place) { n.Edges.Places = append(n.Edges.Places, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withMedia; query != nil {
		if err := pq.loadMedia(ctx, query, nodes,
			func(n *Plan) { n.Edges.Media = []*Media{} },
			func(n *Plan, e *Media) { n.Edges.Media = append(n.Edges.Media, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPrices; query != nil {
		if err := pq.loadPrices(ctx, query, nodes,
			func(n *Plan) { n.Edges.Prices = []*Price{} },
			func(n *Plan, e *Price) { n.Edges.Prices = append(n.Edges.Prices, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withSubscriptions; query != nil {
		if err := pq.loadSubscriptions(ctx, query, nodes,
			func(n *Plan) { n.Edges.Subscriptions = []*Subscription{} },
			func(n *Plan, e *Subscription) { n.Edges.Subscriptions = append(n.Edges.Subscriptions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PlanQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Plan)
	nids := make(map[string]map[*Plan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(plan.UsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(plan.UsersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(plan.UsersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(plan.UsersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Plan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadBusinesses(ctx context.Context, query *BusinessQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Business)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Plan)
	nids := make(map[string]map[*Plan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(plan.BusinessesTable)
		s.Join(joinT).On(s.C(business.FieldID), joinT.C(plan.BusinessesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(plan.BusinessesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(plan.BusinessesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Plan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Business](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "businesses" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadPlaces(ctx context.Context, query *PlaceQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Place)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Plan)
	nids := make(map[string]map[*Plan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(plan.PlacesTable)
		s.Join(joinT).On(s.C(place.FieldID), joinT.C(plan.PlacesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(plan.PlacesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(plan.PlacesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Plan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Place](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "places" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlanQuery) loadMedia(ctx context.Context, query *MediaQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Media)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Media(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.MediaColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_media
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_media" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_media" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadPrices(ctx context.Context, query *PriceQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Price)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Price(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.PricesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_prices
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_prices" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_prices" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlanQuery) loadSubscriptions(ctx context.Context, query *SubscriptionQuery, nodes []*Plan, init func(*Plan), assign func(*Plan, *Subscription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Plan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Subscription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(plan.SubscriptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.plan_subscriptions
		if fk == nil {
			return fmt.Errorf(`foreign-key "plan_subscriptions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "plan_subscriptions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *PlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for i := range fields {
			if fields[i] != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(plan.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = plan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlanGroupBy is the group-by builder for Plan entities.
type PlanGroupBy struct {
	selector
	build *PlanQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PlanGroupBy) Aggregate(fns ...AggregateFunc) *PlanGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PlanGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlanQuery, *PlanGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PlanGroupBy) sqlScan(ctx context.Context, root *PlanQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlanSelect is the builder for selecting fields of Plan entities.
type PlanSelect struct {
	*PlanQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PlanSelect) Aggregate(fns ...AggregateFunc) *PlanSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PlanSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlanQuery, *PlanSelect](ctx, ps.PlanQuery, ps, ps.inters, v)
}

func (ps *PlanSelect) sqlScan(ctx context.Context, root *PlanQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"placio-app/ent/placetable"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceTableDelete is the builder for deleting a PlaceTable entity.
type PlaceTableDelete struct {
	config
	hooks    []Hook
	mutation *PlaceTableMutation
}

// Where appends a list predicates to the PlaceTableDelete builder.
func (ptd *PlaceTableDelete) Where(ps ...predicate.PlaceTable) *PlaceTableDelete {
	ptd.mutation.Where(ps...)
	return ptd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptd *PlaceTableDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptd.sqlExec, ptd.mutation, ptd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptd *PlaceTableDelete) ExecX(ctx context.Context) int {
	n, err := ptd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptd *PlaceTableDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(placetable.Table, sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString))
	if ps := ptd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptd.mutation.done = true
	return affected, err
}

// PlaceTableDeleteOne is the builder for deleting a single PlaceTable entity.
type PlaceTableDeleteOne struct {
	ptd *PlaceTableDelete
}

// Where appends a list predicates to the PlaceTableDelete builder.
func (ptdo *PlaceTableDeleteOne) Where(ps ...predicate.PlaceTable) *PlaceTableDeleteOne {
	ptdo.ptd.mutation.Where(ps...)
	return ptdo
}

// Exec executes the deletion query.
func (ptdo *PlaceTableDeleteOne) Exec(ctx context.Context) error {
	n, err := ptdo.ptd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{placetable.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptdo *PlaceTableDeleteOne) ExecX(ctx context.Context) {
	if err := ptdo.Exec(ctx); err != nil {
		panic(err)
	}
}

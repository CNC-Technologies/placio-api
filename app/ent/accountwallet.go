



// Code generated by ent, DO NOT EDIT.



package ent



	
import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"
			 "placio-app/ent/accountwallet"
			 "placio-app/ent/user"
			 "placio-app/ent/business"

)




		// AccountWallet is the model entity for the AccountWallet schema.
type AccountWallet struct {
	config `json:"-"`
		// ID of the ent.
		ID string `json:"id,omitempty"`
		// Balance holds the value of the "balance" field.
		Balance float64 `json:"balance,omitempty"`
		// TotalDeposited holds the value of the "total_deposited" field.
		TotalDeposited float64 `json:"total_deposited,omitempty"`
		// TotalWithdrawn holds the value of the "total_withdrawn" field.
		TotalWithdrawn float64 `json:"total_withdrawn,omitempty"`
		// TotalEarned holds the value of the "total_earned" field.
		TotalEarned float64 `json:"total_earned,omitempty"`
		// TotalSpent holds the value of the "total_spent" field.
		TotalSpent float64 `json:"total_spent,omitempty"`
		// TotalRefunded holds the value of the "total_refunded" field.
		TotalRefunded float64 `json:"total_refunded,omitempty"`
		// TotalFees holds the value of the "total_fees" field.
		TotalFees float64 `json:"total_fees,omitempty"`
		// TotalTax holds the value of the "total_tax" field.
		TotalTax float64 `json:"total_tax,omitempty"`
		// TotalDiscount holds the value of the "total_discount" field.
		TotalDiscount float64 `json:"total_discount,omitempty"`
		// TotalRevenue holds the value of the "total_revenue" field.
		TotalRevenue float64 `json:"total_revenue,omitempty"`
		// TotalExpenses holds the value of the "total_expenses" field.
		TotalExpenses float64 `json:"total_expenses,omitempty"`
		// TotalProfit holds the value of the "total_profit" field.
		TotalProfit float64 `json:"total_profit,omitempty"`
		// TotalLoss holds the value of the "total_loss" field.
		TotalLoss float64 `json:"total_loss,omitempty"`
		// Edges holds the relations/edges for other nodes in the graph.
		// The values are being populated by the AccountWalletQuery when eager-loading is set.
		Edges AccountWalletEdges `json:"edges"`
		business_wallet *string
		user_wallet *string
	selectValues sql.SelectValues

}
// AccountWalletEdges holds the relations/edges for other nodes in the graph.
type AccountWalletEdges struct {
		// User holds the value of the user edge.
		User *User `json:"user,omitempty"`
		// Business holds the value of the business edge.
		Business *Business `json:"business,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool


}
	// UserOrErr returns the User value or an error if the edge
	// was not loaded in eager-loading, or loaded but was not found.
	func (e AccountWalletEdges) UserOrErr() (*User, error) {
		if e.loadedTypes[0] {
				if e.User == nil {
					// Edge was loaded but was not found.
					return nil, &NotFoundError{label: user.Label}
				}
			return e.User, nil
		}
		return nil, &NotLoadedError{edge: "user"}
	}
	// BusinessOrErr returns the Business value or an error if the edge
	// was not loaded in eager-loading, or loaded but was not found.
	func (e AccountWalletEdges) BusinessOrErr() (*Business, error) {
		if e.loadedTypes[1] {
				if e.Business == nil {
					// Edge was loaded but was not found.
					return nil, &NotFoundError{label: business.Label}
				}
			return e.Business, nil
		}
		return nil, &NotLoadedError{edge: "business"}
	}







	
	


	
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	

	
	
		
	
	
	


// scanValues returns the types for scanning values from sql.Rows.
func (*AccountWallet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
				case accountwallet.FieldBalance,accountwallet.FieldTotalDeposited,accountwallet.FieldTotalWithdrawn,accountwallet.FieldTotalEarned,accountwallet.FieldTotalSpent,accountwallet.FieldTotalRefunded,accountwallet.FieldTotalFees,accountwallet.FieldTotalTax,accountwallet.FieldTotalDiscount,accountwallet.FieldTotalRevenue,accountwallet.FieldTotalExpenses,accountwallet.FieldTotalProfit,accountwallet.FieldTotalLoss:
					values[i] = new(sql.NullFloat64)
				case accountwallet.FieldID:
					values[i] = new(sql.NullString)
				case accountwallet.ForeignKeys[0]: // business_wallet
					values[i] = new(sql.NullString)
				case accountwallet.ForeignKeys[1]: // user_wallet
					values[i] = new(sql.NullString)
			default:
				values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountWallet fields.
func (aw *AccountWallet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
			case accountwallet.FieldID:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
					aw.ID = value.String
		}
			case accountwallet.FieldBalance:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
					aw.Balance = value.Float64
		}
			case accountwallet.FieldTotalDeposited:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_deposited", values[i])
			} else if value.Valid {
					aw.TotalDeposited = value.Float64
		}
			case accountwallet.FieldTotalWithdrawn:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_withdrawn", values[i])
			} else if value.Valid {
					aw.TotalWithdrawn = value.Float64
		}
			case accountwallet.FieldTotalEarned:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_earned", values[i])
			} else if value.Valid {
					aw.TotalEarned = value.Float64
		}
			case accountwallet.FieldTotalSpent:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_spent", values[i])
			} else if value.Valid {
					aw.TotalSpent = value.Float64
		}
			case accountwallet.FieldTotalRefunded:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_refunded", values[i])
			} else if value.Valid {
					aw.TotalRefunded = value.Float64
		}
			case accountwallet.FieldTotalFees:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_fees", values[i])
			} else if value.Valid {
					aw.TotalFees = value.Float64
		}
			case accountwallet.FieldTotalTax:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_tax", values[i])
			} else if value.Valid {
					aw.TotalTax = value.Float64
		}
			case accountwallet.FieldTotalDiscount:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_discount", values[i])
			} else if value.Valid {
					aw.TotalDiscount = value.Float64
		}
			case accountwallet.FieldTotalRevenue:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_revenue", values[i])
			} else if value.Valid {
					aw.TotalRevenue = value.Float64
		}
			case accountwallet.FieldTotalExpenses:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_expenses", values[i])
			} else if value.Valid {
					aw.TotalExpenses = value.Float64
		}
			case accountwallet.FieldTotalProfit:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_profit", values[i])
			} else if value.Valid {
					aw.TotalProfit = value.Float64
		}
			case accountwallet.FieldTotalLoss:
					if value, ok := values[i].(*sql.NullFloat64); !ok {
			return fmt.Errorf("unexpected type %T for field total_loss", values[i])
			} else if value.Valid {
					aw.TotalLoss = value.Float64
		}
			case accountwallet.ForeignKeys[0]:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field business_wallet", values[i])
			} else if value.Valid {
					aw.business_wallet = new(string)
					*aw.business_wallet = value.String
		}
			case accountwallet.ForeignKeys[1]:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field user_wallet", values[i])
			} else if value.Valid {
					aw.user_wallet = new(string)
					*aw.user_wallet = value.String
		}
		default:
			aw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccountWallet.
// This includes values selected through modifiers, order, etc.
func (aw *AccountWallet) Value(name string) (ent.Value, error) {
	return aw.selectValues.Get(name)
}





	
	// QueryUser queries the "user" edge of the AccountWallet entity.
	func (aw *AccountWallet) QueryUser() *UserQuery {
		return NewAccountWalletClient(aw.config).QueryUser(aw)
	}

	
	// QueryBusiness queries the "business" edge of the AccountWallet entity.
	func (aw *AccountWallet) QueryBusiness() *BusinessQuery {
		return NewAccountWalletClient(aw.config).QueryBusiness(aw)
	}


// Update returns a builder for updating this AccountWallet.
// Note that you need to call AccountWallet.Unwrap() before calling this method if this AccountWallet
// was returned from a transaction, and the transaction was committed or rolled back.
func (aw *AccountWallet) Update() *AccountWalletUpdateOne {
	return NewAccountWalletClient(aw.config).UpdateOne(aw)
}

// Unwrap unwraps the AccountWallet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aw *AccountWallet) Unwrap() *AccountWallet {
	_tx, ok := aw.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountWallet is not a transactional entity")
	}
	aw.config.driver = _tx.drv
	return aw
}


	

	// String implements the fmt.Stringer.
	func (aw *AccountWallet) String() string {
		var builder strings.Builder
		builder.WriteString("AccountWallet(")
			builder.WriteString(fmt.Sprintf("id=%v, ", aw.ID))
					builder.WriteString("balance=")
						builder.WriteString(fmt.Sprintf("%v", aw.Balance))
				builder.WriteString(", ")
					builder.WriteString("total_deposited=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalDeposited))
				builder.WriteString(", ")
					builder.WriteString("total_withdrawn=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalWithdrawn))
				builder.WriteString(", ")
					builder.WriteString("total_earned=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalEarned))
				builder.WriteString(", ")
					builder.WriteString("total_spent=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalSpent))
				builder.WriteString(", ")
					builder.WriteString("total_refunded=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalRefunded))
				builder.WriteString(", ")
					builder.WriteString("total_fees=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalFees))
				builder.WriteString(", ")
					builder.WriteString("total_tax=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalTax))
				builder.WriteString(", ")
					builder.WriteString("total_discount=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalDiscount))
				builder.WriteString(", ")
					builder.WriteString("total_revenue=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalRevenue))
				builder.WriteString(", ")
					builder.WriteString("total_expenses=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalExpenses))
				builder.WriteString(", ")
					builder.WriteString("total_profit=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalProfit))
				builder.WriteString(", ")
					builder.WriteString("total_loss=")
						builder.WriteString(fmt.Sprintf("%v", aw.TotalLoss))
		builder.WriteByte(')')
		return builder.String()
	}







// AccountWallets is a parsable slice of AccountWallet.
type AccountWallets []*AccountWallet


	
	



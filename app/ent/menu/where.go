// Code generated by ent, DO NOT EDIT.

package menu

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldName, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDeletedAt, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsDeleted, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDescription, v))
}

// PreparationTime applies equality check predicate on the "preparation_time" field. It's identical to PreparationTimeEQ.
func PreparationTime(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldPreparationTime, v))
}

// Options applies equality check predicate on the "options" field. It's identical to OptionsEQ.
func Options(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldOptions, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldPrice, v))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldCurrency, v))
}

// IsAvailable applies equality check predicate on the "is_available" field. It's identical to IsAvailableEQ.
func IsAvailable(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsAvailable, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldName, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtContains applies the Contains predicate on the "deleted_at" field.
func DeletedAtContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldDeletedAt, v))
}

// DeletedAtHasPrefix applies the HasPrefix predicate on the "deleted_at" field.
func DeletedAtHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldDeletedAt, v))
}

// DeletedAtHasSuffix applies the HasSuffix predicate on the "deleted_at" field.
func DeletedAtHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedAtEqualFold applies the EqualFold predicate on the "deleted_at" field.
func DeletedAtEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldDeletedAt, v))
}

// DeletedAtContainsFold applies the ContainsFold predicate on the "deleted_at" field.
func DeletedAtContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldDeletedAt, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldIsDeleted, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldDescription, v))
}

// PreparationTimeEQ applies the EQ predicate on the "preparation_time" field.
func PreparationTimeEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldPreparationTime, v))
}

// PreparationTimeNEQ applies the NEQ predicate on the "preparation_time" field.
func PreparationTimeNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldPreparationTime, v))
}

// PreparationTimeIn applies the In predicate on the "preparation_time" field.
func PreparationTimeIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldPreparationTime, vs...))
}

// PreparationTimeNotIn applies the NotIn predicate on the "preparation_time" field.
func PreparationTimeNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldPreparationTime, vs...))
}

// PreparationTimeGT applies the GT predicate on the "preparation_time" field.
func PreparationTimeGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldPreparationTime, v))
}

// PreparationTimeGTE applies the GTE predicate on the "preparation_time" field.
func PreparationTimeGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldPreparationTime, v))
}

// PreparationTimeLT applies the LT predicate on the "preparation_time" field.
func PreparationTimeLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldPreparationTime, v))
}

// PreparationTimeLTE applies the LTE predicate on the "preparation_time" field.
func PreparationTimeLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldPreparationTime, v))
}

// PreparationTimeContains applies the Contains predicate on the "preparation_time" field.
func PreparationTimeContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldPreparationTime, v))
}

// PreparationTimeHasPrefix applies the HasPrefix predicate on the "preparation_time" field.
func PreparationTimeHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldPreparationTime, v))
}

// PreparationTimeHasSuffix applies the HasSuffix predicate on the "preparation_time" field.
func PreparationTimeHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldPreparationTime, v))
}

// PreparationTimeIsNil applies the IsNil predicate on the "preparation_time" field.
func PreparationTimeIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldPreparationTime))
}

// PreparationTimeNotNil applies the NotNil predicate on the "preparation_time" field.
func PreparationTimeNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldPreparationTime))
}

// PreparationTimeEqualFold applies the EqualFold predicate on the "preparation_time" field.
func PreparationTimeEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldPreparationTime, v))
}

// PreparationTimeContainsFold applies the ContainsFold predicate on the "preparation_time" field.
func PreparationTimeContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldPreparationTime, v))
}

// OptionsEQ applies the EQ predicate on the "options" field.
func OptionsEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldOptions, v))
}

// OptionsNEQ applies the NEQ predicate on the "options" field.
func OptionsNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldOptions, v))
}

// OptionsIn applies the In predicate on the "options" field.
func OptionsIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldOptions, vs...))
}

// OptionsNotIn applies the NotIn predicate on the "options" field.
func OptionsNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldOptions, vs...))
}

// OptionsGT applies the GT predicate on the "options" field.
func OptionsGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldOptions, v))
}

// OptionsGTE applies the GTE predicate on the "options" field.
func OptionsGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldOptions, v))
}

// OptionsLT applies the LT predicate on the "options" field.
func OptionsLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldOptions, v))
}

// OptionsLTE applies the LTE predicate on the "options" field.
func OptionsLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldOptions, v))
}

// OptionsContains applies the Contains predicate on the "options" field.
func OptionsContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldOptions, v))
}

// OptionsHasPrefix applies the HasPrefix predicate on the "options" field.
func OptionsHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldOptions, v))
}

// OptionsHasSuffix applies the HasSuffix predicate on the "options" field.
func OptionsHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldOptions, v))
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldOptions))
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldOptions))
}

// OptionsEqualFold applies the EqualFold predicate on the "options" field.
func OptionsEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldOptions, v))
}

// OptionsContainsFold applies the ContainsFold predicate on the "options" field.
func OptionsContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldOptions, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldPrice, v))
}

// PriceContains applies the Contains predicate on the "price" field.
func PriceContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldPrice, v))
}

// PriceHasPrefix applies the HasPrefix predicate on the "price" field.
func PriceHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldPrice, v))
}

// PriceHasSuffix applies the HasSuffix predicate on the "price" field.
func PriceHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldPrice))
}

// PriceEqualFold applies the EqualFold predicate on the "price" field.
func PriceEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldPrice, v))
}

// PriceContainsFold applies the ContainsFold predicate on the "price" field.
func PriceContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldPrice, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyIsNil applies the IsNil predicate on the "currency" field.
func CurrencyIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldCurrency))
}

// CurrencyNotNil applies the NotNil predicate on the "currency" field.
func CurrencyNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldCurrency))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldCurrency, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldType, vs...))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldType))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldStatus))
}

// DrinkTypeEQ applies the EQ predicate on the "DrinkType" field.
func DrinkTypeEQ(v DrinkType) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDrinkType, v))
}

// DrinkTypeNEQ applies the NEQ predicate on the "DrinkType" field.
func DrinkTypeNEQ(v DrinkType) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldDrinkType, v))
}

// DrinkTypeIn applies the In predicate on the "DrinkType" field.
func DrinkTypeIn(vs ...DrinkType) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldDrinkType, vs...))
}

// DrinkTypeNotIn applies the NotIn predicate on the "DrinkType" field.
func DrinkTypeNotIn(vs ...DrinkType) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldDrinkType, vs...))
}

// DrinkTypeIsNil applies the IsNil predicate on the "DrinkType" field.
func DrinkTypeIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldDrinkType))
}

// DrinkTypeNotNil applies the NotNil predicate on the "DrinkType" field.
func DrinkTypeNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldDrinkType))
}

// DietaryTypeEQ applies the EQ predicate on the "DietaryType" field.
func DietaryTypeEQ(v DietaryType) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDietaryType, v))
}

// DietaryTypeNEQ applies the NEQ predicate on the "DietaryType" field.
func DietaryTypeNEQ(v DietaryType) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldDietaryType, v))
}

// DietaryTypeIn applies the In predicate on the "DietaryType" field.
func DietaryTypeIn(vs ...DietaryType) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldDietaryType, vs...))
}

// DietaryTypeNotIn applies the NotIn predicate on the "DietaryType" field.
func DietaryTypeNotIn(vs ...DietaryType) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldDietaryType, vs...))
}

// DietaryTypeIsNil applies the IsNil predicate on the "DietaryType" field.
func DietaryTypeIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldDietaryType))
}

// DietaryTypeNotNil applies the NotNil predicate on the "DietaryType" field.
func DietaryTypeNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldDietaryType))
}

// IsAvailableEQ applies the EQ predicate on the "is_available" field.
func IsAvailableEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsAvailable, v))
}

// IsAvailableNEQ applies the NEQ predicate on the "is_available" field.
func IsAvailableNEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldIsAvailable, v))
}

// HasPlace applies the HasEdge predicate on the "place" edge.
func HasPlace() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PlaceTable, PlacePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
func HasPlaceWith(preds ...predicate.Place) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CategoriesTable, CategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.Category) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMenuItems applies the HasEdge predicate on the "menu_items" edge.
func HasMenuItems() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MenuItemsTable, MenuItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenuItemsWith applies the HasEdge predicate on the "menu_items" edge with a given conditions (other predicates).
func HasMenuItemsWith(preds ...predicate.MenuItem) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newMenuItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MediaTable, MediaPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.NotPredicates(p))
}

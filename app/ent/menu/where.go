// Code generated by ent, DO NOT EDIT.

package menu

import (
	"placio-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldName, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDeletedAt, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsDeleted, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDescription, v))
}

// Options applies equality check predicate on the "options" field. It's identical to OptionsEQ.
func Options(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldOptions, v))
}

// IsAvailable applies equality check predicate on the "is_available" field. It's identical to IsAvailableEQ.
func IsAvailable(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsAvailable, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldName, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtContains applies the Contains predicate on the "deleted_at" field.
func DeletedAtContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldDeletedAt, v))
}

// DeletedAtHasPrefix applies the HasPrefix predicate on the "deleted_at" field.
func DeletedAtHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldDeletedAt, v))
}

// DeletedAtHasSuffix applies the HasSuffix predicate on the "deleted_at" field.
func DeletedAtHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedAtEqualFold applies the EqualFold predicate on the "deleted_at" field.
func DeletedAtEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldDeletedAt, v))
}

// DeletedAtContainsFold applies the ContainsFold predicate on the "deleted_at" field.
func DeletedAtContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldDeletedAt, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldIsDeleted, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldDescription, v))
}

// OptionsEQ applies the EQ predicate on the "options" field.
func OptionsEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldOptions, v))
}

// OptionsNEQ applies the NEQ predicate on the "options" field.
func OptionsNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldOptions, v))
}

// OptionsIn applies the In predicate on the "options" field.
func OptionsIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldOptions, vs...))
}

// OptionsNotIn applies the NotIn predicate on the "options" field.
func OptionsNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldOptions, vs...))
}

// OptionsGT applies the GT predicate on the "options" field.
func OptionsGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldOptions, v))
}

// OptionsGTE applies the GTE predicate on the "options" field.
func OptionsGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldOptions, v))
}

// OptionsLT applies the LT predicate on the "options" field.
func OptionsLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldOptions, v))
}

// OptionsLTE applies the LTE predicate on the "options" field.
func OptionsLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldOptions, v))
}

// OptionsContains applies the Contains predicate on the "options" field.
func OptionsContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldOptions, v))
}

// OptionsHasPrefix applies the HasPrefix predicate on the "options" field.
func OptionsHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldOptions, v))
}

// OptionsHasSuffix applies the HasSuffix predicate on the "options" field.
func OptionsHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldOptions, v))
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldOptions))
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldOptions))
}

// OptionsEqualFold applies the EqualFold predicate on the "options" field.
func OptionsEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldOptions, v))
}

// OptionsContainsFold applies the ContainsFold predicate on the "options" field.
func OptionsContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldOptions, v))
}

// FoodTypeEQ applies the EQ predicate on the "foodType" field.
func FoodTypeEQ(v FoodType) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldFoodType, v))
}

// FoodTypeNEQ applies the NEQ predicate on the "foodType" field.
func FoodTypeNEQ(v FoodType) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldFoodType, v))
}

// FoodTypeIn applies the In predicate on the "foodType" field.
func FoodTypeIn(vs ...FoodType) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldFoodType, vs...))
}

// FoodTypeNotIn applies the NotIn predicate on the "foodType" field.
func FoodTypeNotIn(vs ...FoodType) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldFoodType, vs...))
}

// FoodTypeIsNil applies the IsNil predicate on the "foodType" field.
func FoodTypeIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldFoodType))
}

// FoodTypeNotNil applies the NotNil predicate on the "foodType" field.
func FoodTypeNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldFoodType))
}

// MenuItemTypeEQ applies the EQ predicate on the "menuItemType" field.
func MenuItemTypeEQ(v MenuItemType) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldMenuItemType, v))
}

// MenuItemTypeNEQ applies the NEQ predicate on the "menuItemType" field.
func MenuItemTypeNEQ(v MenuItemType) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldMenuItemType, v))
}

// MenuItemTypeIn applies the In predicate on the "menuItemType" field.
func MenuItemTypeIn(vs ...MenuItemType) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldMenuItemType, vs...))
}

// MenuItemTypeNotIn applies the NotIn predicate on the "menuItemType" field.
func MenuItemTypeNotIn(vs ...MenuItemType) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldMenuItemType, vs...))
}

// MenuItemTypeIsNil applies the IsNil predicate on the "menuItemType" field.
func MenuItemTypeIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldMenuItemType))
}

// MenuItemTypeNotNil applies the NotNil predicate on the "menuItemType" field.
func MenuItemTypeNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldMenuItemType))
}

// DrinkTypeEQ applies the EQ predicate on the "drinkType" field.
func DrinkTypeEQ(v DrinkType) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDrinkType, v))
}

// DrinkTypeNEQ applies the NEQ predicate on the "drinkType" field.
func DrinkTypeNEQ(v DrinkType) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldDrinkType, v))
}

// DrinkTypeIn applies the In predicate on the "drinkType" field.
func DrinkTypeIn(vs ...DrinkType) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldDrinkType, vs...))
}

// DrinkTypeNotIn applies the NotIn predicate on the "drinkType" field.
func DrinkTypeNotIn(vs ...DrinkType) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldDrinkType, vs...))
}

// DrinkTypeIsNil applies the IsNil predicate on the "drinkType" field.
func DrinkTypeIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldDrinkType))
}

// DrinkTypeNotNil applies the NotNil predicate on the "drinkType" field.
func DrinkTypeNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldDrinkType))
}

// DietaryTypeEQ applies the EQ predicate on the "dietaryType" field.
func DietaryTypeEQ(v DietaryType) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldDietaryType, v))
}

// DietaryTypeNEQ applies the NEQ predicate on the "dietaryType" field.
func DietaryTypeNEQ(v DietaryType) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldDietaryType, v))
}

// DietaryTypeIn applies the In predicate on the "dietaryType" field.
func DietaryTypeIn(vs ...DietaryType) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldDietaryType, vs...))
}

// DietaryTypeNotIn applies the NotIn predicate on the "dietaryType" field.
func DietaryTypeNotIn(vs ...DietaryType) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldDietaryType, vs...))
}

// DietaryTypeIsNil applies the IsNil predicate on the "dietaryType" field.
func DietaryTypeIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldDietaryType))
}

// DietaryTypeNotNil applies the NotNil predicate on the "dietaryType" field.
func DietaryTypeNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldDietaryType))
}

// IsAvailableEQ applies the EQ predicate on the "is_available" field.
func IsAvailableEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldIsAvailable, v))
}

// IsAvailableNEQ applies the NEQ predicate on the "is_available" field.
func IsAvailableNEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldIsAvailable, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPlace applies the HasEdge predicate on the "place" edge.
func HasPlace() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PlaceTable, PlacePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
func HasPlaceWith(preds ...predicate.Place) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategories applies the HasEdge predicate on the "categories" edge.
func HasCategories() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CategoriesTable, CategoriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoriesWith applies the HasEdge predicate on the "categories" edge with a given conditions (other predicates).
func HasCategoriesWith(preds ...predicate.Category) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newCategoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMenuItems applies the HasEdge predicate on the "menu_items" edge.
func HasMenuItems() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MenuItemsTable, MenuItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenuItemsWith applies the HasEdge predicate on the "menu_items" edge with a given conditions (other predicates).
func HasMenuItemsWith(preds ...predicate.MenuItem) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newMenuItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MediaTable, MediaPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreatedByTable, CreatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.User) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newCreatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedBy applies the HasEdge predicate on the "updated_by" edge.
func HasUpdatedBy() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UpdatedByTable, UpdatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedByWith applies the HasEdge predicate on the "updated_by" edge with a given conditions (other predicates).
func HasUpdatedByWith(preds ...predicate.User) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newUpdatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/roomcategory"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RoomCategory is the model entity for the RoomCategory schema.
type RoomCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Price holds the value of the "price" field.
	Price string `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomCategoryQuery when eager-loading is set.
	Edges        RoomCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoomCategoryEdges holds the relations/edges for other nodes in the graph.
type RoomCategoryEdges struct {
	// Place holds the value of the place edge.
	Place []*Place `json:"place,omitempty"`
	// Rooms holds the value of the rooms edge.
	Rooms []*Room `json:"rooms,omitempty"`
	// Media holds the value of the media edge.
	Media []*Media `json:"media,omitempty"`
	// Amenities holds the value of the amenities edge.
	Amenities []*Amenity `json:"amenities,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading.
func (e RoomCategoryEdges) PlaceOrErr() ([]*Place, error) {
	if e.loadedTypes[0] {
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// RoomsOrErr returns the Rooms value or an error if the edge
// was not loaded in eager-loading.
func (e RoomCategoryEdges) RoomsOrErr() ([]*Room, error) {
	if e.loadedTypes[1] {
		return e.Rooms, nil
	}
	return nil, &NotLoadedError{edge: "rooms"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e RoomCategoryEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[2] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// AmenitiesOrErr returns the Amenities value or an error if the edge
// was not loaded in eager-loading.
func (e RoomCategoryEdges) AmenitiesOrErr() ([]*Amenity, error) {
	if e.loadedTypes[3] {
		return e.Amenities, nil
	}
	return nil, &NotLoadedError{edge: "amenities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoomCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case roomcategory.FieldID, roomcategory.FieldName, roomcategory.FieldDescription, roomcategory.FieldPrice:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoomCategory fields.
func (rc *RoomCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case roomcategory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rc.ID = value.String
			}
		case roomcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rc.Name = value.String
			}
		case roomcategory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rc.Description = value.String
			}
		case roomcategory.FieldPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				rc.Price = value.String
			}
		default:
			rc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoomCategory.
// This includes values selected through modifiers, order, etc.
func (rc *RoomCategory) Value(name string) (ent.Value, error) {
	return rc.selectValues.Get(name)
}

// QueryPlace queries the "place" edge of the RoomCategory entity.
func (rc *RoomCategory) QueryPlace() *PlaceQuery {
	return NewRoomCategoryClient(rc.config).QueryPlace(rc)
}

// QueryRooms queries the "rooms" edge of the RoomCategory entity.
func (rc *RoomCategory) QueryRooms() *RoomQuery {
	return NewRoomCategoryClient(rc.config).QueryRooms(rc)
}

// QueryMedia queries the "media" edge of the RoomCategory entity.
func (rc *RoomCategory) QueryMedia() *MediaQuery {
	return NewRoomCategoryClient(rc.config).QueryMedia(rc)
}

// QueryAmenities queries the "amenities" edge of the RoomCategory entity.
func (rc *RoomCategory) QueryAmenities() *AmenityQuery {
	return NewRoomCategoryClient(rc.config).QueryAmenities(rc)
}

// Update returns a builder for updating this RoomCategory.
// Note that you need to call RoomCategory.Unwrap() before calling this method if this RoomCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RoomCategory) Update() *RoomCategoryUpdateOne {
	return NewRoomCategoryClient(rc.config).UpdateOne(rc)
}

// Unwrap unwraps the RoomCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RoomCategory) Unwrap() *RoomCategory {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoomCategory is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RoomCategory) String() string {
	var builder strings.Builder
	builder.WriteString("RoomCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("name=")
	builder.WriteString(rc.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rc.Description)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(rc.Price)
	builder.WriteByte(')')
	return builder.String()
}

// RoomCategories is a parsable slice of RoomCategory.
type RoomCategories []*RoomCategory

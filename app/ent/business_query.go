// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"placio-app/ent/accountsettings"
	"placio-app/ent/business"
	"placio-app/ent/businessfollowbusiness"
	"placio-app/ent/businessfollowevent"
	"placio-app/ent/businessfollowuser"
	"placio-app/ent/category"
	"placio-app/ent/categoryassignment"
	"placio-app/ent/event"
	"placio-app/ent/faq"
	"placio-app/ent/place"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/rating"
	"placio-app/ent/userbusiness"
	"placio-app/ent/userfollowbusiness"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessQuery is the builder for querying Business entities.
type BusinessQuery struct {
	config
	ctx                         *QueryContext
	order                       []business.OrderOption
	inters                      []Interceptor
	predicates                  []predicate.Business
	withUserBusinesses          *UserBusinessQuery
	withBusinessAccountSettings *AccountSettingsQuery
	withPosts                   *PostQuery
	withFollowedUsers           *BusinessFollowUserQuery
	withFollowerUsers           *UserFollowBusinessQuery
	withFollowedBusinesses      *BusinessFollowBusinessQuery
	withFollowerBusinesses      *BusinessFollowBusinessQuery
	withPlaces                  *PlaceQuery
	withCategories              *CategoryQuery
	withCategoryAssignments     *CategoryAssignmentQuery
	withEvents                  *EventQuery
	withBusinessFollowEvents    *BusinessFollowEventQuery
	withFaqs                    *FAQQuery
	withRatings                 *RatingQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BusinessQuery builder.
func (bq *BusinessQuery) Where(ps ...predicate.Business) *BusinessQuery {
	bq.predicates = append(bq.predicates, ps...)
	return bq
}

// Limit the number of records to be returned by this query.
func (bq *BusinessQuery) Limit(limit int) *BusinessQuery {
	bq.ctx.Limit = &limit
	return bq
}

// Offset to cmd from.
func (bq *BusinessQuery) Offset(offset int) *BusinessQuery {
	bq.ctx.Offset = &offset
	return bq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bq *BusinessQuery) Unique(unique bool) *BusinessQuery {
	bq.ctx.Unique = &unique
	return bq
}

// Order specifies how the records should be ordered.
func (bq *BusinessQuery) Order(o ...business.OrderOption) *BusinessQuery {
	bq.order = append(bq.order, o...)
	return bq
}

// QueryUserBusinesses chains the current query on the "userBusinesses" edge.
func (bq *BusinessQuery) QueryUserBusinesses() *UserBusinessQuery {
	query := (&UserBusinessClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(userbusiness.Table, userbusiness.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.UserBusinessesTable, business.UserBusinessesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBusinessAccountSettings chains the current query on the "business_account_settings" edge.
func (bq *BusinessQuery) QueryBusinessAccountSettings() *AccountSettingsQuery {
	query := (&AccountSettingsClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(accountsettings.Table, accountsettings.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, business.BusinessAccountSettingsTable, business.BusinessAccountSettingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPosts chains the current query on the "posts" edge.
func (bq *BusinessQuery) QueryPosts() *PostQuery {
	query := (&PostClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.PostsTable, business.PostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowedUsers chains the current query on the "followedUsers" edge.
func (bq *BusinessQuery) QueryFollowedUsers() *BusinessFollowUserQuery {
	query := (&BusinessFollowUserClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(businessfollowuser.Table, businessfollowuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.FollowedUsersTable, business.FollowedUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowerUsers chains the current query on the "followerUsers" edge.
func (bq *BusinessQuery) QueryFollowerUsers() *UserFollowBusinessQuery {
	query := (&UserFollowBusinessClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(userfollowbusiness.Table, userfollowbusiness.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.FollowerUsersTable, business.FollowerUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowedBusinesses chains the current query on the "followedBusinesses" edge.
func (bq *BusinessQuery) QueryFollowedBusinesses() *BusinessFollowBusinessQuery {
	query := (&BusinessFollowBusinessClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(businessfollowbusiness.Table, businessfollowbusiness.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.FollowedBusinessesTable, business.FollowedBusinessesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowerBusinesses chains the current query on the "followerBusinesses" edge.
func (bq *BusinessQuery) QueryFollowerBusinesses() *BusinessFollowBusinessQuery {
	query := (&BusinessFollowBusinessClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(businessfollowbusiness.Table, businessfollowbusiness.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.FollowerBusinessesTable, business.FollowerBusinessesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlaces chains the current query on the "places" edge.
func (bq *BusinessQuery) QueryPlaces() *PlaceQuery {
	query := (&PlaceClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.PlacesTable, business.PlacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategories chains the current query on the "categories" edge.
func (bq *BusinessQuery) QueryCategories() *CategoryQuery {
	query := (&CategoryClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.CategoriesTable, business.CategoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategoryAssignments chains the current query on the "categoryAssignments" edge.
func (bq *BusinessQuery) QueryCategoryAssignments() *CategoryAssignmentQuery {
	query := (&CategoryAssignmentClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(categoryassignment.Table, categoryassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.CategoryAssignmentsTable, business.CategoryAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (bq *BusinessQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.EventsTable, business.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBusinessFollowEvents chains the current query on the "businessFollowEvents" edge.
func (bq *BusinessQuery) QueryBusinessFollowEvents() *BusinessFollowEventQuery {
	query := (&BusinessFollowEventClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(businessfollowevent.Table, businessfollowevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.BusinessFollowEventsTable, business.BusinessFollowEventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFaqs chains the current query on the "faqs" edge.
func (bq *BusinessQuery) QueryFaqs() *FAQQuery {
	query := (&FAQClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(faq.Table, faq.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.FaqsTable, business.FaqsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRatings chains the current query on the "ratings" edge.
func (bq *BusinessQuery) QueryRatings() *RatingQuery {
	query := (&RatingClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, selector),
			sqlgraph.To(rating.Table, rating.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, business.RatingsTable, business.RatingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Business entity from the query.
// Returns a *NotFoundError when no Business was found.
func (bq *BusinessQuery) First(ctx context.Context) (*Business, error) {
	nodes, err := bq.Limit(1).All(setContextOp(ctx, bq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{business.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bq *BusinessQuery) FirstX(ctx context.Context) *Business {
	node, err := bq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Business ID from the query.
// Returns a *NotFoundError when no Business ID was found.
func (bq *BusinessQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bq.Limit(1).IDs(setContextOp(ctx, bq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{business.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bq *BusinessQuery) FirstIDX(ctx context.Context) string {
	id, err := bq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Business entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Business entity is found.
// Returns a *NotFoundError when no Business entities are found.
func (bq *BusinessQuery) Only(ctx context.Context) (*Business, error) {
	nodes, err := bq.Limit(2).All(setContextOp(ctx, bq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{business.Label}
	default:
		return nil, &NotSingularError{business.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bq *BusinessQuery) OnlyX(ctx context.Context) *Business {
	node, err := bq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Business ID in the query.
// Returns a *NotSingularError when more than one Business ID is found.
// Returns a *NotFoundError when no entities are found.
func (bq *BusinessQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bq.Limit(2).IDs(setContextOp(ctx, bq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{business.Label}
	default:
		err = &NotSingularError{business.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bq *BusinessQuery) OnlyIDX(ctx context.Context) string {
	id, err := bq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Businesses.
func (bq *BusinessQuery) All(ctx context.Context) ([]*Business, error) {
	ctx = setContextOp(ctx, bq.ctx, "All")
	if err := bq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Business, *BusinessQuery]()
	return withInterceptors[[]*Business](ctx, bq, qr, bq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bq *BusinessQuery) AllX(ctx context.Context) []*Business {
	nodes, err := bq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Business IDs.
func (bq *BusinessQuery) IDs(ctx context.Context) (ids []string, err error) {
	if bq.ctx.Unique == nil && bq.path != nil {
		bq.Unique(true)
	}
	ctx = setContextOp(ctx, bq.ctx, "IDs")
	if err = bq.Select(business.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bq *BusinessQuery) IDsX(ctx context.Context) []string {
	ids, err := bq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bq *BusinessQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bq.ctx, "Count")
	if err := bq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bq, querierCount[*BusinessQuery](), bq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bq *BusinessQuery) CountX(ctx context.Context) int {
	count, err := bq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bq *BusinessQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bq.ctx, "Exist")
	switch _, err := bq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bq *BusinessQuery) ExistX(ctx context.Context) bool {
	exist, err := bq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BusinessQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bq *BusinessQuery) Clone() *BusinessQuery {
	if bq == nil {
		return nil
	}
	return &BusinessQuery{
		config:                      bq.config,
		ctx:                         bq.ctx.Clone(),
		order:                       append([]business.OrderOption{}, bq.order...),
		inters:                      append([]Interceptor{}, bq.inters...),
		predicates:                  append([]predicate.Business{}, bq.predicates...),
		withUserBusinesses:          bq.withUserBusinesses.Clone(),
		withBusinessAccountSettings: bq.withBusinessAccountSettings.Clone(),
		withPosts:                   bq.withPosts.Clone(),
		withFollowedUsers:           bq.withFollowedUsers.Clone(),
		withFollowerUsers:           bq.withFollowerUsers.Clone(),
		withFollowedBusinesses:      bq.withFollowedBusinesses.Clone(),
		withFollowerBusinesses:      bq.withFollowerBusinesses.Clone(),
		withPlaces:                  bq.withPlaces.Clone(),
		withCategories:              bq.withCategories.Clone(),
		withCategoryAssignments:     bq.withCategoryAssignments.Clone(),
		withEvents:                  bq.withEvents.Clone(),
		withBusinessFollowEvents:    bq.withBusinessFollowEvents.Clone(),
		withFaqs:                    bq.withFaqs.Clone(),
		withRatings:                 bq.withRatings.Clone(),
		// clone intermediate query.
		sql:  bq.sql.Clone(),
		path: bq.path,
	}
}

// WithUserBusinesses tells the query-builder to eager-load the nodes that are connected to
// the "userBusinesses" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithUserBusinesses(opts ...func(*UserBusinessQuery)) *BusinessQuery {
	query := (&UserBusinessClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withUserBusinesses = query
	return bq
}

// WithBusinessAccountSettings tells the query-builder to eager-load the nodes that are connected to
// the "business_account_settings" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithBusinessAccountSettings(opts ...func(*AccountSettingsQuery)) *BusinessQuery {
	query := (&AccountSettingsClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBusinessAccountSettings = query
	return bq
}

// WithPosts tells the query-builder to eager-load the nodes that are connected to
// the "posts" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithPosts(opts ...func(*PostQuery)) *BusinessQuery {
	query := (&PostClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withPosts = query
	return bq
}

// WithFollowedUsers tells the query-builder to eager-load the nodes that are connected to
// the "followedUsers" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithFollowedUsers(opts ...func(*BusinessFollowUserQuery)) *BusinessQuery {
	query := (&BusinessFollowUserClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withFollowedUsers = query
	return bq
}

// WithFollowerUsers tells the query-builder to eager-load the nodes that are connected to
// the "followerUsers" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithFollowerUsers(opts ...func(*UserFollowBusinessQuery)) *BusinessQuery {
	query := (&UserFollowBusinessClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withFollowerUsers = query
	return bq
}

// WithFollowedBusinesses tells the query-builder to eager-load the nodes that are connected to
// the "followedBusinesses" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithFollowedBusinesses(opts ...func(*BusinessFollowBusinessQuery)) *BusinessQuery {
	query := (&BusinessFollowBusinessClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withFollowedBusinesses = query
	return bq
}

// WithFollowerBusinesses tells the query-builder to eager-load the nodes that are connected to
// the "followerBusinesses" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithFollowerBusinesses(opts ...func(*BusinessFollowBusinessQuery)) *BusinessQuery {
	query := (&BusinessFollowBusinessClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withFollowerBusinesses = query
	return bq
}

// WithPlaces tells the query-builder to eager-load the nodes that are connected to
// the "places" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithPlaces(opts ...func(*PlaceQuery)) *BusinessQuery {
	query := (&PlaceClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withPlaces = query
	return bq
}

// WithCategories tells the query-builder to eager-load the nodes that are connected to
// the "categories" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithCategories(opts ...func(*CategoryQuery)) *BusinessQuery {
	query := (&CategoryClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withCategories = query
	return bq
}

// WithCategoryAssignments tells the query-builder to eager-load the nodes that are connected to
// the "categoryAssignments" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithCategoryAssignments(opts ...func(*CategoryAssignmentQuery)) *BusinessQuery {
	query := (&CategoryAssignmentClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withCategoryAssignments = query
	return bq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithEvents(opts ...func(*EventQuery)) *BusinessQuery {
	query := (&EventClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withEvents = query
	return bq
}

// WithBusinessFollowEvents tells the query-builder to eager-load the nodes that are connected to
// the "businessFollowEvents" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithBusinessFollowEvents(opts ...func(*BusinessFollowEventQuery)) *BusinessQuery {
	query := (&BusinessFollowEventClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withBusinessFollowEvents = query
	return bq
}

// WithFaqs tells the query-builder to eager-load the nodes that are connected to
// the "faqs" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithFaqs(opts ...func(*FAQQuery)) *BusinessQuery {
	query := (&FAQClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withFaqs = query
	return bq
}

// WithRatings tells the query-builder to eager-load the nodes that are connected to
// the "ratings" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BusinessQuery) WithRatings(opts ...func(*RatingQuery)) *BusinessQuery {
	query := (&RatingClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withRatings = query
	return bq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Business.Query().
//		GroupBy(business.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bq *BusinessQuery) GroupBy(field string, fields ...string) *BusinessGroupBy {
	bq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BusinessGroupBy{build: bq}
	grbuild.flds = &bq.ctx.Fields
	grbuild.label = business.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Business.Query().
//		Select(business.FieldName).
//		Scan(ctx, &v)
func (bq *BusinessQuery) Select(fields ...string) *BusinessSelect {
	bq.ctx.Fields = append(bq.ctx.Fields, fields...)
	sbuild := &BusinessSelect{BusinessQuery: bq}
	sbuild.label = business.Label
	sbuild.flds, sbuild.scan = &bq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BusinessSelect configured with the given aggregations.
func (bq *BusinessQuery) Aggregate(fns ...AggregateFunc) *BusinessSelect {
	return bq.Select().Aggregate(fns...)
}

func (bq *BusinessQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bq); err != nil {
				return err
			}
		}
	}
	for _, f := range bq.ctx.Fields {
		if !business.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bq.path != nil {
		prev, err := bq.path(ctx)
		if err != nil {
			return err
		}
		bq.sql = prev
	}
	return nil
}

func (bq *BusinessQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Business, error) {
	var (
		nodes       = []*Business{}
		_spec       = bq.querySpec()
		loadedTypes = [14]bool{
			bq.withUserBusinesses != nil,
			bq.withBusinessAccountSettings != nil,
			bq.withPosts != nil,
			bq.withFollowedUsers != nil,
			bq.withFollowerUsers != nil,
			bq.withFollowedBusinesses != nil,
			bq.withFollowerBusinesses != nil,
			bq.withPlaces != nil,
			bq.withCategories != nil,
			bq.withCategoryAssignments != nil,
			bq.withEvents != nil,
			bq.withBusinessFollowEvents != nil,
			bq.withFaqs != nil,
			bq.withRatings != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Business).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Business{config: bq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bq.withUserBusinesses; query != nil {
		if err := bq.loadUserBusinesses(ctx, query, nodes,
			func(n *Business) { n.Edges.UserBusinesses = []*UserBusiness{} },
			func(n *Business, e *UserBusiness) { n.Edges.UserBusinesses = append(n.Edges.UserBusinesses, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBusinessAccountSettings; query != nil {
		if err := bq.loadBusinessAccountSettings(ctx, query, nodes, nil,
			func(n *Business, e *AccountSettings) { n.Edges.BusinessAccountSettings = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withPosts; query != nil {
		if err := bq.loadPosts(ctx, query, nodes,
			func(n *Business) { n.Edges.Posts = []*Post{} },
			func(n *Business, e *Post) { n.Edges.Posts = append(n.Edges.Posts, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withFollowedUsers; query != nil {
		if err := bq.loadFollowedUsers(ctx, query, nodes,
			func(n *Business) { n.Edges.FollowedUsers = []*BusinessFollowUser{} },
			func(n *Business, e *BusinessFollowUser) { n.Edges.FollowedUsers = append(n.Edges.FollowedUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withFollowerUsers; query != nil {
		if err := bq.loadFollowerUsers(ctx, query, nodes,
			func(n *Business) { n.Edges.FollowerUsers = []*UserFollowBusiness{} },
			func(n *Business, e *UserFollowBusiness) { n.Edges.FollowerUsers = append(n.Edges.FollowerUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withFollowedBusinesses; query != nil {
		if err := bq.loadFollowedBusinesses(ctx, query, nodes,
			func(n *Business) { n.Edges.FollowedBusinesses = []*BusinessFollowBusiness{} },
			func(n *Business, e *BusinessFollowBusiness) {
				n.Edges.FollowedBusinesses = append(n.Edges.FollowedBusinesses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := bq.withFollowerBusinesses; query != nil {
		if err := bq.loadFollowerBusinesses(ctx, query, nodes,
			func(n *Business) { n.Edges.FollowerBusinesses = []*BusinessFollowBusiness{} },
			func(n *Business, e *BusinessFollowBusiness) {
				n.Edges.FollowerBusinesses = append(n.Edges.FollowerBusinesses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := bq.withPlaces; query != nil {
		if err := bq.loadPlaces(ctx, query, nodes,
			func(n *Business) { n.Edges.Places = []*Place{} },
			func(n *Business, e *Place) { n.Edges.Places = append(n.Edges.Places, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withCategories; query != nil {
		if err := bq.loadCategories(ctx, query, nodes,
			func(n *Business) { n.Edges.Categories = []*Category{} },
			func(n *Business, e *Category) { n.Edges.Categories = append(n.Edges.Categories, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withCategoryAssignments; query != nil {
		if err := bq.loadCategoryAssignments(ctx, query, nodes,
			func(n *Business) { n.Edges.CategoryAssignments = []*CategoryAssignment{} },
			func(n *Business, e *CategoryAssignment) {
				n.Edges.CategoryAssignments = append(n.Edges.CategoryAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := bq.withEvents; query != nil {
		if err := bq.loadEvents(ctx, query, nodes,
			func(n *Business) { n.Edges.Events = []*Event{} },
			func(n *Business, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withBusinessFollowEvents; query != nil {
		if err := bq.loadBusinessFollowEvents(ctx, query, nodes,
			func(n *Business) { n.Edges.BusinessFollowEvents = []*BusinessFollowEvent{} },
			func(n *Business, e *BusinessFollowEvent) {
				n.Edges.BusinessFollowEvents = append(n.Edges.BusinessFollowEvents, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := bq.withFaqs; query != nil {
		if err := bq.loadFaqs(ctx, query, nodes,
			func(n *Business) { n.Edges.Faqs = []*FAQ{} },
			func(n *Business, e *FAQ) { n.Edges.Faqs = append(n.Edges.Faqs, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withRatings; query != nil {
		if err := bq.loadRatings(ctx, query, nodes,
			func(n *Business) { n.Edges.Ratings = []*Rating{} },
			func(n *Business, e *Rating) { n.Edges.Ratings = append(n.Edges.Ratings, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bq *BusinessQuery) loadUserBusinesses(ctx context.Context, query *UserBusinessQuery, nodes []*Business, init func(*Business), assign func(*Business, *UserBusiness)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserBusiness(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.UserBusinessesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_user_businesses
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_user_businesses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_user_businesses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadBusinessAccountSettings(ctx context.Context, query *AccountSettingsQuery, nodes []*Business, init func(*Business), assign func(*Business, *AccountSettings)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.AccountSettings(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.BusinessAccountSettingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_business_account_settings
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_business_account_settings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_business_account_settings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadPosts(ctx context.Context, query *PostQuery, nodes []*Business, init func(*Business), assign func(*Business, *Post)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Post(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.PostsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_posts
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_posts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_posts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadFollowedUsers(ctx context.Context, query *BusinessFollowUserQuery, nodes []*Business, init func(*Business), assign func(*Business, *BusinessFollowUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BusinessFollowUser(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.FollowedUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_followed_users
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_followed_users" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_followed_users" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadFollowerUsers(ctx context.Context, query *UserFollowBusinessQuery, nodes []*Business, init func(*Business), assign func(*Business, *UserFollowBusiness)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserFollowBusiness(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.FollowerUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_follower_users
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_follower_users" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_follower_users" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadFollowedBusinesses(ctx context.Context, query *BusinessFollowBusinessQuery, nodes []*Business, init func(*Business), assign func(*Business, *BusinessFollowBusiness)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BusinessFollowBusiness(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.FollowedBusinessesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_followed_businesses
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_followed_businesses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_followed_businesses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadFollowerBusinesses(ctx context.Context, query *BusinessFollowBusinessQuery, nodes []*Business, init func(*Business), assign func(*Business, *BusinessFollowBusiness)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BusinessFollowBusiness(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.FollowerBusinessesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_follower_businesses
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_follower_businesses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_follower_businesses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadPlaces(ctx context.Context, query *PlaceQuery, nodes []*Business, init func(*Business), assign func(*Business, *Place)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Place(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.PlacesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_places
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_places" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_places" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadCategories(ctx context.Context, query *CategoryQuery, nodes []*Business, init func(*Business), assign func(*Business, *Category)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Category(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.CategoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_categories
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_categories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_categories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadCategoryAssignments(ctx context.Context, query *CategoryAssignmentQuery, nodes []*Business, init func(*Business), assign func(*Business, *CategoryAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(categoryassignment.FieldEntityID)
	}
	query.Where(predicate.CategoryAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.CategoryAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Business, init func(*Business), assign func(*Business, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadBusinessFollowEvents(ctx context.Context, query *BusinessFollowEventQuery, nodes []*Business, init func(*Business), assign func(*Business, *BusinessFollowEvent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BusinessFollowEvent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.BusinessFollowEventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_business_follow_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_business_follow_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_business_follow_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadFaqs(ctx context.Context, query *FAQQuery, nodes []*Business, init func(*Business), assign func(*Business, *FAQ)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FAQ(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.FaqsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_faqs
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_faqs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_faqs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BusinessQuery) loadRatings(ctx context.Context, query *RatingQuery, nodes []*Business, init func(*Business), assign func(*Business, *Rating)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Business)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(business.RatingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.business_ratings
		if fk == nil {
			return fmt.Errorf(`foreign-key "business_ratings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "business_ratings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (bq *BusinessQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bq.querySpec()
	_spec.Node.Columns = bq.ctx.Fields
	if len(bq.ctx.Fields) > 0 {
		_spec.Unique = bq.ctx.Unique != nil && *bq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bq.driver, _spec)
}

func (bq *BusinessQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeString))
	_spec.From = bq.sql
	if unique := bq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bq.path != nil {
		_spec.Unique = true
	}
	if fields := bq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, business.FieldID)
		for i := range fields {
			if fields[i] != business.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bq *BusinessQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bq.driver.Dialect())
	t1 := builder.Table(business.Table)
	columns := bq.ctx.Fields
	if len(columns) == 0 {
		columns = business.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bq.sql != nil {
		selector = bq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bq.ctx.Unique != nil && *bq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bq.predicates {
		p(selector)
	}
	for _, p := range bq.order {
		p(selector)
	}
	if offset := bq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We cmd
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BusinessGroupBy is the group-by builder for Business entities.
type BusinessGroupBy struct {
	selector
	build *BusinessQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bgb *BusinessGroupBy) Aggregate(fns ...AggregateFunc) *BusinessGroupBy {
	bgb.fns = append(bgb.fns, fns...)
	return bgb
}

// Scan applies the selector query and scans the result into the given value.
func (bgb *BusinessGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bgb.build.ctx, "GroupBy")
	if err := bgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessQuery, *BusinessGroupBy](ctx, bgb.build, bgb, bgb.build.inters, v)
}

func (bgb *BusinessGroupBy) sqlScan(ctx context.Context, root *BusinessQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bgb.fns))
	for _, fn := range bgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bgb.flds)+len(bgb.fns))
		for _, f := range *bgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BusinessSelect is the builder for selecting fields of Business entities.
type BusinessSelect struct {
	*BusinessQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bs *BusinessSelect) Aggregate(fns ...AggregateFunc) *BusinessSelect {
	bs.fns = append(bs.fns, fns...)
	return bs
}

// Scan applies the selector query and scans the result into the given value.
func (bs *BusinessSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bs.ctx, "Select")
	if err := bs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessQuery, *BusinessSelect](ctx, bs.BusinessQuery, bs, bs.inters, v)
}

func (bs *BusinessSelect) sqlScan(ctx context.Context, root *BusinessQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bs.fns))
	for _, fn := range bs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

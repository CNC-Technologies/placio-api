



// Code generated by ent, DO NOT EDIT.



package ent



	
import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"
			 "placio-app/ent/ticketoption"
			 "placio-app/ent/event"

)








// TicketOptionUpdate is the builder for updating TicketOption entities.
type TicketOptionUpdate struct {
	config
	hooks []Hook
	mutation *TicketOptionMutation
}

// Where appends a list predicates to the TicketOptionUpdate builder.
func (tou *TicketOptionUpdate) Where(ps ...predicate.TicketOption) *TicketOptionUpdate {
	tou.mutation.Where(ps...)
	return tou
}


	





	
	
	


	
	
	// SetCreatedAt sets the "createdAt" field.
	func (tou *TicketOptionUpdate) SetCreatedAt(t time.Time) *TicketOptionUpdate {
		tou.mutation.SetCreatedAt(t)
		return tou
	}

	
	
	
	
	
	
		// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
		func (tou *TicketOptionUpdate) SetNillableCreatedAt(t *time.Time) *TicketOptionUpdate {
			if t != nil {
				tou.SetCreatedAt(*t)
			}
			return tou
		}
	

	

	

	

	
	
	// SetUpdatedAt sets the "updatedAt" field.
	func (tou *TicketOptionUpdate) SetUpdatedAt(t time.Time) *TicketOptionUpdate {
		tou.mutation.SetUpdatedAt(t)
		return tou
	}

	
	
	
	
	
	

	

	

	



	
	
	
	
	
		// SetEventID sets the "event" edge to the Event entity by ID.
		func (tou *TicketOptionUpdate) SetEventID(id string) *TicketOptionUpdate {
			tou.mutation.SetEventID(id)
			return tou
		}
	
	
		
		// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
		func (tou *TicketOptionUpdate) SetNillableEventID(id *string) *TicketOptionUpdate {
			if id != nil {
				tou = tou.SetEventID(*id)
			}
			return tou
		}
	
	
	
	
	// SetEvent sets the "event" edge to the Event entity.
	func (tou *TicketOptionUpdate) SetEvent(e *Event) *TicketOptionUpdate {
		return tou.SetEventID(e.ID)
	}


// Mutation returns the TicketOptionMutation object of the builder.
func (tou *TicketOptionUpdate) Mutation() *TicketOptionMutation {
	return tou.mutation
}





	





	
	
	// ClearEvent clears the "event" edge to the Event entity.
	func (tou *TicketOptionUpdate) ClearEvent() *TicketOptionUpdate {
		tou.mutation.ClearEvent()
		return tou
	}
	




// Save executes the query and returns the number of nodes affected by the update operation.
func (tou *TicketOptionUpdate) Save(ctx context.Context) (int, error) {
			tou.defaults()
	return withHooks(ctx, tou.sqlSave, tou.mutation, tou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tou *TicketOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := tou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tou *TicketOptionUpdate) Exec(ctx context.Context) error {
	_, err := tou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tou *TicketOptionUpdate) ExecX(ctx context.Context) {
	if err := tou.Exec(ctx); err != nil {
		panic(err)
	}
}


	







	// defaults sets the default values of the builder before save.
	func (tou *TicketOptionUpdate) defaults() {
				if _, ok := tou.mutation.UpdatedAt(); !ok  {
					v := ticketoption.UpdateDefaultUpdatedAt()
					tou.mutation.SetUpdatedAt(v)
				}
	}








	
	





    


func (tou *TicketOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ticketoption.Table, ticketoption.Columns,sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString))
	if ps := tou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
				if value, ok := tou.mutation.CreatedAt(); ok {
						_spec.SetField(ticketoption.FieldCreatedAt, field.TypeTime, value)
				}
				if value, ok := tou.mutation.UpdatedAt(); ok {
						_spec.SetField(ticketoption.FieldUpdatedAt, field.TypeTime, value)
				}
		if tou.mutation.EventCleared() {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.M2O,
		Inverse: true,
		Table: ticketoption.EventTable,
		Columns: []string{ ticketoption.EventColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
		},
	}
			_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
		}
		if nodes := tou.mutation.EventIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.M2O,
		Inverse: true,
		Table: ticketoption.EventTable,
		Columns: []string{ ticketoption.EventColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
		if n, err = sqlgraph.UpdateNodes(ctx, tou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ ticketoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tou.mutation.done = true
	return n, nil
}







// TicketOptionUpdateOne is the builder for updating a single TicketOption entity.
type TicketOptionUpdateOne struct {
	config
	fields []string
	hooks []Hook
	mutation *TicketOptionMutation

}


	





	
	
	


	
	
	// SetCreatedAt sets the "createdAt" field.
	func (touo *TicketOptionUpdateOne) SetCreatedAt(t time.Time) *TicketOptionUpdateOne {
		touo.mutation.SetCreatedAt(t)
		return touo
	}

	
	
	
	
	
	
		// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
		func (touo *TicketOptionUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketOptionUpdateOne {
			if t != nil {
				touo.SetCreatedAt(*t)
			}
			return touo
		}
	

	

	

	

	
	
	// SetUpdatedAt sets the "updatedAt" field.
	func (touo *TicketOptionUpdateOne) SetUpdatedAt(t time.Time) *TicketOptionUpdateOne {
		touo.mutation.SetUpdatedAt(t)
		return touo
	}

	
	
	
	
	
	

	

	

	



	
	
	
	
	
		// SetEventID sets the "event" edge to the Event entity by ID.
		func (touo *TicketOptionUpdateOne) SetEventID(id string) *TicketOptionUpdateOne {
			touo.mutation.SetEventID(id)
			return touo
		}
	
	
		
		// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
		func (touo *TicketOptionUpdateOne) SetNillableEventID(id *string) *TicketOptionUpdateOne {
			if id != nil {
				touo = touo.SetEventID(*id)
			}
			return touo
		}
	
	
	
	
	// SetEvent sets the "event" edge to the Event entity.
	func (touo *TicketOptionUpdateOne) SetEvent(e *Event) *TicketOptionUpdateOne {
		return touo.SetEventID(e.ID)
	}


// Mutation returns the TicketOptionMutation object of the builder.
func (touo *TicketOptionUpdateOne) Mutation() *TicketOptionMutation {
	return touo.mutation
}






	





	
	
	// ClearEvent clears the "event" edge to the Event entity.
	func (touo *TicketOptionUpdateOne) ClearEvent() *TicketOptionUpdateOne {
		touo.mutation.ClearEvent()
		return touo
	}
	




// Where appends a list predicates to the TicketOptionUpdate builder.
func (touo *TicketOptionUpdateOne) Where(ps ...predicate.TicketOption) *TicketOptionUpdateOne {
	touo.mutation.Where(ps...)
	return touo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (touo *TicketOptionUpdateOne) Select(field string, fields ...string) *TicketOptionUpdateOne {
	touo.fields = append([]string{field}, fields...)
	return touo
}

// Save executes the query and returns the updated TicketOption entity.
func (touo *TicketOptionUpdateOne ) Save(ctx context.Context) (*TicketOption, error) {
			touo.defaults()
	return withHooks(ctx, touo.sqlSave, touo.mutation, touo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (touo *TicketOptionUpdateOne) SaveX(ctx context.Context) *TicketOption {
	node, err := touo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (touo *TicketOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := touo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (touo *TicketOptionUpdateOne) ExecX(ctx context.Context) {
	if err := touo.Exec(ctx); err != nil {
		panic(err)
	}
}


	







	// defaults sets the default values of the builder before save.
	func (touo *TicketOptionUpdateOne) defaults() {
				if _, ok := touo.mutation.UpdatedAt(); !ok  {
					v := ticketoption.UpdateDefaultUpdatedAt()
					touo.mutation.SetUpdatedAt(v)
				}
	}








	
	





    


func (touo *TicketOptionUpdateOne) sqlSave(ctx context.Context) (_node *TicketOption, err error) {
	_spec := sqlgraph.NewUpdateSpec(ticketoption.Table, ticketoption.Columns,sqlgraph.NewFieldSpec(ticketoption.FieldID, field.TypeString))
			id, ok := touo.mutation.ID()
			if !ok {
				return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TicketOption.id" for update`)}
			}
			_spec.Node.ID.Value = id
			if fields := touo.fields; len(fields) > 0 {
				_spec.Node.Columns = make([]string, 0, len(fields))
				_spec.Node.Columns = append(_spec.Node.Columns, ticketoption.FieldID)
				for _, f := range fields {
					if !ticketoption.ValidColumn(f) {
						return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
					}
					if f != ticketoption.FieldID {
						_spec.Node.Columns = append(_spec.Node.Columns, f)
					}
				}
			}
	if ps := touo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
				if value, ok := touo.mutation.CreatedAt(); ok {
						_spec.SetField(ticketoption.FieldCreatedAt, field.TypeTime, value)
				}
				if value, ok := touo.mutation.UpdatedAt(); ok {
						_spec.SetField(ticketoption.FieldUpdatedAt, field.TypeTime, value)
				}
		if touo.mutation.EventCleared() {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.M2O,
		Inverse: true,
		Table: ticketoption.EventTable,
		Columns: []string{ ticketoption.EventColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
		},
	}
			_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
		}
		if nodes := touo.mutation.EventIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.M2O,
		Inverse: true,
		Table: ticketoption.EventTable,
		Columns: []string{ ticketoption.EventColumn },
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges.Add = append(_spec.Edges.Add, edge)
		}
		_node = &TicketOption{config: touo.config}
		_spec.Assign = _node.assignValues
		_spec.ScanValues = _node.scanValues
		if err = sqlgraph.UpdateNode(ctx, touo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ ticketoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	touo.mutation.done = true
	return _node, nil
}




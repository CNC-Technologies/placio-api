



// Code generated by ent, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)


import (
	 "placio-app/ent/userfollowplace"
)





// UserFollowPlaceDelete is the builder for deleting a UserFollowPlace entity.
type UserFollowPlaceDelete struct {
	config
	hooks      []Hook
	mutation   *UserFollowPlaceMutation
}

// Where appends a list predicates to the UserFollowPlaceDelete builder.
func (ufpd *UserFollowPlaceDelete) Where(ps ...predicate.UserFollowPlace) *UserFollowPlaceDelete {
	ufpd.mutation.Where(ps...)
	return ufpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ufpd *UserFollowPlaceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ufpd.sqlExec, ufpd.mutation, ufpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ufpd *UserFollowPlaceDelete) ExecX(ctx context.Context) int {
	n, err := ufpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}


	
	




func (ufpd *UserFollowPlaceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userfollowplace.Table, sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString))
	if ps := ufpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ufpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ufpd.mutation.done = true
	return affected, err
}







// UserFollowPlaceDeleteOne is the builder for deleting a single UserFollowPlace entity.
type UserFollowPlaceDeleteOne struct {
	ufpd *UserFollowPlaceDelete
}

// Where appends a list predicates to the UserFollowPlaceDelete builder.
func (ufpdo *UserFollowPlaceDeleteOne) Where(ps ...predicate.UserFollowPlace) *UserFollowPlaceDeleteOne {
	ufpdo.ufpd.mutation.Where(ps...)
	return ufpdo
}

// Exec executes the deletion query.
func (ufpdo *UserFollowPlaceDeleteOne) Exec(ctx context.Context) error {
	n, err := ufpdo.ufpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ userfollowplace.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ufpdo *UserFollowPlaceDeleteOne) ExecX(ctx context.Context) {
	if err := ufpdo.Exec(ctx); err != nil {
		panic(err)
	}
}


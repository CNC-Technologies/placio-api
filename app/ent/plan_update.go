// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/media"
	"placio-app/ent/place"
	"placio-app/ent/plan"
	"placio-app/ent/predicate"
	"placio-app/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks    []Hook
	mutation *PlanMutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlanUpdate) SetName(s string) *PlanUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableName(s *string) *PlanUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *PlanUpdate) ClearName() *PlanUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PlanUpdate) SetDescription(s string) *PlanUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDescription(s *string) *PlanUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PlanUpdate) ClearDescription() *PlanUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetOverview sets the "overview" field.
func (pu *PlanUpdate) SetOverview(s string) *PlanUpdate {
	pu.mutation.SetOverview(s)
	return pu
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableOverview(s *string) *PlanUpdate {
	if s != nil {
		pu.SetOverview(*s)
	}
	return pu
}

// ClearOverview clears the value of the "overview" field.
func (pu *PlanUpdate) ClearOverview() *PlanUpdate {
	pu.mutation.ClearOverview()
	return pu
}

// SetFeatures sets the "features" field.
func (pu *PlanUpdate) SetFeatures(s []string) *PlanUpdate {
	pu.mutation.SetFeatures(s)
	return pu
}

// AppendFeatures appends s to the "features" field.
func (pu *PlanUpdate) AppendFeatures(s []string) *PlanUpdate {
	pu.mutation.AppendFeatures(s)
	return pu
}

// ClearFeatures clears the value of the "features" field.
func (pu *PlanUpdate) ClearFeatures() *PlanUpdate {
	pu.mutation.ClearFeatures()
	return pu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (pu *PlanUpdate) AddUserIDs(ids ...string) *PlanUpdate {
	pu.mutation.AddUserIDs(ids...)
	return pu
}

// AddUsers adds the "users" edges to the User entity.
func (pu *PlanUpdate) AddUsers(u ...*User) *PlanUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserIDs(ids...)
}

// AddBusinessIDs adds the "businesses" edge to the Business entity by IDs.
func (pu *PlanUpdate) AddBusinessIDs(ids ...string) *PlanUpdate {
	pu.mutation.AddBusinessIDs(ids...)
	return pu
}

// AddBusinesses adds the "businesses" edges to the Business entity.
func (pu *PlanUpdate) AddBusinesses(b ...*Business) *PlanUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBusinessIDs(ids...)
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (pu *PlanUpdate) AddPlaceIDs(ids ...string) *PlanUpdate {
	pu.mutation.AddPlaceIDs(ids...)
	return pu
}

// AddPlaces adds the "places" edges to the Place entity.
func (pu *PlanUpdate) AddPlaces(p ...*Place) *PlanUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPlaceIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (pu *PlanUpdate) AddMediumIDs(ids ...string) *PlanUpdate {
	pu.mutation.AddMediumIDs(ids...)
	return pu
}

// AddMedia adds the "media" edges to the Media entity.
func (pu *PlanUpdate) AddMedia(m ...*Media) *PlanUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMediumIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (pu *PlanUpdate) ClearUsers() *PlanUpdate {
	pu.mutation.ClearUsers()
	return pu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (pu *PlanUpdate) RemoveUserIDs(ids ...string) *PlanUpdate {
	pu.mutation.RemoveUserIDs(ids...)
	return pu
}

// RemoveUsers removes "users" edges to User entities.
func (pu *PlanUpdate) RemoveUsers(u ...*User) *PlanUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserIDs(ids...)
}

// ClearBusinesses clears all "businesses" edges to the Business entity.
func (pu *PlanUpdate) ClearBusinesses() *PlanUpdate {
	pu.mutation.ClearBusinesses()
	return pu
}

// RemoveBusinessIDs removes the "businesses" edge to Business entities by IDs.
func (pu *PlanUpdate) RemoveBusinessIDs(ids ...string) *PlanUpdate {
	pu.mutation.RemoveBusinessIDs(ids...)
	return pu
}

// RemoveBusinesses removes "businesses" edges to Business entities.
func (pu *PlanUpdate) RemoveBusinesses(b ...*Business) *PlanUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBusinessIDs(ids...)
}

// ClearPlaces clears all "places" edges to the Place entity.
func (pu *PlanUpdate) ClearPlaces() *PlanUpdate {
	pu.mutation.ClearPlaces()
	return pu
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (pu *PlanUpdate) RemovePlaceIDs(ids ...string) *PlanUpdate {
	pu.mutation.RemovePlaceIDs(ids...)
	return pu
}

// RemovePlaces removes "places" edges to Place entities.
func (pu *PlanUpdate) RemovePlaces(p ...*Place) *PlanUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePlaceIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (pu *PlanUpdate) ClearMedia() *PlanUpdate {
	pu.mutation.ClearMedia()
	return pu
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (pu *PlanUpdate) RemoveMediumIDs(ids ...string) *PlanUpdate {
	pu.mutation.RemoveMediumIDs(ids...)
	return pu
}

// RemoveMedia removes "media" edges to Media entities.
func (pu *PlanUpdate) RemoveMedia(m ...*Media) *PlanUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMediumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(plan.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(plan.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Overview(); ok {
		_spec.SetField(plan.FieldOverview, field.TypeString, value)
	}
	if pu.mutation.OverviewCleared() {
		_spec.ClearField(plan.FieldOverview, field.TypeString)
	}
	if value, ok := pu.mutation.Features(); ok {
		_spec.SetField(plan.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, plan.FieldFeatures, value)
		})
	}
	if pu.mutation.FeaturesCleared() {
		_spec.ClearField(plan.FieldFeatures, field.TypeJSON)
	}
	if pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.UsersTable,
			Columns: plan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.UsersTable,
			Columns: plan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.UsersTable,
			Columns: plan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.BusinessesTable,
			Columns: plan.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBusinessesIDs(); len(nodes) > 0 && !pu.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.BusinessesTable,
			Columns: plan.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.BusinessesTable,
			Columns: plan.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlacesTable,
			Columns: plan.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !pu.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlacesTable,
			Columns: plan.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlacesTable,
			Columns: plan.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.MediaTable,
			Columns: []string{plan.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMediaIDs(); len(nodes) > 0 && !pu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.MediaTable,
			Columns: []string{plan.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.MediaTable,
			Columns: []string{plan.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanMutation
}

// SetName sets the "name" field.
func (puo *PlanUpdateOne) SetName(s string) *PlanUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableName(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *PlanUpdateOne) ClearName() *PlanUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PlanUpdateOne) SetDescription(s string) *PlanUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDescription(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PlanUpdateOne) ClearDescription() *PlanUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetOverview sets the "overview" field.
func (puo *PlanUpdateOne) SetOverview(s string) *PlanUpdateOne {
	puo.mutation.SetOverview(s)
	return puo
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableOverview(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetOverview(*s)
	}
	return puo
}

// ClearOverview clears the value of the "overview" field.
func (puo *PlanUpdateOne) ClearOverview() *PlanUpdateOne {
	puo.mutation.ClearOverview()
	return puo
}

// SetFeatures sets the "features" field.
func (puo *PlanUpdateOne) SetFeatures(s []string) *PlanUpdateOne {
	puo.mutation.SetFeatures(s)
	return puo
}

// AppendFeatures appends s to the "features" field.
func (puo *PlanUpdateOne) AppendFeatures(s []string) *PlanUpdateOne {
	puo.mutation.AppendFeatures(s)
	return puo
}

// ClearFeatures clears the value of the "features" field.
func (puo *PlanUpdateOne) ClearFeatures() *PlanUpdateOne {
	puo.mutation.ClearFeatures()
	return puo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (puo *PlanUpdateOne) AddUserIDs(ids ...string) *PlanUpdateOne {
	puo.mutation.AddUserIDs(ids...)
	return puo
}

// AddUsers adds the "users" edges to the User entity.
func (puo *PlanUpdateOne) AddUsers(u ...*User) *PlanUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserIDs(ids...)
}

// AddBusinessIDs adds the "businesses" edge to the Business entity by IDs.
func (puo *PlanUpdateOne) AddBusinessIDs(ids ...string) *PlanUpdateOne {
	puo.mutation.AddBusinessIDs(ids...)
	return puo
}

// AddBusinesses adds the "businesses" edges to the Business entity.
func (puo *PlanUpdateOne) AddBusinesses(b ...*Business) *PlanUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBusinessIDs(ids...)
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (puo *PlanUpdateOne) AddPlaceIDs(ids ...string) *PlanUpdateOne {
	puo.mutation.AddPlaceIDs(ids...)
	return puo
}

// AddPlaces adds the "places" edges to the Place entity.
func (puo *PlanUpdateOne) AddPlaces(p ...*Place) *PlanUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPlaceIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (puo *PlanUpdateOne) AddMediumIDs(ids ...string) *PlanUpdateOne {
	puo.mutation.AddMediumIDs(ids...)
	return puo
}

// AddMedia adds the "media" edges to the Media entity.
func (puo *PlanUpdateOne) AddMedia(m ...*Media) *PlanUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMediumIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (puo *PlanUpdateOne) ClearUsers() *PlanUpdateOne {
	puo.mutation.ClearUsers()
	return puo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (puo *PlanUpdateOne) RemoveUserIDs(ids ...string) *PlanUpdateOne {
	puo.mutation.RemoveUserIDs(ids...)
	return puo
}

// RemoveUsers removes "users" edges to User entities.
func (puo *PlanUpdateOne) RemoveUsers(u ...*User) *PlanUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserIDs(ids...)
}

// ClearBusinesses clears all "businesses" edges to the Business entity.
func (puo *PlanUpdateOne) ClearBusinesses() *PlanUpdateOne {
	puo.mutation.ClearBusinesses()
	return puo
}

// RemoveBusinessIDs removes the "businesses" edge to Business entities by IDs.
func (puo *PlanUpdateOne) RemoveBusinessIDs(ids ...string) *PlanUpdateOne {
	puo.mutation.RemoveBusinessIDs(ids...)
	return puo
}

// RemoveBusinesses removes "businesses" edges to Business entities.
func (puo *PlanUpdateOne) RemoveBusinesses(b ...*Business) *PlanUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBusinessIDs(ids...)
}

// ClearPlaces clears all "places" edges to the Place entity.
func (puo *PlanUpdateOne) ClearPlaces() *PlanUpdateOne {
	puo.mutation.ClearPlaces()
	return puo
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (puo *PlanUpdateOne) RemovePlaceIDs(ids ...string) *PlanUpdateOne {
	puo.mutation.RemovePlaceIDs(ids...)
	return puo
}

// RemovePlaces removes "places" edges to Place entities.
func (puo *PlanUpdateOne) RemovePlaces(p ...*Place) *PlanUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePlaceIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (puo *PlanUpdateOne) ClearMedia() *PlanUpdateOne {
	puo.mutation.ClearMedia()
	return puo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (puo *PlanUpdateOne) RemoveMediumIDs(ids ...string) *PlanUpdateOne {
	puo.mutation.RemoveMediumIDs(ids...)
	return puo
}

// RemoveMedia removes "media" edges to Media entities.
func (puo *PlanUpdateOne) RemoveMedia(m ...*Media) *PlanUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMediumIDs(ids...)
}

// Where appends a list predicates to the PlanUpdate builder.
func (puo *PlanUpdateOne) Where(ps ...predicate.Plan) *PlanUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(plan.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(plan.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Overview(); ok {
		_spec.SetField(plan.FieldOverview, field.TypeString, value)
	}
	if puo.mutation.OverviewCleared() {
		_spec.ClearField(plan.FieldOverview, field.TypeString)
	}
	if value, ok := puo.mutation.Features(); ok {
		_spec.SetField(plan.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, plan.FieldFeatures, value)
		})
	}
	if puo.mutation.FeaturesCleared() {
		_spec.ClearField(plan.FieldFeatures, field.TypeJSON)
	}
	if puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.UsersTable,
			Columns: plan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.UsersTable,
			Columns: plan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.UsersTable,
			Columns: plan.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.BusinessesTable,
			Columns: plan.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBusinessesIDs(); len(nodes) > 0 && !puo.mutation.BusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.BusinessesTable,
			Columns: plan.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.BusinessesTable,
			Columns: plan.BusinessesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlacesTable,
			Columns: plan.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !puo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlacesTable,
			Columns: plan.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PlacesTable,
			Columns: plan.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.MediaTable,
			Columns: []string{plan.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !puo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.MediaTable,
			Columns: []string{plan.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.MediaTable,
			Columns: []string{plan.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

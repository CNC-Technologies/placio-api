// Code generated by ent, DO NOT EDIT.

package userbusiness

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldContainsFold(FieldID, id))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEQ(FieldRole, v))
}

// Permissions applies equality check predicate on the "permissions" field. It's identical to PermissionsEQ.
func Permissions(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEQ(FieldPermissions, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldContainsFold(FieldRole, v))
}

// PermissionsEQ applies the EQ predicate on the "permissions" field.
func PermissionsEQ(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEQ(FieldPermissions, v))
}

// PermissionsNEQ applies the NEQ predicate on the "permissions" field.
func PermissionsNEQ(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldNEQ(FieldPermissions, v))
}

// PermissionsIn applies the In predicate on the "permissions" field.
func PermissionsIn(vs ...string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldIn(FieldPermissions, vs...))
}

// PermissionsNotIn applies the NotIn predicate on the "permissions" field.
func PermissionsNotIn(vs ...string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldNotIn(FieldPermissions, vs...))
}

// PermissionsGT applies the GT predicate on the "permissions" field.
func PermissionsGT(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldGT(FieldPermissions, v))
}

// PermissionsGTE applies the GTE predicate on the "permissions" field.
func PermissionsGTE(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldGTE(FieldPermissions, v))
}

// PermissionsLT applies the LT predicate on the "permissions" field.
func PermissionsLT(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldLT(FieldPermissions, v))
}

// PermissionsLTE applies the LTE predicate on the "permissions" field.
func PermissionsLTE(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldLTE(FieldPermissions, v))
}

// PermissionsContains applies the Contains predicate on the "permissions" field.
func PermissionsContains(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldContains(FieldPermissions, v))
}

// PermissionsHasPrefix applies the HasPrefix predicate on the "permissions" field.
func PermissionsHasPrefix(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldHasPrefix(FieldPermissions, v))
}

// PermissionsHasSuffix applies the HasSuffix predicate on the "permissions" field.
func PermissionsHasSuffix(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldHasSuffix(FieldPermissions, v))
}

// PermissionsIsNil applies the IsNil predicate on the "permissions" field.
func PermissionsIsNil() predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldIsNull(FieldPermissions))
}

// PermissionsNotNil applies the NotNil predicate on the "permissions" field.
func PermissionsNotNil() predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldNotNull(FieldPermissions))
}

// PermissionsEqualFold applies the EqualFold predicate on the "permissions" field.
func PermissionsEqualFold(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldEqualFold(FieldPermissions, v))
}

// PermissionsContainsFold applies the ContainsFold predicate on the "permissions" field.
func PermissionsContainsFold(v string) predicate.UserBusiness {
	return predicate.UserBusiness(sql.FieldContainsFold(FieldPermissions, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserBusiness {
	return predicate.UserBusiness(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserBusiness {
	return predicate.UserBusiness(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusiness applies the HasEdge predicate on the "business" edge.
func HasBusiness() predicate.UserBusiness {
	return predicate.UserBusiness(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BusinessTable, BusinessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessWith applies the HasEdge predicate on the "business" edge with a given conditions (other predicates).
func HasBusinessWith(preds ...predicate.Business) predicate.UserBusiness {
	return predicate.UserBusiness(func(s *sql.Selector) {
		step := newBusinessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserBusiness) predicate.UserBusiness {
	return predicate.UserBusiness(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserBusiness) predicate.UserBusiness {
	return predicate.UserBusiness(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserBusiness) predicate.UserBusiness {
	return predicate.UserBusiness(sql.NotPredicates(p))
}

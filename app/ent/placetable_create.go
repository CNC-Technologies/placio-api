// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/order"
	"placio-app/ent/place"
	"placio-app/ent/placetable"
	"placio-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceTableCreate is the builder for creating a PlaceTable entity.
type PlaceTableCreate struct {
	config
	mutation *PlaceTableMutation
	hooks    []Hook
}

// SetNumber sets the "number" field.
func (ptc *PlaceTableCreate) SetNumber(i int) *PlaceTableCreate {
	ptc.mutation.SetNumber(i)
	return ptc
}

// SetName sets the "name" field.
func (ptc *PlaceTableCreate) SetName(s string) *PlaceTableCreate {
	ptc.mutation.SetName(s)
	return ptc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableName(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetName(*s)
	}
	return ptc
}

// SetCapacity sets the "capacity" field.
func (ptc *PlaceTableCreate) SetCapacity(i int) *PlaceTableCreate {
	ptc.mutation.SetCapacity(i)
	return ptc
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableCapacity(i *int) *PlaceTableCreate {
	if i != nil {
		ptc.SetCapacity(*i)
	}
	return ptc
}

// SetDeletedAt sets the "deleted_at" field.
func (ptc *PlaceTableCreate) SetDeletedAt(s string) *PlaceTableCreate {
	ptc.mutation.SetDeletedAt(s)
	return ptc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableDeletedAt(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetDeletedAt(*s)
	}
	return ptc
}

// SetIsDeleted sets the "is_deleted" field.
func (ptc *PlaceTableCreate) SetIsDeleted(b bool) *PlaceTableCreate {
	ptc.mutation.SetIsDeleted(b)
	return ptc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableIsDeleted(b *bool) *PlaceTableCreate {
	if b != nil {
		ptc.SetIsDeleted(*b)
	}
	return ptc
}

// SetQrCode sets the "qr_code" field.
func (ptc *PlaceTableCreate) SetQrCode(s string) *PlaceTableCreate {
	ptc.mutation.SetQrCode(s)
	return ptc
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableQrCode(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetQrCode(*s)
	}
	return ptc
}

// SetDescription sets the "description" field.
func (ptc *PlaceTableCreate) SetDescription(s string) *PlaceTableCreate {
	ptc.mutation.SetDescription(s)
	return ptc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableDescription(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetDescription(*s)
	}
	return ptc
}

// SetStatus sets the "status" field.
func (ptc *PlaceTableCreate) SetStatus(s string) *PlaceTableCreate {
	ptc.mutation.SetStatus(s)
	return ptc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableStatus(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetStatus(*s)
	}
	return ptc
}

// SetType sets the "type" field.
func (ptc *PlaceTableCreate) SetType(pl placetable.Type) *PlaceTableCreate {
	ptc.mutation.SetType(pl)
	return ptc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableType(pl *placetable.Type) *PlaceTableCreate {
	if pl != nil {
		ptc.SetType(*pl)
	}
	return ptc
}

// SetIsActive sets the "is_active" field.
func (ptc *PlaceTableCreate) SetIsActive(b bool) *PlaceTableCreate {
	ptc.mutation.SetIsActive(b)
	return ptc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableIsActive(b *bool) *PlaceTableCreate {
	if b != nil {
		ptc.SetIsActive(*b)
	}
	return ptc
}

// SetIsReserved sets the "is_reserved" field.
func (ptc *PlaceTableCreate) SetIsReserved(b bool) *PlaceTableCreate {
	ptc.mutation.SetIsReserved(b)
	return ptc
}

// SetNillableIsReserved sets the "is_reserved" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableIsReserved(b *bool) *PlaceTableCreate {
	if b != nil {
		ptc.SetIsReserved(*b)
	}
	return ptc
}

// SetIsVip sets the "is_vip" field.
func (ptc *PlaceTableCreate) SetIsVip(b bool) *PlaceTableCreate {
	ptc.mutation.SetIsVip(b)
	return ptc
}

// SetNillableIsVip sets the "is_vip" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableIsVip(b *bool) *PlaceTableCreate {
	if b != nil {
		ptc.SetIsVip(*b)
	}
	return ptc
}

// SetIsPremium sets the "is_premium" field.
func (ptc *PlaceTableCreate) SetIsPremium(b bool) *PlaceTableCreate {
	ptc.mutation.SetIsPremium(b)
	return ptc
}

// SetNillableIsPremium sets the "is_premium" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableIsPremium(b *bool) *PlaceTableCreate {
	if b != nil {
		ptc.SetIsPremium(*b)
	}
	return ptc
}

// SetLocationDescription sets the "location_description" field.
func (ptc *PlaceTableCreate) SetLocationDescription(s string) *PlaceTableCreate {
	ptc.mutation.SetLocationDescription(s)
	return ptc
}

// SetNillableLocationDescription sets the "location_description" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableLocationDescription(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetLocationDescription(*s)
	}
	return ptc
}

// SetMinimumSpend sets the "minimum_spend" field.
func (ptc *PlaceTableCreate) SetMinimumSpend(f float64) *PlaceTableCreate {
	ptc.mutation.SetMinimumSpend(f)
	return ptc
}

// SetNillableMinimumSpend sets the "minimum_spend" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableMinimumSpend(f *float64) *PlaceTableCreate {
	if f != nil {
		ptc.SetMinimumSpend(*f)
	}
	return ptc
}

// SetReservationTime sets the "reservation_time" field.
func (ptc *PlaceTableCreate) SetReservationTime(t time.Time) *PlaceTableCreate {
	ptc.mutation.SetReservationTime(t)
	return ptc
}

// SetNillableReservationTime sets the "reservation_time" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableReservationTime(t *time.Time) *PlaceTableCreate {
	if t != nil {
		ptc.SetReservationTime(*t)
	}
	return ptc
}

// SetNextAvailableTime sets the "next_available_time" field.
func (ptc *PlaceTableCreate) SetNextAvailableTime(t time.Time) *PlaceTableCreate {
	ptc.mutation.SetNextAvailableTime(t)
	return ptc
}

// SetNillableNextAvailableTime sets the "next_available_time" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableNextAvailableTime(t *time.Time) *PlaceTableCreate {
	if t != nil {
		ptc.SetNextAvailableTime(*t)
	}
	return ptc
}

// SetSpecialRequirements sets the "special_requirements" field.
func (ptc *PlaceTableCreate) SetSpecialRequirements(s []string) *PlaceTableCreate {
	ptc.mutation.SetSpecialRequirements(s)
	return ptc
}

// SetLayout sets the "layout" field.
func (ptc *PlaceTableCreate) SetLayout(s string) *PlaceTableCreate {
	ptc.mutation.SetLayout(s)
	return ptc
}

// SetNillableLayout sets the "layout" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableLayout(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetLayout(*s)
	}
	return ptc
}

// SetServiceArea sets the "service_area" field.
func (ptc *PlaceTableCreate) SetServiceArea(s string) *PlaceTableCreate {
	ptc.mutation.SetServiceArea(s)
	return ptc
}

// SetNillableServiceArea sets the "service_area" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableServiceArea(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetServiceArea(*s)
	}
	return ptc
}

// SetAmbient sets the "ambient" field.
func (ptc *PlaceTableCreate) SetAmbient(s string) *PlaceTableCreate {
	ptc.mutation.SetAmbient(s)
	return ptc
}

// SetNillableAmbient sets the "ambient" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableAmbient(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetAmbient(*s)
	}
	return ptc
}

// SetImageURL sets the "image_url" field.
func (ptc *PlaceTableCreate) SetImageURL(s string) *PlaceTableCreate {
	ptc.mutation.SetImageURL(s)
	return ptc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableImageURL(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetImageURL(*s)
	}
	return ptc
}

// SetRating sets the "rating" field.
func (ptc *PlaceTableCreate) SetRating(f float64) *PlaceTableCreate {
	ptc.mutation.SetRating(f)
	return ptc
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableRating(f *float64) *PlaceTableCreate {
	if f != nil {
		ptc.SetRating(*f)
	}
	return ptc
}

// SetTags sets the "tags" field.
func (ptc *PlaceTableCreate) SetTags(s []string) *PlaceTableCreate {
	ptc.mutation.SetTags(s)
	return ptc
}

// SetMetadata sets the "metadata" field.
func (ptc *PlaceTableCreate) SetMetadata(m map[string]interface{}) *PlaceTableCreate {
	ptc.mutation.SetMetadata(m)
	return ptc
}

// SetID sets the "id" field.
func (ptc *PlaceTableCreate) SetID(s string) *PlaceTableCreate {
	ptc.mutation.SetID(s)
	return ptc
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ptc *PlaceTableCreate) SetPlaceID(id string) *PlaceTableCreate {
	ptc.mutation.SetPlaceID(id)
	return ptc
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillablePlaceID(id *string) *PlaceTableCreate {
	if id != nil {
		ptc = ptc.SetPlaceID(*id)
	}
	return ptc
}

// SetPlace sets the "place" edge to the Place entity.
func (ptc *PlaceTableCreate) SetPlace(p *Place) *PlaceTableCreate {
	return ptc.SetPlaceID(p.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (ptc *PlaceTableCreate) SetCreatedByID(id string) *PlaceTableCreate {
	ptc.mutation.SetCreatedByID(id)
	return ptc
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableCreatedByID(id *string) *PlaceTableCreate {
	if id != nil {
		ptc = ptc.SetCreatedByID(*id)
	}
	return ptc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (ptc *PlaceTableCreate) SetCreatedBy(u *User) *PlaceTableCreate {
	return ptc.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (ptc *PlaceTableCreate) SetUpdatedByID(id string) *PlaceTableCreate {
	ptc.mutation.SetUpdatedByID(id)
	return ptc
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableUpdatedByID(id *string) *PlaceTableCreate {
	if id != nil {
		ptc = ptc.SetUpdatedByID(*id)
	}
	return ptc
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (ptc *PlaceTableCreate) SetUpdatedBy(u *User) *PlaceTableCreate {
	return ptc.SetUpdatedByID(u.ID)
}

// SetDeletedByID sets the "deleted_by" edge to the User entity by ID.
func (ptc *PlaceTableCreate) SetDeletedByID(id string) *PlaceTableCreate {
	ptc.mutation.SetDeletedByID(id)
	return ptc
}

// SetNillableDeletedByID sets the "deleted_by" edge to the User entity by ID if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableDeletedByID(id *string) *PlaceTableCreate {
	if id != nil {
		ptc = ptc.SetDeletedByID(*id)
	}
	return ptc
}

// SetDeletedBy sets the "deleted_by" edge to the User entity.
func (ptc *PlaceTableCreate) SetDeletedBy(u *User) *PlaceTableCreate {
	return ptc.SetDeletedByID(u.ID)
}

// SetReservedByID sets the "reserved_by" edge to the User entity by ID.
func (ptc *PlaceTableCreate) SetReservedByID(id string) *PlaceTableCreate {
	ptc.mutation.SetReservedByID(id)
	return ptc
}

// SetNillableReservedByID sets the "reserved_by" edge to the User entity by ID if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableReservedByID(id *string) *PlaceTableCreate {
	if id != nil {
		ptc = ptc.SetReservedByID(*id)
	}
	return ptc
}

// SetReservedBy sets the "reserved_by" edge to the User entity.
func (ptc *PlaceTableCreate) SetReservedBy(u *User) *PlaceTableCreate {
	return ptc.SetReservedByID(u.ID)
}

// SetWaiterID sets the "waiter" edge to the User entity by ID.
func (ptc *PlaceTableCreate) SetWaiterID(id string) *PlaceTableCreate {
	ptc.mutation.SetWaiterID(id)
	return ptc
}

// SetNillableWaiterID sets the "waiter" edge to the User entity by ID if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableWaiterID(id *string) *PlaceTableCreate {
	if id != nil {
		ptc = ptc.SetWaiterID(*id)
	}
	return ptc
}

// SetWaiter sets the "waiter" edge to the User entity.
func (ptc *PlaceTableCreate) SetWaiter(u *User) *PlaceTableCreate {
	return ptc.SetWaiterID(u.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (ptc *PlaceTableCreate) AddOrderIDs(ids ...string) *PlaceTableCreate {
	ptc.mutation.AddOrderIDs(ids...)
	return ptc
}

// AddOrders adds the "orders" edges to the Order entity.
func (ptc *PlaceTableCreate) AddOrders(o ...*Order) *PlaceTableCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ptc.AddOrderIDs(ids...)
}

// Mutation returns the PlaceTableMutation object of the builder.
func (ptc *PlaceTableCreate) Mutation() *PlaceTableMutation {
	return ptc.mutation
}

// Save creates the PlaceTable in the database.
func (ptc *PlaceTableCreate) Save(ctx context.Context) (*PlaceTable, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PlaceTableCreate) SaveX(ctx context.Context) *PlaceTable {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PlaceTableCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PlaceTableCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PlaceTableCreate) defaults() {
	if _, ok := ptc.mutation.Capacity(); !ok {
		v := placetable.DefaultCapacity
		ptc.mutation.SetCapacity(v)
	}
	if _, ok := ptc.mutation.IsDeleted(); !ok {
		v := placetable.DefaultIsDeleted
		ptc.mutation.SetIsDeleted(v)
	}
	if _, ok := ptc.mutation.Status(); !ok {
		v := placetable.DefaultStatus
		ptc.mutation.SetStatus(v)
	}
	if _, ok := ptc.mutation.IsActive(); !ok {
		v := placetable.DefaultIsActive
		ptc.mutation.SetIsActive(v)
	}
	if _, ok := ptc.mutation.IsReserved(); !ok {
		v := placetable.DefaultIsReserved
		ptc.mutation.SetIsReserved(v)
	}
	if _, ok := ptc.mutation.IsVip(); !ok {
		v := placetable.DefaultIsVip
		ptc.mutation.SetIsVip(v)
	}
	if _, ok := ptc.mutation.IsPremium(); !ok {
		v := placetable.DefaultIsPremium
		ptc.mutation.SetIsPremium(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PlaceTableCreate) check() error {
	if _, ok := ptc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "PlaceTable.number"`)}
	}
	if _, ok := ptc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "capacity", err: errors.New(`ent: missing required field "PlaceTable.capacity"`)}
	}
	if _, ok := ptc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "PlaceTable.is_deleted"`)}
	}
	if _, ok := ptc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PlaceTable.status"`)}
	}
	if v, ok := ptc.mutation.GetType(); ok {
		if err := placetable.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PlaceTable.type": %w`, err)}
		}
	}
	if _, ok := ptc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "PlaceTable.is_active"`)}
	}
	if _, ok := ptc.mutation.IsReserved(); !ok {
		return &ValidationError{Name: "is_reserved", err: errors.New(`ent: missing required field "PlaceTable.is_reserved"`)}
	}
	if _, ok := ptc.mutation.IsVip(); !ok {
		return &ValidationError{Name: "is_vip", err: errors.New(`ent: missing required field "PlaceTable.is_vip"`)}
	}
	if _, ok := ptc.mutation.IsPremium(); !ok {
		return &ValidationError{Name: "is_premium", err: errors.New(`ent: missing required field "PlaceTable.is_premium"`)}
	}
	if v, ok := ptc.mutation.ID(); ok {
		if err := placetable.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PlaceTable.id": %w`, err)}
		}
	}
	return nil
}

func (ptc *PlaceTableCreate) sqlSave(ctx context.Context) (*PlaceTable, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PlaceTable.ID type: %T", _spec.ID.Value)
		}
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PlaceTableCreate) createSpec() (*PlaceTable, *sqlgraph.CreateSpec) {
	var (
		_node = &PlaceTable{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(placetable.Table, sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString))
	)
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.Number(); ok {
		_spec.SetField(placetable.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := ptc.mutation.Name(); ok {
		_spec.SetField(placetable.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ptc.mutation.Capacity(); ok {
		_spec.SetField(placetable.FieldCapacity, field.TypeInt, value)
		_node.Capacity = value
	}
	if value, ok := ptc.mutation.DeletedAt(); ok {
		_spec.SetField(placetable.FieldDeletedAt, field.TypeString, value)
		_node.DeletedAt = value
	}
	if value, ok := ptc.mutation.IsDeleted(); ok {
		_spec.SetField(placetable.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := ptc.mutation.QrCode(); ok {
		_spec.SetField(placetable.FieldQrCode, field.TypeString, value)
		_node.QrCode = value
	}
	if value, ok := ptc.mutation.Description(); ok {
		_spec.SetField(placetable.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ptc.mutation.Status(); ok {
		_spec.SetField(placetable.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ptc.mutation.GetType(); ok {
		_spec.SetField(placetable.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ptc.mutation.IsActive(); ok {
		_spec.SetField(placetable.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ptc.mutation.IsReserved(); ok {
		_spec.SetField(placetable.FieldIsReserved, field.TypeBool, value)
		_node.IsReserved = value
	}
	if value, ok := ptc.mutation.IsVip(); ok {
		_spec.SetField(placetable.FieldIsVip, field.TypeBool, value)
		_node.IsVip = value
	}
	if value, ok := ptc.mutation.IsPremium(); ok {
		_spec.SetField(placetable.FieldIsPremium, field.TypeBool, value)
		_node.IsPremium = value
	}
	if value, ok := ptc.mutation.LocationDescription(); ok {
		_spec.SetField(placetable.FieldLocationDescription, field.TypeString, value)
		_node.LocationDescription = value
	}
	if value, ok := ptc.mutation.MinimumSpend(); ok {
		_spec.SetField(placetable.FieldMinimumSpend, field.TypeFloat64, value)
		_node.MinimumSpend = value
	}
	if value, ok := ptc.mutation.ReservationTime(); ok {
		_spec.SetField(placetable.FieldReservationTime, field.TypeTime, value)
		_node.ReservationTime = &value
	}
	if value, ok := ptc.mutation.NextAvailableTime(); ok {
		_spec.SetField(placetable.FieldNextAvailableTime, field.TypeTime, value)
		_node.NextAvailableTime = &value
	}
	if value, ok := ptc.mutation.SpecialRequirements(); ok {
		_spec.SetField(placetable.FieldSpecialRequirements, field.TypeJSON, value)
		_node.SpecialRequirements = value
	}
	if value, ok := ptc.mutation.Layout(); ok {
		_spec.SetField(placetable.FieldLayout, field.TypeString, value)
		_node.Layout = value
	}
	if value, ok := ptc.mutation.ServiceArea(); ok {
		_spec.SetField(placetable.FieldServiceArea, field.TypeString, value)
		_node.ServiceArea = value
	}
	if value, ok := ptc.mutation.Ambient(); ok {
		_spec.SetField(placetable.FieldAmbient, field.TypeString, value)
		_node.Ambient = value
	}
	if value, ok := ptc.mutation.ImageURL(); ok {
		_spec.SetField(placetable.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := ptc.mutation.Rating(); ok {
		_spec.SetField(placetable.FieldRating, field.TypeFloat64, value)
		_node.Rating = &value
	}
	if value, ok := ptc.mutation.Tags(); ok {
		_spec.SetField(placetable.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ptc.mutation.Metadata(); ok {
		_spec.SetField(placetable.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := ptc.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placetable.PlaceTable,
			Columns: []string{placetable.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.place_tables = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placetable.CreatedByTable,
			Columns: []string{placetable.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tables_created = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placetable.UpdatedByTable,
			Columns: []string{placetable.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tables_updated = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.DeletedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placetable.DeletedByTable,
			Columns: []string{placetable.DeletedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tables_deleted = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.ReservedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placetable.ReservedByTable,
			Columns: []string{placetable.ReservedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tables_reserved = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.WaiterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placetable.WaiterTable,
			Columns: []string{placetable.WaiterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_tables_waited = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   placetable.OrdersTable,
			Columns: placetable.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaceTableCreateBulk is the builder for creating many PlaceTable entities in bulk.
type PlaceTableCreateBulk struct {
	config
	err      error
	builders []*PlaceTableCreate
}

// Save creates the PlaceTable entities in the database.
func (ptcb *PlaceTableCreateBulk) Save(ctx context.Context) ([]*PlaceTable, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PlaceTable, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaceTableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PlaceTableCreateBulk) SaveX(ctx context.Context) []*PlaceTable {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PlaceTableCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PlaceTableCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/order"
	"placio-app/ent/place"
	"placio-app/ent/placetable"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceTableCreate is the builder for creating a PlaceTable entity.
type PlaceTableCreate struct {
	config
	mutation *PlaceTableMutation
	hooks    []Hook
}

// SetNumber sets the "number" field.
func (ptc *PlaceTableCreate) SetNumber(i int) *PlaceTableCreate {
	ptc.mutation.SetNumber(i)
	return ptc
}

// SetDeletedAt sets the "deleted_at" field.
func (ptc *PlaceTableCreate) SetDeletedAt(s string) *PlaceTableCreate {
	ptc.mutation.SetDeletedAt(s)
	return ptc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableDeletedAt(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetDeletedAt(*s)
	}
	return ptc
}

// SetIsDeleted sets the "is_deleted" field.
func (ptc *PlaceTableCreate) SetIsDeleted(b bool) *PlaceTableCreate {
	ptc.mutation.SetIsDeleted(b)
	return ptc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableIsDeleted(b *bool) *PlaceTableCreate {
	if b != nil {
		ptc.SetIsDeleted(*b)
	}
	return ptc
}

// SetQrCode sets the "qr_code" field.
func (ptc *PlaceTableCreate) SetQrCode(s string) *PlaceTableCreate {
	ptc.mutation.SetQrCode(s)
	return ptc
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillableQrCode(s *string) *PlaceTableCreate {
	if s != nil {
		ptc.SetQrCode(*s)
	}
	return ptc
}

// SetID sets the "id" field.
func (ptc *PlaceTableCreate) SetID(s string) *PlaceTableCreate {
	ptc.mutation.SetID(s)
	return ptc
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ptc *PlaceTableCreate) SetPlaceID(id string) *PlaceTableCreate {
	ptc.mutation.SetPlaceID(id)
	return ptc
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ptc *PlaceTableCreate) SetNillablePlaceID(id *string) *PlaceTableCreate {
	if id != nil {
		ptc = ptc.SetPlaceID(*id)
	}
	return ptc
}

// SetPlace sets the "place" edge to the Place entity.
func (ptc *PlaceTableCreate) SetPlace(p *Place) *PlaceTableCreate {
	return ptc.SetPlaceID(p.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (ptc *PlaceTableCreate) AddOrderIDs(ids ...string) *PlaceTableCreate {
	ptc.mutation.AddOrderIDs(ids...)
	return ptc
}

// AddOrders adds the "orders" edges to the Order entity.
func (ptc *PlaceTableCreate) AddOrders(o ...*Order) *PlaceTableCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ptc.AddOrderIDs(ids...)
}

// Mutation returns the PlaceTableMutation object of the builder.
func (ptc *PlaceTableCreate) Mutation() *PlaceTableMutation {
	return ptc.mutation
}

// Save creates the PlaceTable in the database.
func (ptc *PlaceTableCreate) Save(ctx context.Context) (*PlaceTable, error) {
	ptc.defaults()
	return withHooks(ctx, ptc.sqlSave, ptc.mutation, ptc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptc *PlaceTableCreate) SaveX(ctx context.Context) *PlaceTable {
	v, err := ptc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptc *PlaceTableCreate) Exec(ctx context.Context) error {
	_, err := ptc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptc *PlaceTableCreate) ExecX(ctx context.Context) {
	if err := ptc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptc *PlaceTableCreate) defaults() {
	if _, ok := ptc.mutation.IsDeleted(); !ok {
		v := placetable.DefaultIsDeleted
		ptc.mutation.SetIsDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptc *PlaceTableCreate) check() error {
	if _, ok := ptc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "PlaceTable.number"`)}
	}
	if _, ok := ptc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "PlaceTable.is_deleted"`)}
	}
	if v, ok := ptc.mutation.ID(); ok {
		if err := placetable.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "PlaceTable.id": %w`, err)}
		}
	}
	return nil
}

func (ptc *PlaceTableCreate) sqlSave(ctx context.Context) (*PlaceTable, error) {
	if err := ptc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PlaceTable.ID type: %T", _spec.ID.Value)
		}
	}
	ptc.mutation.id = &_node.ID
	ptc.mutation.done = true
	return _node, nil
}

func (ptc *PlaceTableCreate) createSpec() (*PlaceTable, *sqlgraph.CreateSpec) {
	var (
		_node = &PlaceTable{config: ptc.config}
		_spec = sqlgraph.NewCreateSpec(placetable.Table, sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString))
	)
	if id, ok := ptc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptc.mutation.Number(); ok {
		_spec.SetField(placetable.FieldNumber, field.TypeInt, value)
		_node.Number = value
	}
	if value, ok := ptc.mutation.DeletedAt(); ok {
		_spec.SetField(placetable.FieldDeletedAt, field.TypeString, value)
		_node.DeletedAt = value
	}
	if value, ok := ptc.mutation.IsDeleted(); ok {
		_spec.SetField(placetable.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := ptc.mutation.QrCode(); ok {
		_spec.SetField(placetable.FieldQrCode, field.TypeString, value)
		_node.QrCode = value
	}
	if nodes := ptc.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placetable.PlaceTable,
			Columns: []string{placetable.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.place_tables = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ptc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   placetable.OrdersTable,
			Columns: placetable.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlaceTableCreateBulk is the builder for creating many PlaceTable entities in bulk.
type PlaceTableCreateBulk struct {
	config
	err      error
	builders []*PlaceTableCreate
}

// Save creates the PlaceTable entities in the database.
func (ptcb *PlaceTableCreateBulk) Save(ctx context.Context) ([]*PlaceTable, error) {
	if ptcb.err != nil {
		return nil, ptcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptcb.builders))
	nodes := make([]*PlaceTable, len(ptcb.builders))
	mutators := make([]Mutator, len(ptcb.builders))
	for i := range ptcb.builders {
		func(i int, root context.Context) {
			builder := ptcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaceTableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptcb *PlaceTableCreateBulk) SaveX(ctx context.Context) []*PlaceTable {
	v, err := ptcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptcb *PlaceTableCreateBulk) Exec(ctx context.Context) error {
	_, err := ptcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptcb *PlaceTableCreateBulk) ExecX(ctx context.Context) {
	if err := ptcb.Exec(ctx); err != nil {
		panic(err)
	}
}

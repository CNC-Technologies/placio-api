// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"placio-app/ent/inventoryattribute"
	"placio-app/ent/placeinventory"
	"placio-app/ent/placeinventoryattribute"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceInventoryAttributeQuery is the builder for querying PlaceInventoryAttribute entities.
type PlaceInventoryAttributeQuery struct {
	config
	ctx               *QueryContext
	order             []placeinventoryattribute.OrderOption
	inters            []Interceptor
	predicates        []predicate.PlaceInventoryAttribute
	withInventory     *PlaceInventoryQuery
	withAttributeType *InventoryAttributeQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaceInventoryAttributeQuery builder.
func (piaq *PlaceInventoryAttributeQuery) Where(ps ...predicate.PlaceInventoryAttribute) *PlaceInventoryAttributeQuery {
	piaq.predicates = append(piaq.predicates, ps...)
	return piaq
}

// Limit the number of records to be returned by this query.
func (piaq *PlaceInventoryAttributeQuery) Limit(limit int) *PlaceInventoryAttributeQuery {
	piaq.ctx.Limit = &limit
	return piaq
}

// Offset to start from.
func (piaq *PlaceInventoryAttributeQuery) Offset(offset int) *PlaceInventoryAttributeQuery {
	piaq.ctx.Offset = &offset
	return piaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (piaq *PlaceInventoryAttributeQuery) Unique(unique bool) *PlaceInventoryAttributeQuery {
	piaq.ctx.Unique = &unique
	return piaq
}

// Order specifies how the records should be ordered.
func (piaq *PlaceInventoryAttributeQuery) Order(o ...placeinventoryattribute.OrderOption) *PlaceInventoryAttributeQuery {
	piaq.order = append(piaq.order, o...)
	return piaq
}

// QueryInventory chains the current query on the "inventory" edge.
func (piaq *PlaceInventoryAttributeQuery) QueryInventory() *PlaceInventoryQuery {
	query := (&PlaceInventoryClient{config: piaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeinventoryattribute.Table, placeinventoryattribute.FieldID, selector),
			sqlgraph.To(placeinventory.Table, placeinventory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeinventoryattribute.InventoryTable, placeinventoryattribute.InventoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(piaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttributeType chains the current query on the "attribute_type" edge.
func (piaq *PlaceInventoryAttributeQuery) QueryAttributeType() *InventoryAttributeQuery {
	query := (&InventoryAttributeClient{config: piaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeinventoryattribute.Table, placeinventoryattribute.FieldID, selector),
			sqlgraph.To(inventoryattribute.Table, inventoryattribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeinventoryattribute.AttributeTypeTable, placeinventoryattribute.AttributeTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(piaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlaceInventoryAttribute entity from the query.
// Returns a *NotFoundError when no PlaceInventoryAttribute was found.
func (piaq *PlaceInventoryAttributeQuery) First(ctx context.Context) (*PlaceInventoryAttribute, error) {
	nodes, err := piaq.Limit(1).All(setContextOp(ctx, piaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{placeinventoryattribute.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (piaq *PlaceInventoryAttributeQuery) FirstX(ctx context.Context) *PlaceInventoryAttribute {
	node, err := piaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlaceInventoryAttribute ID from the query.
// Returns a *NotFoundError when no PlaceInventoryAttribute ID was found.
func (piaq *PlaceInventoryAttributeQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = piaq.Limit(1).IDs(setContextOp(ctx, piaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{placeinventoryattribute.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (piaq *PlaceInventoryAttributeQuery) FirstIDX(ctx context.Context) string {
	id, err := piaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlaceInventoryAttribute entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlaceInventoryAttribute entity is found.
// Returns a *NotFoundError when no PlaceInventoryAttribute entities are found.
func (piaq *PlaceInventoryAttributeQuery) Only(ctx context.Context) (*PlaceInventoryAttribute, error) {
	nodes, err := piaq.Limit(2).All(setContextOp(ctx, piaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{placeinventoryattribute.Label}
	default:
		return nil, &NotSingularError{placeinventoryattribute.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (piaq *PlaceInventoryAttributeQuery) OnlyX(ctx context.Context) *PlaceInventoryAttribute {
	node, err := piaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlaceInventoryAttribute ID in the query.
// Returns a *NotSingularError when more than one PlaceInventoryAttribute ID is found.
// Returns a *NotFoundError when no entities are found.
func (piaq *PlaceInventoryAttributeQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = piaq.Limit(2).IDs(setContextOp(ctx, piaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{placeinventoryattribute.Label}
	default:
		err = &NotSingularError{placeinventoryattribute.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (piaq *PlaceInventoryAttributeQuery) OnlyIDX(ctx context.Context) string {
	id, err := piaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlaceInventoryAttributes.
func (piaq *PlaceInventoryAttributeQuery) All(ctx context.Context) ([]*PlaceInventoryAttribute, error) {
	ctx = setContextOp(ctx, piaq.ctx, "All")
	if err := piaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlaceInventoryAttribute, *PlaceInventoryAttributeQuery]()
	return withInterceptors[[]*PlaceInventoryAttribute](ctx, piaq, qr, piaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (piaq *PlaceInventoryAttributeQuery) AllX(ctx context.Context) []*PlaceInventoryAttribute {
	nodes, err := piaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlaceInventoryAttribute IDs.
func (piaq *PlaceInventoryAttributeQuery) IDs(ctx context.Context) (ids []string, err error) {
	if piaq.ctx.Unique == nil && piaq.path != nil {
		piaq.Unique(true)
	}
	ctx = setContextOp(ctx, piaq.ctx, "IDs")
	if err = piaq.Select(placeinventoryattribute.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (piaq *PlaceInventoryAttributeQuery) IDsX(ctx context.Context) []string {
	ids, err := piaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (piaq *PlaceInventoryAttributeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, piaq.ctx, "Count")
	if err := piaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, piaq, querierCount[*PlaceInventoryAttributeQuery](), piaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (piaq *PlaceInventoryAttributeQuery) CountX(ctx context.Context) int {
	count, err := piaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (piaq *PlaceInventoryAttributeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, piaq.ctx, "Exist")
	switch _, err := piaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (piaq *PlaceInventoryAttributeQuery) ExistX(ctx context.Context) bool {
	exist, err := piaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaceInventoryAttributeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (piaq *PlaceInventoryAttributeQuery) Clone() *PlaceInventoryAttributeQuery {
	if piaq == nil {
		return nil
	}
	return &PlaceInventoryAttributeQuery{
		config:            piaq.config,
		ctx:               piaq.ctx.Clone(),
		order:             append([]placeinventoryattribute.OrderOption{}, piaq.order...),
		inters:            append([]Interceptor{}, piaq.inters...),
		predicates:        append([]predicate.PlaceInventoryAttribute{}, piaq.predicates...),
		withInventory:     piaq.withInventory.Clone(),
		withAttributeType: piaq.withAttributeType.Clone(),
		// clone intermediate query.
		sql:  piaq.sql.Clone(),
		path: piaq.path,
	}
}

// WithInventory tells the query-builder to eager-load the nodes that are connected to
// the "inventory" edge. The optional arguments are used to configure the query builder of the edge.
func (piaq *PlaceInventoryAttributeQuery) WithInventory(opts ...func(*PlaceInventoryQuery)) *PlaceInventoryAttributeQuery {
	query := (&PlaceInventoryClient{config: piaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piaq.withInventory = query
	return piaq
}

// WithAttributeType tells the query-builder to eager-load the nodes that are connected to
// the "attribute_type" edge. The optional arguments are used to configure the query builder of the edge.
func (piaq *PlaceInventoryAttributeQuery) WithAttributeType(opts ...func(*InventoryAttributeQuery)) *PlaceInventoryAttributeQuery {
	query := (&InventoryAttributeClient{config: piaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piaq.withAttributeType = query
	return piaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Value string `json:"value,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlaceInventoryAttribute.Query().
//		GroupBy(placeinventoryattribute.FieldValue).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (piaq *PlaceInventoryAttributeQuery) GroupBy(field string, fields ...string) *PlaceInventoryAttributeGroupBy {
	piaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaceInventoryAttributeGroupBy{build: piaq}
	grbuild.flds = &piaq.ctx.Fields
	grbuild.label = placeinventoryattribute.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Value string `json:"value,omitempty"`
//	}
//
//	client.PlaceInventoryAttribute.Query().
//		Select(placeinventoryattribute.FieldValue).
//		Scan(ctx, &v)
func (piaq *PlaceInventoryAttributeQuery) Select(fields ...string) *PlaceInventoryAttributeSelect {
	piaq.ctx.Fields = append(piaq.ctx.Fields, fields...)
	sbuild := &PlaceInventoryAttributeSelect{PlaceInventoryAttributeQuery: piaq}
	sbuild.label = placeinventoryattribute.Label
	sbuild.flds, sbuild.scan = &piaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaceInventoryAttributeSelect configured with the given aggregations.
func (piaq *PlaceInventoryAttributeQuery) Aggregate(fns ...AggregateFunc) *PlaceInventoryAttributeSelect {
	return piaq.Select().Aggregate(fns...)
}

func (piaq *PlaceInventoryAttributeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range piaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, piaq); err != nil {
				return err
			}
		}
	}
	for _, f := range piaq.ctx.Fields {
		if !placeinventoryattribute.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if piaq.path != nil {
		prev, err := piaq.path(ctx)
		if err != nil {
			return err
		}
		piaq.sql = prev
	}
	return nil
}

func (piaq *PlaceInventoryAttributeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlaceInventoryAttribute, error) {
	var (
		nodes       = []*PlaceInventoryAttribute{}
		withFKs     = piaq.withFKs
		_spec       = piaq.querySpec()
		loadedTypes = [2]bool{
			piaq.withInventory != nil,
			piaq.withAttributeType != nil,
		}
	)
	if piaq.withInventory != nil || piaq.withAttributeType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, placeinventoryattribute.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlaceInventoryAttribute).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlaceInventoryAttribute{config: piaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, piaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := piaq.withInventory; query != nil {
		if err := piaq.loadInventory(ctx, query, nodes, nil,
			func(n *PlaceInventoryAttribute, e *PlaceInventory) { n.Edges.Inventory = e }); err != nil {
			return nil, err
		}
	}
	if query := piaq.withAttributeType; query != nil {
		if err := piaq.loadAttributeType(ctx, query, nodes, nil,
			func(n *PlaceInventoryAttribute, e *InventoryAttribute) { n.Edges.AttributeType = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (piaq *PlaceInventoryAttributeQuery) loadInventory(ctx context.Context, query *PlaceInventoryQuery, nodes []*PlaceInventoryAttribute, init func(*PlaceInventoryAttribute), assign func(*PlaceInventoryAttribute, *PlaceInventory)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PlaceInventoryAttribute)
	for i := range nodes {
		if nodes[i].place_inventory_attributes == nil {
			continue
		}
		fk := *nodes[i].place_inventory_attributes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(placeinventory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "place_inventory_attributes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (piaq *PlaceInventoryAttributeQuery) loadAttributeType(ctx context.Context, query *InventoryAttributeQuery, nodes []*PlaceInventoryAttribute, init func(*PlaceInventoryAttribute), assign func(*PlaceInventoryAttribute, *InventoryAttribute)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PlaceInventoryAttribute)
	for i := range nodes {
		if nodes[i].inventory_attribute_place_inventory_attributes == nil {
			continue
		}
		fk := *nodes[i].inventory_attribute_place_inventory_attributes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(inventoryattribute.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "inventory_attribute_place_inventory_attributes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (piaq *PlaceInventoryAttributeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := piaq.querySpec()
	_spec.Node.Columns = piaq.ctx.Fields
	if len(piaq.ctx.Fields) > 0 {
		_spec.Unique = piaq.ctx.Unique != nil && *piaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, piaq.driver, _spec)
}

func (piaq *PlaceInventoryAttributeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(placeinventoryattribute.Table, placeinventoryattribute.Columns, sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString))
	_spec.From = piaq.sql
	if unique := piaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if piaq.path != nil {
		_spec.Unique = true
	}
	if fields := piaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, placeinventoryattribute.FieldID)
		for i := range fields {
			if fields[i] != placeinventoryattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := piaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := piaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := piaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := piaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (piaq *PlaceInventoryAttributeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(piaq.driver.Dialect())
	t1 := builder.Table(placeinventoryattribute.Table)
	columns := piaq.ctx.Fields
	if len(columns) == 0 {
		columns = placeinventoryattribute.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if piaq.sql != nil {
		selector = piaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if piaq.ctx.Unique != nil && *piaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range piaq.predicates {
		p(selector)
	}
	for _, p := range piaq.order {
		p(selector)
	}
	if offset := piaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := piaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlaceInventoryAttributeGroupBy is the group-by builder for PlaceInventoryAttribute entities.
type PlaceInventoryAttributeGroupBy struct {
	selector
	build *PlaceInventoryAttributeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (piagb *PlaceInventoryAttributeGroupBy) Aggregate(fns ...AggregateFunc) *PlaceInventoryAttributeGroupBy {
	piagb.fns = append(piagb.fns, fns...)
	return piagb
}

// Scan applies the selector query and scans the result into the given value.
func (piagb *PlaceInventoryAttributeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, piagb.build.ctx, "GroupBy")
	if err := piagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceInventoryAttributeQuery, *PlaceInventoryAttributeGroupBy](ctx, piagb.build, piagb, piagb.build.inters, v)
}

func (piagb *PlaceInventoryAttributeGroupBy) sqlScan(ctx context.Context, root *PlaceInventoryAttributeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(piagb.fns))
	for _, fn := range piagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*piagb.flds)+len(piagb.fns))
		for _, f := range *piagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*piagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := piagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaceInventoryAttributeSelect is the builder for selecting fields of PlaceInventoryAttribute entities.
type PlaceInventoryAttributeSelect struct {
	*PlaceInventoryAttributeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pias *PlaceInventoryAttributeSelect) Aggregate(fns ...AggregateFunc) *PlaceInventoryAttributeSelect {
	pias.fns = append(pias.fns, fns...)
	return pias
}

// Scan applies the selector query and scans the result into the given value.
func (pias *PlaceInventoryAttributeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pias.ctx, "Select")
	if err := pias.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceInventoryAttributeQuery, *PlaceInventoryAttributeSelect](ctx, pias.PlaceInventoryAttributeQuery, pias, pias.inters, v)
}

func (pias *PlaceInventoryAttributeSelect) sqlScan(ctx context.Context, root *PlaceInventoryAttributeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pias.fns))
	for _, fn := range pias.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pias.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pias.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

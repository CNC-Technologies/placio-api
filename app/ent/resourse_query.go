



// Code generated by ent, DO NOT EDIT.



package ent



	
import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"
			 "placio-app/ent/resourse"

)






// ResourseQuery is the builder for querying Resourse entities.
type ResourseQuery struct {
	config
	ctx			*QueryContext
	order		[]resourse.OrderOption
	inters		[]Interceptor
	predicates 	[]predicate.Resourse
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ResourseQuery builder.
func (rq *ResourseQuery) Where(ps ...predicate.Resourse) *ResourseQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit the number of records to be returned by this query.
func (rq *ResourseQuery) Limit(limit int) *ResourseQuery {
	rq.ctx.Limit = &limit
	return rq
}

// Offset to start from.
func (rq *ResourseQuery) Offset(offset int) *ResourseQuery {
	rq.ctx.Offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *ResourseQuery) Unique(unique bool) *ResourseQuery {
	rq.ctx.Unique = &unique
	return rq
}

// Order specifies how the records should be ordered.
func (rq *ResourseQuery) Order(o ...resourse.OrderOption) *ResourseQuery {
	rq.order = append(rq.order, o...)
	return rq
}




// First returns the first Resourse entity from the query. 
// Returns a *NotFoundError when no Resourse was found.
func (rq *ResourseQuery) First(ctx context.Context) (*Resourse, error) {
	nodes, err := rq.Limit(1).All(setContextOp(ctx, rq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ resourse.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *ResourseQuery) FirstX(ctx context.Context) *Resourse {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}


	// FirstID returns the first Resourse ID from the query.
	// Returns a *NotFoundError when no Resourse ID was found.
	func (rq *ResourseQuery) FirstID(ctx context.Context) (id string, err error) {
		var ids []string
		if ids, err = rq.Limit(1).IDs(setContextOp(ctx, rq.ctx, "FirstID")); err != nil {
			return
		}
		if len(ids) == 0 {
			err = &NotFoundError{ resourse.Label}
			return
		}
		return ids[0], nil
	}

	// FirstIDX is like FirstID, but panics if an error occurs.
	func (rq *ResourseQuery) FirstIDX(ctx context.Context) string {
		id, err := rq.FirstID(ctx)
		if err != nil && !IsNotFound(err) {
			panic(err)
		}
		return id
	}


// Only returns a single Resourse entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Resourse entity is found.
// Returns a *NotFoundError when no Resourse entities are found.
func (rq *ResourseQuery) Only(ctx context.Context) (*Resourse, error) {
	nodes, err := rq.Limit(2).All(setContextOp(ctx, rq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ resourse.Label}
	default:
		return nil, &NotSingularError{ resourse.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *ResourseQuery) OnlyX(ctx context.Context) *Resourse {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}


	// OnlyID is like Only, but returns the only Resourse ID in the query.
	// Returns a *NotSingularError when more than one Resourse ID is found.
	// Returns a *NotFoundError when no entities are found.
	func (rq *ResourseQuery) OnlyID(ctx context.Context) (id string, err error) {
		var ids []string
		if ids, err = rq.Limit(2).IDs(setContextOp(ctx, rq.ctx, "OnlyID")); err != nil {
			return
		}
		switch len(ids) {
		case 1:
			id = ids[0]
		case 0:
			err = &NotFoundError{ resourse.Label}
		default:
			err = &NotSingularError{ resourse.Label}
		}
		return
	}

	// OnlyIDX is like OnlyID, but panics if an error occurs.
	func (rq *ResourseQuery) OnlyIDX(ctx context.Context) string {
		id, err := rq.OnlyID(ctx)
		if err != nil {
			panic(err)
		}
		return id
	}


// All executes the query and returns a list of Resourses.
func (rq *ResourseQuery) All(ctx context.Context) ([]*Resourse, error) {
	ctx = setContextOp(ctx, rq.ctx, "All")
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Resourse, *ResourseQuery]()
	return withInterceptors[[]*Resourse](ctx, rq, qr, rq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rq *ResourseQuery) AllX(ctx context.Context) []*Resourse {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}


	// IDs executes the query and returns a list of Resourse IDs.
	func (rq *ResourseQuery) IDs(ctx context.Context) (ids []string, err error) {
		if rq.ctx.Unique == nil && rq.path != nil {
			rq.Unique(true)
		}
		ctx = setContextOp(ctx, rq.ctx, "IDs")
		if err = rq.Select(resourse.FieldID).Scan(ctx, &ids); err != nil {
			return nil, err
		}
		return ids, nil
	}

	// IDsX is like IDs, but panics if an error occurs.
	func (rq *ResourseQuery) IDsX(ctx context.Context) []string {
		ids, err := rq.IDs(ctx)
		if err != nil {
			panic(err)
		}
		return ids
	}


// Count returns the count of the given query.
func (rq *ResourseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rq.ctx, "Count")
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rq, querierCount[*ResourseQuery](), rq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rq *ResourseQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *ResourseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rq.ctx, "Exist")
	switch _, err := rq.FirstID(ctx);{
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *ResourseQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ResourseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *ResourseQuery) Clone() *ResourseQuery {
	if rq == nil {
		return nil
	}
	return &ResourseQuery{
		config: 	rq.config,
		ctx: 		rq.ctx.Clone(),
		order: 		append([]resourse.OrderOption{}, rq.order...),
		inters: 	append([]Interceptor{}, rq.inters...),
		predicates: append([]predicate.Resourse{}, rq.predicates...),
		// clone intermediate query.
		sql: rq.sql.Clone(),
		path: rq.path,
	}
}



// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (rq *ResourseQuery) GroupBy(field string, fields ...string) *ResourseGroupBy {
	rq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ResourseGroupBy{build: rq}
	grbuild.flds = &rq.ctx.Fields
	grbuild.label = resourse.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}



// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (rq *ResourseQuery) Select(fields ...string) *ResourseSelect {
	rq.ctx.Fields = append(rq.ctx.Fields, fields...)
	sbuild := &ResourseSelect{ ResourseQuery: rq }
	sbuild.label = resourse.Label
	sbuild.flds, sbuild.scan = &rq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ResourseSelect configured with the given aggregations.
func (rq *ResourseQuery) Aggregate(fns ...AggregateFunc) *ResourseSelect {
	return rq.Select().Aggregate(fns...)
}

func (rq *ResourseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rq); err != nil {
				return err
			}
		}
	}
	for _, f := range rq.ctx.Fields {
		if !resourse.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	return nil
}


	
	




func (rq *ResourseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Resourse, error) {
	var (
		nodes = []*Resourse{}
		_spec = rq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Resourse).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Resourse{config: rq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}



func (rq *ResourseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
		_spec.Node.Columns = rq.ctx.Fields
		if len(rq.ctx.Fields) > 0 {
			_spec.Unique = rq.ctx.Unique != nil && *rq.ctx.Unique
		}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *ResourseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(resourse.Table, resourse.Columns, sqlgraph.NewFieldSpec(resourse.FieldID, field.TypeString))
	_spec.From = rq.sql
	if unique := rq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rq.path != nil {
		_spec.Unique = true
	}
	if fields := rq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
			_spec.Node.Columns = append(_spec.Node.Columns, resourse.FieldID)
			for i := range fields {
				if fields[i] != resourse.FieldID {
					_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
				}
			}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}





func (rq *ResourseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(resourse.Table)
	columns := rq.ctx.Fields
	if len(columns) == 0 {
		columns = resourse.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.ctx.Unique != nil && *rq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

    

    











// ResourseGroupBy is the group-by builder for Resourse entities.
type ResourseGroupBy struct {
	selector
	build *ResourseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *ResourseGroupBy) Aggregate(fns ...AggregateFunc) *ResourseGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the selector query and scans the result into the given value.
func (rgb *ResourseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rgb.build.ctx, "GroupBy")
	if err := rgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResourseQuery, *ResourseGroupBy](ctx, rgb.build, rgb, rgb.build.inters, v)
}


	
	



func (rgb *ResourseGroupBy) sqlScan(ctx context.Context, root *ResourseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rgb.flds) + len(rgb.fns))
		for _, f := range *rgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}







// ResourseSelect is the builder for selecting fields of Resourse entities.
type ResourseSelect struct {
	*ResourseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rs *ResourseSelect) Aggregate(fns ...AggregateFunc) *ResourseSelect {
	rs.fns = append(rs.fns, fns...)
	return rs
}

// Scan applies the selector query and scans the result into the given value.
func (rs *ResourseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rs.ctx, "Select")
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ResourseQuery, *ResourseSelect](ctx, rs.ResourseQuery, rs, rs.inters, v)
}


	
	



func (rs *ResourseSelect) sqlScan(ctx context.Context, root *ResourseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rs.fns))
	for _, fn := range rs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}



    







// Code generated by ent, DO NOT EDIT.

package placio_api

import (
	"context"
	"errors"
	"fmt"
	"placio_api/business"
	"placio_api/event"
	"placio_api/faq"
	"placio_api/place"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FAQCreate is the builder for creating a FAQ entity.
type FAQCreate struct {
	config
	mutation *FAQMutation
	hooks    []Hook
}

// SetQuestion sets the "question" field.
func (fc *FAQCreate) SetQuestion(s string) *FAQCreate {
	fc.mutation.SetQuestion(s)
	return fc
}

// SetAnswer sets the "answer" field.
func (fc *FAQCreate) SetAnswer(s string) *FAQCreate {
	fc.mutation.SetAnswer(s)
	return fc
}

// SetID sets the "id" field.
func (fc *FAQCreate) SetID(s string) *FAQCreate {
	fc.mutation.SetID(s)
	return fc
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (fc *FAQCreate) SetBusinessID(id string) *FAQCreate {
	fc.mutation.SetBusinessID(id)
	return fc
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (fc *FAQCreate) SetNillableBusinessID(id *string) *FAQCreate {
	if id != nil {
		fc = fc.SetBusinessID(*id)
	}
	return fc
}

// SetBusiness sets the "business" edge to the Business entity.
func (fc *FAQCreate) SetBusiness(b *Business) *FAQCreate {
	return fc.SetBusinessID(b.ID)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (fc *FAQCreate) AddPlaceIDs(ids ...string) *FAQCreate {
	fc.mutation.AddPlaceIDs(ids...)
	return fc
}

// AddPlace adds the "place" edges to the Place entity.
func (fc *FAQCreate) AddPlace(p ...*Place) *FAQCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fc.AddPlaceIDs(ids...)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (fc *FAQCreate) AddEventIDs(ids ...string) *FAQCreate {
	fc.mutation.AddEventIDs(ids...)
	return fc
}

// AddEvent adds the "event" edges to the Event entity.
func (fc *FAQCreate) AddEvent(e ...*Event) *FAQCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fc.AddEventIDs(ids...)
}

// Mutation returns the FAQMutation object of the builder.
func (fc *FAQCreate) Mutation() *FAQMutation {
	return fc.mutation
}

// Save creates the FAQ in the database.
func (fc *FAQCreate) Save(ctx context.Context) (*FAQ, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FAQCreate) SaveX(ctx context.Context) *FAQ {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FAQCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FAQCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FAQCreate) check() error {
	if _, ok := fc.mutation.Question(); !ok {
		return &ValidationError{Name: "question", err: errors.New(`placio_api: missing required field "FAQ.question"`)}
	}
	if _, ok := fc.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`placio_api: missing required field "FAQ.answer"`)}
	}
	return nil
}

func (fc *FAQCreate) sqlSave(ctx context.Context) (*FAQ, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FAQ.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FAQCreate) createSpec() (*FAQ, *sqlgraph.CreateSpec) {
	var (
		_node = &FAQ{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(faq.Table, sqlgraph.NewFieldSpec(faq.FieldID, field.TypeString))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Question(); ok {
		_spec.SetField(faq.FieldQuestion, field.TypeString, value)
		_node.Question = value
	}
	if value, ok := fc.mutation.Answer(); ok {
		_spec.SetField(faq.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	if nodes := fc.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   faq.BusinessTable,
			Columns: []string{faq.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_faqs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   faq.PlaceTable,
			Columns: faq.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   faq.EventTable,
			Columns: faq.EventPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FAQCreateBulk is the builder for creating many FAQ entities in bulk.
type FAQCreateBulk struct {
	config
	err      error
	builders []*FAQCreate
}

// Save creates the FAQ entities in the database.
func (fcb *FAQCreateBulk) Save(ctx context.Context) ([]*FAQ, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*FAQ, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FAQMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FAQCreateBulk) SaveX(ctx context.Context) []*FAQ {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FAQCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FAQCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

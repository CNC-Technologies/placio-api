// Code generated by ent, DO NOT EDIT.

package post

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPrivacy holds the string denoting the privacy field in the database.
	FieldPrivacy = "privacy"
	// FieldLikedByMe holds the string denoting the likedbyme field in the database.
	FieldLikedByMe = "liked_by_me"
	// FieldLikeCount holds the string denoting the likecount field in the database.
	FieldLikeCount = "like_count"
	// FieldCommentCount holds the string denoting the commentcount field in the database.
	FieldCommentCount = "comment_count"
	// FieldShareCount holds the string denoting the sharecount field in the database.
	FieldShareCount = "share_count"
	// FieldViewCount holds the string denoting the viewcount field in the database.
	FieldViewCount = "view_count"
	// FieldIsSponsored holds the string denoting the issponsored field in the database.
	FieldIsSponsored = "is_sponsored"
	// FieldIsPromoted holds the string denoting the ispromoted field in the database.
	FieldIsPromoted = "is_promoted"
	// FieldIsBoosted holds the string denoting the isboosted field in the database.
	FieldIsBoosted = "is_boosted"
	// FieldIsPinned holds the string denoting the ispinned field in the database.
	FieldIsPinned = "is_pinned"
	// FieldIsHidden holds the string denoting the ishidden field in the database.
	FieldIsHidden = "is_hidden"
	// FieldRepostCount holds the string denoting the repostcount field in the database.
	FieldRepostCount = "repost_count"
	// FieldIsRepost holds the string denoting the isrepost field in the database.
	FieldIsRepost = "is_repost"
	// FieldRelevanceScore holds the string denoting the relevancescore field in the database.
	FieldRelevanceScore = "relevance_score"
	// FieldSearchText holds the string denoting the searchtext field in the database.
	FieldSearchText = "search_text"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeBusinessAccount holds the string denoting the business_account edge name in mutations.
	EdgeBusinessAccount = "business_account"
	// EdgeMedias holds the string denoting the medias edge name in mutations.
	EdgeMedias = "medias"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeLikes holds the string denoting the likes edge name in mutations.
	EdgeLikes = "likes"
	// EdgeCategories holds the string denoting the categories edge name in mutations.
	EdgeCategories = "categories"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgeReposts holds the string denoting the reposts edge name in mutations.
	EdgeReposts = "reposts"
	// EdgeOriginalPost holds the string denoting the original_post edge name in mutations.
	EdgeOriginalPost = "original_post"
	// Table holds the table name of the post in the database.
	Table = "posts"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "posts"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_posts"
	// BusinessAccountTable is the table that holds the business_account relation/edge.
	BusinessAccountTable = "posts"
	// BusinessAccountInverseTable is the table name for the Business entity.
	// It exists in this package in order to avoid circular dependency with the "business" package.
	BusinessAccountInverseTable = "businesses"
	// BusinessAccountColumn is the table column denoting the business_account relation/edge.
	BusinessAccountColumn = "business_posts"
	// MediasTable is the table that holds the medias relation/edge.
	MediasTable = "media"
	// MediasInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediasInverseTable = "media"
	// MediasColumn is the table column denoting the medias relation/edge.
	MediasColumn = "post_medias"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "post_comments"
	// LikesTable is the table that holds the likes relation/edge.
	LikesTable = "likes"
	// LikesInverseTable is the table name for the Like entity.
	// It exists in this package in order to avoid circular dependency with the "like" package.
	LikesInverseTable = "likes"
	// LikesColumn is the table column denoting the likes relation/edge.
	LikesColumn = "post_likes"
	// CategoriesTable is the table that holds the categories relation/edge.
	CategoriesTable = "categories"
	// CategoriesInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoriesInverseTable = "categories"
	// CategoriesColumn is the table column denoting the categories relation/edge.
	CategoriesColumn = "post_categories"
	// NotificationsTable is the table that holds the notifications relation/edge. The primary key declared below.
	NotificationsTable = "post_notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// RepostsTable is the table that holds the reposts relation/edge.
	RepostsTable = "posts"
	// RepostsColumn is the table column denoting the reposts relation/edge.
	RepostsColumn = "post_original_post"
	// OriginalPostTable is the table that holds the original_post relation/edge.
	OriginalPostTable = "posts"
	// OriginalPostColumn is the table column denoting the original_post relation/edge.
	OriginalPostColumn = "post_original_post"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldContent,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPrivacy,
	FieldLikedByMe,
	FieldLikeCount,
	FieldCommentCount,
	FieldShareCount,
	FieldViewCount,
	FieldIsSponsored,
	FieldIsPromoted,
	FieldIsBoosted,
	FieldIsPinned,
	FieldIsHidden,
	FieldRepostCount,
	FieldIsRepost,
	FieldRelevanceScore,
	FieldSearchText,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "posts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"business_posts",
	"post_original_post",
	"user_posts",
}

var (
	// NotificationsPrimaryKey and NotificationsColumn2 are the table columns denoting the
	// primary key for the notifications relation (M2M).
	NotificationsPrimaryKey = []string{"post_id", "notification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ContentValidator is a validator for the "Content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultLikedByMe holds the default value on creation for the "LikedByMe" field.
	DefaultLikedByMe bool
	// DefaultLikeCount holds the default value on creation for the "LikeCount" field.
	DefaultLikeCount int
	// DefaultCommentCount holds the default value on creation for the "CommentCount" field.
	DefaultCommentCount int
	// DefaultShareCount holds the default value on creation for the "ShareCount" field.
	DefaultShareCount int
	// DefaultViewCount holds the default value on creation for the "ViewCount" field.
	DefaultViewCount int
	// DefaultIsSponsored holds the default value on creation for the "IsSponsored" field.
	DefaultIsSponsored bool
	// DefaultIsPromoted holds the default value on creation for the "IsPromoted" field.
	DefaultIsPromoted bool
	// DefaultIsBoosted holds the default value on creation for the "IsBoosted" field.
	DefaultIsBoosted bool
	// DefaultIsPinned holds the default value on creation for the "IsPinned" field.
	DefaultIsPinned bool
	// DefaultIsHidden holds the default value on creation for the "IsHidden" field.
	DefaultIsHidden bool
	// DefaultRepostCount holds the default value on creation for the "RepostCount" field.
	DefaultRepostCount int
	// DefaultIsRepost holds the default value on creation for the "IsRepost" field.
	DefaultIsRepost bool
	// DefaultRelevanceScore holds the default value on creation for the "RelevanceScore" field.
	DefaultRelevanceScore int
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Privacy defines the type for the "Privacy" enum field.
type Privacy string

// PrivacyPublic is the default value of the Privacy enum.
const DefaultPrivacy = PrivacyPublic

// Privacy values.
const (
	PrivacyPublic        Privacy = "Public"
	PrivacyFollowersOnly Privacy = "FollowersOnly"
	PrivacyOnlyMe        Privacy = "OnlyMe"
)

func (_privacy Privacy) String() string {
	return string(_privacy)
}

// PrivacyValidator is a validator for the "Privacy" field enum values. It is called by the builders before save.
func PrivacyValidator(_privacy Privacy) error {
	switch _privacy {
	case PrivacyPublic, PrivacyFollowersOnly, PrivacyOnlyMe:
		return nil
	default:
		return fmt.Errorf("post: invalid enum value for Privacy field: %q", _privacy)
	}
}

// OrderOption defines the ordering options for the Post queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByContent orders the results by the Content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPrivacy orders the results by the Privacy field.
func ByPrivacy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrivacy, opts...).ToFunc()
}

// ByLikedByMe orders the results by the LikedByMe field.
func ByLikedByMe(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikedByMe, opts...).ToFunc()
}

// ByLikeCount orders the results by the LikeCount field.
func ByLikeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikeCount, opts...).ToFunc()
}

// ByCommentCount orders the results by the CommentCount field.
func ByCommentCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentCount, opts...).ToFunc()
}

// ByShareCount orders the results by the ShareCount field.
func ByShareCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShareCount, opts...).ToFunc()
}

// ByViewCount orders the results by the ViewCount field.
func ByViewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewCount, opts...).ToFunc()
}

// ByIsSponsored orders the results by the IsSponsored field.
func ByIsSponsored(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSponsored, opts...).ToFunc()
}

// ByIsPromoted orders the results by the IsPromoted field.
func ByIsPromoted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPromoted, opts...).ToFunc()
}

// ByIsBoosted orders the results by the IsBoosted field.
func ByIsBoosted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsBoosted, opts...).ToFunc()
}

// ByIsPinned orders the results by the IsPinned field.
func ByIsPinned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPinned, opts...).ToFunc()
}

// ByIsHidden orders the results by the IsHidden field.
func ByIsHidden(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsHidden, opts...).ToFunc()
}

// ByRepostCount orders the results by the RepostCount field.
func ByRepostCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepostCount, opts...).ToFunc()
}

// ByIsRepost orders the results by the IsRepost field.
func ByIsRepost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRepost, opts...).ToFunc()
}

// ByRelevanceScore orders the results by the RelevanceScore field.
func ByRelevanceScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelevanceScore, opts...).ToFunc()
}

// BySearchText orders the results by the SearchText field.
func BySearchText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSearchText, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByBusinessAccountField orders the results by business_account field.
func ByBusinessAccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessAccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByMediasCount orders the results by medias count.
func ByMediasCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediasStep(), opts...)
	}
}

// ByMedias orders the results by medias terms.
func ByMedias(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediasStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommentsCount orders the results by comments count.
func ByCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommentsStep(), opts...)
	}
}

// ByComments orders the results by comments terms.
func ByComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLikesCount orders the results by likes count.
func ByLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikesStep(), opts...)
	}
}

// ByLikes orders the results by likes terms.
func ByLikes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCategoriesCount orders the results by categories count.
func ByCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCategoriesStep(), opts...)
	}
}

// ByCategories orders the results by categories terms.
func ByCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRepostsField orders the results by reposts field.
func ByRepostsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepostsStep(), sql.OrderByField(field, opts...))
	}
}

// ByOriginalPostCount orders the results by original_post count.
func ByOriginalPostCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOriginalPostStep(), opts...)
	}
}

// ByOriginalPost orders the results by original_post terms.
func ByOriginalPost(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOriginalPostStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newBusinessAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BusinessAccountTable, BusinessAccountColumn),
	)
}
func newMediasStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediasInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MediasTable, MediasColumn),
	)
}
func newCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
	)
}
func newLikesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
	)
}
func newCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CategoriesTable, CategoriesColumn),
	)
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NotificationsTable, NotificationsPrimaryKey...),
	)
}
func newRepostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RepostsTable, RepostsColumn),
	)
}
func newOriginalPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OriginalPostTable, OriginalPostColumn),
	)
}

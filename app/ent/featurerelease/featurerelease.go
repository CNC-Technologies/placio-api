// Code generated by ent, DO NOT EDIT.

package featurerelease

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the featurerelease type in the database.
	Label = "feature_release"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFeatureID holds the string denoting the feature_id field in the database.
	FieldFeatureID = "feature_id"
	// FieldFeatureName holds the string denoting the feature_name field in the database.
	FieldFeatureName = "feature_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldReleaseDate holds the string denoting the release_date field in the database.
	FieldReleaseDate = "release_date"
	// FieldEligibilityRules holds the string denoting the eligibility_rules field in the database.
	FieldEligibilityRules = "eligibility_rules"
	// FieldDocumentationLink holds the string denoting the documentation_link field in the database.
	FieldDocumentationLink = "documentation_link"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// Table holds the table name of the featurerelease in the database.
	Table = "feature_releases"
)

// Columns holds all SQL columns for featurerelease fields.
var Columns = []string{
	FieldID,
	FieldFeatureID,
	FieldFeatureName,
	FieldDescription,
	FieldState,
	FieldReleaseDate,
	FieldEligibilityRules,
	FieldDocumentationLink,
	FieldMetadata,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FeatureIDValidator is a validator for the "feature_id" field. It is called by the builders before save.
	FeatureIDValidator func(string) error
	// DefaultReleaseDate holds the default value on creation for the "release_date" field.
	DefaultReleaseDate func() time.Time
)

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateTesting    State = "testing"
	StateStaging    State = "staging"
	StateLive       State = "live"
	StateDeprecated State = "deprecated"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateTesting, StateStaging, StateLive, StateDeprecated:
		return nil
	default:
		return fmt.Errorf("featurerelease: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the FeatureRelease queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFeatureID orders the results by the feature_id field.
func ByFeatureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureID, opts...).ToFunc()
}

// ByFeatureName orders the results by the feature_name field.
func ByFeatureName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFeatureName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByReleaseDate orders the results by the release_date field.
func ByReleaseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseDate, opts...).ToFunc()
}

// ByDocumentationLink orders the results by the documentation_link field.
func ByDocumentationLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocumentationLink, opts...).ToFunc()
}

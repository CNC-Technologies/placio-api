
// Code generated by ent, DO NOT EDIT.



	

package featurerelease




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)



	// ID filters vertices based on their ID field.
	func ID(id string) predicate.FeatureRelease {
		return predicate.FeatureRelease(sql.FieldEQ(FieldID, id))
	}

	
		
		
		// IDEQ applies the EQ predicate on the ID field.
		func IDEQ(id string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldEQ(FieldID,id))
		}
	
		
		
		// IDNEQ applies the NEQ predicate on the ID field.
		func IDNEQ(id string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldNEQ(FieldID,id))
		}
	
		
		
		// IDIn applies the In predicate on the ID field.
		func IDIn(ids ...string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldIn(FieldID,ids...))
		}
	
		
		
		// IDNotIn applies the NotIn predicate on the ID field.
		func IDNotIn(ids ...string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldNotIn(FieldID,ids...))
		}
	
		
		
		// IDGT applies the GT predicate on the ID field.
		func IDGT(id string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldGT(FieldID,id))
		}
	
		
		
		// IDGTE applies the GTE predicate on the ID field.
		func IDGTE(id string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldGTE(FieldID,id))
		}
	
		
		
		// IDLT applies the LT predicate on the ID field.
		func IDLT(id string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldLT(FieldID,id))
		}
	
		
		
		// IDLTE applies the LTE predicate on the ID field.
		func IDLTE(id string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldLTE(FieldID,id))
		}
	
		
		
		// IDEqualFold applies the EqualFold predicate on the ID field.
		func IDEqualFold(id string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldEqualFold(FieldID,id))
		}
	
		
		
		// IDContainsFold applies the ContainsFold predicate on the ID field.
		func IDContainsFold(id string) predicate.FeatureRelease {
			return predicate.FeatureRelease(sql.FieldContainsFold(FieldID,id))
		}
	



	
	
	
	
	
		
		// FeatureName applies equality check predicate on the "feature_name" field. It's identical to FeatureNameEQ.
		func FeatureName(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldFeatureName, v))
		}

	
	
	
	
	
		
		// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
		func Description(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldDescription, v))
		}

	
	
	
	
	

	
	
	
	
	
		
		// ReleaseDate applies equality check predicate on the "release_date" field. It's identical to ReleaseDateEQ.
		func ReleaseDate(v time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldReleaseDate, v))
		}

	
	
	
	
	

	
	
	
	
	
		
		// DocumentationLink applies equality check predicate on the "documentation_link" field. It's identical to DocumentationLinkEQ.
		func DocumentationLink(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldDocumentationLink, v))
		}

	
	
	
	
	



	
		
		
		
		
		// FeatureNameEQ applies the EQ predicate on the "feature_name" field.
		func FeatureNameEQ(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameNEQ applies the NEQ predicate on the "feature_name" field.
		func FeatureNameNEQ(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNEQ(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameIn applies the In predicate on the "feature_name" field.
		func FeatureNameIn(vs ...string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIn(FieldFeatureName, vs...))
		}
	
		
		
		
		
		// FeatureNameNotIn applies the NotIn predicate on the "feature_name" field.
		func FeatureNameNotIn(vs ...string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotIn(FieldFeatureName, vs...))
		}
	
		
		
		
		
		// FeatureNameGT applies the GT predicate on the "feature_name" field.
		func FeatureNameGT(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldGT(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameGTE applies the GTE predicate on the "feature_name" field.
		func FeatureNameGTE(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldGTE(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameLT applies the LT predicate on the "feature_name" field.
		func FeatureNameLT(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldLT(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameLTE applies the LTE predicate on the "feature_name" field.
		func FeatureNameLTE(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldLTE(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameContains applies the Contains predicate on the "feature_name" field.
		func FeatureNameContains(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldContains(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameHasPrefix applies the HasPrefix predicate on the "feature_name" field.
		func FeatureNameHasPrefix(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldHasPrefix(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameHasSuffix applies the HasSuffix predicate on the "feature_name" field.
		func FeatureNameHasSuffix(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldHasSuffix(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameEqualFold applies the EqualFold predicate on the "feature_name" field.
		func FeatureNameEqualFold(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEqualFold(FieldFeatureName, v))
		}
	
		
		
		
		
		// FeatureNameContainsFold applies the ContainsFold predicate on the "feature_name" field.
		func FeatureNameContainsFold(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldContainsFold(FieldFeatureName, v))
		}
	

	
		
		
		
		
		// DescriptionEQ applies the EQ predicate on the "description" field.
		func DescriptionEQ(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionNEQ applies the NEQ predicate on the "description" field.
		func DescriptionNEQ(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNEQ(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionIn applies the In predicate on the "description" field.
		func DescriptionIn(vs ...string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIn(FieldDescription, vs...))
		}
	
		
		
		
		
		// DescriptionNotIn applies the NotIn predicate on the "description" field.
		func DescriptionNotIn(vs ...string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotIn(FieldDescription, vs...))
		}
	
		
		
		
		
		// DescriptionGT applies the GT predicate on the "description" field.
		func DescriptionGT(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldGT(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionGTE applies the GTE predicate on the "description" field.
		func DescriptionGTE(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldGTE(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionLT applies the LT predicate on the "description" field.
		func DescriptionLT(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldLT(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionLTE applies the LTE predicate on the "description" field.
		func DescriptionLTE(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldLTE(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionContains applies the Contains predicate on the "description" field.
		func DescriptionContains(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldContains(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
		func DescriptionHasPrefix(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldHasPrefix(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
		func DescriptionHasSuffix(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldHasSuffix(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionIsNil applies the IsNil predicate on the "description" field.
		func DescriptionIsNil() predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIsNull(FieldDescription))
		}
	
		
		
		
		
		// DescriptionNotNil applies the NotNil predicate on the "description" field.
		func DescriptionNotNil() predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotNull(FieldDescription))
		}
	
		
		
		
		
		// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
		func DescriptionEqualFold(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEqualFold(FieldDescription, v))
		}
	
		
		
		
		
		// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
		func DescriptionContainsFold(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldContainsFold(FieldDescription, v))
		}
	

	
		
		
		
		
		// StateEQ applies the EQ predicate on the "state" field.
		func StateEQ(v State) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldState, v))
		}
	
		
		
		
		
		// StateNEQ applies the NEQ predicate on the "state" field.
		func StateNEQ(v State) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNEQ(FieldState, v))
		}
	
		
		
		
		
		// StateIn applies the In predicate on the "state" field.
		func StateIn(vs ...State) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIn(FieldState, vs...))
		}
	
		
		
		
		
		// StateNotIn applies the NotIn predicate on the "state" field.
		func StateNotIn(vs ...State) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotIn(FieldState, vs...))
		}
	

	
		
		
		
		
		// ReleaseDateEQ applies the EQ predicate on the "release_date" field.
		func ReleaseDateEQ(v time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldReleaseDate, v))
		}
	
		
		
		
		
		// ReleaseDateNEQ applies the NEQ predicate on the "release_date" field.
		func ReleaseDateNEQ(v time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNEQ(FieldReleaseDate, v))
		}
	
		
		
		
		
		// ReleaseDateIn applies the In predicate on the "release_date" field.
		func ReleaseDateIn(vs ...time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIn(FieldReleaseDate, vs...))
		}
	
		
		
		
		
		// ReleaseDateNotIn applies the NotIn predicate on the "release_date" field.
		func ReleaseDateNotIn(vs ...time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotIn(FieldReleaseDate, vs...))
		}
	
		
		
		
		
		// ReleaseDateGT applies the GT predicate on the "release_date" field.
		func ReleaseDateGT(v time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldGT(FieldReleaseDate, v))
		}
	
		
		
		
		
		// ReleaseDateGTE applies the GTE predicate on the "release_date" field.
		func ReleaseDateGTE(v time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldGTE(FieldReleaseDate, v))
		}
	
		
		
		
		
		// ReleaseDateLT applies the LT predicate on the "release_date" field.
		func ReleaseDateLT(v time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldLT(FieldReleaseDate, v))
		}
	
		
		
		
		
		// ReleaseDateLTE applies the LTE predicate on the "release_date" field.
		func ReleaseDateLTE(v time.Time) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldLTE(FieldReleaseDate, v))
		}
	

	
		
		
		
		
		// EligibilityRulesIsNil applies the IsNil predicate on the "eligibility_rules" field.
		func EligibilityRulesIsNil() predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIsNull(FieldEligibilityRules))
		}
	
		
		
		
		
		// EligibilityRulesNotNil applies the NotNil predicate on the "eligibility_rules" field.
		func EligibilityRulesNotNil() predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotNull(FieldEligibilityRules))
		}
	

	
		
		
		
		
		// DocumentationLinkEQ applies the EQ predicate on the "documentation_link" field.
		func DocumentationLinkEQ(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEQ(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkNEQ applies the NEQ predicate on the "documentation_link" field.
		func DocumentationLinkNEQ(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNEQ(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkIn applies the In predicate on the "documentation_link" field.
		func DocumentationLinkIn(vs ...string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIn(FieldDocumentationLink, vs...))
		}
	
		
		
		
		
		// DocumentationLinkNotIn applies the NotIn predicate on the "documentation_link" field.
		func DocumentationLinkNotIn(vs ...string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotIn(FieldDocumentationLink, vs...))
		}
	
		
		
		
		
		// DocumentationLinkGT applies the GT predicate on the "documentation_link" field.
		func DocumentationLinkGT(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldGT(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkGTE applies the GTE predicate on the "documentation_link" field.
		func DocumentationLinkGTE(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldGTE(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkLT applies the LT predicate on the "documentation_link" field.
		func DocumentationLinkLT(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldLT(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkLTE applies the LTE predicate on the "documentation_link" field.
		func DocumentationLinkLTE(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldLTE(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkContains applies the Contains predicate on the "documentation_link" field.
		func DocumentationLinkContains(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldContains(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkHasPrefix applies the HasPrefix predicate on the "documentation_link" field.
		func DocumentationLinkHasPrefix(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldHasPrefix(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkHasSuffix applies the HasSuffix predicate on the "documentation_link" field.
		func DocumentationLinkHasSuffix(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldHasSuffix(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkIsNil applies the IsNil predicate on the "documentation_link" field.
		func DocumentationLinkIsNil() predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIsNull(FieldDocumentationLink))
		}
	
		
		
		
		
		// DocumentationLinkNotNil applies the NotNil predicate on the "documentation_link" field.
		func DocumentationLinkNotNil() predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotNull(FieldDocumentationLink))
		}
	
		
		
		
		
		// DocumentationLinkEqualFold applies the EqualFold predicate on the "documentation_link" field.
		func DocumentationLinkEqualFold(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldEqualFold(FieldDocumentationLink, v))
		}
	
		
		
		
		
		// DocumentationLinkContainsFold applies the ContainsFold predicate on the "documentation_link" field.
		func DocumentationLinkContainsFold(v string) predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldContainsFold(FieldDocumentationLink, v))
		}
	

	
		
		
		
		
		// MetadataIsNil applies the IsNil predicate on the "metadata" field.
		func MetadataIsNil() predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldIsNull(FieldMetadata))
		}
	
		
		
		
		
		// MetadataNotNil applies the NotNil predicate on the "metadata" field.
		func MetadataNotNil() predicate.FeatureRelease {
				return predicate.FeatureRelease(sql.FieldNotNull(FieldMetadata))
		}
	




// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FeatureRelease) predicate.FeatureRelease {
	return predicate.FeatureRelease(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FeatureRelease) predicate.FeatureRelease {
	return predicate.FeatureRelease(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FeatureRelease) predicate.FeatureRelease {
	return predicate.FeatureRelease(sql.NotPredicates(p))
}






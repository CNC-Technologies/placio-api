// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"placio-app/ent/event"
	"placio-app/ent/eventorganizer"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventOrganizerQuery is the builder for querying EventOrganizer entities.
type EventOrganizerQuery struct {
	config
	ctx        *QueryContext
	order      []eventorganizer.OrderOption
	inters     []Interceptor
	predicates []predicate.EventOrganizer
	withEvent  *EventQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventOrganizerQuery builder.
func (eoq *EventOrganizerQuery) Where(ps ...predicate.EventOrganizer) *EventOrganizerQuery {
	eoq.predicates = append(eoq.predicates, ps...)
	return eoq
}

// Limit the number of records to be returned by this query.
func (eoq *EventOrganizerQuery) Limit(limit int) *EventOrganizerQuery {
	eoq.ctx.Limit = &limit
	return eoq
}

// Offset to start from.
func (eoq *EventOrganizerQuery) Offset(offset int) *EventOrganizerQuery {
	eoq.ctx.Offset = &offset
	return eoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eoq *EventOrganizerQuery) Unique(unique bool) *EventOrganizerQuery {
	eoq.ctx.Unique = &unique
	return eoq
}

// Order specifies how the records should be ordered.
func (eoq *EventOrganizerQuery) Order(o ...eventorganizer.OrderOption) *EventOrganizerQuery {
	eoq.order = append(eoq.order, o...)
	return eoq
}

// QueryEvent chains the current query on the "event" edge.
func (eoq *EventOrganizerQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: eoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(eventorganizer.Table, eventorganizer.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, eventorganizer.EventTable, eventorganizer.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(eoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EventOrganizer entity from the query.
// Returns a *NotFoundError when no EventOrganizer was found.
func (eoq *EventOrganizerQuery) First(ctx context.Context) (*EventOrganizer, error) {
	nodes, err := eoq.Limit(1).All(setContextOp(ctx, eoq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{eventorganizer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eoq *EventOrganizerQuery) FirstX(ctx context.Context) *EventOrganizer {
	node, err := eoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EventOrganizer ID from the query.
// Returns a *NotFoundError when no EventOrganizer ID was found.
func (eoq *EventOrganizerQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eoq.Limit(1).IDs(setContextOp(ctx, eoq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{eventorganizer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eoq *EventOrganizerQuery) FirstIDX(ctx context.Context) string {
	id, err := eoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EventOrganizer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EventOrganizer entity is found.
// Returns a *NotFoundError when no EventOrganizer entities are found.
func (eoq *EventOrganizerQuery) Only(ctx context.Context) (*EventOrganizer, error) {
	nodes, err := eoq.Limit(2).All(setContextOp(ctx, eoq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{eventorganizer.Label}
	default:
		return nil, &NotSingularError{eventorganizer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eoq *EventOrganizerQuery) OnlyX(ctx context.Context) *EventOrganizer {
	node, err := eoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EventOrganizer ID in the query.
// Returns a *NotSingularError when more than one EventOrganizer ID is found.
// Returns a *NotFoundError when no entities are found.
func (eoq *EventOrganizerQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eoq.Limit(2).IDs(setContextOp(ctx, eoq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{eventorganizer.Label}
	default:
		err = &NotSingularError{eventorganizer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eoq *EventOrganizerQuery) OnlyIDX(ctx context.Context) string {
	id, err := eoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EventOrganizers.
func (eoq *EventOrganizerQuery) All(ctx context.Context) ([]*EventOrganizer, error) {
	ctx = setContextOp(ctx, eoq.ctx, "All")
	if err := eoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EventOrganizer, *EventOrganizerQuery]()
	return withInterceptors[[]*EventOrganizer](ctx, eoq, qr, eoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eoq *EventOrganizerQuery) AllX(ctx context.Context) []*EventOrganizer {
	nodes, err := eoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EventOrganizer IDs.
func (eoq *EventOrganizerQuery) IDs(ctx context.Context) (ids []string, err error) {
	if eoq.ctx.Unique == nil && eoq.path != nil {
		eoq.Unique(true)
	}
	ctx = setContextOp(ctx, eoq.ctx, "IDs")
	if err = eoq.Select(eventorganizer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eoq *EventOrganizerQuery) IDsX(ctx context.Context) []string {
	ids, err := eoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eoq *EventOrganizerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eoq.ctx, "Count")
	if err := eoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eoq, querierCount[*EventOrganizerQuery](), eoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eoq *EventOrganizerQuery) CountX(ctx context.Context) int {
	count, err := eoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eoq *EventOrganizerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eoq.ctx, "Exist")
	switch _, err := eoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eoq *EventOrganizerQuery) ExistX(ctx context.Context) bool {
	exist, err := eoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventOrganizerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eoq *EventOrganizerQuery) Clone() *EventOrganizerQuery {
	if eoq == nil {
		return nil
	}
	return &EventOrganizerQuery{
		config:     eoq.config,
		ctx:        eoq.ctx.Clone(),
		order:      append([]eventorganizer.OrderOption{}, eoq.order...),
		inters:     append([]Interceptor{}, eoq.inters...),
		predicates: append([]predicate.EventOrganizer{}, eoq.predicates...),
		withEvent:  eoq.withEvent.Clone(),
		// clone intermediate query.
		sql:  eoq.sql.Clone(),
		path: eoq.path,
	}
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (eoq *EventOrganizerQuery) WithEvent(opts ...func(*EventQuery)) *EventOrganizerQuery {
	query := (&EventClient{config: eoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eoq.withEvent = query
	return eoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		OrganizerID string `json:"organizerID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EventOrganizer.Query().
//		GroupBy(eventorganizer.FieldOrganizerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eoq *EventOrganizerQuery) GroupBy(field string, fields ...string) *EventOrganizerGroupBy {
	eoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EventOrganizerGroupBy{build: eoq}
	grbuild.flds = &eoq.ctx.Fields
	grbuild.label = eventorganizer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		OrganizerID string `json:"organizerID,omitempty"`
//	}
//
//	client.EventOrganizer.Query().
//		Select(eventorganizer.FieldOrganizerID).
//		Scan(ctx, &v)
func (eoq *EventOrganizerQuery) Select(fields ...string) *EventOrganizerSelect {
	eoq.ctx.Fields = append(eoq.ctx.Fields, fields...)
	sbuild := &EventOrganizerSelect{EventOrganizerQuery: eoq}
	sbuild.label = eventorganizer.Label
	sbuild.flds, sbuild.scan = &eoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventOrganizerSelect configured with the given aggregations.
func (eoq *EventOrganizerQuery) Aggregate(fns ...AggregateFunc) *EventOrganizerSelect {
	return eoq.Select().Aggregate(fns...)
}

func (eoq *EventOrganizerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eoq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eoq); err != nil {
				return err
			}
		}
	}
	for _, f := range eoq.ctx.Fields {
		if !eventorganizer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eoq.path != nil {
		prev, err := eoq.path(ctx)
		if err != nil {
			return err
		}
		eoq.sql = prev
	}
	return nil
}

func (eoq *EventOrganizerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EventOrganizer, error) {
	var (
		nodes       = []*EventOrganizer{}
		withFKs     = eoq.withFKs
		_spec       = eoq.querySpec()
		loadedTypes = [1]bool{
			eoq.withEvent != nil,
		}
	)
	if eoq.withEvent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, eventorganizer.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EventOrganizer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EventOrganizer{config: eoq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eoq.withEvent; query != nil {
		if err := eoq.loadEvent(ctx, query, nodes, nil,
			func(n *EventOrganizer, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eoq *EventOrganizerQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*EventOrganizer, init func(*EventOrganizer), assign func(*EventOrganizer, *Event)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*EventOrganizer)
	for i := range nodes {
		if nodes[i].event_event_organizers == nil {
			continue
		}
		fk := *nodes[i].event_event_organizers
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(event.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "event_event_organizers" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eoq *EventOrganizerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eoq.querySpec()
	_spec.Node.Columns = eoq.ctx.Fields
	if len(eoq.ctx.Fields) > 0 {
		_spec.Unique = eoq.ctx.Unique != nil && *eoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eoq.driver, _spec)
}

func (eoq *EventOrganizerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(eventorganizer.Table, eventorganizer.Columns, sqlgraph.NewFieldSpec(eventorganizer.FieldID, field.TypeString))
	_spec.From = eoq.sql
	if unique := eoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eoq.path != nil {
		_spec.Unique = true
	}
	if fields := eoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, eventorganizer.FieldID)
		for i := range fields {
			if fields[i] != eventorganizer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eoq *EventOrganizerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eoq.driver.Dialect())
	t1 := builder.Table(eventorganizer.Table)
	columns := eoq.ctx.Fields
	if len(columns) == 0 {
		columns = eventorganizer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eoq.sql != nil {
		selector = eoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eoq.ctx.Unique != nil && *eoq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eoq.predicates {
		p(selector)
	}
	for _, p := range eoq.order {
		p(selector)
	}
	if offset := eoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EventOrganizerGroupBy is the group-by builder for EventOrganizer entities.
type EventOrganizerGroupBy struct {
	selector
	build *EventOrganizerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eogb *EventOrganizerGroupBy) Aggregate(fns ...AggregateFunc) *EventOrganizerGroupBy {
	eogb.fns = append(eogb.fns, fns...)
	return eogb
}

// Scan applies the selector query and scans the result into the given value.
func (eogb *EventOrganizerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eogb.build.ctx, "GroupBy")
	if err := eogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventOrganizerQuery, *EventOrganizerGroupBy](ctx, eogb.build, eogb, eogb.build.inters, v)
}

func (eogb *EventOrganizerGroupBy) sqlScan(ctx context.Context, root *EventOrganizerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(eogb.fns))
	for _, fn := range eogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*eogb.flds)+len(eogb.fns))
		for _, f := range *eogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*eogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventOrganizerSelect is the builder for selecting fields of EventOrganizer entities.
type EventOrganizerSelect struct {
	*EventOrganizerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eos *EventOrganizerSelect) Aggregate(fns ...AggregateFunc) *EventOrganizerSelect {
	eos.fns = append(eos.fns, fns...)
	return eos
}

// Scan applies the selector query and scans the result into the given value.
func (eos *EventOrganizerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eos.ctx, "Select")
	if err := eos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventOrganizerQuery, *EventOrganizerSelect](ctx, eos.EventOrganizerQuery, eos, eos.inters, v)
}

func (eos *EventOrganizerSelect) sqlScan(ctx context.Context, root *EventOrganizerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eos.fns))
	for _, fn := range eos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

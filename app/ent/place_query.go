// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"placio-app/ent/amenity"
	"placio-app/ent/booking"
	"placio-app/ent/business"
	"placio-app/ent/category"
	"placio-app/ent/categoryassignment"
	"placio-app/ent/event"
	"placio-app/ent/faq"
	"placio-app/ent/media"
	"placio-app/ent/menu"
	"placio-app/ent/notification"
	"placio-app/ent/place"
	"placio-app/ent/placeinventory"
	"placio-app/ent/placetable"
	"placio-app/ent/plan"
	"placio-app/ent/predicate"
	"placio-app/ent/rating"
	"placio-app/ent/reservation"
	"placio-app/ent/review"
	"placio-app/ent/room"
	"placio-app/ent/roomcategory"
	"placio-app/ent/staff"
	"placio-app/ent/trainer"
	"placio-app/ent/user"
	"placio-app/ent/userfollowplace"
	"placio-app/ent/userlikeplace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceQuery is the builder for querying Place entities.
type PlaceQuery struct {
	config
	ctx                     *QueryContext
	order                   []place.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Place
	withBusiness            *BusinessQuery
	withUsers               *UserQuery
	withReviews             *ReviewQuery
	withEvents              *EventQuery
	withAmenities           *AmenityQuery
	withMenus               *MenuQuery
	withMedias              *MediaQuery
	withRooms               *RoomQuery
	withReservations        *ReservationQuery
	withBookings            *BookingQuery
	withCategories          *CategoryQuery
	withCategoryAssignments *CategoryAssignmentQuery
	withFaqs                *FAQQuery
	withLikedByUsers        *UserLikePlaceQuery
	withFollowerUsers       *UserFollowPlaceQuery
	withRatings             *RatingQuery
	withInventories         *PlaceInventoryQuery
	withNotifications       *NotificationQuery
	withTables              *PlaceTableQuery
	withStaffs              *StaffQuery
	withRoomCategories      *RoomCategoryQuery
	withPlans               *PlanQuery
	withTrainers            *TrainerQuery
	withMembers             *UserQuery
	withRegularUsers        *UserQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaceQuery builder.
func (pq *PlaceQuery) Where(ps ...predicate.Place) *PlaceQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *PlaceQuery) Limit(limit int) *PlaceQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *PlaceQuery) Offset(offset int) *PlaceQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *PlaceQuery) Unique(unique bool) *PlaceQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *PlaceQuery) Order(o ...place.OrderOption) *PlaceQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryBusiness chains the current query on the "business" edge.
func (pq *PlaceQuery) QueryBusiness() *BusinessQuery {
	query := (&BusinessClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, place.BusinessTable, place.BusinessColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (pq *PlaceQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.UsersTable, place.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviews chains the current query on the "reviews" edge.
func (pq *PlaceQuery) QueryReviews() *ReviewQuery {
	query := (&ReviewClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.ReviewsTable, place.ReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (pq *PlaceQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.EventsTable, place.EventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAmenities chains the current query on the "amenities" edge.
func (pq *PlaceQuery) QueryAmenities() *AmenityQuery {
	query := (&AmenityClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(amenity.Table, amenity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.AmenitiesTable, place.AmenitiesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMenus chains the current query on the "menus" edge.
func (pq *PlaceQuery) QueryMenus() *MenuQuery {
	query := (&MenuClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(menu.Table, menu.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.MenusTable, place.MenusPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedias chains the current query on the "medias" edge.
func (pq *PlaceQuery) QueryMedias() *MediaQuery {
	query := (&MediaClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.MediasTable, place.MediasPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRooms chains the current query on the "rooms" edge.
func (pq *PlaceQuery) QueryRooms() *RoomQuery {
	query := (&RoomClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.RoomsTable, place.RoomsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReservations chains the current query on the "reservations" edge.
func (pq *PlaceQuery) QueryReservations() *ReservationQuery {
	query := (&ReservationClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(reservation.Table, reservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.ReservationsTable, place.ReservationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBookings chains the current query on the "bookings" edge.
func (pq *PlaceQuery) QueryBookings() *BookingQuery {
	query := (&BookingClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(booking.Table, booking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.BookingsTable, place.BookingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategories chains the current query on the "categories" edge.
func (pq *PlaceQuery) QueryCategories() *CategoryQuery {
	query := (&CategoryClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.CategoriesTable, place.CategoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategoryAssignments chains the current query on the "categoryAssignments" edge.
func (pq *PlaceQuery) QueryCategoryAssignments() *CategoryAssignmentQuery {
	query := (&CategoryAssignmentClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(categoryassignment.Table, categoryassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.CategoryAssignmentsTable, place.CategoryAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFaqs chains the current query on the "faqs" edge.
func (pq *PlaceQuery) QueryFaqs() *FAQQuery {
	query := (&FAQClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(faq.Table, faq.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.FaqsTable, place.FaqsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLikedByUsers chains the current query on the "likedByUsers" edge.
func (pq *PlaceQuery) QueryLikedByUsers() *UserLikePlaceQuery {
	query := (&UserLikePlaceClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(userlikeplace.Table, userlikeplace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, place.LikedByUsersTable, place.LikedByUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowerUsers chains the current query on the "followerUsers" edge.
func (pq *PlaceQuery) QueryFollowerUsers() *UserFollowPlaceQuery {
	query := (&UserFollowPlaceClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(userfollowplace.Table, userfollowplace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.FollowerUsersTable, place.FollowerUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRatings chains the current query on the "ratings" edge.
func (pq *PlaceQuery) QueryRatings() *RatingQuery {
	query := (&RatingClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(rating.Table, rating.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.RatingsTable, place.RatingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventories chains the current query on the "inventories" edge.
func (pq *PlaceQuery) QueryInventories() *PlaceInventoryQuery {
	query := (&PlaceInventoryClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(placeinventory.Table, placeinventory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.InventoriesTable, place.InventoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifications chains the current query on the "notifications" edge.
func (pq *PlaceQuery) QueryNotifications() *NotificationQuery {
	query := (&NotificationClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.NotificationsTable, place.NotificationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTables chains the current query on the "tables" edge.
func (pq *PlaceQuery) QueryTables() *PlaceTableQuery {
	query := (&PlaceTableClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(placetable.Table, placetable.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, place.TablesTable, place.TablesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStaffs chains the current query on the "staffs" edge.
func (pq *PlaceQuery) QueryStaffs() *StaffQuery {
	query := (&StaffClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(staff.Table, staff.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.StaffsTable, place.StaffsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoomCategories chains the current query on the "room_categories" edge.
func (pq *PlaceQuery) QueryRoomCategories() *RoomCategoryQuery {
	query := (&RoomCategoryClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(roomcategory.Table, roomcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.RoomCategoriesTable, place.RoomCategoriesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlans chains the current query on the "plans" edge.
func (pq *PlaceQuery) QueryPlans() *PlanQuery {
	query := (&PlanClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, place.PlansTable, place.PlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTrainers chains the current query on the "trainers" edge.
func (pq *PlaceQuery) QueryTrainers() *TrainerQuery {
	query := (&TrainerClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(trainer.Table, trainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.TrainersTable, place.TrainersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMembers chains the current query on the "members" edge.
func (pq *PlaceQuery) QueryMembers() *UserQuery {
	query := (&UserClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.MembersTable, place.MembersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRegularUsers chains the current query on the "regularUsers" edge.
func (pq *PlaceQuery) QueryRegularUsers() *UserQuery {
	query := (&UserClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(place.Table, place.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, place.RegularUsersTable, place.RegularUsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Place entity from the query.
// Returns a *NotFoundError when no Place was found.
func (pq *PlaceQuery) First(ctx context.Context) (*Place, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{place.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *PlaceQuery) FirstX(ctx context.Context) *Place {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Place ID from the query.
// Returns a *NotFoundError when no Place ID was found.
func (pq *PlaceQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{place.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *PlaceQuery) FirstIDX(ctx context.Context) string {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Place entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Place entity is found.
// Returns a *NotFoundError when no Place entities are found.
func (pq *PlaceQuery) Only(ctx context.Context) (*Place, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{place.Label}
	default:
		return nil, &NotSingularError{place.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *PlaceQuery) OnlyX(ctx context.Context) *Place {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Place ID in the query.
// Returns a *NotSingularError when more than one Place ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *PlaceQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{place.Label}
	default:
		err = &NotSingularError{place.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *PlaceQuery) OnlyIDX(ctx context.Context) string {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Places.
func (pq *PlaceQuery) All(ctx context.Context) ([]*Place, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Place, *PlaceQuery]()
	return withInterceptors[[]*Place](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *PlaceQuery) AllX(ctx context.Context) []*Place {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Place IDs.
func (pq *PlaceQuery) IDs(ctx context.Context) (ids []string, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(place.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *PlaceQuery) IDsX(ctx context.Context) []string {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *PlaceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*PlaceQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *PlaceQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *PlaceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *PlaceQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *PlaceQuery) Clone() *PlaceQuery {
	if pq == nil {
		return nil
	}
	return &PlaceQuery{
		config:                  pq.config,
		ctx:                     pq.ctx.Clone(),
		order:                   append([]place.OrderOption{}, pq.order...),
		inters:                  append([]Interceptor{}, pq.inters...),
		predicates:              append([]predicate.Place{}, pq.predicates...),
		withBusiness:            pq.withBusiness.Clone(),
		withUsers:               pq.withUsers.Clone(),
		withReviews:             pq.withReviews.Clone(),
		withEvents:              pq.withEvents.Clone(),
		withAmenities:           pq.withAmenities.Clone(),
		withMenus:               pq.withMenus.Clone(),
		withMedias:              pq.withMedias.Clone(),
		withRooms:               pq.withRooms.Clone(),
		withReservations:        pq.withReservations.Clone(),
		withBookings:            pq.withBookings.Clone(),
		withCategories:          pq.withCategories.Clone(),
		withCategoryAssignments: pq.withCategoryAssignments.Clone(),
		withFaqs:                pq.withFaqs.Clone(),
		withLikedByUsers:        pq.withLikedByUsers.Clone(),
		withFollowerUsers:       pq.withFollowerUsers.Clone(),
		withRatings:             pq.withRatings.Clone(),
		withInventories:         pq.withInventories.Clone(),
		withNotifications:       pq.withNotifications.Clone(),
		withTables:              pq.withTables.Clone(),
		withStaffs:              pq.withStaffs.Clone(),
		withRoomCategories:      pq.withRoomCategories.Clone(),
		withPlans:               pq.withPlans.Clone(),
		withTrainers:            pq.withTrainers.Clone(),
		withMembers:             pq.withMembers.Clone(),
		withRegularUsers:        pq.withRegularUsers.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithBusiness tells the query-builder to eager-load the nodes that are connected to
// the "business" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithBusiness(opts ...func(*BusinessQuery)) *PlaceQuery {
	query := (&BusinessClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withBusiness = query
	return pq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithUsers(opts ...func(*UserQuery)) *PlaceQuery {
	query := (&UserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withUsers = query
	return pq
}

// WithReviews tells the query-builder to eager-load the nodes that are connected to
// the "reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithReviews(opts ...func(*ReviewQuery)) *PlaceQuery {
	query := (&ReviewClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withReviews = query
	return pq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithEvents(opts ...func(*EventQuery)) *PlaceQuery {
	query := (&EventClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withEvents = query
	return pq
}

// WithAmenities tells the query-builder to eager-load the nodes that are connected to
// the "amenities" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithAmenities(opts ...func(*AmenityQuery)) *PlaceQuery {
	query := (&AmenityClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAmenities = query
	return pq
}

// WithMenus tells the query-builder to eager-load the nodes that are connected to
// the "menus" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithMenus(opts ...func(*MenuQuery)) *PlaceQuery {
	query := (&MenuClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withMenus = query
	return pq
}

// WithMedias tells the query-builder to eager-load the nodes that are connected to
// the "medias" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithMedias(opts ...func(*MediaQuery)) *PlaceQuery {
	query := (&MediaClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withMedias = query
	return pq
}

// WithRooms tells the query-builder to eager-load the nodes that are connected to
// the "rooms" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithRooms(opts ...func(*RoomQuery)) *PlaceQuery {
	query := (&RoomClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRooms = query
	return pq
}

// WithReservations tells the query-builder to eager-load the nodes that are connected to
// the "reservations" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithReservations(opts ...func(*ReservationQuery)) *PlaceQuery {
	query := (&ReservationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withReservations = query
	return pq
}

// WithBookings tells the query-builder to eager-load the nodes that are connected to
// the "bookings" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithBookings(opts ...func(*BookingQuery)) *PlaceQuery {
	query := (&BookingClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withBookings = query
	return pq
}

// WithCategories tells the query-builder to eager-load the nodes that are connected to
// the "categories" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithCategories(opts ...func(*CategoryQuery)) *PlaceQuery {
	query := (&CategoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCategories = query
	return pq
}

// WithCategoryAssignments tells the query-builder to eager-load the nodes that are connected to
// the "categoryAssignments" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithCategoryAssignments(opts ...func(*CategoryAssignmentQuery)) *PlaceQuery {
	query := (&CategoryAssignmentClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCategoryAssignments = query
	return pq
}

// WithFaqs tells the query-builder to eager-load the nodes that are connected to
// the "faqs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithFaqs(opts ...func(*FAQQuery)) *PlaceQuery {
	query := (&FAQClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withFaqs = query
	return pq
}

// WithLikedByUsers tells the query-builder to eager-load the nodes that are connected to
// the "likedByUsers" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithLikedByUsers(opts ...func(*UserLikePlaceQuery)) *PlaceQuery {
	query := (&UserLikePlaceClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withLikedByUsers = query
	return pq
}

// WithFollowerUsers tells the query-builder to eager-load the nodes that are connected to
// the "followerUsers" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithFollowerUsers(opts ...func(*UserFollowPlaceQuery)) *PlaceQuery {
	query := (&UserFollowPlaceClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withFollowerUsers = query
	return pq
}

// WithRatings tells the query-builder to eager-load the nodes that are connected to
// the "ratings" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithRatings(opts ...func(*RatingQuery)) *PlaceQuery {
	query := (&RatingClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRatings = query
	return pq
}

// WithInventories tells the query-builder to eager-load the nodes that are connected to
// the "inventories" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithInventories(opts ...func(*PlaceInventoryQuery)) *PlaceQuery {
	query := (&PlaceInventoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withInventories = query
	return pq
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithNotifications(opts ...func(*NotificationQuery)) *PlaceQuery {
	query := (&NotificationClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withNotifications = query
	return pq
}

// WithTables tells the query-builder to eager-load the nodes that are connected to
// the "tables" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithTables(opts ...func(*PlaceTableQuery)) *PlaceQuery {
	query := (&PlaceTableClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTables = query
	return pq
}

// WithStaffs tells the query-builder to eager-load the nodes that are connected to
// the "staffs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithStaffs(opts ...func(*StaffQuery)) *PlaceQuery {
	query := (&StaffClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withStaffs = query
	return pq
}

// WithRoomCategories tells the query-builder to eager-load the nodes that are connected to
// the "room_categories" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithRoomCategories(opts ...func(*RoomCategoryQuery)) *PlaceQuery {
	query := (&RoomCategoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRoomCategories = query
	return pq
}

// WithPlans tells the query-builder to eager-load the nodes that are connected to
// the "plans" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithPlans(opts ...func(*PlanQuery)) *PlaceQuery {
	query := (&PlanClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPlans = query
	return pq
}

// WithTrainers tells the query-builder to eager-load the nodes that are connected to
// the "trainers" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithTrainers(opts ...func(*TrainerQuery)) *PlaceQuery {
	query := (&TrainerClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTrainers = query
	return pq
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithMembers(opts ...func(*UserQuery)) *PlaceQuery {
	query := (&UserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withMembers = query
	return pq
}

// WithRegularUsers tells the query-builder to eager-load the nodes that are connected to
// the "regularUsers" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *PlaceQuery) WithRegularUsers(opts ...func(*UserQuery)) *PlaceQuery {
	query := (&UserClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRegularUsers = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Place.Query().
//		GroupBy(place.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *PlaceQuery) GroupBy(field string, fields ...string) *PlaceGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaceGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = place.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Place.Query().
//		Select(place.FieldName).
//		Scan(ctx, &v)
func (pq *PlaceQuery) Select(fields ...string) *PlaceSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &PlaceSelect{PlaceQuery: pq}
	sbuild.label = place.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaceSelect configured with the given aggregations.
func (pq *PlaceQuery) Aggregate(fns ...AggregateFunc) *PlaceSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *PlaceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !place.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *PlaceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Place, error) {
	var (
		nodes       = []*Place{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [25]bool{
			pq.withBusiness != nil,
			pq.withUsers != nil,
			pq.withReviews != nil,
			pq.withEvents != nil,
			pq.withAmenities != nil,
			pq.withMenus != nil,
			pq.withMedias != nil,
			pq.withRooms != nil,
			pq.withReservations != nil,
			pq.withBookings != nil,
			pq.withCategories != nil,
			pq.withCategoryAssignments != nil,
			pq.withFaqs != nil,
			pq.withLikedByUsers != nil,
			pq.withFollowerUsers != nil,
			pq.withRatings != nil,
			pq.withInventories != nil,
			pq.withNotifications != nil,
			pq.withTables != nil,
			pq.withStaffs != nil,
			pq.withRoomCategories != nil,
			pq.withPlans != nil,
			pq.withTrainers != nil,
			pq.withMembers != nil,
			pq.withRegularUsers != nil,
		}
	)
	if pq.withBusiness != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, place.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Place).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Place{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withBusiness; query != nil {
		if err := pq.loadBusiness(ctx, query, nodes, nil,
			func(n *Place, e *Business) { n.Edges.Business = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withUsers; query != nil {
		if err := pq.loadUsers(ctx, query, nodes,
			func(n *Place) { n.Edges.Users = []*User{} },
			func(n *Place, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withReviews; query != nil {
		if err := pq.loadReviews(ctx, query, nodes,
			func(n *Place) { n.Edges.Reviews = []*Review{} },
			func(n *Place, e *Review) { n.Edges.Reviews = append(n.Edges.Reviews, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withEvents; query != nil {
		if err := pq.loadEvents(ctx, query, nodes,
			func(n *Place) { n.Edges.Events = []*Event{} },
			func(n *Place, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withAmenities; query != nil {
		if err := pq.loadAmenities(ctx, query, nodes,
			func(n *Place) { n.Edges.Amenities = []*Amenity{} },
			func(n *Place, e *Amenity) { n.Edges.Amenities = append(n.Edges.Amenities, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withMenus; query != nil {
		if err := pq.loadMenus(ctx, query, nodes,
			func(n *Place) { n.Edges.Menus = []*Menu{} },
			func(n *Place, e *Menu) { n.Edges.Menus = append(n.Edges.Menus, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withMedias; query != nil {
		if err := pq.loadMedias(ctx, query, nodes,
			func(n *Place) { n.Edges.Medias = []*Media{} },
			func(n *Place, e *Media) { n.Edges.Medias = append(n.Edges.Medias, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRooms; query != nil {
		if err := pq.loadRooms(ctx, query, nodes,
			func(n *Place) { n.Edges.Rooms = []*Room{} },
			func(n *Place, e *Room) { n.Edges.Rooms = append(n.Edges.Rooms, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withReservations; query != nil {
		if err := pq.loadReservations(ctx, query, nodes,
			func(n *Place) { n.Edges.Reservations = []*Reservation{} },
			func(n *Place, e *Reservation) { n.Edges.Reservations = append(n.Edges.Reservations, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withBookings; query != nil {
		if err := pq.loadBookings(ctx, query, nodes,
			func(n *Place) { n.Edges.Bookings = []*Booking{} },
			func(n *Place, e *Booking) { n.Edges.Bookings = append(n.Edges.Bookings, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCategories; query != nil {
		if err := pq.loadCategories(ctx, query, nodes,
			func(n *Place) { n.Edges.Categories = []*Category{} },
			func(n *Place, e *Category) { n.Edges.Categories = append(n.Edges.Categories, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCategoryAssignments; query != nil {
		if err := pq.loadCategoryAssignments(ctx, query, nodes,
			func(n *Place) { n.Edges.CategoryAssignments = []*CategoryAssignment{} },
			func(n *Place, e *CategoryAssignment) {
				n.Edges.CategoryAssignments = append(n.Edges.CategoryAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withFaqs; query != nil {
		if err := pq.loadFaqs(ctx, query, nodes,
			func(n *Place) { n.Edges.Faqs = []*FAQ{} },
			func(n *Place, e *FAQ) { n.Edges.Faqs = append(n.Edges.Faqs, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withLikedByUsers; query != nil {
		if err := pq.loadLikedByUsers(ctx, query, nodes,
			func(n *Place) { n.Edges.LikedByUsers = []*UserLikePlace{} },
			func(n *Place, e *UserLikePlace) { n.Edges.LikedByUsers = append(n.Edges.LikedByUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withFollowerUsers; query != nil {
		if err := pq.loadFollowerUsers(ctx, query, nodes,
			func(n *Place) { n.Edges.FollowerUsers = []*UserFollowPlace{} },
			func(n *Place, e *UserFollowPlace) { n.Edges.FollowerUsers = append(n.Edges.FollowerUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRatings; query != nil {
		if err := pq.loadRatings(ctx, query, nodes,
			func(n *Place) { n.Edges.Ratings = []*Rating{} },
			func(n *Place, e *Rating) { n.Edges.Ratings = append(n.Edges.Ratings, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withInventories; query != nil {
		if err := pq.loadInventories(ctx, query, nodes,
			func(n *Place) { n.Edges.Inventories = []*PlaceInventory{} },
			func(n *Place, e *PlaceInventory) { n.Edges.Inventories = append(n.Edges.Inventories, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withNotifications; query != nil {
		if err := pq.loadNotifications(ctx, query, nodes,
			func(n *Place) { n.Edges.Notifications = []*Notification{} },
			func(n *Place, e *Notification) { n.Edges.Notifications = append(n.Edges.Notifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTables; query != nil {
		if err := pq.loadTables(ctx, query, nodes,
			func(n *Place) { n.Edges.Tables = []*PlaceTable{} },
			func(n *Place, e *PlaceTable) { n.Edges.Tables = append(n.Edges.Tables, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withStaffs; query != nil {
		if err := pq.loadStaffs(ctx, query, nodes,
			func(n *Place) { n.Edges.Staffs = []*Staff{} },
			func(n *Place, e *Staff) { n.Edges.Staffs = append(n.Edges.Staffs, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRoomCategories; query != nil {
		if err := pq.loadRoomCategories(ctx, query, nodes,
			func(n *Place) { n.Edges.RoomCategories = []*RoomCategory{} },
			func(n *Place, e *RoomCategory) { n.Edges.RoomCategories = append(n.Edges.RoomCategories, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPlans; query != nil {
		if err := pq.loadPlans(ctx, query, nodes,
			func(n *Place) { n.Edges.Plans = []*Plan{} },
			func(n *Place, e *Plan) { n.Edges.Plans = append(n.Edges.Plans, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTrainers; query != nil {
		if err := pq.loadTrainers(ctx, query, nodes,
			func(n *Place) { n.Edges.Trainers = []*Trainer{} },
			func(n *Place, e *Trainer) { n.Edges.Trainers = append(n.Edges.Trainers, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withMembers; query != nil {
		if err := pq.loadMembers(ctx, query, nodes,
			func(n *Place) { n.Edges.Members = []*User{} },
			func(n *Place, e *User) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRegularUsers; query != nil {
		if err := pq.loadRegularUsers(ctx, query, nodes,
			func(n *Place) { n.Edges.RegularUsers = []*User{} },
			func(n *Place, e *User) { n.Edges.RegularUsers = append(n.Edges.RegularUsers, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *PlaceQuery) loadBusiness(ctx context.Context, query *BusinessQuery, nodes []*Place, init func(*Place), assign func(*Place, *Business)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Place)
	for i := range nodes {
		if nodes[i].business_places == nil {
			continue
		}
		fk := *nodes[i].business_places
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(business.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_places" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Place, init func(*Place), assign func(*Place, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.UsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(place.UsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(place.UsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.UsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadReviews(ctx context.Context, query *ReviewQuery, nodes []*Place, init func(*Place), assign func(*Place, *Review)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Review(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.ReviewsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_reviews
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_reviews" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_reviews" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Place, init func(*Place), assign func(*Place, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.EventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadAmenities(ctx context.Context, query *AmenityQuery, nodes []*Place, init func(*Place), assign func(*Place, *Amenity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.AmenitiesTable)
		s.Join(joinT).On(s.C(amenity.FieldID), joinT.C(place.AmenitiesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(place.AmenitiesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.AmenitiesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Amenity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "amenities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadMenus(ctx context.Context, query *MenuQuery, nodes []*Place, init func(*Place), assign func(*Place, *Menu)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.MenusTable)
		s.Join(joinT).On(s.C(menu.FieldID), joinT.C(place.MenusPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.MenusPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.MenusPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Menu](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "menus" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadMedias(ctx context.Context, query *MediaQuery, nodes []*Place, init func(*Place), assign func(*Place, *Media)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.MediasTable)
		s.Join(joinT).On(s.C(media.FieldID), joinT.C(place.MediasPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.MediasPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.MediasPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Media](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "medias" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadRooms(ctx context.Context, query *RoomQuery, nodes []*Place, init func(*Place), assign func(*Place, *Room)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.RoomsTable)
		s.Join(joinT).On(s.C(room.FieldID), joinT.C(place.RoomsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.RoomsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.RoomsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Room](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "rooms" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadReservations(ctx context.Context, query *ReservationQuery, nodes []*Place, init func(*Place), assign func(*Place, *Reservation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.ReservationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_reservations
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_reservations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_reservations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadBookings(ctx context.Context, query *BookingQuery, nodes []*Place, init func(*Place), assign func(*Place, *Booking)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Booking(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.BookingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_bookings
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_bookings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_bookings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadCategories(ctx context.Context, query *CategoryQuery, nodes []*Place, init func(*Place), assign func(*Place, *Category)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Category(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.CategoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_categories
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_categories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_categories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadCategoryAssignments(ctx context.Context, query *CategoryAssignmentQuery, nodes []*Place, init func(*Place), assign func(*Place, *CategoryAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(categoryassignment.FieldEntityID)
	}
	query.Where(predicate.CategoryAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.CategoryAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadFaqs(ctx context.Context, query *FAQQuery, nodes []*Place, init func(*Place), assign func(*Place, *FAQ)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.FaqsTable)
		s.Join(joinT).On(s.C(faq.FieldID), joinT.C(place.FaqsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(place.FaqsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.FaqsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*FAQ](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "faqs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadLikedByUsers(ctx context.Context, query *UserLikePlaceQuery, nodes []*Place, init func(*Place), assign func(*Place, *UserLikePlace)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserLikePlace(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.LikedByUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_like_place_place
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_like_place_place" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_like_place_place" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadFollowerUsers(ctx context.Context, query *UserFollowPlaceQuery, nodes []*Place, init func(*Place), assign func(*Place, *UserFollowPlace)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserFollowPlace(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.FollowerUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_follower_users
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_follower_users" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_follower_users" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadRatings(ctx context.Context, query *RatingQuery, nodes []*Place, init func(*Place), assign func(*Place, *Rating)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.RatingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_ratings
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_ratings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_ratings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadInventories(ctx context.Context, query *PlaceInventoryQuery, nodes []*Place, init func(*Place), assign func(*Place, *PlaceInventory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlaceInventory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.InventoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_inventories
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_inventories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_inventories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadNotifications(ctx context.Context, query *NotificationQuery, nodes []*Place, init func(*Place), assign func(*Place, *Notification)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.NotificationsTable)
		s.Join(joinT).On(s.C(notification.FieldID), joinT.C(place.NotificationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.NotificationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.NotificationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Notification](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "notifications" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadTables(ctx context.Context, query *PlaceTableQuery, nodes []*Place, init func(*Place), assign func(*Place, *PlaceTable)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Place)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlaceTable(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(place.TablesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_tables
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_tables" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_tables" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *PlaceQuery) loadStaffs(ctx context.Context, query *StaffQuery, nodes []*Place, init func(*Place), assign func(*Place, *Staff)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.StaffsTable)
		s.Join(joinT).On(s.C(staff.FieldID), joinT.C(place.StaffsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.StaffsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.StaffsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Staff](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "staffs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadRoomCategories(ctx context.Context, query *RoomCategoryQuery, nodes []*Place, init func(*Place), assign func(*Place, *RoomCategory)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.RoomCategoriesTable)
		s.Join(joinT).On(s.C(roomcategory.FieldID), joinT.C(place.RoomCategoriesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.RoomCategoriesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.RoomCategoriesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*RoomCategory](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "room_categories" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadPlans(ctx context.Context, query *PlanQuery, nodes []*Place, init func(*Place), assign func(*Place, *Plan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.PlansTable)
		s.Join(joinT).On(s.C(plan.FieldID), joinT.C(place.PlansPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(place.PlansPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.PlansPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Plan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "plans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadTrainers(ctx context.Context, query *TrainerQuery, nodes []*Place, init func(*Place), assign func(*Place, *Trainer)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.TrainersTable)
		s.Join(joinT).On(s.C(trainer.FieldID), joinT.C(place.TrainersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.TrainersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.TrainersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Trainer](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "trainers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadMembers(ctx context.Context, query *UserQuery, nodes []*Place, init func(*Place), assign func(*Place, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.MembersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(place.MembersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.MembersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.MembersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "members" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *PlaceQuery) loadRegularUsers(ctx context.Context, query *UserQuery, nodes []*Place, init func(*Place), assign func(*Place, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Place)
	nids := make(map[string]map[*Place]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(place.RegularUsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(place.RegularUsersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(place.RegularUsersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(place.RegularUsersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Place]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "regularUsers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (pq *PlaceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *PlaceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(place.Table, place.Columns, sqlgraph.NewFieldSpec(place.FieldID, field.TypeString))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, place.FieldID)
		for i := range fields {
			if fields[i] != place.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *PlaceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(place.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = place.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlaceGroupBy is the group-by builder for Place entities.
type PlaceGroupBy struct {
	selector
	build *PlaceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *PlaceGroupBy) Aggregate(fns ...AggregateFunc) *PlaceGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *PlaceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceQuery, *PlaceGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *PlaceGroupBy) sqlScan(ctx context.Context, root *PlaceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaceSelect is the builder for selecting fields of Place entities.
type PlaceSelect struct {
	*PlaceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *PlaceSelect) Aggregate(fns ...AggregateFunc) *PlaceSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *PlaceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceQuery, *PlaceSelect](ctx, ps.PlaceQuery, ps, ps.inters, v)
}

func (ps *PlaceSelect) sqlScan(ctx context.Context, root *PlaceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

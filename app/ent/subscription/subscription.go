// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscription type in the database.
	Label = "subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldFlutterwaveSubscriptionID holds the string denoting the flutterwave_subscription_id field in the database.
	FieldFlutterwaveSubscriptionID = "flutterwave_subscription_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// EdgePrice holds the string denoting the price edge name in mutations.
	EdgePrice = "price"
	// Table holds the table name of the subscription in the database.
	Table = "subscriptions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "subscriptions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_subscriptions"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "subscriptions"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plans"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "plan_subscriptions"
	// PriceTable is the table that holds the price relation/edge.
	PriceTable = "subscriptions"
	// PriceInverseTable is the table name for the Price entity.
	// It exists in this package in order to avoid circular dependency with the "price" package.
	PriceInverseTable = "prices"
	// PriceColumn is the table column denoting the price relation/edge.
	PriceColumn = "price_subscriptions"
)

// Columns holds all SQL columns for subscription fields.
var Columns = []string{
	FieldID,
	FieldStartDate,
	FieldEndDate,
	FieldFlutterwaveSubscriptionID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subscriptions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"plan_subscriptions",
	"price_subscriptions",
	"user_subscriptions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Subscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByFlutterwaveSubscriptionID orders the results by the flutterwave_subscription_id field.
func ByFlutterwaveSubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFlutterwaveSubscriptionID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanField orders the results by plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByPriceField orders the results by price field.
func ByPriceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPriceStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
	)
}
func newPriceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PriceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PriceTable, PriceColumn),
	)
}

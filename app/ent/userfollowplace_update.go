// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/user"
	"placio-app/ent/userfollowplace"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFollowPlaceUpdate is the builder for updating UserFollowPlace entities.
type UserFollowPlaceUpdate struct {
	config
	hooks    []Hook
	mutation *UserFollowPlaceMutation
}

// Where appends a list predicates to the UserFollowPlaceUpdate builder.
func (ufpu *UserFollowPlaceUpdate) Where(ps ...predicate.UserFollowPlace) *UserFollowPlaceUpdate {
	ufpu.mutation.Where(ps...)
	return ufpu
}

// SetCreatedAt sets the "CreatedAt" field.
func (ufpu *UserFollowPlaceUpdate) SetCreatedAt(t time.Time) *UserFollowPlaceUpdate {
	ufpu.mutation.SetCreatedAt(t)
	return ufpu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (ufpu *UserFollowPlaceUpdate) SetNillableCreatedAt(t *time.Time) *UserFollowPlaceUpdate {
	if t != nil {
		ufpu.SetCreatedAt(*t)
	}
	return ufpu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ufpu *UserFollowPlaceUpdate) SetUpdatedAt(t time.Time) *UserFollowPlaceUpdate {
	ufpu.mutation.SetUpdatedAt(t)
	return ufpu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ufpu *UserFollowPlaceUpdate) SetUserID(id string) *UserFollowPlaceUpdate {
	ufpu.mutation.SetUserID(id)
	return ufpu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ufpu *UserFollowPlaceUpdate) SetNillableUserID(id *string) *UserFollowPlaceUpdate {
	if id != nil {
		ufpu = ufpu.SetUserID(*id)
	}
	return ufpu
}

// SetUser sets the "user" edge to the User entity.
func (ufpu *UserFollowPlaceUpdate) SetUser(u *User) *UserFollowPlaceUpdate {
	return ufpu.SetUserID(u.ID)
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ufpu *UserFollowPlaceUpdate) SetPlaceID(id string) *UserFollowPlaceUpdate {
	ufpu.mutation.SetPlaceID(id)
	return ufpu
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ufpu *UserFollowPlaceUpdate) SetNillablePlaceID(id *string) *UserFollowPlaceUpdate {
	if id != nil {
		ufpu = ufpu.SetPlaceID(*id)
	}
	return ufpu
}

// SetPlace sets the "place" edge to the Place entity.
func (ufpu *UserFollowPlaceUpdate) SetPlace(p *Place) *UserFollowPlaceUpdate {
	return ufpu.SetPlaceID(p.ID)
}

// Mutation returns the UserFollowPlaceMutation object of the builder.
func (ufpu *UserFollowPlaceUpdate) Mutation() *UserFollowPlaceMutation {
	return ufpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ufpu *UserFollowPlaceUpdate) ClearUser() *UserFollowPlaceUpdate {
	ufpu.mutation.ClearUser()
	return ufpu
}

// ClearPlace clears the "place" edge to the Place entity.
func (ufpu *UserFollowPlaceUpdate) ClearPlace() *UserFollowPlaceUpdate {
	ufpu.mutation.ClearPlace()
	return ufpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufpu *UserFollowPlaceUpdate) Save(ctx context.Context) (int, error) {
	ufpu.defaults()
	return withHooks(ctx, ufpu.sqlSave, ufpu.mutation, ufpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufpu *UserFollowPlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := ufpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufpu *UserFollowPlaceUpdate) Exec(ctx context.Context) error {
	_, err := ufpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufpu *UserFollowPlaceUpdate) ExecX(ctx context.Context) {
	if err := ufpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufpu *UserFollowPlaceUpdate) defaults() {
	if _, ok := ufpu.mutation.UpdatedAt(); !ok {
		v := userfollowplace.UpdateDefaultUpdatedAt()
		ufpu.mutation.SetUpdatedAt(v)
	}
}

func (ufpu *UserFollowPlaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfollowplace.Table, userfollowplace.Columns, sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString))
	if ps := ufpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufpu.mutation.CreatedAt(); ok {
		_spec.SetField(userfollowplace.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ufpu.mutation.UpdatedAt(); ok {
		_spec.SetField(userfollowplace.FieldUpdatedAt, field.TypeTime, value)
	}
	if ufpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowplace.UserTable,
			Columns: []string{userfollowplace.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowplace.UserTable,
			Columns: []string{userfollowplace.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufpu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfollowplace.PlaceTable,
			Columns: []string{userfollowplace.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufpu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfollowplace.PlaceTable,
			Columns: []string{userfollowplace.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollowplace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufpu.mutation.done = true
	return n, nil
}

// UserFollowPlaceUpdateOne is the builder for updating a single UserFollowPlace entity.
type UserFollowPlaceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFollowPlaceMutation
}

// SetCreatedAt sets the "CreatedAt" field.
func (ufpuo *UserFollowPlaceUpdateOne) SetCreatedAt(t time.Time) *UserFollowPlaceUpdateOne {
	ufpuo.mutation.SetCreatedAt(t)
	return ufpuo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (ufpuo *UserFollowPlaceUpdateOne) SetNillableCreatedAt(t *time.Time) *UserFollowPlaceUpdateOne {
	if t != nil {
		ufpuo.SetCreatedAt(*t)
	}
	return ufpuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ufpuo *UserFollowPlaceUpdateOne) SetUpdatedAt(t time.Time) *UserFollowPlaceUpdateOne {
	ufpuo.mutation.SetUpdatedAt(t)
	return ufpuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ufpuo *UserFollowPlaceUpdateOne) SetUserID(id string) *UserFollowPlaceUpdateOne {
	ufpuo.mutation.SetUserID(id)
	return ufpuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ufpuo *UserFollowPlaceUpdateOne) SetNillableUserID(id *string) *UserFollowPlaceUpdateOne {
	if id != nil {
		ufpuo = ufpuo.SetUserID(*id)
	}
	return ufpuo
}

// SetUser sets the "user" edge to the User entity.
func (ufpuo *UserFollowPlaceUpdateOne) SetUser(u *User) *UserFollowPlaceUpdateOne {
	return ufpuo.SetUserID(u.ID)
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ufpuo *UserFollowPlaceUpdateOne) SetPlaceID(id string) *UserFollowPlaceUpdateOne {
	ufpuo.mutation.SetPlaceID(id)
	return ufpuo
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ufpuo *UserFollowPlaceUpdateOne) SetNillablePlaceID(id *string) *UserFollowPlaceUpdateOne {
	if id != nil {
		ufpuo = ufpuo.SetPlaceID(*id)
	}
	return ufpuo
}

// SetPlace sets the "place" edge to the Place entity.
func (ufpuo *UserFollowPlaceUpdateOne) SetPlace(p *Place) *UserFollowPlaceUpdateOne {
	return ufpuo.SetPlaceID(p.ID)
}

// Mutation returns the UserFollowPlaceMutation object of the builder.
func (ufpuo *UserFollowPlaceUpdateOne) Mutation() *UserFollowPlaceMutation {
	return ufpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ufpuo *UserFollowPlaceUpdateOne) ClearUser() *UserFollowPlaceUpdateOne {
	ufpuo.mutation.ClearUser()
	return ufpuo
}

// ClearPlace clears the "place" edge to the Place entity.
func (ufpuo *UserFollowPlaceUpdateOne) ClearPlace() *UserFollowPlaceUpdateOne {
	ufpuo.mutation.ClearPlace()
	return ufpuo
}

// Where appends a list predicates to the UserFollowPlaceUpdate builder.
func (ufpuo *UserFollowPlaceUpdateOne) Where(ps ...predicate.UserFollowPlace) *UserFollowPlaceUpdateOne {
	ufpuo.mutation.Where(ps...)
	return ufpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufpuo *UserFollowPlaceUpdateOne) Select(field string, fields ...string) *UserFollowPlaceUpdateOne {
	ufpuo.fields = append([]string{field}, fields...)
	return ufpuo
}

// Save executes the query and returns the updated UserFollowPlace entity.
func (ufpuo *UserFollowPlaceUpdateOne) Save(ctx context.Context) (*UserFollowPlace, error) {
	ufpuo.defaults()
	return withHooks(ctx, ufpuo.sqlSave, ufpuo.mutation, ufpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufpuo *UserFollowPlaceUpdateOne) SaveX(ctx context.Context) *UserFollowPlace {
	node, err := ufpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufpuo *UserFollowPlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := ufpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufpuo *UserFollowPlaceUpdateOne) ExecX(ctx context.Context) {
	if err := ufpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufpuo *UserFollowPlaceUpdateOne) defaults() {
	if _, ok := ufpuo.mutation.UpdatedAt(); !ok {
		v := userfollowplace.UpdateDefaultUpdatedAt()
		ufpuo.mutation.SetUpdatedAt(v)
	}
}

func (ufpuo *UserFollowPlaceUpdateOne) sqlSave(ctx context.Context) (_node *UserFollowPlace, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfollowplace.Table, userfollowplace.Columns, sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString))
	id, ok := ufpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFollowPlace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfollowplace.FieldID)
		for _, f := range fields {
			if !userfollowplace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfollowplace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufpuo.mutation.CreatedAt(); ok {
		_spec.SetField(userfollowplace.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ufpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userfollowplace.FieldUpdatedAt, field.TypeTime, value)
	}
	if ufpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowplace.UserTable,
			Columns: []string{userfollowplace.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowplace.UserTable,
			Columns: []string{userfollowplace.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufpuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfollowplace.PlaceTable,
			Columns: []string{userfollowplace.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufpuo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfollowplace.PlaceTable,
			Columns: []string{userfollowplace.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserFollowPlace{config: ufpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollowplace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufpuo.mutation.done = true
	return _node, nil
}

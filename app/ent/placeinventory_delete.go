// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"placio-app/ent/placeinventory"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceInventoryDelete is the builder for deleting a PlaceInventory entity.
type PlaceInventoryDelete struct {
	config
	hooks    []Hook
	mutation *PlaceInventoryMutation
}

// Where appends a list predicates to the PlaceInventoryDelete builder.
func (pid *PlaceInventoryDelete) Where(ps ...predicate.PlaceInventory) *PlaceInventoryDelete {
	pid.mutation.Where(ps...)
	return pid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pid *PlaceInventoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pid.sqlExec, pid.mutation, pid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pid *PlaceInventoryDelete) ExecX(ctx context.Context) int {
	n, err := pid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pid *PlaceInventoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(placeinventory.Table, sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString))
	if ps := pid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pid.mutation.done = true
	return affected, err
}

// PlaceInventoryDeleteOne is the builder for deleting a single PlaceInventory entity.
type PlaceInventoryDeleteOne struct {
	pid *PlaceInventoryDelete
}

// Where appends a list predicates to the PlaceInventoryDelete builder.
func (pido *PlaceInventoryDeleteOne) Where(ps ...predicate.PlaceInventory) *PlaceInventoryDeleteOne {
	pido.pid.mutation.Where(ps...)
	return pido
}

// Exec executes the deletion query.
func (pido *PlaceInventoryDeleteOne) Exec(ctx context.Context) error {
	n, err := pido.pid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{placeinventory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pido *PlaceInventoryDeleteOne) ExecX(ctx context.Context) {
	if err := pido.Exec(ctx); err != nil {
		panic(err)
	}
}

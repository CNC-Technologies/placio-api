// Code generated by ent, DO NOT EDIT.

package inventoryattribute

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the inventoryattribute type in the database.
	Label = "inventory_attribute"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldIconURL holds the string denoting the icon_url field in the database.
	FieldIconURL = "icon_url"
	// FieldIsMandatory holds the string denoting the is_mandatory field in the database.
	FieldIsMandatory = "is_mandatory"
	// FieldDataType holds the string denoting the data_type field in the database.
	FieldDataType = "data_type"
	// EdgeInventoryType holds the string denoting the inventory_type edge name in mutations.
	EdgeInventoryType = "inventory_type"
	// EdgePlaceInventoryAttributes holds the string denoting the place_inventory_attributes edge name in mutations.
	EdgePlaceInventoryAttributes = "place_inventory_attributes"
	// Table holds the table name of the inventoryattribute in the database.
	Table = "inventory_attributes"
	// InventoryTypeTable is the table that holds the inventory_type relation/edge.
	InventoryTypeTable = "inventory_attributes"
	// InventoryTypeInverseTable is the table name for the InventoryType entity.
	// It exists in this package in order to avoid circular dependency with the "inventorytype" package.
	InventoryTypeInverseTable = "inventory_types"
	// InventoryTypeColumn is the table column denoting the inventory_type relation/edge.
	InventoryTypeColumn = "inventory_type_attributes"
	// PlaceInventoryAttributesTable is the table that holds the place_inventory_attributes relation/edge.
	PlaceInventoryAttributesTable = "place_inventory_attributes"
	// PlaceInventoryAttributesInverseTable is the table name for the PlaceInventoryAttribute entity.
	// It exists in this package in order to avoid circular dependency with the "placeinventoryattribute" package.
	PlaceInventoryAttributesInverseTable = "place_inventory_attributes"
	// PlaceInventoryAttributesColumn is the table column denoting the place_inventory_attributes relation/edge.
	PlaceInventoryAttributesColumn = "inventory_attribute_place_inventory_attributes"
)

// Columns holds all SQL columns for inventoryattribute fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldImageURL,
	FieldIconURL,
	FieldIsMandatory,
	FieldDataType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "inventory_attributes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"inventory_type_attributes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsMandatory holds the default value on creation for the "is_mandatory" field.
	DefaultIsMandatory bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// DataType defines the type for the "data_type" enum field.
type DataType string

// DataType values.
const (
	DataTypeString  DataType = "string"
	DataTypeNumber  DataType = "number"
	DataTypeBoolean DataType = "boolean"
	DataTypeDate    DataType = "date"
	DataTypeEnum    DataType = "enum"
)

func (dt DataType) String() string {
	return string(dt)
}

// DataTypeValidator is a validator for the "data_type" field enum values. It is called by the builders before save.
func DataTypeValidator(dt DataType) error {
	switch dt {
	case DataTypeString, DataTypeNumber, DataTypeBoolean, DataTypeDate, DataTypeEnum:
		return nil
	default:
		return fmt.Errorf("inventoryattribute: invalid enum value for data_type field: %q", dt)
	}
}

// OrderOption defines the ordering options for the InventoryAttribute queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByIconURL orders the results by the icon_url field.
func ByIconURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIconURL, opts...).ToFunc()
}

// ByIsMandatory orders the results by the is_mandatory field.
func ByIsMandatory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsMandatory, opts...).ToFunc()
}

// ByDataType orders the results by the data_type field.
func ByDataType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDataType, opts...).ToFunc()
}

// ByInventoryTypeField orders the results by inventory_type field.
func ByInventoryTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlaceInventoryAttributesCount orders the results by place_inventory_attributes count.
func ByPlaceInventoryAttributesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlaceInventoryAttributesStep(), opts...)
	}
}

// ByPlaceInventoryAttributes orders the results by place_inventory_attributes terms.
func ByPlaceInventoryAttributes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlaceInventoryAttributesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInventoryTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InventoryTypeTable, InventoryTypeColumn),
	)
}
func newPlaceInventoryAttributesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlaceInventoryAttributesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlaceInventoryAttributesTable, PlaceInventoryAttributesColumn),
	)
}





// Code generated by ent, DO NOT EDIT.



package ent



	
import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"
			 "placio-app/ent/placeinventoryattribute"
			 "placio-app/ent/placeinventory"
			 "placio-app/ent/inventoryattribute"

)




		// PlaceInventoryAttribute is the model entity for the PlaceInventoryAttribute schema.
type PlaceInventoryAttribute struct {
	config `json:"-"`
		// ID of the ent.
		ID string `json:"id,omitempty"`
		// Value holds the value of the "value" field.
		Value string `json:"value,omitempty"`
		// CategorySpecificValue holds the value of the "category_specific_value" field.
		CategorySpecificValue map[string]interface {} `json:"category_specific_value,omitempty"`
		// Edges holds the relations/edges for other nodes in the graph.
		// The values are being populated by the PlaceInventoryAttributeQuery when eager-loading is set.
		Edges PlaceInventoryAttributeEdges `json:"edges"`
		inventory_attribute_place_inventory_attributes *string
		place_inventory_attributes *string
	selectValues sql.SelectValues

}
// PlaceInventoryAttributeEdges holds the relations/edges for other nodes in the graph.
type PlaceInventoryAttributeEdges struct {
		// Inventory holds the value of the inventory edge.
		Inventory *PlaceInventory `json:"inventory,omitempty"`
		// AttributeType holds the value of the attribute_type edge.
		AttributeType *InventoryAttribute `json:"attribute_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool


}
	// InventoryOrErr returns the Inventory value or an error if the edge
	// was not loaded in eager-loading, or loaded but was not found.
	func (e PlaceInventoryAttributeEdges) InventoryOrErr() (*PlaceInventory, error) {
		if e.loadedTypes[0] {
				if e.Inventory == nil {
					// Edge was loaded but was not found.
					return nil, &NotFoundError{label: placeinventory.Label}
				}
			return e.Inventory, nil
		}
		return nil, &NotLoadedError{edge: "inventory"}
	}
	// AttributeTypeOrErr returns the AttributeType value or an error if the edge
	// was not loaded in eager-loading, or loaded but was not found.
	func (e PlaceInventoryAttributeEdges) AttributeTypeOrErr() (*InventoryAttribute, error) {
		if e.loadedTypes[1] {
				if e.AttributeType == nil {
					// Edge was loaded but was not found.
					return nil, &NotFoundError{label: inventoryattribute.Label}
				}
			return e.AttributeType, nil
		}
		return nil, &NotLoadedError{edge: "attribute_type"}
	}







	
	


	
	
		
	
	
	

	
	
	
	


// scanValues returns the types for scanning values from sql.Rows.
func (*PlaceInventoryAttribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
				case placeinventoryattribute.FieldCategorySpecificValue:
					values[i] = new([]byte)
				case placeinventoryattribute.FieldID,placeinventoryattribute.FieldValue:
					values[i] = new(sql.NullString)
				case placeinventoryattribute.ForeignKeys[0]: // inventory_attribute_place_inventory_attributes
					values[i] = new(sql.NullString)
				case placeinventoryattribute.ForeignKeys[1]: // place_inventory_attributes
					values[i] = new(sql.NullString)
			default:
				values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaceInventoryAttribute fields.
func (pia *PlaceInventoryAttribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
			case placeinventoryattribute.FieldID:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
					pia.ID = value.String
		}
			case placeinventoryattribute.FieldValue:
					if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
					pia.Value = value.String
		}
			case placeinventoryattribute.FieldCategorySpecificValue:
					if value, ok := values[i].(*[]byte); !ok {
			return fmt.Errorf("unexpected type %T for field category_specific_value", values[i])
		} else if value != nil && len(*value) > 0 {
			if err := json.Unmarshal(*value, &pia.CategorySpecificValue); err != nil {
				return fmt.Errorf("unmarshal field category_specific_value: %w", err)
			}
		}
			case placeinventoryattribute.ForeignKeys[0]:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field inventory_attribute_place_inventory_attributes", values[i])
			} else if value.Valid {
					pia.inventory_attribute_place_inventory_attributes = new(string)
					*pia.inventory_attribute_place_inventory_attributes = value.String
		}
			case placeinventoryattribute.ForeignKeys[1]:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field place_inventory_attributes", values[i])
			} else if value.Valid {
					pia.place_inventory_attributes = new(string)
					*pia.place_inventory_attributes = value.String
		}
		default:
			pia.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the PlaceInventoryAttribute.
// This includes values selected through modifiers, order, etc.
func (pia *PlaceInventoryAttribute) GetValue(name string) (ent.Value, error) {
	return pia.selectValues.Get(name)
}





	
	// QueryInventory queries the "inventory" edge of the PlaceInventoryAttribute entity.
	func (pia *PlaceInventoryAttribute) QueryInventory() *PlaceInventoryQuery {
		return NewPlaceInventoryAttributeClient(pia.config).QueryInventory(pia)
	}

	
	// QueryAttributeType queries the "attribute_type" edge of the PlaceInventoryAttribute entity.
	func (pia *PlaceInventoryAttribute) QueryAttributeType() *InventoryAttributeQuery {
		return NewPlaceInventoryAttributeClient(pia.config).QueryAttributeType(pia)
	}


// Update returns a builder for updating this PlaceInventoryAttribute.
// Note that you need to call PlaceInventoryAttribute.Unwrap() before calling this method if this PlaceInventoryAttribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (pia *PlaceInventoryAttribute) Update() *PlaceInventoryAttributeUpdateOne {
	return NewPlaceInventoryAttributeClient(pia.config).UpdateOne(pia)
}

// Unwrap unwraps the PlaceInventoryAttribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pia *PlaceInventoryAttribute) Unwrap() *PlaceInventoryAttribute {
	_tx, ok := pia.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaceInventoryAttribute is not a transactional entity")
	}
	pia.config.driver = _tx.drv
	return pia
}


	

	// String implements the fmt.Stringer.
	func (pia *PlaceInventoryAttribute) String() string {
		var builder strings.Builder
		builder.WriteString("PlaceInventoryAttribute(")
			builder.WriteString(fmt.Sprintf("id=%v, ", pia.ID))
					builder.WriteString("value=")
						builder.WriteString(pia.Value)
				builder.WriteString(", ")
					builder.WriteString("category_specific_value=")
						builder.WriteString(fmt.Sprintf("%v", pia.CategorySpecificValue))
		builder.WriteByte(')')
		return builder.String()
	}







// PlaceInventoryAttributes is a parsable slice of PlaceInventoryAttribute.
type PlaceInventoryAttributes []*PlaceInventoryAttribute


	
	



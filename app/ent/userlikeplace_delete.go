// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"placio_api/predicate"
	"placio_api/userlikeplace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserLikePlaceDelete is the builder for deleting a UserLikePlace entity.
type UserLikePlaceDelete struct {
	config
	hooks    []Hook
	mutation *UserLikePlaceMutation
}

// Where appends a list predicates to the UserLikePlaceDelete builder.
func (ulpd *UserLikePlaceDelete) Where(ps ...predicate.UserLikePlace) *UserLikePlaceDelete {
	ulpd.mutation.Where(ps...)
	return ulpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ulpd *UserLikePlaceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ulpd.sqlExec, ulpd.mutation, ulpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ulpd *UserLikePlaceDelete) ExecX(ctx context.Context) int {
	n, err := ulpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ulpd *UserLikePlaceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userlikeplace.Table, sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString))
	if ps := ulpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ulpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ulpd.mutation.done = true
	return affected, err
}

// UserLikePlaceDeleteOne is the builder for deleting a single UserLikePlace entity.
type UserLikePlaceDeleteOne struct {
	ulpd *UserLikePlaceDelete
}

// Where appends a list predicates to the UserLikePlaceDelete builder.
func (ulpdo *UserLikePlaceDeleteOne) Where(ps ...predicate.UserLikePlace) *UserLikePlaceDeleteOne {
	ulpdo.ulpd.mutation.Where(ps...)
	return ulpdo
}

// Exec executes the deletion query.
func (ulpdo *UserLikePlaceDeleteOne) Exec(ctx context.Context) error {
	n, err := ulpdo.ulpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userlikeplace.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ulpdo *UserLikePlaceDeleteOne) ExecX(ctx context.Context) {
	if err := ulpdo.Exec(ctx); err != nil {
		panic(err)
	}
}

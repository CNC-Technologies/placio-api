// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/event"
	"placio-app/ent/predicate"
	"placio-app/ent/user"
	"placio-app/ent/userfollowevent"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFollowEventUpdate is the builder for updating UserFollowEvent entities.
type UserFollowEventUpdate struct {
	config
	hooks    []Hook
	mutation *UserFollowEventMutation
}

// Where appends a list predicates to the UserFollowEventUpdate builder.
func (ufeu *UserFollowEventUpdate) Where(ps ...predicate.UserFollowEvent) *UserFollowEventUpdate {
	ufeu.mutation.Where(ps...)
	return ufeu
}

// SetCreatedAt sets the "createdAt" field.
func (ufeu *UserFollowEventUpdate) SetCreatedAt(t time.Time) *UserFollowEventUpdate {
	ufeu.mutation.SetCreatedAt(t)
	return ufeu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ufeu *UserFollowEventUpdate) SetNillableCreatedAt(t *time.Time) *UserFollowEventUpdate {
	if t != nil {
		ufeu.SetCreatedAt(*t)
	}
	return ufeu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ufeu *UserFollowEventUpdate) SetUpdatedAt(t time.Time) *UserFollowEventUpdate {
	ufeu.mutation.SetUpdatedAt(t)
	return ufeu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ufeu *UserFollowEventUpdate) SetUserID(id string) *UserFollowEventUpdate {
	ufeu.mutation.SetUserID(id)
	return ufeu
}

// SetUser sets the "user" edge to the User entity.
func (ufeu *UserFollowEventUpdate) SetUser(u *User) *UserFollowEventUpdate {
	return ufeu.SetUserID(u.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (ufeu *UserFollowEventUpdate) SetEventID(id string) *UserFollowEventUpdate {
	ufeu.mutation.SetEventID(id)
	return ufeu
}

// SetEvent sets the "event" edge to the Event entity.
func (ufeu *UserFollowEventUpdate) SetEvent(e *Event) *UserFollowEventUpdate {
	return ufeu.SetEventID(e.ID)
}

// Mutation returns the UserFollowEventMutation object of the builder.
func (ufeu *UserFollowEventUpdate) Mutation() *UserFollowEventMutation {
	return ufeu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ufeu *UserFollowEventUpdate) ClearUser() *UserFollowEventUpdate {
	ufeu.mutation.ClearUser()
	return ufeu
}

// ClearEvent clears the "event" edge to the Event entity.
func (ufeu *UserFollowEventUpdate) ClearEvent() *UserFollowEventUpdate {
	ufeu.mutation.ClearEvent()
	return ufeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufeu *UserFollowEventUpdate) Save(ctx context.Context) (int, error) {
	ufeu.defaults()
	return withHooks(ctx, ufeu.sqlSave, ufeu.mutation, ufeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufeu *UserFollowEventUpdate) SaveX(ctx context.Context) int {
	affected, err := ufeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufeu *UserFollowEventUpdate) Exec(ctx context.Context) error {
	_, err := ufeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufeu *UserFollowEventUpdate) ExecX(ctx context.Context) {
	if err := ufeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufeu *UserFollowEventUpdate) defaults() {
	if _, ok := ufeu.mutation.UpdatedAt(); !ok {
		v := userfollowevent.UpdateDefaultUpdatedAt()
		ufeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufeu *UserFollowEventUpdate) check() error {
	if _, ok := ufeu.mutation.UserID(); ufeu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFollowEvent.user"`)
	}
	if _, ok := ufeu.mutation.EventID(); ufeu.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFollowEvent.event"`)
	}
	return nil
}

func (ufeu *UserFollowEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ufeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userfollowevent.Table, userfollowevent.Columns, sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString))
	if ps := ufeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufeu.mutation.CreatedAt(); ok {
		_spec.SetField(userfollowevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ufeu.mutation.UpdatedAt(); ok {
		_spec.SetField(userfollowevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if ufeu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowevent.UserTable,
			Columns: []string{userfollowevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufeu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowevent.UserTable,
			Columns: []string{userfollowevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufeu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfollowevent.EventTable,
			Columns: []string{userfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufeu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfollowevent.EventTable,
			Columns: []string{userfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollowevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufeu.mutation.done = true
	return n, nil
}

// UserFollowEventUpdateOne is the builder for updating a single UserFollowEvent entity.
type UserFollowEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFollowEventMutation
}

// SetCreatedAt sets the "createdAt" field.
func (ufeuo *UserFollowEventUpdateOne) SetCreatedAt(t time.Time) *UserFollowEventUpdateOne {
	ufeuo.mutation.SetCreatedAt(t)
	return ufeuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (ufeuo *UserFollowEventUpdateOne) SetNillableCreatedAt(t *time.Time) *UserFollowEventUpdateOne {
	if t != nil {
		ufeuo.SetCreatedAt(*t)
	}
	return ufeuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ufeuo *UserFollowEventUpdateOne) SetUpdatedAt(t time.Time) *UserFollowEventUpdateOne {
	ufeuo.mutation.SetUpdatedAt(t)
	return ufeuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ufeuo *UserFollowEventUpdateOne) SetUserID(id string) *UserFollowEventUpdateOne {
	ufeuo.mutation.SetUserID(id)
	return ufeuo
}

// SetUser sets the "user" edge to the User entity.
func (ufeuo *UserFollowEventUpdateOne) SetUser(u *User) *UserFollowEventUpdateOne {
	return ufeuo.SetUserID(u.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (ufeuo *UserFollowEventUpdateOne) SetEventID(id string) *UserFollowEventUpdateOne {
	ufeuo.mutation.SetEventID(id)
	return ufeuo
}

// SetEvent sets the "event" edge to the Event entity.
func (ufeuo *UserFollowEventUpdateOne) SetEvent(e *Event) *UserFollowEventUpdateOne {
	return ufeuo.SetEventID(e.ID)
}

// Mutation returns the UserFollowEventMutation object of the builder.
func (ufeuo *UserFollowEventUpdateOne) Mutation() *UserFollowEventMutation {
	return ufeuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ufeuo *UserFollowEventUpdateOne) ClearUser() *UserFollowEventUpdateOne {
	ufeuo.mutation.ClearUser()
	return ufeuo
}

// ClearEvent clears the "event" edge to the Event entity.
func (ufeuo *UserFollowEventUpdateOne) ClearEvent() *UserFollowEventUpdateOne {
	ufeuo.mutation.ClearEvent()
	return ufeuo
}

// Where appends a list predicates to the UserFollowEventUpdate builder.
func (ufeuo *UserFollowEventUpdateOne) Where(ps ...predicate.UserFollowEvent) *UserFollowEventUpdateOne {
	ufeuo.mutation.Where(ps...)
	return ufeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufeuo *UserFollowEventUpdateOne) Select(field string, fields ...string) *UserFollowEventUpdateOne {
	ufeuo.fields = append([]string{field}, fields...)
	return ufeuo
}

// Save executes the query and returns the updated UserFollowEvent entity.
func (ufeuo *UserFollowEventUpdateOne) Save(ctx context.Context) (*UserFollowEvent, error) {
	ufeuo.defaults()
	return withHooks(ctx, ufeuo.sqlSave, ufeuo.mutation, ufeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufeuo *UserFollowEventUpdateOne) SaveX(ctx context.Context) *UserFollowEvent {
	node, err := ufeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufeuo *UserFollowEventUpdateOne) Exec(ctx context.Context) error {
	_, err := ufeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufeuo *UserFollowEventUpdateOne) ExecX(ctx context.Context) {
	if err := ufeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufeuo *UserFollowEventUpdateOne) defaults() {
	if _, ok := ufeuo.mutation.UpdatedAt(); !ok {
		v := userfollowevent.UpdateDefaultUpdatedAt()
		ufeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufeuo *UserFollowEventUpdateOne) check() error {
	if _, ok := ufeuo.mutation.UserID(); ufeuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFollowEvent.user"`)
	}
	if _, ok := ufeuo.mutation.EventID(); ufeuo.mutation.EventCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserFollowEvent.event"`)
	}
	return nil
}

func (ufeuo *UserFollowEventUpdateOne) sqlSave(ctx context.Context) (_node *UserFollowEvent, err error) {
	if err := ufeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userfollowevent.Table, userfollowevent.Columns, sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString))
	id, ok := ufeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFollowEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfollowevent.FieldID)
		for _, f := range fields {
			if !userfollowevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfollowevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufeuo.mutation.CreatedAt(); ok {
		_spec.SetField(userfollowevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ufeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userfollowevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if ufeuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowevent.UserTable,
			Columns: []string{userfollowevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufeuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowevent.UserTable,
			Columns: []string{userfollowevent.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufeuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfollowevent.EventTable,
			Columns: []string{userfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufeuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userfollowevent.EventTable,
			Columns: []string{userfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserFollowEvent{config: ufeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollowevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufeuo.mutation.done = true
	return _node, nil
}

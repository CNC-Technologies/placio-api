
// Code generated by ent, DO NOT EDIT.



	

package accountwallet




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)



	// ID filters vertices based on their ID field.
	func ID(id string) predicate.AccountWallet {
		return predicate.AccountWallet(sql.FieldEQ(FieldID, id))
	}

	
		
		
		// IDEQ applies the EQ predicate on the ID field.
		func IDEQ(id string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldEQ(FieldID,id))
		}
	
		
		
		// IDNEQ applies the NEQ predicate on the ID field.
		func IDNEQ(id string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldNEQ(FieldID,id))
		}
	
		
		
		// IDIn applies the In predicate on the ID field.
		func IDIn(ids ...string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldIn(FieldID,ids...))
		}
	
		
		
		// IDNotIn applies the NotIn predicate on the ID field.
		func IDNotIn(ids ...string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldNotIn(FieldID,ids...))
		}
	
		
		
		// IDGT applies the GT predicate on the ID field.
		func IDGT(id string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldGT(FieldID,id))
		}
	
		
		
		// IDGTE applies the GTE predicate on the ID field.
		func IDGTE(id string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldGTE(FieldID,id))
		}
	
		
		
		// IDLT applies the LT predicate on the ID field.
		func IDLT(id string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldLT(FieldID,id))
		}
	
		
		
		// IDLTE applies the LTE predicate on the ID field.
		func IDLTE(id string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldLTE(FieldID,id))
		}
	
		
		
		// IDEqualFold applies the EqualFold predicate on the ID field.
		func IDEqualFold(id string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldEqualFold(FieldID,id))
		}
	
		
		
		// IDContainsFold applies the ContainsFold predicate on the ID field.
		func IDContainsFold(id string) predicate.AccountWallet {
			return predicate.AccountWallet(sql.FieldContainsFold(FieldID,id))
		}
	



	
	
	
	
	
		
		// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
		func Balance(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldBalance, v))
		}

	
	
	
	
	
		
		// TotalDeposited applies equality check predicate on the "total_deposited" field. It's identical to TotalDepositedEQ.
		func TotalDeposited(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalDeposited, v))
		}

	
	
	
	
	
		
		// TotalWithdrawn applies equality check predicate on the "total_withdrawn" field. It's identical to TotalWithdrawnEQ.
		func TotalWithdrawn(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalWithdrawn, v))
		}

	
	
	
	
	
		
		// TotalEarned applies equality check predicate on the "total_earned" field. It's identical to TotalEarnedEQ.
		func TotalEarned(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalEarned, v))
		}

	
	
	
	
	
		
		// TotalSpent applies equality check predicate on the "total_spent" field. It's identical to TotalSpentEQ.
		func TotalSpent(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalSpent, v))
		}

	
	
	
	
	
		
		// TotalRefunded applies equality check predicate on the "total_refunded" field. It's identical to TotalRefundedEQ.
		func TotalRefunded(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalRefunded, v))
		}

	
	
	
	
	
		
		// TotalFees applies equality check predicate on the "total_fees" field. It's identical to TotalFeesEQ.
		func TotalFees(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalFees, v))
		}

	
	
	
	
	
		
		// TotalTax applies equality check predicate on the "total_tax" field. It's identical to TotalTaxEQ.
		func TotalTax(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalTax, v))
		}

	
	
	
	
	
		
		// TotalDiscount applies equality check predicate on the "total_discount" field. It's identical to TotalDiscountEQ.
		func TotalDiscount(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalDiscount, v))
		}

	
	
	
	
	
		
		// TotalRevenue applies equality check predicate on the "total_revenue" field. It's identical to TotalRevenueEQ.
		func TotalRevenue(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalRevenue, v))
		}

	
	
	
	
	
		
		// TotalExpenses applies equality check predicate on the "total_expenses" field. It's identical to TotalExpensesEQ.
		func TotalExpenses(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalExpenses, v))
		}

	
	
	
	
	
		
		// TotalProfit applies equality check predicate on the "total_profit" field. It's identical to TotalProfitEQ.
		func TotalProfit(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalProfit, v))
		}

	
	
	
	
	
		
		// TotalLoss applies equality check predicate on the "total_loss" field. It's identical to TotalLossEQ.
		func TotalLoss(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalLoss, v))
		}



	
		
		
		
		
		// BalanceEQ applies the EQ predicate on the "balance" field.
		func BalanceEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldBalance, v))
		}
	
		
		
		
		
		// BalanceNEQ applies the NEQ predicate on the "balance" field.
		func BalanceNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldBalance, v))
		}
	
		
		
		
		
		// BalanceIn applies the In predicate on the "balance" field.
		func BalanceIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldBalance, vs...))
		}
	
		
		
		
		
		// BalanceNotIn applies the NotIn predicate on the "balance" field.
		func BalanceNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldBalance, vs...))
		}
	
		
		
		
		
		// BalanceGT applies the GT predicate on the "balance" field.
		func BalanceGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldBalance, v))
		}
	
		
		
		
		
		// BalanceGTE applies the GTE predicate on the "balance" field.
		func BalanceGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldBalance, v))
		}
	
		
		
		
		
		// BalanceLT applies the LT predicate on the "balance" field.
		func BalanceLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldBalance, v))
		}
	
		
		
		
		
		// BalanceLTE applies the LTE predicate on the "balance" field.
		func BalanceLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldBalance, v))
		}
	

	
		
		
		
		
		// TotalDepositedEQ applies the EQ predicate on the "total_deposited" field.
		func TotalDepositedEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalDeposited, v))
		}
	
		
		
		
		
		// TotalDepositedNEQ applies the NEQ predicate on the "total_deposited" field.
		func TotalDepositedNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalDeposited, v))
		}
	
		
		
		
		
		// TotalDepositedIn applies the In predicate on the "total_deposited" field.
		func TotalDepositedIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalDeposited, vs...))
		}
	
		
		
		
		
		// TotalDepositedNotIn applies the NotIn predicate on the "total_deposited" field.
		func TotalDepositedNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalDeposited, vs...))
		}
	
		
		
		
		
		// TotalDepositedGT applies the GT predicate on the "total_deposited" field.
		func TotalDepositedGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalDeposited, v))
		}
	
		
		
		
		
		// TotalDepositedGTE applies the GTE predicate on the "total_deposited" field.
		func TotalDepositedGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalDeposited, v))
		}
	
		
		
		
		
		// TotalDepositedLT applies the LT predicate on the "total_deposited" field.
		func TotalDepositedLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalDeposited, v))
		}
	
		
		
		
		
		// TotalDepositedLTE applies the LTE predicate on the "total_deposited" field.
		func TotalDepositedLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalDeposited, v))
		}
	

	
		
		
		
		
		// TotalWithdrawnEQ applies the EQ predicate on the "total_withdrawn" field.
		func TotalWithdrawnEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalWithdrawn, v))
		}
	
		
		
		
		
		// TotalWithdrawnNEQ applies the NEQ predicate on the "total_withdrawn" field.
		func TotalWithdrawnNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalWithdrawn, v))
		}
	
		
		
		
		
		// TotalWithdrawnIn applies the In predicate on the "total_withdrawn" field.
		func TotalWithdrawnIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalWithdrawn, vs...))
		}
	
		
		
		
		
		// TotalWithdrawnNotIn applies the NotIn predicate on the "total_withdrawn" field.
		func TotalWithdrawnNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalWithdrawn, vs...))
		}
	
		
		
		
		
		// TotalWithdrawnGT applies the GT predicate on the "total_withdrawn" field.
		func TotalWithdrawnGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalWithdrawn, v))
		}
	
		
		
		
		
		// TotalWithdrawnGTE applies the GTE predicate on the "total_withdrawn" field.
		func TotalWithdrawnGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalWithdrawn, v))
		}
	
		
		
		
		
		// TotalWithdrawnLT applies the LT predicate on the "total_withdrawn" field.
		func TotalWithdrawnLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalWithdrawn, v))
		}
	
		
		
		
		
		// TotalWithdrawnLTE applies the LTE predicate on the "total_withdrawn" field.
		func TotalWithdrawnLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalWithdrawn, v))
		}
	

	
		
		
		
		
		// TotalEarnedEQ applies the EQ predicate on the "total_earned" field.
		func TotalEarnedEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalEarned, v))
		}
	
		
		
		
		
		// TotalEarnedNEQ applies the NEQ predicate on the "total_earned" field.
		func TotalEarnedNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalEarned, v))
		}
	
		
		
		
		
		// TotalEarnedIn applies the In predicate on the "total_earned" field.
		func TotalEarnedIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalEarned, vs...))
		}
	
		
		
		
		
		// TotalEarnedNotIn applies the NotIn predicate on the "total_earned" field.
		func TotalEarnedNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalEarned, vs...))
		}
	
		
		
		
		
		// TotalEarnedGT applies the GT predicate on the "total_earned" field.
		func TotalEarnedGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalEarned, v))
		}
	
		
		
		
		
		// TotalEarnedGTE applies the GTE predicate on the "total_earned" field.
		func TotalEarnedGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalEarned, v))
		}
	
		
		
		
		
		// TotalEarnedLT applies the LT predicate on the "total_earned" field.
		func TotalEarnedLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalEarned, v))
		}
	
		
		
		
		
		// TotalEarnedLTE applies the LTE predicate on the "total_earned" field.
		func TotalEarnedLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalEarned, v))
		}
	

	
		
		
		
		
		// TotalSpentEQ applies the EQ predicate on the "total_spent" field.
		func TotalSpentEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalSpent, v))
		}
	
		
		
		
		
		// TotalSpentNEQ applies the NEQ predicate on the "total_spent" field.
		func TotalSpentNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalSpent, v))
		}
	
		
		
		
		
		// TotalSpentIn applies the In predicate on the "total_spent" field.
		func TotalSpentIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalSpent, vs...))
		}
	
		
		
		
		
		// TotalSpentNotIn applies the NotIn predicate on the "total_spent" field.
		func TotalSpentNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalSpent, vs...))
		}
	
		
		
		
		
		// TotalSpentGT applies the GT predicate on the "total_spent" field.
		func TotalSpentGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalSpent, v))
		}
	
		
		
		
		
		// TotalSpentGTE applies the GTE predicate on the "total_spent" field.
		func TotalSpentGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalSpent, v))
		}
	
		
		
		
		
		// TotalSpentLT applies the LT predicate on the "total_spent" field.
		func TotalSpentLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalSpent, v))
		}
	
		
		
		
		
		// TotalSpentLTE applies the LTE predicate on the "total_spent" field.
		func TotalSpentLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalSpent, v))
		}
	

	
		
		
		
		
		// TotalRefundedEQ applies the EQ predicate on the "total_refunded" field.
		func TotalRefundedEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalRefunded, v))
		}
	
		
		
		
		
		// TotalRefundedNEQ applies the NEQ predicate on the "total_refunded" field.
		func TotalRefundedNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalRefunded, v))
		}
	
		
		
		
		
		// TotalRefundedIn applies the In predicate on the "total_refunded" field.
		func TotalRefundedIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalRefunded, vs...))
		}
	
		
		
		
		
		// TotalRefundedNotIn applies the NotIn predicate on the "total_refunded" field.
		func TotalRefundedNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalRefunded, vs...))
		}
	
		
		
		
		
		// TotalRefundedGT applies the GT predicate on the "total_refunded" field.
		func TotalRefundedGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalRefunded, v))
		}
	
		
		
		
		
		// TotalRefundedGTE applies the GTE predicate on the "total_refunded" field.
		func TotalRefundedGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalRefunded, v))
		}
	
		
		
		
		
		// TotalRefundedLT applies the LT predicate on the "total_refunded" field.
		func TotalRefundedLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalRefunded, v))
		}
	
		
		
		
		
		// TotalRefundedLTE applies the LTE predicate on the "total_refunded" field.
		func TotalRefundedLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalRefunded, v))
		}
	

	
		
		
		
		
		// TotalFeesEQ applies the EQ predicate on the "total_fees" field.
		func TotalFeesEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalFees, v))
		}
	
		
		
		
		
		// TotalFeesNEQ applies the NEQ predicate on the "total_fees" field.
		func TotalFeesNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalFees, v))
		}
	
		
		
		
		
		// TotalFeesIn applies the In predicate on the "total_fees" field.
		func TotalFeesIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalFees, vs...))
		}
	
		
		
		
		
		// TotalFeesNotIn applies the NotIn predicate on the "total_fees" field.
		func TotalFeesNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalFees, vs...))
		}
	
		
		
		
		
		// TotalFeesGT applies the GT predicate on the "total_fees" field.
		func TotalFeesGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalFees, v))
		}
	
		
		
		
		
		// TotalFeesGTE applies the GTE predicate on the "total_fees" field.
		func TotalFeesGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalFees, v))
		}
	
		
		
		
		
		// TotalFeesLT applies the LT predicate on the "total_fees" field.
		func TotalFeesLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalFees, v))
		}
	
		
		
		
		
		// TotalFeesLTE applies the LTE predicate on the "total_fees" field.
		func TotalFeesLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalFees, v))
		}
	

	
		
		
		
		
		// TotalTaxEQ applies the EQ predicate on the "total_tax" field.
		func TotalTaxEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalTax, v))
		}
	
		
		
		
		
		// TotalTaxNEQ applies the NEQ predicate on the "total_tax" field.
		func TotalTaxNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalTax, v))
		}
	
		
		
		
		
		// TotalTaxIn applies the In predicate on the "total_tax" field.
		func TotalTaxIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalTax, vs...))
		}
	
		
		
		
		
		// TotalTaxNotIn applies the NotIn predicate on the "total_tax" field.
		func TotalTaxNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalTax, vs...))
		}
	
		
		
		
		
		// TotalTaxGT applies the GT predicate on the "total_tax" field.
		func TotalTaxGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalTax, v))
		}
	
		
		
		
		
		// TotalTaxGTE applies the GTE predicate on the "total_tax" field.
		func TotalTaxGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalTax, v))
		}
	
		
		
		
		
		// TotalTaxLT applies the LT predicate on the "total_tax" field.
		func TotalTaxLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalTax, v))
		}
	
		
		
		
		
		// TotalTaxLTE applies the LTE predicate on the "total_tax" field.
		func TotalTaxLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalTax, v))
		}
	

	
		
		
		
		
		// TotalDiscountEQ applies the EQ predicate on the "total_discount" field.
		func TotalDiscountEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalDiscount, v))
		}
	
		
		
		
		
		// TotalDiscountNEQ applies the NEQ predicate on the "total_discount" field.
		func TotalDiscountNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalDiscount, v))
		}
	
		
		
		
		
		// TotalDiscountIn applies the In predicate on the "total_discount" field.
		func TotalDiscountIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalDiscount, vs...))
		}
	
		
		
		
		
		// TotalDiscountNotIn applies the NotIn predicate on the "total_discount" field.
		func TotalDiscountNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalDiscount, vs...))
		}
	
		
		
		
		
		// TotalDiscountGT applies the GT predicate on the "total_discount" field.
		func TotalDiscountGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalDiscount, v))
		}
	
		
		
		
		
		// TotalDiscountGTE applies the GTE predicate on the "total_discount" field.
		func TotalDiscountGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalDiscount, v))
		}
	
		
		
		
		
		// TotalDiscountLT applies the LT predicate on the "total_discount" field.
		func TotalDiscountLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalDiscount, v))
		}
	
		
		
		
		
		// TotalDiscountLTE applies the LTE predicate on the "total_discount" field.
		func TotalDiscountLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalDiscount, v))
		}
	

	
		
		
		
		
		// TotalRevenueEQ applies the EQ predicate on the "total_revenue" field.
		func TotalRevenueEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalRevenue, v))
		}
	
		
		
		
		
		// TotalRevenueNEQ applies the NEQ predicate on the "total_revenue" field.
		func TotalRevenueNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalRevenue, v))
		}
	
		
		
		
		
		// TotalRevenueIn applies the In predicate on the "total_revenue" field.
		func TotalRevenueIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalRevenue, vs...))
		}
	
		
		
		
		
		// TotalRevenueNotIn applies the NotIn predicate on the "total_revenue" field.
		func TotalRevenueNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalRevenue, vs...))
		}
	
		
		
		
		
		// TotalRevenueGT applies the GT predicate on the "total_revenue" field.
		func TotalRevenueGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalRevenue, v))
		}
	
		
		
		
		
		// TotalRevenueGTE applies the GTE predicate on the "total_revenue" field.
		func TotalRevenueGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalRevenue, v))
		}
	
		
		
		
		
		// TotalRevenueLT applies the LT predicate on the "total_revenue" field.
		func TotalRevenueLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalRevenue, v))
		}
	
		
		
		
		
		// TotalRevenueLTE applies the LTE predicate on the "total_revenue" field.
		func TotalRevenueLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalRevenue, v))
		}
	

	
		
		
		
		
		// TotalExpensesEQ applies the EQ predicate on the "total_expenses" field.
		func TotalExpensesEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalExpenses, v))
		}
	
		
		
		
		
		// TotalExpensesNEQ applies the NEQ predicate on the "total_expenses" field.
		func TotalExpensesNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalExpenses, v))
		}
	
		
		
		
		
		// TotalExpensesIn applies the In predicate on the "total_expenses" field.
		func TotalExpensesIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalExpenses, vs...))
		}
	
		
		
		
		
		// TotalExpensesNotIn applies the NotIn predicate on the "total_expenses" field.
		func TotalExpensesNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalExpenses, vs...))
		}
	
		
		
		
		
		// TotalExpensesGT applies the GT predicate on the "total_expenses" field.
		func TotalExpensesGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalExpenses, v))
		}
	
		
		
		
		
		// TotalExpensesGTE applies the GTE predicate on the "total_expenses" field.
		func TotalExpensesGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalExpenses, v))
		}
	
		
		
		
		
		// TotalExpensesLT applies the LT predicate on the "total_expenses" field.
		func TotalExpensesLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalExpenses, v))
		}
	
		
		
		
		
		// TotalExpensesLTE applies the LTE predicate on the "total_expenses" field.
		func TotalExpensesLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalExpenses, v))
		}
	

	
		
		
		
		
		// TotalProfitEQ applies the EQ predicate on the "total_profit" field.
		func TotalProfitEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalProfit, v))
		}
	
		
		
		
		
		// TotalProfitNEQ applies the NEQ predicate on the "total_profit" field.
		func TotalProfitNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalProfit, v))
		}
	
		
		
		
		
		// TotalProfitIn applies the In predicate on the "total_profit" field.
		func TotalProfitIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalProfit, vs...))
		}
	
		
		
		
		
		// TotalProfitNotIn applies the NotIn predicate on the "total_profit" field.
		func TotalProfitNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalProfit, vs...))
		}
	
		
		
		
		
		// TotalProfitGT applies the GT predicate on the "total_profit" field.
		func TotalProfitGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalProfit, v))
		}
	
		
		
		
		
		// TotalProfitGTE applies the GTE predicate on the "total_profit" field.
		func TotalProfitGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalProfit, v))
		}
	
		
		
		
		
		// TotalProfitLT applies the LT predicate on the "total_profit" field.
		func TotalProfitLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalProfit, v))
		}
	
		
		
		
		
		// TotalProfitLTE applies the LTE predicate on the "total_profit" field.
		func TotalProfitLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalProfit, v))
		}
	

	
		
		
		
		
		// TotalLossEQ applies the EQ predicate on the "total_loss" field.
		func TotalLossEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldEQ(FieldTotalLoss, v))
		}
	
		
		
		
		
		// TotalLossNEQ applies the NEQ predicate on the "total_loss" field.
		func TotalLossNEQ(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNEQ(FieldTotalLoss, v))
		}
	
		
		
		
		
		// TotalLossIn applies the In predicate on the "total_loss" field.
		func TotalLossIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldIn(FieldTotalLoss, vs...))
		}
	
		
		
		
		
		// TotalLossNotIn applies the NotIn predicate on the "total_loss" field.
		func TotalLossNotIn(vs ...float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldNotIn(FieldTotalLoss, vs...))
		}
	
		
		
		
		
		// TotalLossGT applies the GT predicate on the "total_loss" field.
		func TotalLossGT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGT(FieldTotalLoss, v))
		}
	
		
		
		
		
		// TotalLossGTE applies the GTE predicate on the "total_loss" field.
		func TotalLossGTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldGTE(FieldTotalLoss, v))
		}
	
		
		
		
		
		// TotalLossLT applies the LT predicate on the "total_loss" field.
		func TotalLossLT(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLT(FieldTotalLoss, v))
		}
	
		
		
		
		
		// TotalLossLTE applies the LTE predicate on the "total_loss" field.
		func TotalLossLTE(v float64) predicate.AccountWallet {
				return predicate.AccountWallet(sql.FieldLTE(FieldTotalLoss, v))
		}
	



	
	// HasUser applies the HasEdge predicate on the "user" edge.
	func HasUser() predicate.AccountWallet {
		return predicate.AccountWallet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable,UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
	func HasUserWith(preds ...predicate.User) predicate.AccountWallet {
		return predicate.AccountWallet(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}

	
	// HasBusiness applies the HasEdge predicate on the "business" edge.
	func HasBusiness() predicate.AccountWallet {
		return predicate.AccountWallet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, BusinessTable,BusinessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasBusinessWith applies the HasEdge predicate on the "business" edge with a given conditions (other predicates).
	func HasBusinessWith(preds ...predicate.Business) predicate.AccountWallet {
		return predicate.AccountWallet(func(s *sql.Selector) {
		step := newBusinessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}


// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AccountWallet) predicate.AccountWallet {
	return predicate.AccountWallet(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AccountWallet) predicate.AccountWallet {
	return predicate.AccountWallet(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountWallet) predicate.AccountWallet {
	return predicate.AccountWallet(sql.NotPredicates(p))
}






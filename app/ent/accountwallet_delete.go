// Code generated by ent, DO NOT EDIT.

package placio_api

import (
	"context"
	"placio_api/accountwallet"
	"placio_api/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountWalletDelete is the builder for deleting a AccountWallet entity.
type AccountWalletDelete struct {
	config
	hooks    []Hook
	mutation *AccountWalletMutation
}

// Where appends a list predicates to the AccountWalletDelete builder.
func (awd *AccountWalletDelete) Where(ps ...predicate.AccountWallet) *AccountWalletDelete {
	awd.mutation.Where(ps...)
	return awd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (awd *AccountWalletDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, awd.sqlExec, awd.mutation, awd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (awd *AccountWalletDelete) ExecX(ctx context.Context) int {
	n, err := awd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (awd *AccountWalletDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(accountwallet.Table, sqlgraph.NewFieldSpec(accountwallet.FieldID, field.TypeString))
	if ps := awd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, awd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	awd.mutation.done = true
	return affected, err
}

// AccountWalletDeleteOne is the builder for deleting a single AccountWallet entity.
type AccountWalletDeleteOne struct {
	awd *AccountWalletDelete
}

// Where appends a list predicates to the AccountWalletDelete builder.
func (awdo *AccountWalletDeleteOne) Where(ps ...predicate.AccountWallet) *AccountWalletDeleteOne {
	awdo.awd.mutation.Where(ps...)
	return awdo
}

// Exec executes the deletion query.
func (awdo *AccountWalletDeleteOne) Exec(ctx context.Context) error {
	n, err := awdo.awd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{accountwallet.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (awdo *AccountWalletDeleteOne) ExecX(ctx context.Context) {
	if err := awdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package placeinventory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the placeinventory type in the database.
	Label = "place_inventory"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldStockQuantity holds the string denoting the stock_quantity field in the database.
	FieldStockQuantity = "stock_quantity"
	// FieldMinStockThreshold holds the string denoting the min_stock_threshold field in the database.
	FieldMinStockThreshold = "min_stock_threshold"
	// FieldSku holds the string denoting the sku field in the database.
	FieldSku = "sku"
	// FieldExpiryDate holds the string denoting the expiry_date field in the database.
	FieldExpiryDate = "expiry_date"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldPurchaseDate holds the string denoting the purchase_date field in the database.
	FieldPurchaseDate = "purchase_date"
	// FieldLastUpdated holds the string denoting the last_updated field in the database.
	FieldLastUpdated = "last_updated"
	// EdgePlace holds the string denoting the place edge name in mutations.
	EdgePlace = "place"
	// EdgeInventoryType holds the string denoting the inventory_type edge name in mutations.
	EdgeInventoryType = "inventory_type"
	// EdgeAttributes holds the string denoting the attributes edge name in mutations.
	EdgeAttributes = "attributes"
	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"
	// EdgeTransactionHistories holds the string denoting the transaction_histories edge name in mutations.
	EdgeTransactionHistories = "transaction_histories"
	// EdgeReservationBlocks holds the string denoting the reservation_blocks edge name in mutations.
	EdgeReservationBlocks = "reservation_blocks"
	// Table holds the table name of the placeinventory in the database.
	Table = "place_inventories"
	// PlaceTable is the table that holds the place relation/edge.
	PlaceTable = "place_inventories"
	// PlaceInverseTable is the table name for the Place entity.
	// It exists in this package in order to avoid circular dependency with the "place" package.
	PlaceInverseTable = "places"
	// PlaceColumn is the table column denoting the place relation/edge.
	PlaceColumn = "place_inventories"
	// InventoryTypeTable is the table that holds the inventory_type relation/edge.
	InventoryTypeTable = "place_inventories"
	// InventoryTypeInverseTable is the table name for the InventoryType entity.
	// It exists in this package in order to avoid circular dependency with the "inventorytype" package.
	InventoryTypeInverseTable = "inventory_types"
	// InventoryTypeColumn is the table column denoting the inventory_type relation/edge.
	InventoryTypeColumn = "inventory_type_place_inventories"
	// AttributesTable is the table that holds the attributes relation/edge.
	AttributesTable = "place_inventory_attributes"
	// AttributesInverseTable is the table name for the PlaceInventoryAttribute entity.
	// It exists in this package in order to avoid circular dependency with the "placeinventoryattribute" package.
	AttributesInverseTable = "place_inventory_attributes"
	// AttributesColumn is the table column denoting the attributes relation/edge.
	AttributesColumn = "place_inventory_attributes"
	// MediaTable is the table that holds the media relation/edge. The primary key declared below.
	MediaTable = "place_inventory_media"
	// MediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaInverseTable = "media"
	// TransactionHistoriesTable is the table that holds the transaction_histories relation/edge.
	TransactionHistoriesTable = "transaction_histories"
	// TransactionHistoriesInverseTable is the table name for the TransactionHistory entity.
	// It exists in this package in order to avoid circular dependency with the "transactionhistory" package.
	TransactionHistoriesInverseTable = "transaction_histories"
	// TransactionHistoriesColumn is the table column denoting the transaction_histories relation/edge.
	TransactionHistoriesColumn = "place_inventory_transaction_histories"
	// ReservationBlocksTable is the table that holds the reservation_blocks relation/edge.
	ReservationBlocksTable = "reservation_blocks"
	// ReservationBlocksInverseTable is the table name for the ReservationBlock entity.
	// It exists in this package in order to avoid circular dependency with the "reservationblock" package.
	ReservationBlocksInverseTable = "reservation_blocks"
	// ReservationBlocksColumn is the table column denoting the reservation_blocks relation/edge.
	ReservationBlocksColumn = "place_inventory_reservation_blocks"
)

// Columns holds all SQL columns for placeinventory fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
	FieldStockQuantity,
	FieldMinStockThreshold,
	FieldSku,
	FieldExpiryDate,
	FieldSize,
	FieldColor,
	FieldBrand,
	FieldPurchaseDate,
	FieldLastUpdated,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "place_inventories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"inventory_type_place_inventories",
	"place_inventories",
}

var (
	// MediaPrimaryKey and MediaColumn2 are the table columns denoting the
	// primary key for the media relation (M2M).
	MediaPrimaryKey = []string{"place_inventory_id", "media_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultLastUpdated holds the default value on creation for the "last_updated" field.
	DefaultLastUpdated func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the PlaceInventory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByStockQuantity orders the results by the stock_quantity field.
func ByStockQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStockQuantity, opts...).ToFunc()
}

// ByMinStockThreshold orders the results by the min_stock_threshold field.
func ByMinStockThreshold(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinStockThreshold, opts...).ToFunc()
}

// BySku orders the results by the sku field.
func BySku(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSku, opts...).ToFunc()
}

// ByExpiryDate orders the results by the expiry_date field.
func ByExpiryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryDate, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByPurchaseDate orders the results by the purchase_date field.
func ByPurchaseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPurchaseDate, opts...).ToFunc()
}

// ByLastUpdated orders the results by the last_updated field.
func ByLastUpdated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpdated, opts...).ToFunc()
}

// ByPlaceField orders the results by place field.
func ByPlaceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlaceStep(), sql.OrderByField(field, opts...))
	}
}

// ByInventoryTypeField orders the results by inventory_type field.
func ByInventoryTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByAttributesCount orders the results by attributes count.
func ByAttributesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttributesStep(), opts...)
	}
}

// ByAttributes orders the results by attributes terms.
func ByAttributes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttributesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMediaCount orders the results by media count.
func ByMediaCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaStep(), opts...)
	}
}

// ByMedia orders the results by media terms.
func ByMedia(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTransactionHistoriesCount orders the results by transaction_histories count.
func ByTransactionHistoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionHistoriesStep(), opts...)
	}
}

// ByTransactionHistories orders the results by transaction_histories terms.
func ByTransactionHistories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionHistoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReservationBlocksCount orders the results by reservation_blocks count.
func ByReservationBlocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReservationBlocksStep(), opts...)
	}
}

// ByReservationBlocks orders the results by reservation_blocks terms.
func ByReservationBlocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReservationBlocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlaceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlaceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlaceTable, PlaceColumn),
	)
}
func newInventoryTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InventoryTypeTable, InventoryTypeColumn),
	)
}
func newAttributesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttributesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttributesTable, AttributesColumn),
	)
}
func newMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MediaTable, MediaPrimaryKey...),
	)
}
func newTransactionHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionHistoriesTable, TransactionHistoriesColumn),
	)
}
func newReservationBlocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReservationBlocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReservationBlocksTable, ReservationBlocksColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/plan"
	"placio-app/ent/price"
	"placio-app/ent/subscription"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PriceCreate is the builder for creating a Price entity.
type PriceCreate struct {
	config
	mutation *PriceMutation
	hooks    []Hook
}

// SetPrice sets the "price" field.
func (pc *PriceCreate) SetPrice(f float64) *PriceCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetCurrency sets the "currency" field.
func (pc *PriceCreate) SetCurrency(s string) *PriceCreate {
	pc.mutation.SetCurrency(s)
	return pc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pc *PriceCreate) SetNillableCurrency(s *string) *PriceCreate {
	if s != nil {
		pc.SetCurrency(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PriceCreate) SetDescription(s string) *PriceCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PriceCreate) SetNillableDescription(s *string) *PriceCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *PriceCreate) SetType(pr price.Type) *PriceCreate {
	pc.mutation.SetType(pr)
	return pc
}

// SetDuration sets the "duration" field.
func (pc *PriceCreate) SetDuration(i int) *PriceCreate {
	pc.mutation.SetDuration(i)
	return pc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (pc *PriceCreate) SetNillableDuration(i *int) *PriceCreate {
	if i != nil {
		pc.SetDuration(*i)
	}
	return pc
}

// SetSession sets the "session" field.
func (pc *PriceCreate) SetSession(i int) *PriceCreate {
	pc.mutation.SetSession(i)
	return pc
}

// SetNillableSession sets the "session" field if the given value is not nil.
func (pc *PriceCreate) SetNillableSession(i *int) *PriceCreate {
	if i != nil {
		pc.SetSession(*i)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PriceCreate) SetID(s string) *PriceCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetPlanID sets the "plan" edge to the Plan entity by ID.
func (pc *PriceCreate) SetPlanID(id string) *PriceCreate {
	pc.mutation.SetPlanID(id)
	return pc
}

// SetNillablePlanID sets the "plan" edge to the Plan entity by ID if the given value is not nil.
func (pc *PriceCreate) SetNillablePlanID(id *string) *PriceCreate {
	if id != nil {
		pc = pc.SetPlanID(*id)
	}
	return pc
}

// SetPlan sets the "plan" edge to the Plan entity.
func (pc *PriceCreate) SetPlan(p *Plan) *PriceCreate {
	return pc.SetPlanID(p.ID)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (pc *PriceCreate) AddSubscriptionIDs(ids ...string) *PriceCreate {
	pc.mutation.AddSubscriptionIDs(ids...)
	return pc
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (pc *PriceCreate) AddSubscriptions(s ...*Subscription) *PriceCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSubscriptionIDs(ids...)
}

// Mutation returns the PriceMutation object of the builder.
func (pc *PriceCreate) Mutation() *PriceMutation {
	return pc.mutation
}

// Save creates the Price in the database.
func (pc *PriceCreate) Save(ctx context.Context) (*Price, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PriceCreate) SaveX(ctx context.Context) *Price {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PriceCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PriceCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PriceCreate) check() error {
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Price.price"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Price.type"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := price.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Price.type": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := price.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Price.id": %w`, err)}
		}
	}
	return nil
}

func (pc *PriceCreate) sqlSave(ctx context.Context) (*Price, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Price.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PriceCreate) createSpec() (*Price, *sqlgraph.CreateSpec) {
	var (
		_node = &Price{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(price.Table, sqlgraph.NewFieldSpec(price.FieldID, field.TypeString))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(price.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.Currency(); ok {
		_spec.SetField(price.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(price.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(price.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Duration(); ok {
		_spec.SetField(price.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := pc.mutation.Session(); ok {
		_spec.SetField(price.FieldSession, field.TypeInt, value)
		_node.Session = value
	}
	if nodes := pc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlanTable,
			Columns: []string{price.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.plan_prices = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.SubscriptionsTable,
			Columns: []string{price.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PriceCreateBulk is the builder for creating many Price entities in bulk.
type PriceCreateBulk struct {
	config
	err      error
	builders []*PriceCreate
}

// Save creates the Price entities in the database.
func (pcb *PriceCreateBulk) Save(ctx context.Context) ([]*Price, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Price, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PriceCreateBulk) SaveX(ctx context.Context) []*Price {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PriceCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PriceCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

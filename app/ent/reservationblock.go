// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/placeinventory"
	"placio-app/ent/reservationblock"
	"placio-app/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ReservationBlock is the model entity for the ReservationBlock schema.
type ReservationBlock struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Status holds the value of the "status" field.
	Status reservationblock.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReservationBlockQuery when eager-loading is set.
	Edges                              ReservationBlockEdges `json:"edges"`
	place_inventory_reservation_blocks *string
	user_reservation_blocks            *string
	selectValues                       sql.SelectValues
}

// ReservationBlockEdges holds the relations/edges for other nodes in the graph.
type ReservationBlockEdges struct {
	// PlaceInventory holds the value of the place_inventory edge.
	PlaceInventory *PlaceInventory `json:"place_inventory,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlaceInventoryOrErr returns the PlaceInventory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReservationBlockEdges) PlaceInventoryOrErr() (*PlaceInventory, error) {
	if e.loadedTypes[0] {
		if e.PlaceInventory == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: placeinventory.Label}
		}
		return e.PlaceInventory, nil
	}
	return nil, &NotLoadedError{edge: "place_inventory"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReservationBlockEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReservationBlock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reservationblock.FieldID, reservationblock.FieldStatus:
			values[i] = new(sql.NullString)
		case reservationblock.FieldStartTime, reservationblock.FieldEndTime:
			values[i] = new(sql.NullTime)
		case reservationblock.ForeignKeys[0]: // place_inventory_reservation_blocks
			values[i] = new(sql.NullString)
		case reservationblock.ForeignKeys[1]: // user_reservation_blocks
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReservationBlock fields.
func (rb *ReservationBlock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reservationblock.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rb.ID = value.String
			}
		case reservationblock.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				rb.StartTime = value.Time
			}
		case reservationblock.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				rb.EndTime = value.Time
			}
		case reservationblock.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rb.Status = reservationblock.Status(value.String)
			}
		case reservationblock.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place_inventory_reservation_blocks", values[i])
			} else if value.Valid {
				rb.place_inventory_reservation_blocks = new(string)
				*rb.place_inventory_reservation_blocks = value.String
			}
		case reservationblock.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_reservation_blocks", values[i])
			} else if value.Valid {
				rb.user_reservation_blocks = new(string)
				*rb.user_reservation_blocks = value.String
			}
		default:
			rb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ReservationBlock.
// This includes values selected through modifiers, order, etc.
func (rb *ReservationBlock) Value(name string) (ent.Value, error) {
	return rb.selectValues.Get(name)
}

// QueryPlaceInventory queries the "place_inventory" edge of the ReservationBlock entity.
func (rb *ReservationBlock) QueryPlaceInventory() *PlaceInventoryQuery {
	return NewReservationBlockClient(rb.config).QueryPlaceInventory(rb)
}

// QueryUser queries the "user" edge of the ReservationBlock entity.
func (rb *ReservationBlock) QueryUser() *UserQuery {
	return NewReservationBlockClient(rb.config).QueryUser(rb)
}

// Update returns a builder for updating this ReservationBlock.
// Note that you need to call ReservationBlock.Unwrap() before calling this method if this ReservationBlock
// was returned from a transaction, and the transaction was committed or rolled back.
func (rb *ReservationBlock) Update() *ReservationBlockUpdateOne {
	return NewReservationBlockClient(rb.config).UpdateOne(rb)
}

// Unwrap unwraps the ReservationBlock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rb *ReservationBlock) Unwrap() *ReservationBlock {
	_tx, ok := rb.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReservationBlock is not a transactional entity")
	}
	rb.config.driver = _tx.drv
	return rb
}

// String implements the fmt.Stringer.
func (rb *ReservationBlock) String() string {
	var builder strings.Builder
	builder.WriteString("ReservationBlock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rb.ID))
	builder.WriteString("start_time=")
	builder.WriteString(rb.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(rb.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rb.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ReservationBlocks is a parsable slice of ReservationBlock.
type ReservationBlocks []*ReservationBlock

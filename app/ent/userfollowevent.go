// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio_api/event"
	"placio_api/user"
	"placio_api/userfollowevent"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserFollowEvent is the model entity for the UserFollowEvent schema.
type UserFollowEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserFollowEventQuery when eager-loading is set.
	Edges                   UserFollowEventEdges `json:"edges"`
	user_user_follow_events *string
	user_follow_event_event *string
	selectValues            sql.SelectValues
}

// UserFollowEventEdges holds the relations/edges for other nodes in the graph.
type UserFollowEventEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserFollowEventEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserFollowEventEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[1] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserFollowEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userfollowevent.FieldID:
			values[i] = new(sql.NullString)
		case userfollowevent.FieldCreatedAt, userfollowevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userfollowevent.ForeignKeys[0]: // user_user_follow_events
			values[i] = new(sql.NullString)
		case userfollowevent.ForeignKeys[1]: // user_follow_event_event
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserFollowEvent fields.
func (ufe *UserFollowEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userfollowevent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ufe.ID = value.String
			}
		case userfollowevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				ufe.CreatedAt = value.Time
			}
		case userfollowevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				ufe.UpdatedAt = value.Time
			}
		case userfollowevent.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_user_follow_events", values[i])
			} else if value.Valid {
				ufe.user_user_follow_events = new(string)
				*ufe.user_user_follow_events = value.String
			}
		case userfollowevent.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_follow_event_event", values[i])
			} else if value.Valid {
				ufe.user_follow_event_event = new(string)
				*ufe.user_follow_event_event = value.String
			}
		default:
			ufe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserFollowEvent.
// This includes values selected through modifiers, order, etc.
func (ufe *UserFollowEvent) Value(name string) (ent.Value, error) {
	return ufe.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserFollowEvent entity.
func (ufe *UserFollowEvent) QueryUser() *UserQuery {
	return NewUserFollowEventClient(ufe.config).QueryUser(ufe)
}

// QueryEvent queries the "event" edge of the UserFollowEvent entity.
func (ufe *UserFollowEvent) QueryEvent() *EventQuery {
	return NewUserFollowEventClient(ufe.config).QueryEvent(ufe)
}

// Update returns a builder for updating this UserFollowEvent.
// Note that you need to call UserFollowEvent.Unwrap() before calling this method if this UserFollowEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ufe *UserFollowEvent) Update() *UserFollowEventUpdateOne {
	return NewUserFollowEventClient(ufe.config).UpdateOne(ufe)
}

// Unwrap unwraps the UserFollowEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ufe *UserFollowEvent) Unwrap() *UserFollowEvent {
	_tx, ok := ufe.config.driver.(*txDriver)
	if !ok {
		panic("placio_api: UserFollowEvent is not a transactional entity")
	}
	ufe.config.driver = _tx.drv
	return ufe
}

// String implements the fmt.Stringer.
func (ufe *UserFollowEvent) String() string {
	var builder strings.Builder
	builder.WriteString("UserFollowEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ufe.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(ufe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(ufe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserFollowEvents is a parsable slice of UserFollowEvent.
type UserFollowEvents []*UserFollowEvent

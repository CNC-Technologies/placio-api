// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/event"
	"placio-app/ent/eventorganizer"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EventOrganizer is the model entity for the EventOrganizer schema.
type EventOrganizer struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// OrganizerID holds the value of the "organizerID" field.
	OrganizerID string `json:"organizerID,omitempty"`
	// OrganizerType holds the value of the "organizerType" field.
	OrganizerType string `json:"organizerType,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventOrganizerQuery when eager-loading is set.
	Edges                  EventOrganizerEdges `json:"edges"`
	event_event_organizers *string
	selectValues           sql.SelectValues
}

// EventOrganizerEdges holds the relations/edges for other nodes in the graph.
type EventOrganizerEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventOrganizerEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventOrganizer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventorganizer.FieldID, eventorganizer.FieldOrganizerID, eventorganizer.FieldOrganizerType:
			values[i] = new(sql.NullString)
		case eventorganizer.ForeignKeys[0]: // event_event_organizers
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventOrganizer fields.
func (eo *EventOrganizer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventorganizer.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				eo.ID = value.String
			}
		case eventorganizer.FieldOrganizerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organizerID", values[i])
			} else if value.Valid {
				eo.OrganizerID = value.String
			}
		case eventorganizer.FieldOrganizerType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organizerType", values[i])
			} else if value.Valid {
				eo.OrganizerType = value.String
			}
		case eventorganizer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_event_organizers", values[i])
			} else if value.Valid {
				eo.event_event_organizers = new(string)
				*eo.event_event_organizers = value.String
			}
		default:
			eo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventOrganizer.
// This includes values selected through modifiers, order, etc.
func (eo *EventOrganizer) Value(name string) (ent.Value, error) {
	return eo.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the EventOrganizer entity.
func (eo *EventOrganizer) QueryEvent() *EventQuery {
	return NewEventOrganizerClient(eo.config).QueryEvent(eo)
}

// Update returns a builder for updating this EventOrganizer.
// Note that you need to call EventOrganizer.Unwrap() before calling this method if this EventOrganizer
// was returned from a transaction, and the transaction was committed or rolled back.
func (eo *EventOrganizer) Update() *EventOrganizerUpdateOne {
	return NewEventOrganizerClient(eo.config).UpdateOne(eo)
}

// Unwrap unwraps the EventOrganizer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eo *EventOrganizer) Unwrap() *EventOrganizer {
	_tx, ok := eo.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventOrganizer is not a transactional entity")
	}
	eo.config.driver = _tx.drv
	return eo
}

// String implements the fmt.Stringer.
func (eo *EventOrganizer) String() string {
	var builder strings.Builder
	builder.WriteString("EventOrganizer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eo.ID))
	builder.WriteString("organizerID=")
	builder.WriteString(eo.OrganizerID)
	builder.WriteString(", ")
	builder.WriteString("organizerType=")
	builder.WriteString(eo.OrganizerType)
	builder.WriteByte(')')
	return builder.String()
}

// EventOrganizers is a parsable slice of EventOrganizer.
type EventOrganizers []*EventOrganizer

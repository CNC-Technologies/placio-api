// Code generated by ent, DO NOT EDIT.

package notification

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldIsRead holds the string denoting the is_read field in the database.
	FieldIsRead = "is_read"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldNotifiableType holds the string denoting the notifiable_type field in the database.
	FieldNotifiableType = "notifiable_type"
	// FieldNotifiableID holds the string denoting the notifiable_id field in the database.
	FieldNotifiableID = "notifiable_id"
	// FieldTriggeredBy holds the string denoting the triggered_by field in the database.
	FieldTriggeredBy = "triggered_by"
	// FieldTriggeredTo holds the string denoting the triggered_to field in the database.
	FieldTriggeredTo = "triggered_to"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeBusinessAccount holds the string denoting the business_account edge name in mutations.
	EdgeBusinessAccount = "business_account"
	// Table holds the table name of the notification in the database.
	Table = "notifications"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_notifications"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// BusinessAccountTable is the table that holds the business_account relation/edge. The primary key declared below.
	BusinessAccountTable = "business_notifications"
	// BusinessAccountInverseTable is the table name for the Business entity.
	// It exists in this package in order to avoid circular dependency with the "business" package.
	BusinessAccountInverseTable = "businesses"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldMessage,
	FieldLink,
	FieldIsRead,
	FieldType,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldNotifiableType,
	FieldNotifiableID,
	FieldTriggeredBy,
	FieldTriggeredTo,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user_id", "notification_id"}
	// BusinessAccountPrimaryKey and BusinessAccountColumn2 are the table columns denoting the
	// primary key for the business_account relation (M2M).
	BusinessAccountPrimaryKey = []string{"business_id", "notification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// MessageValidator is a validator for the "message" field. It is called by the builders before save.
	MessageValidator func(string) error
	// LinkValidator is a validator for the "link" field. It is called by the builders before save.
	LinkValidator func(string) error
	// DefaultIsRead holds the default value on creation for the "is_read" field.
	DefaultIsRead bool
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// NotifiableTypeValidator is a validator for the "notifiable_type" field. It is called by the builders before save.
	NotifiableTypeValidator func(string) error
	// NotifiableIDValidator is a validator for the "notifiable_id" field. It is called by the builders before save.
	NotifiableIDValidator func(string) error
	// TriggeredByValidator is a validator for the "triggered_by" field. It is called by the builders before save.
	TriggeredByValidator func(string) error
	// TriggeredToValidator is a validator for the "triggered_to" field. It is called by the builders before save.
	TriggeredToValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Notification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByIsRead orders the results by the is_read field.
func ByIsRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsRead, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByNotifiableType orders the results by the notifiable_type field.
func ByNotifiableType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifiableType, opts...).ToFunc()
}

// ByNotifiableID orders the results by the notifiable_id field.
func ByNotifiableID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotifiableID, opts...).ToFunc()
}

// ByTriggeredBy orders the results by the triggered_by field.
func ByTriggeredBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTriggeredBy, opts...).ToFunc()
}

// ByTriggeredTo orders the results by the triggered_to field.
func ByTriggeredTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTriggeredTo, opts...).ToFunc()
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBusinessAccountCount orders the results by business_account count.
func ByBusinessAccountCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBusinessAccountStep(), opts...)
	}
}

// ByBusinessAccount orders the results by business_account terms.
func ByBusinessAccount(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBusinessAccountStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newBusinessAccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BusinessAccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BusinessAccountTable, BusinessAccountPrimaryKey...),
	)
}

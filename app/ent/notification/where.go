// Code generated by ent, DO NOT EDIT.

package notification

import (
	"placio-app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldMessage, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldLink, v))
}

// IsRead applies equality check predicate on the "is_read" field. It's identical to IsReadEQ.
func IsRead(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldIsRead, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// NotifiableType applies equality check predicate on the "notifiable_type" field. It's identical to NotifiableTypeEQ.
func NotifiableType(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldNotifiableType, v))
}

// NotifiableID applies equality check predicate on the "notifiable_id" field. It's identical to NotifiableIDEQ.
func NotifiableID(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldNotifiableID, v))
}

// TriggeredBy applies equality check predicate on the "triggered_by" field. It's identical to TriggeredByEQ.
func TriggeredBy(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTriggeredBy, v))
}

// TriggeredTo applies equality check predicate on the "triggered_to" field. It's identical to TriggeredToEQ.
func TriggeredTo(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTriggeredTo, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldTitle, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldMessage, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldLink, v))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldLink, v))
}

// IsReadEQ applies the EQ predicate on the "is_read" field.
func IsReadEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "is_read" field.
func IsReadNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldIsRead, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUpdatedAt, v))
}

// NotifiableTypeEQ applies the EQ predicate on the "notifiable_type" field.
func NotifiableTypeEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldNotifiableType, v))
}

// NotifiableTypeNEQ applies the NEQ predicate on the "notifiable_type" field.
func NotifiableTypeNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldNotifiableType, v))
}

// NotifiableTypeIn applies the In predicate on the "notifiable_type" field.
func NotifiableTypeIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldNotifiableType, vs...))
}

// NotifiableTypeNotIn applies the NotIn predicate on the "notifiable_type" field.
func NotifiableTypeNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldNotifiableType, vs...))
}

// NotifiableTypeGT applies the GT predicate on the "notifiable_type" field.
func NotifiableTypeGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldNotifiableType, v))
}

// NotifiableTypeGTE applies the GTE predicate on the "notifiable_type" field.
func NotifiableTypeGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldNotifiableType, v))
}

// NotifiableTypeLT applies the LT predicate on the "notifiable_type" field.
func NotifiableTypeLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldNotifiableType, v))
}

// NotifiableTypeLTE applies the LTE predicate on the "notifiable_type" field.
func NotifiableTypeLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldNotifiableType, v))
}

// NotifiableTypeContains applies the Contains predicate on the "notifiable_type" field.
func NotifiableTypeContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldNotifiableType, v))
}

// NotifiableTypeHasPrefix applies the HasPrefix predicate on the "notifiable_type" field.
func NotifiableTypeHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldNotifiableType, v))
}

// NotifiableTypeHasSuffix applies the HasSuffix predicate on the "notifiable_type" field.
func NotifiableTypeHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldNotifiableType, v))
}

// NotifiableTypeEqualFold applies the EqualFold predicate on the "notifiable_type" field.
func NotifiableTypeEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldNotifiableType, v))
}

// NotifiableTypeContainsFold applies the ContainsFold predicate on the "notifiable_type" field.
func NotifiableTypeContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldNotifiableType, v))
}

// NotifiableIDEQ applies the EQ predicate on the "notifiable_id" field.
func NotifiableIDEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldNotifiableID, v))
}

// NotifiableIDNEQ applies the NEQ predicate on the "notifiable_id" field.
func NotifiableIDNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldNotifiableID, v))
}

// NotifiableIDIn applies the In predicate on the "notifiable_id" field.
func NotifiableIDIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldNotifiableID, vs...))
}

// NotifiableIDNotIn applies the NotIn predicate on the "notifiable_id" field.
func NotifiableIDNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldNotifiableID, vs...))
}

// NotifiableIDGT applies the GT predicate on the "notifiable_id" field.
func NotifiableIDGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldNotifiableID, v))
}

// NotifiableIDGTE applies the GTE predicate on the "notifiable_id" field.
func NotifiableIDGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldNotifiableID, v))
}

// NotifiableIDLT applies the LT predicate on the "notifiable_id" field.
func NotifiableIDLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldNotifiableID, v))
}

// NotifiableIDLTE applies the LTE predicate on the "notifiable_id" field.
func NotifiableIDLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldNotifiableID, v))
}

// NotifiableIDContains applies the Contains predicate on the "notifiable_id" field.
func NotifiableIDContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldNotifiableID, v))
}

// NotifiableIDHasPrefix applies the HasPrefix predicate on the "notifiable_id" field.
func NotifiableIDHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldNotifiableID, v))
}

// NotifiableIDHasSuffix applies the HasSuffix predicate on the "notifiable_id" field.
func NotifiableIDHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldNotifiableID, v))
}

// NotifiableIDEqualFold applies the EqualFold predicate on the "notifiable_id" field.
func NotifiableIDEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldNotifiableID, v))
}

// NotifiableIDContainsFold applies the ContainsFold predicate on the "notifiable_id" field.
func NotifiableIDContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldNotifiableID, v))
}

// TriggeredByEQ applies the EQ predicate on the "triggered_by" field.
func TriggeredByEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTriggeredBy, v))
}

// TriggeredByNEQ applies the NEQ predicate on the "triggered_by" field.
func TriggeredByNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldTriggeredBy, v))
}

// TriggeredByIn applies the In predicate on the "triggered_by" field.
func TriggeredByIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldTriggeredBy, vs...))
}

// TriggeredByNotIn applies the NotIn predicate on the "triggered_by" field.
func TriggeredByNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldTriggeredBy, vs...))
}

// TriggeredByGT applies the GT predicate on the "triggered_by" field.
func TriggeredByGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldTriggeredBy, v))
}

// TriggeredByGTE applies the GTE predicate on the "triggered_by" field.
func TriggeredByGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldTriggeredBy, v))
}

// TriggeredByLT applies the LT predicate on the "triggered_by" field.
func TriggeredByLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldTriggeredBy, v))
}

// TriggeredByLTE applies the LTE predicate on the "triggered_by" field.
func TriggeredByLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldTriggeredBy, v))
}

// TriggeredByContains applies the Contains predicate on the "triggered_by" field.
func TriggeredByContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldTriggeredBy, v))
}

// TriggeredByHasPrefix applies the HasPrefix predicate on the "triggered_by" field.
func TriggeredByHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldTriggeredBy, v))
}

// TriggeredByHasSuffix applies the HasSuffix predicate on the "triggered_by" field.
func TriggeredByHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldTriggeredBy, v))
}

// TriggeredByEqualFold applies the EqualFold predicate on the "triggered_by" field.
func TriggeredByEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldTriggeredBy, v))
}

// TriggeredByContainsFold applies the ContainsFold predicate on the "triggered_by" field.
func TriggeredByContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldTriggeredBy, v))
}

// TriggeredToEQ applies the EQ predicate on the "triggered_to" field.
func TriggeredToEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTriggeredTo, v))
}

// TriggeredToNEQ applies the NEQ predicate on the "triggered_to" field.
func TriggeredToNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldTriggeredTo, v))
}

// TriggeredToIn applies the In predicate on the "triggered_to" field.
func TriggeredToIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldTriggeredTo, vs...))
}

// TriggeredToNotIn applies the NotIn predicate on the "triggered_to" field.
func TriggeredToNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldTriggeredTo, vs...))
}

// TriggeredToGT applies the GT predicate on the "triggered_to" field.
func TriggeredToGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldTriggeredTo, v))
}

// TriggeredToGTE applies the GTE predicate on the "triggered_to" field.
func TriggeredToGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldTriggeredTo, v))
}

// TriggeredToLT applies the LT predicate on the "triggered_to" field.
func TriggeredToLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldTriggeredTo, v))
}

// TriggeredToLTE applies the LTE predicate on the "triggered_to" field.
func TriggeredToLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldTriggeredTo, v))
}

// TriggeredToContains applies the Contains predicate on the "triggered_to" field.
func TriggeredToContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldTriggeredTo, v))
}

// TriggeredToHasPrefix applies the HasPrefix predicate on the "triggered_to" field.
func TriggeredToHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldTriggeredTo, v))
}

// TriggeredToHasSuffix applies the HasSuffix predicate on the "triggered_to" field.
func TriggeredToHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldTriggeredTo, v))
}

// TriggeredToEqualFold applies the EqualFold predicate on the "triggered_to" field.
func TriggeredToEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldTriggeredTo, v))
}

// TriggeredToContainsFold applies the ContainsFold predicate on the "triggered_to" field.
func TriggeredToContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldTriggeredTo, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusinessAccount applies the HasEdge predicate on the "business_account" edge.
func HasBusinessAccount() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BusinessAccountTable, BusinessAccountPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessAccountWith applies the HasEdge predicate on the "business_account" edge with a given conditions (other predicates).
func HasBusinessAccountWith(preds ...predicate.Business) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newBusinessAccountStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/featurerelease"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FeatureReleaseCreate is the builder for creating a FeatureRelease entity.
type FeatureReleaseCreate struct {
	config
	mutation *FeatureReleaseMutation
	hooks    []Hook
}

// SetFeatureName sets the "feature_name" field.
func (frc *FeatureReleaseCreate) SetFeatureName(s string) *FeatureReleaseCreate {
	frc.mutation.SetFeatureName(s)
	return frc
}

// SetDescription sets the "description" field.
func (frc *FeatureReleaseCreate) SetDescription(s string) *FeatureReleaseCreate {
	frc.mutation.SetDescription(s)
	return frc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (frc *FeatureReleaseCreate) SetNillableDescription(s *string) *FeatureReleaseCreate {
	if s != nil {
		frc.SetDescription(*s)
	}
	return frc
}

// SetState sets the "state" field.
func (frc *FeatureReleaseCreate) SetState(f featurerelease.State) *FeatureReleaseCreate {
	frc.mutation.SetState(f)
	return frc
}

// SetReleaseDate sets the "release_date" field.
func (frc *FeatureReleaseCreate) SetReleaseDate(t time.Time) *FeatureReleaseCreate {
	frc.mutation.SetReleaseDate(t)
	return frc
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (frc *FeatureReleaseCreate) SetNillableReleaseDate(t *time.Time) *FeatureReleaseCreate {
	if t != nil {
		frc.SetReleaseDate(*t)
	}
	return frc
}

// SetEligibilityRules sets the "eligibility_rules" field.
func (frc *FeatureReleaseCreate) SetEligibilityRules(m map[string]interface{}) *FeatureReleaseCreate {
	frc.mutation.SetEligibilityRules(m)
	return frc
}

// SetDocumentationLink sets the "documentation_link" field.
func (frc *FeatureReleaseCreate) SetDocumentationLink(s string) *FeatureReleaseCreate {
	frc.mutation.SetDocumentationLink(s)
	return frc
}

// SetNillableDocumentationLink sets the "documentation_link" field if the given value is not nil.
func (frc *FeatureReleaseCreate) SetNillableDocumentationLink(s *string) *FeatureReleaseCreate {
	if s != nil {
		frc.SetDocumentationLink(*s)
	}
	return frc
}

// SetMetadata sets the "metadata" field.
func (frc *FeatureReleaseCreate) SetMetadata(m map[string]interface{}) *FeatureReleaseCreate {
	frc.mutation.SetMetadata(m)
	return frc
}

// SetID sets the "id" field.
func (frc *FeatureReleaseCreate) SetID(s string) *FeatureReleaseCreate {
	frc.mutation.SetID(s)
	return frc
}

// Mutation returns the FeatureReleaseMutation object of the builder.
func (frc *FeatureReleaseCreate) Mutation() *FeatureReleaseMutation {
	return frc.mutation
}

// Save creates the FeatureRelease in the database.
func (frc *FeatureReleaseCreate) Save(ctx context.Context) (*FeatureRelease, error) {
	frc.defaults()
	return withHooks(ctx, frc.sqlSave, frc.mutation, frc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FeatureReleaseCreate) SaveX(ctx context.Context) *FeatureRelease {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FeatureReleaseCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FeatureReleaseCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (frc *FeatureReleaseCreate) defaults() {
	if _, ok := frc.mutation.ReleaseDate(); !ok {
		v := featurerelease.DefaultReleaseDate()
		frc.mutation.SetReleaseDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FeatureReleaseCreate) check() error {
	if _, ok := frc.mutation.FeatureName(); !ok {
		return &ValidationError{Name: "feature_name", err: errors.New(`ent: missing required field "FeatureRelease.feature_name"`)}
	}
	if _, ok := frc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "FeatureRelease.state"`)}
	}
	if v, ok := frc.mutation.State(); ok {
		if err := featurerelease.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "FeatureRelease.state": %w`, err)}
		}
	}
	if _, ok := frc.mutation.ReleaseDate(); !ok {
		return &ValidationError{Name: "release_date", err: errors.New(`ent: missing required field "FeatureRelease.release_date"`)}
	}
	if v, ok := frc.mutation.ID(); ok {
		if err := featurerelease.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FeatureRelease.id": %w`, err)}
		}
	}
	return nil
}

func (frc *FeatureReleaseCreate) sqlSave(ctx context.Context) (*FeatureRelease, error) {
	if err := frc.check(); err != nil {
		return nil, err
	}
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FeatureRelease.ID type: %T", _spec.ID.Value)
		}
	}
	frc.mutation.id = &_node.ID
	frc.mutation.done = true
	return _node, nil
}

func (frc *FeatureReleaseCreate) createSpec() (*FeatureRelease, *sqlgraph.CreateSpec) {
	var (
		_node = &FeatureRelease{config: frc.config}
		_spec = sqlgraph.NewCreateSpec(featurerelease.Table, sqlgraph.NewFieldSpec(featurerelease.FieldID, field.TypeString))
	)
	if id, ok := frc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := frc.mutation.FeatureName(); ok {
		_spec.SetField(featurerelease.FieldFeatureName, field.TypeString, value)
		_node.FeatureName = value
	}
	if value, ok := frc.mutation.Description(); ok {
		_spec.SetField(featurerelease.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := frc.mutation.State(); ok {
		_spec.SetField(featurerelease.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := frc.mutation.ReleaseDate(); ok {
		_spec.SetField(featurerelease.FieldReleaseDate, field.TypeTime, value)
		_node.ReleaseDate = value
	}
	if value, ok := frc.mutation.EligibilityRules(); ok {
		_spec.SetField(featurerelease.FieldEligibilityRules, field.TypeJSON, value)
		_node.EligibilityRules = value
	}
	if value, ok := frc.mutation.DocumentationLink(); ok {
		_spec.SetField(featurerelease.FieldDocumentationLink, field.TypeString, value)
		_node.DocumentationLink = value
	}
	if value, ok := frc.mutation.Metadata(); ok {
		_spec.SetField(featurerelease.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// FeatureReleaseCreateBulk is the builder for creating many FeatureRelease entities in bulk.
type FeatureReleaseCreateBulk struct {
	config
	err      error
	builders []*FeatureReleaseCreate
}

// Save creates the FeatureRelease entities in the database.
func (frcb *FeatureReleaseCreateBulk) Save(ctx context.Context) ([]*FeatureRelease, error) {
	if frcb.err != nil {
		return nil, frcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FeatureRelease, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeatureReleaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FeatureReleaseCreateBulk) SaveX(ctx context.Context) []*FeatureRelease {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FeatureReleaseCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FeatureReleaseCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}

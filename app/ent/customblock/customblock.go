
// Code generated by ent, DO NOT EDIT.



	

package customblock




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)


const (
	// Label holds the string label denoting the customblock type in the database.
	Label = "custom_block"
		// FieldID holds the string denoting the id field in the database.
		FieldID = "id"
		// FieldContent holds the string denoting the content field in the database.
		FieldContent = "content"
		// EdgeWebsite holds the string denoting the website edge name in mutations.
		EdgeWebsite = "website"
	// Table holds the table name of the customblock in the database.
	Table = "custom_blocks"
		// WebsiteTable is the table that holds the website relation/edge.
		WebsiteTable = "custom_blocks"
			// WebsiteInverseTable is the table name for the Website entity.
			// It exists in this package in order to avoid circular dependency with the "website" package.
			WebsiteInverseTable = "websites"
			// WebsiteColumn is the table column denoting the website relation/edge.
			WebsiteColumn = "website_custom_blocks"

)



	
	// Columns holds all SQL columns for customblock fields.
	var Columns = []string{
			FieldID,
			FieldContent,
	}
	
	
		// ForeignKeys holds the SQL foreign-keys that are owned by the "custom_blocks"
		// table and are not defined as standalone fields in the schema.
		var ForeignKeys = []string{
				"website_custom_blocks",
		}
	

	





	
// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
		for i := range ForeignKeys {
			if column == ForeignKeys[i] {
				return true
			}
		}
	return false
}














// OrderOption defines the ordering options for the CustomBlock queries.
type OrderOption func(*sql.Selector)

	
	
		// ByID orders the results by the id field.
		func ByID(opts ...sql.OrderTermOption) OrderOption {
			return sql.OrderByField(FieldID, opts...).ToFunc()
		}
	
			// ByContent orders the results by the content field.
			func ByContent(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldContent, opts...).ToFunc()
			}
			// ByWebsiteField orders the results by website field.
			func ByWebsiteField(field string, opts ...sql.OrderTermOption) OrderOption {
				return func(s *sql.Selector) {
					sqlgraph.OrderByNeighborTerms(s, newWebsiteStep(), sql.OrderByField(field, opts...))
				}
			}
		func newWebsiteStep() *sqlgraph.Step {
			return sqlgraph.NewStep(
					sqlgraph.From(Table, FieldID),
						sqlgraph.To(WebsiteInverseTable, FieldID),
				sqlgraph.Edge(sqlgraph.M2O, true, WebsiteTable,WebsiteColumn),
			)
		}








// Code generated by ent, DO NOT EDIT.

package reservationblock

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the reservationblock type in the database.
	Label = "reservation_block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgePlaceInventory holds the string denoting the place_inventory edge name in mutations.
	EdgePlaceInventory = "place_inventory"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the reservationblock in the database.
	Table = "reservation_blocks"
	// PlaceInventoryTable is the table that holds the place_inventory relation/edge.
	PlaceInventoryTable = "reservation_blocks"
	// PlaceInventoryInverseTable is the table name for the PlaceInventory entity.
	// It exists in this package in order to avoid circular dependency with the "placeinventory" package.
	PlaceInventoryInverseTable = "place_inventories"
	// PlaceInventoryColumn is the table column denoting the place_inventory relation/edge.
	PlaceInventoryColumn = "place_inventory_reservation_blocks"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "reservation_blocks"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_reservation_blocks"
)

// Columns holds all SQL columns for reservationblock fields.
var Columns = []string{
	FieldID,
	FieldStartTime,
	FieldEndTime,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "reservation_blocks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"place_inventory_reservation_blocks",
	"user_reservation_blocks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusConfirmed Status = "confirmed"
	StatusPending   Status = "pending"
	StatusCanceled  Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusConfirmed, StatusPending, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("reservationblock: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ReservationBlock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPlaceInventoryField orders the results by place_inventory field.
func ByPlaceInventoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlaceInventoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newPlaceInventoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlaceInventoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlaceInventoryTable, PlaceInventoryColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}

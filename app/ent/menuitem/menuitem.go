// Code generated by ent, DO NOT EDIT.

package menuitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the menuitem type in the database.
	Label = "menu_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldIsAvailable holds the string denoting the is_available field in the database.
	FieldIsAvailable = "is_available"
	// FieldPreparationTime holds the string denoting the preparation_time field in the database.
	FieldPreparationTime = "preparation_time"
	// FieldOptions holds the string denoting the options field in the database.
	FieldOptions = "options"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// EdgeMenu holds the string denoting the menu edge name in mutations.
	EdgeMenu = "menu"
	// EdgeInventory holds the string denoting the inventory edge name in mutations.
	EdgeInventory = "inventory"
	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"
	// EdgeOrderItems holds the string denoting the order_items edge name in mutations.
	EdgeOrderItems = "order_items"
	// Table holds the table name of the menuitem in the database.
	Table = "menu_items"
	// MenuTable is the table that holds the menu relation/edge. The primary key declared below.
	MenuTable = "menu_menu_items"
	// MenuInverseTable is the table name for the Menu entity.
	// It exists in this package in order to avoid circular dependency with the "menu" package.
	MenuInverseTable = "menus"
	// InventoryTable is the table that holds the inventory relation/edge.
	InventoryTable = "place_inventories"
	// InventoryInverseTable is the table name for the PlaceInventory entity.
	// It exists in this package in order to avoid circular dependency with the "placeinventory" package.
	InventoryInverseTable = "place_inventories"
	// InventoryColumn is the table column denoting the inventory relation/edge.
	InventoryColumn = "menu_item_inventory"
	// MediaTable is the table that holds the media relation/edge.
	MediaTable = "media"
	// MediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaInverseTable = "media"
	// MediaColumn is the table column denoting the media relation/edge.
	MediaColumn = "menu_item_media"
	// OrderItemsTable is the table that holds the order_items relation/edge. The primary key declared below.
	OrderItemsTable = "menu_item_order_items"
	// OrderItemsInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	OrderItemsInverseTable = "order_items"
)

// Columns holds all SQL columns for menuitem fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPrice,
	FieldCurrency,
	FieldIsAvailable,
	FieldPreparationTime,
	FieldOptions,
	FieldDeletedAt,
	FieldIsDeleted,
}

var (
	// MenuPrimaryKey and MenuColumn2 are the table columns denoting the
	// primary key for the menu relation (M2M).
	MenuPrimaryKey = []string{"menu_id", "menu_item_id"}
	// OrderItemsPrimaryKey and OrderItemsColumn2 are the table columns denoting the
	// primary key for the order_items relation (M2M).
	OrderItemsPrimaryKey = []string{"menu_item_id", "order_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsAvailable holds the default value on creation for the "is_available" field.
	DefaultIsAvailable bool
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted bool
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the MenuItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByIsAvailable orders the results by the is_available field.
func ByIsAvailable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsAvailable, opts...).ToFunc()
}

// ByPreparationTime orders the results by the preparation_time field.
func ByPreparationTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreparationTime, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByMenuCount orders the results by menu count.
func ByMenuCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMenuStep(), opts...)
	}
}

// ByMenu orders the results by menu terms.
func ByMenu(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMenuStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInventoryField orders the results by inventory field.
func ByInventoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByMediaCount orders the results by media count.
func ByMediaCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaStep(), opts...)
	}
}

// ByMedia orders the results by media terms.
func ByMedia(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderItemsCount orders the results by order_items count.
func ByOrderItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderItemsStep(), opts...)
	}
}

// ByOrderItems orders the results by order_items terms.
func ByOrderItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMenuStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MenuInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MenuTable, MenuPrimaryKey...),
	)
}
func newInventoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, InventoryTable, InventoryColumn),
	)
}
func newMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MediaTable, MediaColumn),
	)
}
func newOrderItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, OrderItemsTable, OrderItemsPrimaryKey...),
	)
}

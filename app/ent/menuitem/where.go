// Code generated by ent, DO NOT EDIT.

package menuitem

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldDescription, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldPrice, v))
}

// PreparationTime applies equality check predicate on the "preparation_time" field. It's identical to PreparationTimeEQ.
func PreparationTime(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldPreparationTime, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldDeletedAt, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldIsDeleted, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContainsFold(FieldDescription, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldPrice, v))
}

// PreparationTimeEQ applies the EQ predicate on the "preparation_time" field.
func PreparationTimeEQ(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldPreparationTime, v))
}

// PreparationTimeNEQ applies the NEQ predicate on the "preparation_time" field.
func PreparationTimeNEQ(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldPreparationTime, v))
}

// PreparationTimeIn applies the In predicate on the "preparation_time" field.
func PreparationTimeIn(vs ...int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldPreparationTime, vs...))
}

// PreparationTimeNotIn applies the NotIn predicate on the "preparation_time" field.
func PreparationTimeNotIn(vs ...int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldPreparationTime, vs...))
}

// PreparationTimeGT applies the GT predicate on the "preparation_time" field.
func PreparationTimeGT(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldPreparationTime, v))
}

// PreparationTimeGTE applies the GTE predicate on the "preparation_time" field.
func PreparationTimeGTE(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldPreparationTime, v))
}

// PreparationTimeLT applies the LT predicate on the "preparation_time" field.
func PreparationTimeLT(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldPreparationTime, v))
}

// PreparationTimeLTE applies the LTE predicate on the "preparation_time" field.
func PreparationTimeLTE(v int) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldPreparationTime, v))
}

// PreparationTimeIsNil applies the IsNil predicate on the "preparation_time" field.
func PreparationTimeIsNil() predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIsNull(FieldPreparationTime))
}

// PreparationTimeNotNil applies the NotNil predicate on the "preparation_time" field.
func PreparationTimeNotNil() predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotNull(FieldPreparationTime))
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIsNull(FieldOptions))
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotNull(FieldOptions))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtContains applies the Contains predicate on the "deleted_at" field.
func DeletedAtContains(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContains(FieldDeletedAt, v))
}

// DeletedAtHasPrefix applies the HasPrefix predicate on the "deleted_at" field.
func DeletedAtHasPrefix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasPrefix(FieldDeletedAt, v))
}

// DeletedAtHasSuffix applies the HasSuffix predicate on the "deleted_at" field.
func DeletedAtHasSuffix(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldHasSuffix(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.MenuItem {
	return predicate.MenuItem(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedAtEqualFold applies the EqualFold predicate on the "deleted_at" field.
func DeletedAtEqualFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEqualFold(FieldDeletedAt, v))
}

// DeletedAtContainsFold applies the ContainsFold predicate on the "deleted_at" field.
func DeletedAtContainsFold(v string) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldContainsFold(FieldDeletedAt, v))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.MenuItem {
	return predicate.MenuItem(sql.FieldNEQ(FieldIsDeleted, v))
}

// HasMenu applies the HasEdge predicate on the "menu" edge.
func HasMenu() predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MenuTable, MenuPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMenuWith applies the HasEdge predicate on the "menu" edge with a given conditions (other predicates).
func HasMenuWith(preds ...predicate.Menu) predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := newMenuStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInventory applies the HasEdge predicate on the "inventory" edge.
func HasInventory() predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, InventoryTable, InventoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryWith applies the HasEdge predicate on the "inventory" edge with a given conditions (other predicates).
func HasInventoryWith(preds ...predicate.PlaceInventory) predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := newInventoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OrderItemsTable, OrderItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.MenuItem {
	return predicate.MenuItem(func(s *sql.Selector) {
		step := newOrderItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MenuItem) predicate.MenuItem {
	return predicate.MenuItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MenuItem) predicate.MenuItem {
	return predicate.MenuItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MenuItem) predicate.MenuItem {
	return predicate.MenuItem(sql.NotPredicates(p))
}

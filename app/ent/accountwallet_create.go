// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/accountwallet"
	"placio-app/ent/business"
	"placio-app/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountWalletCreate is the builder for creating a AccountWallet entity.
type AccountWalletCreate struct {
	config
	mutation *AccountWalletMutation
	hooks    []Hook
}

// SetBalance sets the "balance" field.
func (awc *AccountWalletCreate) SetBalance(f float64) *AccountWalletCreate {
	awc.mutation.SetBalance(f)
	return awc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableBalance(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetBalance(*f)
	}
	return awc
}

// SetTotalDeposited sets the "total_deposited" field.
func (awc *AccountWalletCreate) SetTotalDeposited(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalDeposited(f)
	return awc
}

// SetNillableTotalDeposited sets the "total_deposited" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalDeposited(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalDeposited(*f)
	}
	return awc
}

// SetTotalWithdrawn sets the "total_withdrawn" field.
func (awc *AccountWalletCreate) SetTotalWithdrawn(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalWithdrawn(f)
	return awc
}

// SetNillableTotalWithdrawn sets the "total_withdrawn" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalWithdrawn(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalWithdrawn(*f)
	}
	return awc
}

// SetTotalEarned sets the "total_earned" field.
func (awc *AccountWalletCreate) SetTotalEarned(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalEarned(f)
	return awc
}

// SetNillableTotalEarned sets the "total_earned" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalEarned(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalEarned(*f)
	}
	return awc
}

// SetTotalSpent sets the "total_spent" field.
func (awc *AccountWalletCreate) SetTotalSpent(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalSpent(f)
	return awc
}

// SetNillableTotalSpent sets the "total_spent" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalSpent(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalSpent(*f)
	}
	return awc
}

// SetTotalRefunded sets the "total_refunded" field.
func (awc *AccountWalletCreate) SetTotalRefunded(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalRefunded(f)
	return awc
}

// SetNillableTotalRefunded sets the "total_refunded" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalRefunded(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalRefunded(*f)
	}
	return awc
}

// SetTotalFees sets the "total_fees" field.
func (awc *AccountWalletCreate) SetTotalFees(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalFees(f)
	return awc
}

// SetNillableTotalFees sets the "total_fees" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalFees(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalFees(*f)
	}
	return awc
}

// SetTotalTax sets the "total_tax" field.
func (awc *AccountWalletCreate) SetTotalTax(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalTax(f)
	return awc
}

// SetNillableTotalTax sets the "total_tax" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalTax(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalTax(*f)
	}
	return awc
}

// SetTotalDiscount sets the "total_discount" field.
func (awc *AccountWalletCreate) SetTotalDiscount(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalDiscount(f)
	return awc
}

// SetNillableTotalDiscount sets the "total_discount" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalDiscount(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalDiscount(*f)
	}
	return awc
}

// SetTotalRevenue sets the "total_revenue" field.
func (awc *AccountWalletCreate) SetTotalRevenue(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalRevenue(f)
	return awc
}

// SetNillableTotalRevenue sets the "total_revenue" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalRevenue(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalRevenue(*f)
	}
	return awc
}

// SetTotalExpenses sets the "total_expenses" field.
func (awc *AccountWalletCreate) SetTotalExpenses(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalExpenses(f)
	return awc
}

// SetNillableTotalExpenses sets the "total_expenses" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalExpenses(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalExpenses(*f)
	}
	return awc
}

// SetTotalProfit sets the "total_profit" field.
func (awc *AccountWalletCreate) SetTotalProfit(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalProfit(f)
	return awc
}

// SetNillableTotalProfit sets the "total_profit" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalProfit(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalProfit(*f)
	}
	return awc
}

// SetTotalLoss sets the "total_loss" field.
func (awc *AccountWalletCreate) SetTotalLoss(f float64) *AccountWalletCreate {
	awc.mutation.SetTotalLoss(f)
	return awc
}

// SetNillableTotalLoss sets the "total_loss" field if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableTotalLoss(f *float64) *AccountWalletCreate {
	if f != nil {
		awc.SetTotalLoss(*f)
	}
	return awc
}

// SetID sets the "id" field.
func (awc *AccountWalletCreate) SetID(s string) *AccountWalletCreate {
	awc.mutation.SetID(s)
	return awc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (awc *AccountWalletCreate) SetUserID(id string) *AccountWalletCreate {
	awc.mutation.SetUserID(id)
	return awc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableUserID(id *string) *AccountWalletCreate {
	if id != nil {
		awc = awc.SetUserID(*id)
	}
	return awc
}

// SetUser sets the "user" edge to the User entity.
func (awc *AccountWalletCreate) SetUser(u *User) *AccountWalletCreate {
	return awc.SetUserID(u.ID)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (awc *AccountWalletCreate) SetBusinessID(id string) *AccountWalletCreate {
	awc.mutation.SetBusinessID(id)
	return awc
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (awc *AccountWalletCreate) SetNillableBusinessID(id *string) *AccountWalletCreate {
	if id != nil {
		awc = awc.SetBusinessID(*id)
	}
	return awc
}

// SetBusiness sets the "business" edge to the Business entity.
func (awc *AccountWalletCreate) SetBusiness(b *Business) *AccountWalletCreate {
	return awc.SetBusinessID(b.ID)
}

// Mutation returns the AccountWalletMutation object of the builder.
func (awc *AccountWalletCreate) Mutation() *AccountWalletMutation {
	return awc.mutation
}

// Save creates the AccountWallet in the database.
func (awc *AccountWalletCreate) Save(ctx context.Context) (*AccountWallet, error) {
	awc.defaults()
	return withHooks(ctx, awc.sqlSave, awc.mutation, awc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (awc *AccountWalletCreate) SaveX(ctx context.Context) *AccountWallet {
	v, err := awc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (awc *AccountWalletCreate) Exec(ctx context.Context) error {
	_, err := awc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awc *AccountWalletCreate) ExecX(ctx context.Context) {
	if err := awc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (awc *AccountWalletCreate) defaults() {
	if _, ok := awc.mutation.Balance(); !ok {
		v := accountwallet.DefaultBalance
		awc.mutation.SetBalance(v)
	}
	if _, ok := awc.mutation.TotalDeposited(); !ok {
		v := accountwallet.DefaultTotalDeposited
		awc.mutation.SetTotalDeposited(v)
	}
	if _, ok := awc.mutation.TotalWithdrawn(); !ok {
		v := accountwallet.DefaultTotalWithdrawn
		awc.mutation.SetTotalWithdrawn(v)
	}
	if _, ok := awc.mutation.TotalEarned(); !ok {
		v := accountwallet.DefaultTotalEarned
		awc.mutation.SetTotalEarned(v)
	}
	if _, ok := awc.mutation.TotalSpent(); !ok {
		v := accountwallet.DefaultTotalSpent
		awc.mutation.SetTotalSpent(v)
	}
	if _, ok := awc.mutation.TotalRefunded(); !ok {
		v := accountwallet.DefaultTotalRefunded
		awc.mutation.SetTotalRefunded(v)
	}
	if _, ok := awc.mutation.TotalFees(); !ok {
		v := accountwallet.DefaultTotalFees
		awc.mutation.SetTotalFees(v)
	}
	if _, ok := awc.mutation.TotalTax(); !ok {
		v := accountwallet.DefaultTotalTax
		awc.mutation.SetTotalTax(v)
	}
	if _, ok := awc.mutation.TotalDiscount(); !ok {
		v := accountwallet.DefaultTotalDiscount
		awc.mutation.SetTotalDiscount(v)
	}
	if _, ok := awc.mutation.TotalRevenue(); !ok {
		v := accountwallet.DefaultTotalRevenue
		awc.mutation.SetTotalRevenue(v)
	}
	if _, ok := awc.mutation.TotalExpenses(); !ok {
		v := accountwallet.DefaultTotalExpenses
		awc.mutation.SetTotalExpenses(v)
	}
	if _, ok := awc.mutation.TotalProfit(); !ok {
		v := accountwallet.DefaultTotalProfit
		awc.mutation.SetTotalProfit(v)
	}
	if _, ok := awc.mutation.TotalLoss(); !ok {
		v := accountwallet.DefaultTotalLoss
		awc.mutation.SetTotalLoss(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (awc *AccountWalletCreate) check() error {
	if _, ok := awc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "AccountWallet.balance"`)}
	}
	if _, ok := awc.mutation.TotalDeposited(); !ok {
		return &ValidationError{Name: "total_deposited", err: errors.New(`ent: missing required field "AccountWallet.total_deposited"`)}
	}
	if _, ok := awc.mutation.TotalWithdrawn(); !ok {
		return &ValidationError{Name: "total_withdrawn", err: errors.New(`ent: missing required field "AccountWallet.total_withdrawn"`)}
	}
	if _, ok := awc.mutation.TotalEarned(); !ok {
		return &ValidationError{Name: "total_earned", err: errors.New(`ent: missing required field "AccountWallet.total_earned"`)}
	}
	if _, ok := awc.mutation.TotalSpent(); !ok {
		return &ValidationError{Name: "total_spent", err: errors.New(`ent: missing required field "AccountWallet.total_spent"`)}
	}
	if _, ok := awc.mutation.TotalRefunded(); !ok {
		return &ValidationError{Name: "total_refunded", err: errors.New(`ent: missing required field "AccountWallet.total_refunded"`)}
	}
	if _, ok := awc.mutation.TotalFees(); !ok {
		return &ValidationError{Name: "total_fees", err: errors.New(`ent: missing required field "AccountWallet.total_fees"`)}
	}
	if _, ok := awc.mutation.TotalTax(); !ok {
		return &ValidationError{Name: "total_tax", err: errors.New(`ent: missing required field "AccountWallet.total_tax"`)}
	}
	if _, ok := awc.mutation.TotalDiscount(); !ok {
		return &ValidationError{Name: "total_discount", err: errors.New(`ent: missing required field "AccountWallet.total_discount"`)}
	}
	if _, ok := awc.mutation.TotalRevenue(); !ok {
		return &ValidationError{Name: "total_revenue", err: errors.New(`ent: missing required field "AccountWallet.total_revenue"`)}
	}
	if _, ok := awc.mutation.TotalExpenses(); !ok {
		return &ValidationError{Name: "total_expenses", err: errors.New(`ent: missing required field "AccountWallet.total_expenses"`)}
	}
	if _, ok := awc.mutation.TotalProfit(); !ok {
		return &ValidationError{Name: "total_profit", err: errors.New(`ent: missing required field "AccountWallet.total_profit"`)}
	}
	if _, ok := awc.mutation.TotalLoss(); !ok {
		return &ValidationError{Name: "total_loss", err: errors.New(`ent: missing required field "AccountWallet.total_loss"`)}
	}
	return nil
}

func (awc *AccountWalletCreate) sqlSave(ctx context.Context) (*AccountWallet, error) {
	if err := awc.check(); err != nil {
		return nil, err
	}
	_node, _spec := awc.createSpec()
	if err := sqlgraph.CreateNode(ctx, awc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AccountWallet.ID type: %T", _spec.ID.Value)
		}
	}
	awc.mutation.id = &_node.ID
	awc.mutation.done = true
	return _node, nil
}

func (awc *AccountWalletCreate) createSpec() (*AccountWallet, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountWallet{config: awc.config}
		_spec = sqlgraph.NewCreateSpec(accountwallet.Table, sqlgraph.NewFieldSpec(accountwallet.FieldID, field.TypeString))
	)
	if id, ok := awc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := awc.mutation.Balance(); ok {
		_spec.SetField(accountwallet.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := awc.mutation.TotalDeposited(); ok {
		_spec.SetField(accountwallet.FieldTotalDeposited, field.TypeFloat64, value)
		_node.TotalDeposited = value
	}
	if value, ok := awc.mutation.TotalWithdrawn(); ok {
		_spec.SetField(accountwallet.FieldTotalWithdrawn, field.TypeFloat64, value)
		_node.TotalWithdrawn = value
	}
	if value, ok := awc.mutation.TotalEarned(); ok {
		_spec.SetField(accountwallet.FieldTotalEarned, field.TypeFloat64, value)
		_node.TotalEarned = value
	}
	if value, ok := awc.mutation.TotalSpent(); ok {
		_spec.SetField(accountwallet.FieldTotalSpent, field.TypeFloat64, value)
		_node.TotalSpent = value
	}
	if value, ok := awc.mutation.TotalRefunded(); ok {
		_spec.SetField(accountwallet.FieldTotalRefunded, field.TypeFloat64, value)
		_node.TotalRefunded = value
	}
	if value, ok := awc.mutation.TotalFees(); ok {
		_spec.SetField(accountwallet.FieldTotalFees, field.TypeFloat64, value)
		_node.TotalFees = value
	}
	if value, ok := awc.mutation.TotalTax(); ok {
		_spec.SetField(accountwallet.FieldTotalTax, field.TypeFloat64, value)
		_node.TotalTax = value
	}
	if value, ok := awc.mutation.TotalDiscount(); ok {
		_spec.SetField(accountwallet.FieldTotalDiscount, field.TypeFloat64, value)
		_node.TotalDiscount = value
	}
	if value, ok := awc.mutation.TotalRevenue(); ok {
		_spec.SetField(accountwallet.FieldTotalRevenue, field.TypeFloat64, value)
		_node.TotalRevenue = value
	}
	if value, ok := awc.mutation.TotalExpenses(); ok {
		_spec.SetField(accountwallet.FieldTotalExpenses, field.TypeFloat64, value)
		_node.TotalExpenses = value
	}
	if value, ok := awc.mutation.TotalProfit(); ok {
		_spec.SetField(accountwallet.FieldTotalProfit, field.TypeFloat64, value)
		_node.TotalProfit = value
	}
	if value, ok := awc.mutation.TotalLoss(); ok {
		_spec.SetField(accountwallet.FieldTotalLoss, field.TypeFloat64, value)
		_node.TotalLoss = value
	}
	if nodes := awc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.UserTable,
			Columns: []string{accountwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_wallet = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := awc.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.BusinessTable,
			Columns: []string{accountwallet.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_wallet = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountWalletCreateBulk is the builder for creating many AccountWallet entities in bulk.
type AccountWalletCreateBulk struct {
	config
	err      error
	builders []*AccountWalletCreate
}

// Save creates the AccountWallet entities in the database.
func (awcb *AccountWalletCreateBulk) Save(ctx context.Context) ([]*AccountWallet, error) {
	if awcb.err != nil {
		return nil, awcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(awcb.builders))
	nodes := make([]*AccountWallet, len(awcb.builders))
	mutators := make([]Mutator, len(awcb.builders))
	for i := range awcb.builders {
		func(i int, root context.Context) {
			builder := awcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountWalletMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, awcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, awcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, awcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (awcb *AccountWalletCreateBulk) SaveX(ctx context.Context) []*AccountWallet {
	v, err := awcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (awcb *AccountWalletCreateBulk) Exec(ctx context.Context) error {
	_, err := awcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awcb *AccountWalletCreateBulk) ExecX(ctx context.Context) {
	if err := awcb.Exec(ctx); err != nil {
		panic(err)
	}
}

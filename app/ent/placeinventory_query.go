// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"placio-app/ent/inventorytype"
	"placio-app/ent/media"
	"placio-app/ent/place"
	"placio-app/ent/placeinventory"
	"placio-app/ent/placeinventoryattribute"
	"placio-app/ent/predicate"
	"placio-app/ent/reservationblock"
	"placio-app/ent/transactionhistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceInventoryQuery is the builder for querying PlaceInventory entities.
type PlaceInventoryQuery struct {
	config
	ctx                      *QueryContext
	order                    []placeinventory.OrderOption
	inters                   []Interceptor
	predicates               []predicate.PlaceInventory
	withPlace                *PlaceQuery
	withInventoryType        *InventoryTypeQuery
	withAttributes           *PlaceInventoryAttributeQuery
	withMedia                *MediaQuery
	withTransactionHistories *TransactionHistoryQuery
	withReservationBlocks    *ReservationBlockQuery
	withFKs                  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaceInventoryQuery builder.
func (piq *PlaceInventoryQuery) Where(ps ...predicate.PlaceInventory) *PlaceInventoryQuery {
	piq.predicates = append(piq.predicates, ps...)
	return piq
}

// Limit the number of records to be returned by this query.
func (piq *PlaceInventoryQuery) Limit(limit int) *PlaceInventoryQuery {
	piq.ctx.Limit = &limit
	return piq
}

// Offset to start from.
func (piq *PlaceInventoryQuery) Offset(offset int) *PlaceInventoryQuery {
	piq.ctx.Offset = &offset
	return piq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (piq *PlaceInventoryQuery) Unique(unique bool) *PlaceInventoryQuery {
	piq.ctx.Unique = &unique
	return piq
}

// Order specifies how the records should be ordered.
func (piq *PlaceInventoryQuery) Order(o ...placeinventory.OrderOption) *PlaceInventoryQuery {
	piq.order = append(piq.order, o...)
	return piq
}

// QueryPlace chains the current query on the "place" edge.
func (piq *PlaceInventoryQuery) QueryPlace() *PlaceQuery {
	query := (&PlaceClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeinventory.Table, placeinventory.FieldID, selector),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeinventory.PlaceTable, placeinventory.PlaceColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventoryType chains the current query on the "inventory_type" edge.
func (piq *PlaceInventoryQuery) QueryInventoryType() *InventoryTypeQuery {
	query := (&InventoryTypeClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeinventory.Table, placeinventory.FieldID, selector),
			sqlgraph.To(inventorytype.Table, inventorytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, placeinventory.InventoryTypeTable, placeinventory.InventoryTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttributes chains the current query on the "attributes" edge.
func (piq *PlaceInventoryQuery) QueryAttributes() *PlaceInventoryAttributeQuery {
	query := (&PlaceInventoryAttributeClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeinventory.Table, placeinventory.FieldID, selector),
			sqlgraph.To(placeinventoryattribute.Table, placeinventoryattribute.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, placeinventory.AttributesTable, placeinventory.AttributesColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedia chains the current query on the "media" edge.
func (piq *PlaceInventoryQuery) QueryMedia() *MediaQuery {
	query := (&MediaClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeinventory.Table, placeinventory.FieldID, selector),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, placeinventory.MediaTable, placeinventory.MediaPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransactionHistories chains the current query on the "transaction_histories" edge.
func (piq *PlaceInventoryQuery) QueryTransactionHistories() *TransactionHistoryQuery {
	query := (&TransactionHistoryClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeinventory.Table, placeinventory.FieldID, selector),
			sqlgraph.To(transactionhistory.Table, transactionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, placeinventory.TransactionHistoriesTable, placeinventory.TransactionHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReservationBlocks chains the current query on the "reservation_blocks" edge.
func (piq *PlaceInventoryQuery) QueryReservationBlocks() *ReservationBlockQuery {
	query := (&ReservationBlockClient{config: piq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := piq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := piq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(placeinventory.Table, placeinventory.FieldID, selector),
			sqlgraph.To(reservationblock.Table, reservationblock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, placeinventory.ReservationBlocksTable, placeinventory.ReservationBlocksColumn),
		)
		fromU = sqlgraph.SetNeighbors(piq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlaceInventory entity from the query.
// Returns a *NotFoundError when no PlaceInventory was found.
func (piq *PlaceInventoryQuery) First(ctx context.Context) (*PlaceInventory, error) {
	nodes, err := piq.Limit(1).All(setContextOp(ctx, piq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{placeinventory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (piq *PlaceInventoryQuery) FirstX(ctx context.Context) *PlaceInventory {
	node, err := piq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlaceInventory ID from the query.
// Returns a *NotFoundError when no PlaceInventory ID was found.
func (piq *PlaceInventoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = piq.Limit(1).IDs(setContextOp(ctx, piq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{placeinventory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (piq *PlaceInventoryQuery) FirstIDX(ctx context.Context) string {
	id, err := piq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlaceInventory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlaceInventory entity is found.
// Returns a *NotFoundError when no PlaceInventory entities are found.
func (piq *PlaceInventoryQuery) Only(ctx context.Context) (*PlaceInventory, error) {
	nodes, err := piq.Limit(2).All(setContextOp(ctx, piq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{placeinventory.Label}
	default:
		return nil, &NotSingularError{placeinventory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (piq *PlaceInventoryQuery) OnlyX(ctx context.Context) *PlaceInventory {
	node, err := piq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlaceInventory ID in the query.
// Returns a *NotSingularError when more than one PlaceInventory ID is found.
// Returns a *NotFoundError when no entities are found.
func (piq *PlaceInventoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = piq.Limit(2).IDs(setContextOp(ctx, piq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{placeinventory.Label}
	default:
		err = &NotSingularError{placeinventory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (piq *PlaceInventoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := piq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlaceInventories.
func (piq *PlaceInventoryQuery) All(ctx context.Context) ([]*PlaceInventory, error) {
	ctx = setContextOp(ctx, piq.ctx, "All")
	if err := piq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlaceInventory, *PlaceInventoryQuery]()
	return withInterceptors[[]*PlaceInventory](ctx, piq, qr, piq.inters)
}

// AllX is like All, but panics if an error occurs.
func (piq *PlaceInventoryQuery) AllX(ctx context.Context) []*PlaceInventory {
	nodes, err := piq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlaceInventory IDs.
func (piq *PlaceInventoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if piq.ctx.Unique == nil && piq.path != nil {
		piq.Unique(true)
	}
	ctx = setContextOp(ctx, piq.ctx, "IDs")
	if err = piq.Select(placeinventory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (piq *PlaceInventoryQuery) IDsX(ctx context.Context) []string {
	ids, err := piq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (piq *PlaceInventoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, piq.ctx, "Count")
	if err := piq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, piq, querierCount[*PlaceInventoryQuery](), piq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (piq *PlaceInventoryQuery) CountX(ctx context.Context) int {
	count, err := piq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (piq *PlaceInventoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, piq.ctx, "Exist")
	switch _, err := piq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (piq *PlaceInventoryQuery) ExistX(ctx context.Context) bool {
	exist, err := piq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaceInventoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (piq *PlaceInventoryQuery) Clone() *PlaceInventoryQuery {
	if piq == nil {
		return nil
	}
	return &PlaceInventoryQuery{
		config:                   piq.config,
		ctx:                      piq.ctx.Clone(),
		order:                    append([]placeinventory.OrderOption{}, piq.order...),
		inters:                   append([]Interceptor{}, piq.inters...),
		predicates:               append([]predicate.PlaceInventory{}, piq.predicates...),
		withPlace:                piq.withPlace.Clone(),
		withInventoryType:        piq.withInventoryType.Clone(),
		withAttributes:           piq.withAttributes.Clone(),
		withMedia:                piq.withMedia.Clone(),
		withTransactionHistories: piq.withTransactionHistories.Clone(),
		withReservationBlocks:    piq.withReservationBlocks.Clone(),
		// clone intermediate query.
		sql:  piq.sql.Clone(),
		path: piq.path,
	}
}

// WithPlace tells the query-builder to eager-load the nodes that are connected to
// the "place" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaceInventoryQuery) WithPlace(opts ...func(*PlaceQuery)) *PlaceInventoryQuery {
	query := (&PlaceClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withPlace = query
	return piq
}

// WithInventoryType tells the query-builder to eager-load the nodes that are connected to
// the "inventory_type" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaceInventoryQuery) WithInventoryType(opts ...func(*InventoryTypeQuery)) *PlaceInventoryQuery {
	query := (&InventoryTypeClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withInventoryType = query
	return piq
}

// WithAttributes tells the query-builder to eager-load the nodes that are connected to
// the "attributes" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaceInventoryQuery) WithAttributes(opts ...func(*PlaceInventoryAttributeQuery)) *PlaceInventoryQuery {
	query := (&PlaceInventoryAttributeClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withAttributes = query
	return piq
}

// WithMedia tells the query-builder to eager-load the nodes that are connected to
// the "media" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaceInventoryQuery) WithMedia(opts ...func(*MediaQuery)) *PlaceInventoryQuery {
	query := (&MediaClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withMedia = query
	return piq
}

// WithTransactionHistories tells the query-builder to eager-load the nodes that are connected to
// the "transaction_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaceInventoryQuery) WithTransactionHistories(opts ...func(*TransactionHistoryQuery)) *PlaceInventoryQuery {
	query := (&TransactionHistoryClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withTransactionHistories = query
	return piq
}

// WithReservationBlocks tells the query-builder to eager-load the nodes that are connected to
// the "reservation_blocks" edge. The optional arguments are used to configure the query builder of the edge.
func (piq *PlaceInventoryQuery) WithReservationBlocks(opts ...func(*ReservationBlockQuery)) *PlaceInventoryQuery {
	query := (&ReservationBlockClient{config: piq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	piq.withReservationBlocks = query
	return piq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlaceInventory.Query().
//		GroupBy(placeinventory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (piq *PlaceInventoryQuery) GroupBy(field string, fields ...string) *PlaceInventoryGroupBy {
	piq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaceInventoryGroupBy{build: piq}
	grbuild.flds = &piq.ctx.Fields
	grbuild.label = placeinventory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.PlaceInventory.Query().
//		Select(placeinventory.FieldName).
//		Scan(ctx, &v)
func (piq *PlaceInventoryQuery) Select(fields ...string) *PlaceInventorySelect {
	piq.ctx.Fields = append(piq.ctx.Fields, fields...)
	sbuild := &PlaceInventorySelect{PlaceInventoryQuery: piq}
	sbuild.label = placeinventory.Label
	sbuild.flds, sbuild.scan = &piq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaceInventorySelect configured with the given aggregations.
func (piq *PlaceInventoryQuery) Aggregate(fns ...AggregateFunc) *PlaceInventorySelect {
	return piq.Select().Aggregate(fns...)
}

func (piq *PlaceInventoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range piq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, piq); err != nil {
				return err
			}
		}
	}
	for _, f := range piq.ctx.Fields {
		if !placeinventory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if piq.path != nil {
		prev, err := piq.path(ctx)
		if err != nil {
			return err
		}
		piq.sql = prev
	}
	return nil
}

func (piq *PlaceInventoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlaceInventory, error) {
	var (
		nodes       = []*PlaceInventory{}
		withFKs     = piq.withFKs
		_spec       = piq.querySpec()
		loadedTypes = [6]bool{
			piq.withPlace != nil,
			piq.withInventoryType != nil,
			piq.withAttributes != nil,
			piq.withMedia != nil,
			piq.withTransactionHistories != nil,
			piq.withReservationBlocks != nil,
		}
	)
	if piq.withPlace != nil || piq.withInventoryType != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, placeinventory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlaceInventory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlaceInventory{config: piq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, piq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := piq.withPlace; query != nil {
		if err := piq.loadPlace(ctx, query, nodes, nil,
			func(n *PlaceInventory, e *Place) { n.Edges.Place = e }); err != nil {
			return nil, err
		}
	}
	if query := piq.withInventoryType; query != nil {
		if err := piq.loadInventoryType(ctx, query, nodes, nil,
			func(n *PlaceInventory, e *InventoryType) { n.Edges.InventoryType = e }); err != nil {
			return nil, err
		}
	}
	if query := piq.withAttributes; query != nil {
		if err := piq.loadAttributes(ctx, query, nodes,
			func(n *PlaceInventory) { n.Edges.Attributes = []*PlaceInventoryAttribute{} },
			func(n *PlaceInventory, e *PlaceInventoryAttribute) {
				n.Edges.Attributes = append(n.Edges.Attributes, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := piq.withMedia; query != nil {
		if err := piq.loadMedia(ctx, query, nodes,
			func(n *PlaceInventory) { n.Edges.Media = []*Media{} },
			func(n *PlaceInventory, e *Media) { n.Edges.Media = append(n.Edges.Media, e) }); err != nil {
			return nil, err
		}
	}
	if query := piq.withTransactionHistories; query != nil {
		if err := piq.loadTransactionHistories(ctx, query, nodes,
			func(n *PlaceInventory) { n.Edges.TransactionHistories = []*TransactionHistory{} },
			func(n *PlaceInventory, e *TransactionHistory) {
				n.Edges.TransactionHistories = append(n.Edges.TransactionHistories, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := piq.withReservationBlocks; query != nil {
		if err := piq.loadReservationBlocks(ctx, query, nodes,
			func(n *PlaceInventory) { n.Edges.ReservationBlocks = []*ReservationBlock{} },
			func(n *PlaceInventory, e *ReservationBlock) {
				n.Edges.ReservationBlocks = append(n.Edges.ReservationBlocks, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (piq *PlaceInventoryQuery) loadPlace(ctx context.Context, query *PlaceQuery, nodes []*PlaceInventory, init func(*PlaceInventory), assign func(*PlaceInventory, *Place)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PlaceInventory)
	for i := range nodes {
		if nodes[i].place_inventories == nil {
			continue
		}
		fk := *nodes[i].place_inventories
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(place.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "place_inventories" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (piq *PlaceInventoryQuery) loadInventoryType(ctx context.Context, query *InventoryTypeQuery, nodes []*PlaceInventory, init func(*PlaceInventory), assign func(*PlaceInventory, *InventoryType)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*PlaceInventory)
	for i := range nodes {
		if nodes[i].inventory_type_place_inventories == nil {
			continue
		}
		fk := *nodes[i].inventory_type_place_inventories
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(inventorytype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "inventory_type_place_inventories" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (piq *PlaceInventoryQuery) loadAttributes(ctx context.Context, query *PlaceInventoryAttributeQuery, nodes []*PlaceInventory, init func(*PlaceInventory), assign func(*PlaceInventory, *PlaceInventoryAttribute)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*PlaceInventory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlaceInventoryAttribute(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(placeinventory.AttributesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_inventory_attributes
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_inventory_attributes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_inventory_attributes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (piq *PlaceInventoryQuery) loadMedia(ctx context.Context, query *MediaQuery, nodes []*PlaceInventory, init func(*PlaceInventory), assign func(*PlaceInventory, *Media)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*PlaceInventory)
	nids := make(map[string]map[*PlaceInventory]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(placeinventory.MediaTable)
		s.Join(joinT).On(s.C(media.FieldID), joinT.C(placeinventory.MediaPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(placeinventory.MediaPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(placeinventory.MediaPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*PlaceInventory]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Media](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "media" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (piq *PlaceInventoryQuery) loadTransactionHistories(ctx context.Context, query *TransactionHistoryQuery, nodes []*PlaceInventory, init func(*PlaceInventory), assign func(*PlaceInventory, *TransactionHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*PlaceInventory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TransactionHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(placeinventory.TransactionHistoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_inventory_transaction_histories
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_inventory_transaction_histories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_inventory_transaction_histories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (piq *PlaceInventoryQuery) loadReservationBlocks(ctx context.Context, query *ReservationBlockQuery, nodes []*PlaceInventory, init func(*PlaceInventory), assign func(*PlaceInventory, *ReservationBlock)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*PlaceInventory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReservationBlock(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(placeinventory.ReservationBlocksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.place_inventory_reservation_blocks
		if fk == nil {
			return fmt.Errorf(`foreign-key "place_inventory_reservation_blocks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "place_inventory_reservation_blocks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (piq *PlaceInventoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := piq.querySpec()
	_spec.Node.Columns = piq.ctx.Fields
	if len(piq.ctx.Fields) > 0 {
		_spec.Unique = piq.ctx.Unique != nil && *piq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, piq.driver, _spec)
}

func (piq *PlaceInventoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(placeinventory.Table, placeinventory.Columns, sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString))
	_spec.From = piq.sql
	if unique := piq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if piq.path != nil {
		_spec.Unique = true
	}
	if fields := piq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, placeinventory.FieldID)
		for i := range fields {
			if fields[i] != placeinventory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := piq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := piq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := piq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := piq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (piq *PlaceInventoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(piq.driver.Dialect())
	t1 := builder.Table(placeinventory.Table)
	columns := piq.ctx.Fields
	if len(columns) == 0 {
		columns = placeinventory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if piq.sql != nil {
		selector = piq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if piq.ctx.Unique != nil && *piq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range piq.predicates {
		p(selector)
	}
	for _, p := range piq.order {
		p(selector)
	}
	if offset := piq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := piq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlaceInventoryGroupBy is the group-by builder for PlaceInventory entities.
type PlaceInventoryGroupBy struct {
	selector
	build *PlaceInventoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pigb *PlaceInventoryGroupBy) Aggregate(fns ...AggregateFunc) *PlaceInventoryGroupBy {
	pigb.fns = append(pigb.fns, fns...)
	return pigb
}

// Scan applies the selector query and scans the result into the given value.
func (pigb *PlaceInventoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pigb.build.ctx, "GroupBy")
	if err := pigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceInventoryQuery, *PlaceInventoryGroupBy](ctx, pigb.build, pigb, pigb.build.inters, v)
}

func (pigb *PlaceInventoryGroupBy) sqlScan(ctx context.Context, root *PlaceInventoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pigb.fns))
	for _, fn := range pigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pigb.flds)+len(pigb.fns))
		for _, f := range *pigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaceInventorySelect is the builder for selecting fields of PlaceInventory entities.
type PlaceInventorySelect struct {
	*PlaceInventoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pis *PlaceInventorySelect) Aggregate(fns ...AggregateFunc) *PlaceInventorySelect {
	pis.fns = append(pis.fns, fns...)
	return pis
}

// Scan applies the selector query and scans the result into the given value.
func (pis *PlaceInventorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pis.ctx, "Select")
	if err := pis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaceInventoryQuery, *PlaceInventorySelect](ctx, pis.PlaceInventoryQuery, pis, pis.inters, v)
}

func (pis *PlaceInventorySelect) sqlScan(ctx context.Context, root *PlaceInventoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pis.fns))
	for _, fn := range pis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

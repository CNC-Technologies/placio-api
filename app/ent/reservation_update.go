// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/reservation"
	"placio-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReservationUpdate is the builder for updating Reservation entities.
type ReservationUpdate struct {
	config
	hooks    []Hook
	mutation *ReservationMutation
}

// Where appends a list predicates to the ReservationUpdate builder.
func (ru *ReservationUpdate) Where(ps ...predicate.Reservation) *ReservationUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetDate sets the "date" field.
func (ru *ReservationUpdate) SetDate(t time.Time) *ReservationUpdate {
	ru.mutation.SetDate(t)
	return ru
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableDate(t *time.Time) *ReservationUpdate {
	if t != nil {
		ru.SetDate(*t)
	}
	return ru
}

// SetTime sets the "time" field.
func (ru *ReservationUpdate) SetTime(t time.Time) *ReservationUpdate {
	ru.mutation.SetTime(t)
	return ru
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableTime(t *time.Time) *ReservationUpdate {
	if t != nil {
		ru.SetTime(*t)
	}
	return ru
}

// SetNumberOfPeople sets the "numberOfPeople" field.
func (ru *ReservationUpdate) SetNumberOfPeople(i int) *ReservationUpdate {
	ru.mutation.ResetNumberOfPeople()
	ru.mutation.SetNumberOfPeople(i)
	return ru
}

// SetNillableNumberOfPeople sets the "numberOfPeople" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableNumberOfPeople(i *int) *ReservationUpdate {
	if i != nil {
		ru.SetNumberOfPeople(*i)
	}
	return ru
}

// AddNumberOfPeople adds i to the "numberOfPeople" field.
func (ru *ReservationUpdate) AddNumberOfPeople(i int) *ReservationUpdate {
	ru.mutation.AddNumberOfPeople(i)
	return ru
}

// SetStatus sets the "status" field.
func (ru *ReservationUpdate) SetStatus(s string) *ReservationUpdate {
	ru.mutation.SetStatus(s)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ReservationUpdate) SetNillableStatus(s *string) *ReservationUpdate {
	if s != nil {
		ru.SetStatus(*s)
	}
	return ru
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ru *ReservationUpdate) SetPlaceID(id string) *ReservationUpdate {
	ru.mutation.SetPlaceID(id)
	return ru
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ru *ReservationUpdate) SetNillablePlaceID(id *string) *ReservationUpdate {
	if id != nil {
		ru = ru.SetPlaceID(*id)
	}
	return ru
}

// SetPlace sets the "place" edge to the Place entity.
func (ru *ReservationUpdate) SetPlace(p *Place) *ReservationUpdate {
	return ru.SetPlaceID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *ReservationUpdate) SetUserID(id string) *ReservationUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ru *ReservationUpdate) SetNillableUserID(id *string) *ReservationUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *ReservationUpdate) SetUser(u *User) *ReservationUpdate {
	return ru.SetUserID(u.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (ru *ReservationUpdate) Mutation() *ReservationMutation {
	return ru.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (ru *ReservationUpdate) ClearPlace() *ReservationUpdate {
	ru.mutation.ClearPlace()
	return ru
}

// ClearUser clears the "user" edge to the User entity.
func (ru *ReservationUpdate) ClearUser() *ReservationUpdate {
	ru.mutation.ClearUser()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReservationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReservationUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReservationUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReservationUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReservationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reservation.Table, reservation.Columns, sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Date(); ok {
		_spec.SetField(reservation.FieldDate, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Time(); ok {
		_spec.SetField(reservation.FieldTime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.NumberOfPeople(); ok {
		_spec.SetField(reservation.FieldNumberOfPeople, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedNumberOfPeople(); ok {
		_spec.AddField(reservation.FieldNumberOfPeople, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(reservation.FieldStatus, field.TypeString, value)
	}
	if ru.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.PlaceTable,
			Columns: []string{reservation.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.PlaceTable,
			Columns: []string{reservation.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.UserTable,
			Columns: []string{reservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.UserTable,
			Columns: []string{reservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReservationUpdateOne is the builder for updating a single Reservation entity.
type ReservationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReservationMutation
}

// SetDate sets the "date" field.
func (ruo *ReservationUpdateOne) SetDate(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetDate(t)
	return ruo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableDate(t *time.Time) *ReservationUpdateOne {
	if t != nil {
		ruo.SetDate(*t)
	}
	return ruo
}

// SetTime sets the "time" field.
func (ruo *ReservationUpdateOne) SetTime(t time.Time) *ReservationUpdateOne {
	ruo.mutation.SetTime(t)
	return ruo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableTime(t *time.Time) *ReservationUpdateOne {
	if t != nil {
		ruo.SetTime(*t)
	}
	return ruo
}

// SetNumberOfPeople sets the "numberOfPeople" field.
func (ruo *ReservationUpdateOne) SetNumberOfPeople(i int) *ReservationUpdateOne {
	ruo.mutation.ResetNumberOfPeople()
	ruo.mutation.SetNumberOfPeople(i)
	return ruo
}

// SetNillableNumberOfPeople sets the "numberOfPeople" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableNumberOfPeople(i *int) *ReservationUpdateOne {
	if i != nil {
		ruo.SetNumberOfPeople(*i)
	}
	return ruo
}

// AddNumberOfPeople adds i to the "numberOfPeople" field.
func (ruo *ReservationUpdateOne) AddNumberOfPeople(i int) *ReservationUpdateOne {
	ruo.mutation.AddNumberOfPeople(i)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ReservationUpdateOne) SetStatus(s string) *ReservationUpdateOne {
	ruo.mutation.SetStatus(s)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableStatus(s *string) *ReservationUpdateOne {
	if s != nil {
		ruo.SetStatus(*s)
	}
	return ruo
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ruo *ReservationUpdateOne) SetPlaceID(id string) *ReservationUpdateOne {
	ruo.mutation.SetPlaceID(id)
	return ruo
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillablePlaceID(id *string) *ReservationUpdateOne {
	if id != nil {
		ruo = ruo.SetPlaceID(*id)
	}
	return ruo
}

// SetPlace sets the "place" edge to the Place entity.
func (ruo *ReservationUpdateOne) SetPlace(p *Place) *ReservationUpdateOne {
	return ruo.SetPlaceID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *ReservationUpdateOne) SetUserID(id string) *ReservationUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ruo *ReservationUpdateOne) SetNillableUserID(id *string) *ReservationUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *ReservationUpdateOne) SetUser(u *User) *ReservationUpdateOne {
	return ruo.SetUserID(u.ID)
}

// Mutation returns the ReservationMutation object of the builder.
func (ruo *ReservationUpdateOne) Mutation() *ReservationMutation {
	return ruo.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (ruo *ReservationUpdateOne) ClearPlace() *ReservationUpdateOne {
	ruo.mutation.ClearPlace()
	return ruo
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *ReservationUpdateOne) ClearUser() *ReservationUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// Where appends a list predicates to the ReservationUpdate builder.
func (ruo *ReservationUpdateOne) Where(ps ...predicate.Reservation) *ReservationUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReservationUpdateOne) Select(field string, fields ...string) *ReservationUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reservation entity.
func (ruo *ReservationUpdateOne) Save(ctx context.Context) (*Reservation, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReservationUpdateOne) SaveX(ctx context.Context) *Reservation {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReservationUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReservationUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReservationUpdateOne) sqlSave(ctx context.Context) (_node *Reservation, err error) {
	_spec := sqlgraph.NewUpdateSpec(reservation.Table, reservation.Columns, sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reservation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reservation.FieldID)
		for _, f := range fields {
			if !reservation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reservation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Date(); ok {
		_spec.SetField(reservation.FieldDate, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Time(); ok {
		_spec.SetField(reservation.FieldTime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.NumberOfPeople(); ok {
		_spec.SetField(reservation.FieldNumberOfPeople, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedNumberOfPeople(); ok {
		_spec.AddField(reservation.FieldNumberOfPeople, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(reservation.FieldStatus, field.TypeString, value)
	}
	if ruo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.PlaceTable,
			Columns: []string{reservation.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.PlaceTable,
			Columns: []string{reservation.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.UserTable,
			Columns: []string{reservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reservation.UserTable,
			Columns: []string{reservation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reservation{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reservation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

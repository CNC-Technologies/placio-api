// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/amenity"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/room"
	"placio-app/ent/roomcategory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AmenityUpdate is the builder for updating Amenity entities.
type AmenityUpdate struct {
	config
	hooks    []Hook
	mutation *AmenityMutation
}

// Where appends a list predicates to the AmenityUpdate builder.
func (au *AmenityUpdate) Where(ps ...predicate.Amenity) *AmenityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *AmenityUpdate) SetName(s string) *AmenityUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AmenityUpdate) SetNillableName(s *string) *AmenityUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetIcon sets the "icon" field.
func (au *AmenityUpdate) SetIcon(s string) *AmenityUpdate {
	au.mutation.SetIcon(s)
	return au
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (au *AmenityUpdate) SetNillableIcon(s *string) *AmenityUpdate {
	if s != nil {
		au.SetIcon(*s)
	}
	return au
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (au *AmenityUpdate) AddPlaceIDs(ids ...string) *AmenityUpdate {
	au.mutation.AddPlaceIDs(ids...)
	return au
}

// AddPlaces adds the "places" edges to the Place entity.
func (au *AmenityUpdate) AddPlaces(p ...*Place) *AmenityUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPlaceIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (au *AmenityUpdate) AddRoomIDs(ids ...string) *AmenityUpdate {
	au.mutation.AddRoomIDs(ids...)
	return au
}

// AddRooms adds the "rooms" edges to the Room entity.
func (au *AmenityUpdate) AddRooms(r ...*Room) *AmenityUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoomIDs(ids...)
}

// AddRoomCategoryIDs adds the "room_categories" edge to the RoomCategory entity by IDs.
func (au *AmenityUpdate) AddRoomCategoryIDs(ids ...string) *AmenityUpdate {
	au.mutation.AddRoomCategoryIDs(ids...)
	return au
}

// AddRoomCategories adds the "room_categories" edges to the RoomCategory entity.
func (au *AmenityUpdate) AddRoomCategories(r ...*RoomCategory) *AmenityUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddRoomCategoryIDs(ids...)
}

// Mutation returns the AmenityMutation object of the builder.
func (au *AmenityUpdate) Mutation() *AmenityMutation {
	return au.mutation
}

// ClearPlaces clears all "places" edges to the Place entity.
func (au *AmenityUpdate) ClearPlaces() *AmenityUpdate {
	au.mutation.ClearPlaces()
	return au
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (au *AmenityUpdate) RemovePlaceIDs(ids ...string) *AmenityUpdate {
	au.mutation.RemovePlaceIDs(ids...)
	return au
}

// RemovePlaces removes "places" edges to Place entities.
func (au *AmenityUpdate) RemovePlaces(p ...*Place) *AmenityUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePlaceIDs(ids...)
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (au *AmenityUpdate) ClearRooms() *AmenityUpdate {
	au.mutation.ClearRooms()
	return au
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (au *AmenityUpdate) RemoveRoomIDs(ids ...string) *AmenityUpdate {
	au.mutation.RemoveRoomIDs(ids...)
	return au
}

// RemoveRooms removes "rooms" edges to Room entities.
func (au *AmenityUpdate) RemoveRooms(r ...*Room) *AmenityUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoomIDs(ids...)
}

// ClearRoomCategories clears all "room_categories" edges to the RoomCategory entity.
func (au *AmenityUpdate) ClearRoomCategories() *AmenityUpdate {
	au.mutation.ClearRoomCategories()
	return au
}

// RemoveRoomCategoryIDs removes the "room_categories" edge to RoomCategory entities by IDs.
func (au *AmenityUpdate) RemoveRoomCategoryIDs(ids ...string) *AmenityUpdate {
	au.mutation.RemoveRoomCategoryIDs(ids...)
	return au
}

// RemoveRoomCategories removes "room_categories" edges to RoomCategory entities.
func (au *AmenityUpdate) RemoveRoomCategories(r ...*RoomCategory) *AmenityUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveRoomCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AmenityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AmenityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AmenityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AmenityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AmenityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(amenity.Table, amenity.Columns, sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(amenity.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Icon(); ok {
		_spec.SetField(amenity.FieldIcon, field.TypeString, value)
	}
	if au.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   amenity.PlacesTable,
			Columns: amenity.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !au.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   amenity.PlacesTable,
			Columns: amenity.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   amenity.PlacesTable,
			Columns: amenity.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomsTable,
			Columns: amenity.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !au.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomsTable,
			Columns: amenity.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomsTable,
			Columns: amenity.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RoomCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomCategoriesTable,
			Columns: amenity.RoomCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedRoomCategoriesIDs(); len(nodes) > 0 && !au.mutation.RoomCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomCategoriesTable,
			Columns: amenity.RoomCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RoomCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomCategoriesTable,
			Columns: amenity.RoomCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amenity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AmenityUpdateOne is the builder for updating a single Amenity entity.
type AmenityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AmenityMutation
}

// SetName sets the "name" field.
func (auo *AmenityUpdateOne) SetName(s string) *AmenityUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AmenityUpdateOne) SetNillableName(s *string) *AmenityUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetIcon sets the "icon" field.
func (auo *AmenityUpdateOne) SetIcon(s string) *AmenityUpdateOne {
	auo.mutation.SetIcon(s)
	return auo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (auo *AmenityUpdateOne) SetNillableIcon(s *string) *AmenityUpdateOne {
	if s != nil {
		auo.SetIcon(*s)
	}
	return auo
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (auo *AmenityUpdateOne) AddPlaceIDs(ids ...string) *AmenityUpdateOne {
	auo.mutation.AddPlaceIDs(ids...)
	return auo
}

// AddPlaces adds the "places" edges to the Place entity.
func (auo *AmenityUpdateOne) AddPlaces(p ...*Place) *AmenityUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPlaceIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (auo *AmenityUpdateOne) AddRoomIDs(ids ...string) *AmenityUpdateOne {
	auo.mutation.AddRoomIDs(ids...)
	return auo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (auo *AmenityUpdateOne) AddRooms(r ...*Room) *AmenityUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoomIDs(ids...)
}

// AddRoomCategoryIDs adds the "room_categories" edge to the RoomCategory entity by IDs.
func (auo *AmenityUpdateOne) AddRoomCategoryIDs(ids ...string) *AmenityUpdateOne {
	auo.mutation.AddRoomCategoryIDs(ids...)
	return auo
}

// AddRoomCategories adds the "room_categories" edges to the RoomCategory entity.
func (auo *AmenityUpdateOne) AddRoomCategories(r ...*RoomCategory) *AmenityUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddRoomCategoryIDs(ids...)
}

// Mutation returns the AmenityMutation object of the builder.
func (auo *AmenityUpdateOne) Mutation() *AmenityMutation {
	return auo.mutation
}

// ClearPlaces clears all "places" edges to the Place entity.
func (auo *AmenityUpdateOne) ClearPlaces() *AmenityUpdateOne {
	auo.mutation.ClearPlaces()
	return auo
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (auo *AmenityUpdateOne) RemovePlaceIDs(ids ...string) *AmenityUpdateOne {
	auo.mutation.RemovePlaceIDs(ids...)
	return auo
}

// RemovePlaces removes "places" edges to Place entities.
func (auo *AmenityUpdateOne) RemovePlaces(p ...*Place) *AmenityUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePlaceIDs(ids...)
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (auo *AmenityUpdateOne) ClearRooms() *AmenityUpdateOne {
	auo.mutation.ClearRooms()
	return auo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (auo *AmenityUpdateOne) RemoveRoomIDs(ids ...string) *AmenityUpdateOne {
	auo.mutation.RemoveRoomIDs(ids...)
	return auo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (auo *AmenityUpdateOne) RemoveRooms(r ...*Room) *AmenityUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoomIDs(ids...)
}

// ClearRoomCategories clears all "room_categories" edges to the RoomCategory entity.
func (auo *AmenityUpdateOne) ClearRoomCategories() *AmenityUpdateOne {
	auo.mutation.ClearRoomCategories()
	return auo
}

// RemoveRoomCategoryIDs removes the "room_categories" edge to RoomCategory entities by IDs.
func (auo *AmenityUpdateOne) RemoveRoomCategoryIDs(ids ...string) *AmenityUpdateOne {
	auo.mutation.RemoveRoomCategoryIDs(ids...)
	return auo
}

// RemoveRoomCategories removes "room_categories" edges to RoomCategory entities.
func (auo *AmenityUpdateOne) RemoveRoomCategories(r ...*RoomCategory) *AmenityUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveRoomCategoryIDs(ids...)
}

// Where appends a list predicates to the AmenityUpdate builder.
func (auo *AmenityUpdateOne) Where(ps ...predicate.Amenity) *AmenityUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AmenityUpdateOne) Select(field string, fields ...string) *AmenityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Amenity entity.
func (auo *AmenityUpdateOne) Save(ctx context.Context) (*Amenity, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AmenityUpdateOne) SaveX(ctx context.Context) *Amenity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AmenityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AmenityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AmenityUpdateOne) sqlSave(ctx context.Context) (_node *Amenity, err error) {
	_spec := sqlgraph.NewUpdateSpec(amenity.Table, amenity.Columns, sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Amenity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, amenity.FieldID)
		for _, f := range fields {
			if !amenity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != amenity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(amenity.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Icon(); ok {
		_spec.SetField(amenity.FieldIcon, field.TypeString, value)
	}
	if auo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   amenity.PlacesTable,
			Columns: amenity.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !auo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   amenity.PlacesTable,
			Columns: amenity.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   amenity.PlacesTable,
			Columns: amenity.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomsTable,
			Columns: amenity.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !auo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomsTable,
			Columns: amenity.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomsTable,
			Columns: amenity.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RoomCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomCategoriesTable,
			Columns: amenity.RoomCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedRoomCategoriesIDs(); len(nodes) > 0 && !auo.mutation.RoomCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomCategoriesTable,
			Columns: amenity.RoomCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RoomCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amenity.RoomCategoriesTable,
			Columns: amenity.RoomCategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Amenity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amenity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/amenity"
	"placio-app/ent/booking"
	"placio-app/ent/media"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/reservation"
	"placio-app/ent/room"
	"placio-app/ent/roomcategory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// Where appends a list predicates to the RoomUpdate builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RoomUpdate) SetName(s string) *RoomUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableName(s *string) *RoomUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *RoomUpdate) ClearName() *RoomUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetRoomNumber sets the "room_number" field.
func (ru *RoomUpdate) SetRoomNumber(i int) *RoomUpdate {
	ru.mutation.ResetRoomNumber()
	ru.mutation.SetRoomNumber(i)
	return ru
}

// SetNillableRoomNumber sets the "room_number" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableRoomNumber(i *int) *RoomUpdate {
	if i != nil {
		ru.SetRoomNumber(*i)
	}
	return ru
}

// AddRoomNumber adds i to the "room_number" field.
func (ru *RoomUpdate) AddRoomNumber(i int) *RoomUpdate {
	ru.mutation.AddRoomNumber(i)
	return ru
}

// ClearRoomNumber clears the value of the "room_number" field.
func (ru *RoomUpdate) ClearRoomNumber() *RoomUpdate {
	ru.mutation.ClearRoomNumber()
	return ru
}

// SetRoomType sets the "room_type" field.
func (ru *RoomUpdate) SetRoomType(s string) *RoomUpdate {
	ru.mutation.SetRoomType(s)
	return ru
}

// SetNillableRoomType sets the "room_type" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableRoomType(s *string) *RoomUpdate {
	if s != nil {
		ru.SetRoomType(*s)
	}
	return ru
}

// ClearRoomType clears the value of the "room_type" field.
func (ru *RoomUpdate) ClearRoomType() *RoomUpdate {
	ru.mutation.ClearRoomType()
	return ru
}

// SetRoomStatus sets the "room_status" field.
func (ru *RoomUpdate) SetRoomStatus(s string) *RoomUpdate {
	ru.mutation.SetRoomStatus(s)
	return ru
}

// SetNillableRoomStatus sets the "room_status" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableRoomStatus(s *string) *RoomUpdate {
	if s != nil {
		ru.SetRoomStatus(*s)
	}
	return ru
}

// ClearRoomStatus clears the value of the "room_status" field.
func (ru *RoomUpdate) ClearRoomStatus() *RoomUpdate {
	ru.mutation.ClearRoomStatus()
	return ru
}

// SetRoomRating sets the "room_rating" field.
func (ru *RoomUpdate) SetRoomRating(s string) *RoomUpdate {
	ru.mutation.SetRoomRating(s)
	return ru
}

// SetNillableRoomRating sets the "room_rating" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableRoomRating(s *string) *RoomUpdate {
	if s != nil {
		ru.SetRoomRating(*s)
	}
	return ru
}

// ClearRoomRating clears the value of the "room_rating" field.
func (ru *RoomUpdate) ClearRoomRating() *RoomUpdate {
	ru.mutation.ClearRoomRating()
	return ru
}

// SetRoomPrice sets the "room_price" field.
func (ru *RoomUpdate) SetRoomPrice(f float64) *RoomUpdate {
	ru.mutation.ResetRoomPrice()
	ru.mutation.SetRoomPrice(f)
	return ru
}

// SetNillableRoomPrice sets the "room_price" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableRoomPrice(f *float64) *RoomUpdate {
	if f != nil {
		ru.SetRoomPrice(*f)
	}
	return ru
}

// AddRoomPrice adds f to the "room_price" field.
func (ru *RoomUpdate) AddRoomPrice(f float64) *RoomUpdate {
	ru.mutation.AddRoomPrice(f)
	return ru
}

// ClearRoomPrice clears the value of the "room_price" field.
func (ru *RoomUpdate) ClearRoomPrice() *RoomUpdate {
	ru.mutation.ClearRoomPrice()
	return ru
}

// SetQrCode sets the "qr_code" field.
func (ru *RoomUpdate) SetQrCode(s string) *RoomUpdate {
	ru.mutation.SetQrCode(s)
	return ru
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableQrCode(s *string) *RoomUpdate {
	if s != nil {
		ru.SetQrCode(*s)
	}
	return ru
}

// ClearQrCode clears the value of the "qr_code" field.
func (ru *RoomUpdate) ClearQrCode() *RoomUpdate {
	ru.mutation.ClearQrCode()
	return ru
}

// SetStatus sets the "status" field.
func (ru *RoomUpdate) SetStatus(r room.Status) *RoomUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableStatus(r *room.Status) *RoomUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetExtras sets the "extras" field.
func (ru *RoomUpdate) SetExtras(m map[string]interface{}) *RoomUpdate {
	ru.mutation.SetExtras(m)
	return ru
}

// ClearExtras clears the value of the "extras" field.
func (ru *RoomUpdate) ClearExtras() *RoomUpdate {
	ru.mutation.ClearExtras()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RoomUpdate) SetDescription(s string) *RoomUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableDescription(s *string) *RoomUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RoomUpdate) ClearDescription() *RoomUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetAvailability sets the "availability" field.
func (ru *RoomUpdate) SetAvailability(b bool) *RoomUpdate {
	ru.mutation.SetAvailability(b)
	return ru
}

// SetNillableAvailability sets the "availability" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableAvailability(b *bool) *RoomUpdate {
	if b != nil {
		ru.SetAvailability(*b)
	}
	return ru
}

// SetImage sets the "image" field.
func (ru *RoomUpdate) SetImage(s string) *RoomUpdate {
	ru.mutation.SetImage(s)
	return ru
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ru *RoomUpdate) SetNillableImage(s *string) *RoomUpdate {
	if s != nil {
		ru.SetImage(*s)
	}
	return ru
}

// ClearImage clears the value of the "image" field.
func (ru *RoomUpdate) ClearImage() *RoomUpdate {
	ru.mutation.ClearImage()
	return ru
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (ru *RoomUpdate) AddPlaceIDs(ids ...string) *RoomUpdate {
	ru.mutation.AddPlaceIDs(ids...)
	return ru
}

// AddPlace adds the "place" edges to the Place entity.
func (ru *RoomUpdate) AddPlace(p ...*Place) *RoomUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddPlaceIDs(ids...)
}

// AddRoomCategoryIDs adds the "room_category" edge to the RoomCategory entity by IDs.
func (ru *RoomUpdate) AddRoomCategoryIDs(ids ...string) *RoomUpdate {
	ru.mutation.AddRoomCategoryIDs(ids...)
	return ru
}

// AddRoomCategory adds the "room_category" edges to the RoomCategory entity.
func (ru *RoomUpdate) AddRoomCategory(r ...*RoomCategory) *RoomUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRoomCategoryIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (ru *RoomUpdate) AddBookingIDs(ids ...string) *RoomUpdate {
	ru.mutation.AddBookingIDs(ids...)
	return ru
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (ru *RoomUpdate) AddBookings(b ...*Booking) *RoomUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.AddBookingIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (ru *RoomUpdate) AddAmenityIDs(ids ...string) *RoomUpdate {
	ru.mutation.AddAmenityIDs(ids...)
	return ru
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (ru *RoomUpdate) AddAmenities(a ...*Amenity) *RoomUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddAmenityIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (ru *RoomUpdate) AddMediumIDs(ids ...string) *RoomUpdate {
	ru.mutation.AddMediumIDs(ids...)
	return ru
}

// AddMedia adds the "media" edges to the Media entity.
func (ru *RoomUpdate) AddMedia(m ...*Media) *RoomUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.AddMediumIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (ru *RoomUpdate) AddReservationIDs(ids ...string) *RoomUpdate {
	ru.mutation.AddReservationIDs(ids...)
	return ru
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (ru *RoomUpdate) AddReservations(r ...*Reservation) *RoomUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddReservationIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// ClearPlace clears all "place" edges to the Place entity.
func (ru *RoomUpdate) ClearPlace() *RoomUpdate {
	ru.mutation.ClearPlace()
	return ru
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (ru *RoomUpdate) RemovePlaceIDs(ids ...string) *RoomUpdate {
	ru.mutation.RemovePlaceIDs(ids...)
	return ru
}

// RemovePlace removes "place" edges to Place entities.
func (ru *RoomUpdate) RemovePlace(p ...*Place) *RoomUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemovePlaceIDs(ids...)
}

// ClearRoomCategory clears all "room_category" edges to the RoomCategory entity.
func (ru *RoomUpdate) ClearRoomCategory() *RoomUpdate {
	ru.mutation.ClearRoomCategory()
	return ru
}

// RemoveRoomCategoryIDs removes the "room_category" edge to RoomCategory entities by IDs.
func (ru *RoomUpdate) RemoveRoomCategoryIDs(ids ...string) *RoomUpdate {
	ru.mutation.RemoveRoomCategoryIDs(ids...)
	return ru
}

// RemoveRoomCategory removes "room_category" edges to RoomCategory entities.
func (ru *RoomUpdate) RemoveRoomCategory(r ...*RoomCategory) *RoomUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRoomCategoryIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (ru *RoomUpdate) ClearBookings() *RoomUpdate {
	ru.mutation.ClearBookings()
	return ru
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (ru *RoomUpdate) RemoveBookingIDs(ids ...string) *RoomUpdate {
	ru.mutation.RemoveBookingIDs(ids...)
	return ru
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (ru *RoomUpdate) RemoveBookings(b ...*Booking) *RoomUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.RemoveBookingIDs(ids...)
}

// ClearAmenities clears all "amenities" edges to the Amenity entity.
func (ru *RoomUpdate) ClearAmenities() *RoomUpdate {
	ru.mutation.ClearAmenities()
	return ru
}

// RemoveAmenityIDs removes the "amenities" edge to Amenity entities by IDs.
func (ru *RoomUpdate) RemoveAmenityIDs(ids ...string) *RoomUpdate {
	ru.mutation.RemoveAmenityIDs(ids...)
	return ru
}

// RemoveAmenities removes "amenities" edges to Amenity entities.
func (ru *RoomUpdate) RemoveAmenities(a ...*Amenity) *RoomUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveAmenityIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (ru *RoomUpdate) ClearMedia() *RoomUpdate {
	ru.mutation.ClearMedia()
	return ru
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (ru *RoomUpdate) RemoveMediumIDs(ids ...string) *RoomUpdate {
	ru.mutation.RemoveMediumIDs(ids...)
	return ru
}

// RemoveMedia removes "media" edges to Media entities.
func (ru *RoomUpdate) RemoveMedia(m ...*Media) *RoomUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ru.RemoveMediumIDs(ids...)
}

// ClearReservations clears all "reservations" edges to the Reservation entity.
func (ru *RoomUpdate) ClearReservations() *RoomUpdate {
	ru.mutation.ClearReservations()
	return ru
}

// RemoveReservationIDs removes the "reservations" edge to Reservation entities by IDs.
func (ru *RoomUpdate) RemoveReservationIDs(ids ...string) *RoomUpdate {
	ru.mutation.RemoveReservationIDs(ids...)
	return ru
}

// RemoveReservations removes "reservations" edges to Reservation entities.
func (ru *RoomUpdate) RemoveReservations(r ...*Reservation) *RoomUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveReservationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoomUpdate) check() error {
	if v, ok := ru.mutation.Status(); ok {
		if err := room.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Room.status": %w`, err)}
		}
	}
	return nil
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(room.FieldName, field.TypeString, value)
	}
	if ru.mutation.NameCleared() {
		_spec.ClearField(room.FieldName, field.TypeString)
	}
	if value, ok := ru.mutation.RoomNumber(); ok {
		_spec.SetField(room.FieldRoomNumber, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedRoomNumber(); ok {
		_spec.AddField(room.FieldRoomNumber, field.TypeInt, value)
	}
	if ru.mutation.RoomNumberCleared() {
		_spec.ClearField(room.FieldRoomNumber, field.TypeInt)
	}
	if value, ok := ru.mutation.RoomType(); ok {
		_spec.SetField(room.FieldRoomType, field.TypeString, value)
	}
	if ru.mutation.RoomTypeCleared() {
		_spec.ClearField(room.FieldRoomType, field.TypeString)
	}
	if value, ok := ru.mutation.RoomStatus(); ok {
		_spec.SetField(room.FieldRoomStatus, field.TypeString, value)
	}
	if ru.mutation.RoomStatusCleared() {
		_spec.ClearField(room.FieldRoomStatus, field.TypeString)
	}
	if value, ok := ru.mutation.RoomRating(); ok {
		_spec.SetField(room.FieldRoomRating, field.TypeString, value)
	}
	if ru.mutation.RoomRatingCleared() {
		_spec.ClearField(room.FieldRoomRating, field.TypeString)
	}
	if value, ok := ru.mutation.RoomPrice(); ok {
		_spec.SetField(room.FieldRoomPrice, field.TypeFloat64, value)
	}
	if value, ok := ru.mutation.AddedRoomPrice(); ok {
		_spec.AddField(room.FieldRoomPrice, field.TypeFloat64, value)
	}
	if ru.mutation.RoomPriceCleared() {
		_spec.ClearField(room.FieldRoomPrice, field.TypeFloat64)
	}
	if value, ok := ru.mutation.QrCode(); ok {
		_spec.SetField(room.FieldQrCode, field.TypeString, value)
	}
	if ru.mutation.QrCodeCleared() {
		_spec.ClearField(room.FieldQrCode, field.TypeString)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(room.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.Extras(); ok {
		_spec.SetField(room.FieldExtras, field.TypeJSON, value)
	}
	if ru.mutation.ExtrasCleared() {
		_spec.ClearField(room.FieldExtras, field.TypeJSON)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(room.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(room.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Availability(); ok {
		_spec.SetField(room.FieldAvailability, field.TypeBool, value)
	}
	if value, ok := ru.mutation.Image(); ok {
		_spec.SetField(room.FieldImage, field.TypeString, value)
	}
	if ru.mutation.ImageCleared() {
		_spec.ClearField(room.FieldImage, field.TypeString)
	}
	if ru.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.PlaceTable,
			Columns: room.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !ru.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.PlaceTable,
			Columns: room.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.PlaceTable,
			Columns: room.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RoomCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.RoomCategoryTable,
			Columns: room.RoomCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRoomCategoryIDs(); len(nodes) > 0 && !ru.mutation.RoomCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.RoomCategoryTable,
			Columns: room.RoomCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoomCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.RoomCategoryTable,
			Columns: room.RoomCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.BookingsTable,
			Columns: []string{room.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !ru.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.BookingsTable,
			Columns: []string{room.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.BookingsTable,
			Columns: []string{room.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AmenitiesTable,
			Columns: room.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAmenitiesIDs(); len(nodes) > 0 && !ru.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AmenitiesTable,
			Columns: room.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AmenitiesTable,
			Columns: room.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.MediaTable,
			Columns: room.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMediaIDs(); len(nodes) > 0 && !ru.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.MediaTable,
			Columns: room.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.MediaTable,
			Columns: room.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ReservationsTable,
			Columns: []string{room.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedReservationsIDs(); len(nodes) > 0 && !ru.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ReservationsTable,
			Columns: []string{room.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ReservationsTable,
			Columns: []string{room.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomMutation
}

// SetName sets the "name" field.
func (ruo *RoomUpdateOne) SetName(s string) *RoomUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableName(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *RoomUpdateOne) ClearName() *RoomUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetRoomNumber sets the "room_number" field.
func (ruo *RoomUpdateOne) SetRoomNumber(i int) *RoomUpdateOne {
	ruo.mutation.ResetRoomNumber()
	ruo.mutation.SetRoomNumber(i)
	return ruo
}

// SetNillableRoomNumber sets the "room_number" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableRoomNumber(i *int) *RoomUpdateOne {
	if i != nil {
		ruo.SetRoomNumber(*i)
	}
	return ruo
}

// AddRoomNumber adds i to the "room_number" field.
func (ruo *RoomUpdateOne) AddRoomNumber(i int) *RoomUpdateOne {
	ruo.mutation.AddRoomNumber(i)
	return ruo
}

// ClearRoomNumber clears the value of the "room_number" field.
func (ruo *RoomUpdateOne) ClearRoomNumber() *RoomUpdateOne {
	ruo.mutation.ClearRoomNumber()
	return ruo
}

// SetRoomType sets the "room_type" field.
func (ruo *RoomUpdateOne) SetRoomType(s string) *RoomUpdateOne {
	ruo.mutation.SetRoomType(s)
	return ruo
}

// SetNillableRoomType sets the "room_type" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableRoomType(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetRoomType(*s)
	}
	return ruo
}

// ClearRoomType clears the value of the "room_type" field.
func (ruo *RoomUpdateOne) ClearRoomType() *RoomUpdateOne {
	ruo.mutation.ClearRoomType()
	return ruo
}

// SetRoomStatus sets the "room_status" field.
func (ruo *RoomUpdateOne) SetRoomStatus(s string) *RoomUpdateOne {
	ruo.mutation.SetRoomStatus(s)
	return ruo
}

// SetNillableRoomStatus sets the "room_status" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableRoomStatus(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetRoomStatus(*s)
	}
	return ruo
}

// ClearRoomStatus clears the value of the "room_status" field.
func (ruo *RoomUpdateOne) ClearRoomStatus() *RoomUpdateOne {
	ruo.mutation.ClearRoomStatus()
	return ruo
}

// SetRoomRating sets the "room_rating" field.
func (ruo *RoomUpdateOne) SetRoomRating(s string) *RoomUpdateOne {
	ruo.mutation.SetRoomRating(s)
	return ruo
}

// SetNillableRoomRating sets the "room_rating" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableRoomRating(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetRoomRating(*s)
	}
	return ruo
}

// ClearRoomRating clears the value of the "room_rating" field.
func (ruo *RoomUpdateOne) ClearRoomRating() *RoomUpdateOne {
	ruo.mutation.ClearRoomRating()
	return ruo
}

// SetRoomPrice sets the "room_price" field.
func (ruo *RoomUpdateOne) SetRoomPrice(f float64) *RoomUpdateOne {
	ruo.mutation.ResetRoomPrice()
	ruo.mutation.SetRoomPrice(f)
	return ruo
}

// SetNillableRoomPrice sets the "room_price" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableRoomPrice(f *float64) *RoomUpdateOne {
	if f != nil {
		ruo.SetRoomPrice(*f)
	}
	return ruo
}

// AddRoomPrice adds f to the "room_price" field.
func (ruo *RoomUpdateOne) AddRoomPrice(f float64) *RoomUpdateOne {
	ruo.mutation.AddRoomPrice(f)
	return ruo
}

// ClearRoomPrice clears the value of the "room_price" field.
func (ruo *RoomUpdateOne) ClearRoomPrice() *RoomUpdateOne {
	ruo.mutation.ClearRoomPrice()
	return ruo
}

// SetQrCode sets the "qr_code" field.
func (ruo *RoomUpdateOne) SetQrCode(s string) *RoomUpdateOne {
	ruo.mutation.SetQrCode(s)
	return ruo
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableQrCode(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetQrCode(*s)
	}
	return ruo
}

// ClearQrCode clears the value of the "qr_code" field.
func (ruo *RoomUpdateOne) ClearQrCode() *RoomUpdateOne {
	ruo.mutation.ClearQrCode()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RoomUpdateOne) SetStatus(r room.Status) *RoomUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableStatus(r *room.Status) *RoomUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetExtras sets the "extras" field.
func (ruo *RoomUpdateOne) SetExtras(m map[string]interface{}) *RoomUpdateOne {
	ruo.mutation.SetExtras(m)
	return ruo
}

// ClearExtras clears the value of the "extras" field.
func (ruo *RoomUpdateOne) ClearExtras() *RoomUpdateOne {
	ruo.mutation.ClearExtras()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RoomUpdateOne) SetDescription(s string) *RoomUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableDescription(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RoomUpdateOne) ClearDescription() *RoomUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetAvailability sets the "availability" field.
func (ruo *RoomUpdateOne) SetAvailability(b bool) *RoomUpdateOne {
	ruo.mutation.SetAvailability(b)
	return ruo
}

// SetNillableAvailability sets the "availability" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableAvailability(b *bool) *RoomUpdateOne {
	if b != nil {
		ruo.SetAvailability(*b)
	}
	return ruo
}

// SetImage sets the "image" field.
func (ruo *RoomUpdateOne) SetImage(s string) *RoomUpdateOne {
	ruo.mutation.SetImage(s)
	return ruo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableImage(s *string) *RoomUpdateOne {
	if s != nil {
		ruo.SetImage(*s)
	}
	return ruo
}

// ClearImage clears the value of the "image" field.
func (ruo *RoomUpdateOne) ClearImage() *RoomUpdateOne {
	ruo.mutation.ClearImage()
	return ruo
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (ruo *RoomUpdateOne) AddPlaceIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.AddPlaceIDs(ids...)
	return ruo
}

// AddPlace adds the "place" edges to the Place entity.
func (ruo *RoomUpdateOne) AddPlace(p ...*Place) *RoomUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddPlaceIDs(ids...)
}

// AddRoomCategoryIDs adds the "room_category" edge to the RoomCategory entity by IDs.
func (ruo *RoomUpdateOne) AddRoomCategoryIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.AddRoomCategoryIDs(ids...)
	return ruo
}

// AddRoomCategory adds the "room_category" edges to the RoomCategory entity.
func (ruo *RoomUpdateOne) AddRoomCategory(r ...*RoomCategory) *RoomUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRoomCategoryIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (ruo *RoomUpdateOne) AddBookingIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.AddBookingIDs(ids...)
	return ruo
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (ruo *RoomUpdateOne) AddBookings(b ...*Booking) *RoomUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.AddBookingIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (ruo *RoomUpdateOne) AddAmenityIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.AddAmenityIDs(ids...)
	return ruo
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (ruo *RoomUpdateOne) AddAmenities(a ...*Amenity) *RoomUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddAmenityIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (ruo *RoomUpdateOne) AddMediumIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.AddMediumIDs(ids...)
	return ruo
}

// AddMedia adds the "media" edges to the Media entity.
func (ruo *RoomUpdateOne) AddMedia(m ...*Media) *RoomUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.AddMediumIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (ruo *RoomUpdateOne) AddReservationIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.AddReservationIDs(ids...)
	return ruo
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (ruo *RoomUpdateOne) AddReservations(r ...*Reservation) *RoomUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddReservationIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// ClearPlace clears all "place" edges to the Place entity.
func (ruo *RoomUpdateOne) ClearPlace() *RoomUpdateOne {
	ruo.mutation.ClearPlace()
	return ruo
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (ruo *RoomUpdateOne) RemovePlaceIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.RemovePlaceIDs(ids...)
	return ruo
}

// RemovePlace removes "place" edges to Place entities.
func (ruo *RoomUpdateOne) RemovePlace(p ...*Place) *RoomUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemovePlaceIDs(ids...)
}

// ClearRoomCategory clears all "room_category" edges to the RoomCategory entity.
func (ruo *RoomUpdateOne) ClearRoomCategory() *RoomUpdateOne {
	ruo.mutation.ClearRoomCategory()
	return ruo
}

// RemoveRoomCategoryIDs removes the "room_category" edge to RoomCategory entities by IDs.
func (ruo *RoomUpdateOne) RemoveRoomCategoryIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.RemoveRoomCategoryIDs(ids...)
	return ruo
}

// RemoveRoomCategory removes "room_category" edges to RoomCategory entities.
func (ruo *RoomUpdateOne) RemoveRoomCategory(r ...*RoomCategory) *RoomUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRoomCategoryIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (ruo *RoomUpdateOne) ClearBookings() *RoomUpdateOne {
	ruo.mutation.ClearBookings()
	return ruo
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (ruo *RoomUpdateOne) RemoveBookingIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.RemoveBookingIDs(ids...)
	return ruo
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (ruo *RoomUpdateOne) RemoveBookings(b ...*Booking) *RoomUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.RemoveBookingIDs(ids...)
}

// ClearAmenities clears all "amenities" edges to the Amenity entity.
func (ruo *RoomUpdateOne) ClearAmenities() *RoomUpdateOne {
	ruo.mutation.ClearAmenities()
	return ruo
}

// RemoveAmenityIDs removes the "amenities" edge to Amenity entities by IDs.
func (ruo *RoomUpdateOne) RemoveAmenityIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.RemoveAmenityIDs(ids...)
	return ruo
}

// RemoveAmenities removes "amenities" edges to Amenity entities.
func (ruo *RoomUpdateOne) RemoveAmenities(a ...*Amenity) *RoomUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveAmenityIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (ruo *RoomUpdateOne) ClearMedia() *RoomUpdateOne {
	ruo.mutation.ClearMedia()
	return ruo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (ruo *RoomUpdateOne) RemoveMediumIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.RemoveMediumIDs(ids...)
	return ruo
}

// RemoveMedia removes "media" edges to Media entities.
func (ruo *RoomUpdateOne) RemoveMedia(m ...*Media) *RoomUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ruo.RemoveMediumIDs(ids...)
}

// ClearReservations clears all "reservations" edges to the Reservation entity.
func (ruo *RoomUpdateOne) ClearReservations() *RoomUpdateOne {
	ruo.mutation.ClearReservations()
	return ruo
}

// RemoveReservationIDs removes the "reservations" edge to Reservation entities by IDs.
func (ruo *RoomUpdateOne) RemoveReservationIDs(ids ...string) *RoomUpdateOne {
	ruo.mutation.RemoveReservationIDs(ids...)
	return ruo
}

// RemoveReservations removes "reservations" edges to Reservation entities.
func (ruo *RoomUpdateOne) RemoveReservations(r ...*Reservation) *RoomUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveReservationIDs(ids...)
}

// Where appends a list predicates to the RoomUpdate builder.
func (ruo *RoomUpdateOne) Where(ps ...predicate.Room) *RoomUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoomUpdateOne) Select(field string, fields ...string) *RoomUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Room entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoomUpdateOne) check() error {
	if v, ok := ruo.mutation.Status(); ok {
		if err := room.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Room.status": %w`, err)}
		}
	}
	return nil
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (_node *Room, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(room.Table, room.Columns, sqlgraph.NewFieldSpec(room.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Room.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, room.FieldID)
		for _, f := range fields {
			if !room.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != room.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(room.FieldName, field.TypeString, value)
	}
	if ruo.mutation.NameCleared() {
		_spec.ClearField(room.FieldName, field.TypeString)
	}
	if value, ok := ruo.mutation.RoomNumber(); ok {
		_spec.SetField(room.FieldRoomNumber, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedRoomNumber(); ok {
		_spec.AddField(room.FieldRoomNumber, field.TypeInt, value)
	}
	if ruo.mutation.RoomNumberCleared() {
		_spec.ClearField(room.FieldRoomNumber, field.TypeInt)
	}
	if value, ok := ruo.mutation.RoomType(); ok {
		_spec.SetField(room.FieldRoomType, field.TypeString, value)
	}
	if ruo.mutation.RoomTypeCleared() {
		_spec.ClearField(room.FieldRoomType, field.TypeString)
	}
	if value, ok := ruo.mutation.RoomStatus(); ok {
		_spec.SetField(room.FieldRoomStatus, field.TypeString, value)
	}
	if ruo.mutation.RoomStatusCleared() {
		_spec.ClearField(room.FieldRoomStatus, field.TypeString)
	}
	if value, ok := ruo.mutation.RoomRating(); ok {
		_spec.SetField(room.FieldRoomRating, field.TypeString, value)
	}
	if ruo.mutation.RoomRatingCleared() {
		_spec.ClearField(room.FieldRoomRating, field.TypeString)
	}
	if value, ok := ruo.mutation.RoomPrice(); ok {
		_spec.SetField(room.FieldRoomPrice, field.TypeFloat64, value)
	}
	if value, ok := ruo.mutation.AddedRoomPrice(); ok {
		_spec.AddField(room.FieldRoomPrice, field.TypeFloat64, value)
	}
	if ruo.mutation.RoomPriceCleared() {
		_spec.ClearField(room.FieldRoomPrice, field.TypeFloat64)
	}
	if value, ok := ruo.mutation.QrCode(); ok {
		_spec.SetField(room.FieldQrCode, field.TypeString, value)
	}
	if ruo.mutation.QrCodeCleared() {
		_spec.ClearField(room.FieldQrCode, field.TypeString)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(room.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.Extras(); ok {
		_spec.SetField(room.FieldExtras, field.TypeJSON, value)
	}
	if ruo.mutation.ExtrasCleared() {
		_spec.ClearField(room.FieldExtras, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(room.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(room.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Availability(); ok {
		_spec.SetField(room.FieldAvailability, field.TypeBool, value)
	}
	if value, ok := ruo.mutation.Image(); ok {
		_spec.SetField(room.FieldImage, field.TypeString, value)
	}
	if ruo.mutation.ImageCleared() {
		_spec.ClearField(room.FieldImage, field.TypeString)
	}
	if ruo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.PlaceTable,
			Columns: room.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !ruo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.PlaceTable,
			Columns: room.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.PlaceTable,
			Columns: room.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RoomCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.RoomCategoryTable,
			Columns: room.RoomCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRoomCategoryIDs(); len(nodes) > 0 && !ruo.mutation.RoomCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.RoomCategoryTable,
			Columns: room.RoomCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoomCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   room.RoomCategoryTable,
			Columns: room.RoomCategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.BookingsTable,
			Columns: []string{room.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !ruo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.BookingsTable,
			Columns: []string{room.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.BookingsTable,
			Columns: []string{room.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AmenitiesTable,
			Columns: room.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAmenitiesIDs(); len(nodes) > 0 && !ruo.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AmenitiesTable,
			Columns: room.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.AmenitiesTable,
			Columns: room.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.MediaTable,
			Columns: room.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !ruo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.MediaTable,
			Columns: room.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   room.MediaTable,
			Columns: room.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ReservationsTable,
			Columns: []string{room.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedReservationsIDs(); len(nodes) > 0 && !ruo.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ReservationsTable,
			Columns: []string{room.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ReservationsTable,
			Columns: []string{room.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Room{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}


// Code generated by ent, DO NOT EDIT.



	

package staff




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)



	// ID filters vertices based on their ID field.
	func ID(id string) predicate.Staff {
		return predicate.Staff(sql.FieldEQ(FieldID, id))
	}

	
		
		
		// IDEQ applies the EQ predicate on the ID field.
		func IDEQ(id string) predicate.Staff {
			return predicate.Staff(sql.FieldEQ(FieldID,id))
		}
	
		
		
		// IDNEQ applies the NEQ predicate on the ID field.
		func IDNEQ(id string) predicate.Staff {
			return predicate.Staff(sql.FieldNEQ(FieldID,id))
		}
	
		
		
		// IDIn applies the In predicate on the ID field.
		func IDIn(ids ...string) predicate.Staff {
			return predicate.Staff(sql.FieldIn(FieldID,ids...))
		}
	
		
		
		// IDNotIn applies the NotIn predicate on the ID field.
		func IDNotIn(ids ...string) predicate.Staff {
			return predicate.Staff(sql.FieldNotIn(FieldID,ids...))
		}
	
		
		
		// IDGT applies the GT predicate on the ID field.
		func IDGT(id string) predicate.Staff {
			return predicate.Staff(sql.FieldGT(FieldID,id))
		}
	
		
		
		// IDGTE applies the GTE predicate on the ID field.
		func IDGTE(id string) predicate.Staff {
			return predicate.Staff(sql.FieldGTE(FieldID,id))
		}
	
		
		
		// IDLT applies the LT predicate on the ID field.
		func IDLT(id string) predicate.Staff {
			return predicate.Staff(sql.FieldLT(FieldID,id))
		}
	
		
		
		// IDLTE applies the LTE predicate on the ID field.
		func IDLTE(id string) predicate.Staff {
			return predicate.Staff(sql.FieldLTE(FieldID,id))
		}
	
		
		
		// IDEqualFold applies the EqualFold predicate on the ID field.
		func IDEqualFold(id string) predicate.Staff {
			return predicate.Staff(sql.FieldEqualFold(FieldID,id))
		}
	
		
		
		// IDContainsFold applies the ContainsFold predicate on the ID field.
		func IDContainsFold(id string) predicate.Staff {
			return predicate.Staff(sql.FieldContainsFold(FieldID,id))
		}
	



	
	
	
	
	
		
		// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
		func Position(v string) predicate.Staff {
				return predicate.Staff(sql.FieldEQ(FieldPosition, v))
		}



	
		
		
		
		
		// PositionEQ applies the EQ predicate on the "position" field.
		func PositionEQ(v string) predicate.Staff {
				return predicate.Staff(sql.FieldEQ(FieldPosition, v))
		}
	
		
		
		
		
		// PositionNEQ applies the NEQ predicate on the "position" field.
		func PositionNEQ(v string) predicate.Staff {
				return predicate.Staff(sql.FieldNEQ(FieldPosition, v))
		}
	
		
		
		
		
		// PositionIn applies the In predicate on the "position" field.
		func PositionIn(vs ...string) predicate.Staff {
				return predicate.Staff(sql.FieldIn(FieldPosition, vs...))
		}
	
		
		
		
		
		// PositionNotIn applies the NotIn predicate on the "position" field.
		func PositionNotIn(vs ...string) predicate.Staff {
				return predicate.Staff(sql.FieldNotIn(FieldPosition, vs...))
		}
	
		
		
		
		
		// PositionGT applies the GT predicate on the "position" field.
		func PositionGT(v string) predicate.Staff {
				return predicate.Staff(sql.FieldGT(FieldPosition, v))
		}
	
		
		
		
		
		// PositionGTE applies the GTE predicate on the "position" field.
		func PositionGTE(v string) predicate.Staff {
				return predicate.Staff(sql.FieldGTE(FieldPosition, v))
		}
	
		
		
		
		
		// PositionLT applies the LT predicate on the "position" field.
		func PositionLT(v string) predicate.Staff {
				return predicate.Staff(sql.FieldLT(FieldPosition, v))
		}
	
		
		
		
		
		// PositionLTE applies the LTE predicate on the "position" field.
		func PositionLTE(v string) predicate.Staff {
				return predicate.Staff(sql.FieldLTE(FieldPosition, v))
		}
	
		
		
		
		
		// PositionContains applies the Contains predicate on the "position" field.
		func PositionContains(v string) predicate.Staff {
				return predicate.Staff(sql.FieldContains(FieldPosition, v))
		}
	
		
		
		
		
		// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
		func PositionHasPrefix(v string) predicate.Staff {
				return predicate.Staff(sql.FieldHasPrefix(FieldPosition, v))
		}
	
		
		
		
		
		// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
		func PositionHasSuffix(v string) predicate.Staff {
				return predicate.Staff(sql.FieldHasSuffix(FieldPosition, v))
		}
	
		
		
		
		
		// PositionIsNil applies the IsNil predicate on the "position" field.
		func PositionIsNil() predicate.Staff {
				return predicate.Staff(sql.FieldIsNull(FieldPosition))
		}
	
		
		
		
		
		// PositionNotNil applies the NotNil predicate on the "position" field.
		func PositionNotNil() predicate.Staff {
				return predicate.Staff(sql.FieldNotNull(FieldPosition))
		}
	
		
		
		
		
		// PositionEqualFold applies the EqualFold predicate on the "position" field.
		func PositionEqualFold(v string) predicate.Staff {
				return predicate.Staff(sql.FieldEqualFold(FieldPosition, v))
		}
	
		
		
		
		
		// PositionContainsFold applies the ContainsFold predicate on the "position" field.
		func PositionContainsFold(v string) predicate.Staff {
				return predicate.Staff(sql.FieldContainsFold(FieldPosition, v))
		}
	



	
	// HasUser applies the HasEdge predicate on the "user" edge.
	func HasUser() predicate.Staff {
		return predicate.Staff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable,UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
	func HasUserWith(preds ...predicate.User) predicate.Staff {
		return predicate.Staff(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}

	
	// HasPlace applies the HasEdge predicate on the "place" edge.
	func HasPlace() predicate.Staff {
		return predicate.Staff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PlaceTable,PlacePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
	func HasPlaceWith(preds ...predicate.Place) predicate.Staff {
		return predicate.Staff(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}

	
	// HasPermissions applies the HasEdge predicate on the "permissions" edge.
	func HasPermissions() predicate.Staff {
		return predicate.Staff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PermissionsTable,PermissionsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasPermissionsWith applies the HasEdge predicate on the "permissions" edge with a given conditions (other predicates).
	func HasPermissionsWith(preds ...predicate.Permission) predicate.Staff {
		return predicate.Staff(func(s *sql.Selector) {
		step := newPermissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}

	
	// HasBusiness applies the HasEdge predicate on the "business" edge.
	func HasBusiness() predicate.Staff {
		return predicate.Staff(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BusinessTable,BusinessPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasBusinessWith applies the HasEdge predicate on the "business" edge with a given conditions (other predicates).
	func HasBusinessWith(preds ...predicate.Business) predicate.Staff {
		return predicate.Staff(func(s *sql.Selector) {
		step := newBusinessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}


// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Staff) predicate.Staff {
	return predicate.Staff(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Staff) predicate.Staff {
	return predicate.Staff(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Staff) predicate.Staff {
	return predicate.Staff(sql.NotPredicates(p))
}






// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio_api/place"
	"placio_api/reservation"
	"placio_api/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Reservation is the model entity for the Reservation schema.
type Reservation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// NumberOfPeople holds the value of the "numberOfPeople" field.
	NumberOfPeople int `json:"numberOfPeople,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReservationQuery when eager-loading is set.
	Edges              ReservationEdges `json:"edges"`
	place_reservations *string
	user_reservations  *string
	selectValues       sql.SelectValues
}

// ReservationEdges holds the relations/edges for other nodes in the graph.
type ReservationEdges struct {
	// Place holds the value of the place edge.
	Place *Place `json:"place,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReservationEdges) PlaceOrErr() (*Place, error) {
	if e.loadedTypes[0] {
		if e.Place == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: place.Label}
		}
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReservationEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reservation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reservation.FieldNumberOfPeople:
			values[i] = new(sql.NullInt64)
		case reservation.FieldID, reservation.FieldStatus:
			values[i] = new(sql.NullString)
		case reservation.FieldDate, reservation.FieldTime:
			values[i] = new(sql.NullTime)
		case reservation.ForeignKeys[0]: // place_reservations
			values[i] = new(sql.NullString)
		case reservation.ForeignKeys[1]: // user_reservations
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reservation fields.
func (r *Reservation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reservation.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case reservation.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				r.Date = value.Time
			}
		case reservation.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				r.Time = value.Time
			}
		case reservation.FieldNumberOfPeople:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field numberOfPeople", values[i])
			} else if value.Valid {
				r.NumberOfPeople = int(value.Int64)
			}
		case reservation.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = value.String
			}
		case reservation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place_reservations", values[i])
			} else if value.Valid {
				r.place_reservations = new(string)
				*r.place_reservations = value.String
			}
		case reservation.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_reservations", values[i])
			} else if value.Valid {
				r.user_reservations = new(string)
				*r.user_reservations = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reservation.
// This includes values selected through modifiers, order, etc.
func (r *Reservation) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryPlace queries the "place" edge of the Reservation entity.
func (r *Reservation) QueryPlace() *PlaceQuery {
	return NewReservationClient(r.config).QueryPlace(r)
}

// QueryUser queries the "user" edge of the Reservation entity.
func (r *Reservation) QueryUser() *UserQuery {
	return NewReservationClient(r.config).QueryUser(r)
}

// Update returns a builder for updating this Reservation.
// Note that you need to call Reservation.Unwrap() before calling this method if this Reservation
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reservation) Update() *ReservationUpdateOne {
	return NewReservationClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reservation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reservation) Unwrap() *Reservation {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("placio_api: Reservation is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reservation) String() string {
	var builder strings.Builder
	builder.WriteString("Reservation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("date=")
	builder.WriteString(r.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(r.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("numberOfPeople=")
	builder.WriteString(fmt.Sprintf("%v", r.NumberOfPeople))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(r.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Reservations is a parsable slice of Reservation.
type Reservations []*Reservation

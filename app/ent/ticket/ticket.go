// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ticket type in the db.
	Label = "ticket"
	// FieldID holds the string denoting the id field in the db.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the db.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the db.
	FieldUpdatedAt = "updated_at"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeTicketOptions holds the string denoting the ticket_options edge name in mutations.
	EdgeTicketOptions = "ticket_options"
	// Table holds the table name of the ticket in the db.
	Table = "tickets"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "tickets"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_tickets"
	// TicketOptionsTable is the table that holds the ticket_options relation/edge.
	TicketOptionsTable = "ticket_options"
	// TicketOptionsInverseTable is the table name for the TicketOption entity.
	// It exists in this package in order to avoid circular dependency with the "ticketoption" package.
	TicketOptionsInverseTable = "ticket_options"
	// TicketOptionsColumn is the table column denoting the ticket_options relation/edge.
	TicketOptionsColumn = "ticket_ticket_options"
)

// Columns holds all SQL columns for ticket fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tickets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_tickets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updatedAt" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Ticket queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByTicketOptionsCount orders the results by ticket_options count.
func ByTicketOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTicketOptionsStep(), opts...)
	}
}

// ByTicketOptions orders the results by ticket_options terms.
func ByTicketOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTicketOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
	)
}
func newTicketOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TicketOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TicketOptionsTable, TicketOptionsColumn),
	)
}

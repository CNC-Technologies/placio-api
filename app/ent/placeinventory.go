// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/inventorytype"
	"placio-app/ent/place"
	"placio-app/ent/placeinventory"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PlaceInventory is the model entity for the PlaceInventory schema.
type PlaceInventory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// StockQuantity holds the value of the "stock_quantity" field.
	StockQuantity int `json:"stock_quantity,omitempty"`
	// MinStockThreshold holds the value of the "min_stock_threshold" field.
	MinStockThreshold int `json:"min_stock_threshold,omitempty"`
	// Sku holds the value of the "sku" field.
	Sku string `json:"sku,omitempty"`
	// ExpiryDate holds the value of the "expiry_date" field.
	ExpiryDate time.Time `json:"expiry_date,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// PurchaseDate holds the value of the "purchase_date" field.
	PurchaseDate time.Time `json:"purchase_date,omitempty"`
	// LastUpdated holds the value of the "last_updated" field.
	LastUpdated time.Time `json:"last_updated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaceInventoryQuery when eager-loading is set.
	Edges                            PlaceInventoryEdges `json:"edges"`
	inventory_type_place_inventories *string
	place_inventories                *string
	selectValues                     sql.SelectValues
}

// PlaceInventoryEdges holds the relations/edges for other nodes in the graph.
type PlaceInventoryEdges struct {
	// Place holds the value of the place edge.
	Place *Place `json:"place,omitempty"`
	// InventoryType holds the value of the inventory_type edge.
	InventoryType *InventoryType `json:"inventory_type,omitempty"`
	// Attributes holds the value of the attributes edge.
	Attributes []*PlaceInventoryAttribute `json:"attributes,omitempty"`
	// Media holds the value of the media edge.
	Media []*Media `json:"media,omitempty"`
	// TransactionHistories holds the value of the transaction_histories edge.
	TransactionHistories []*TransactionHistory `json:"transaction_histories,omitempty"`
	// ReservationBlocks holds the value of the reservation_blocks edge.
	ReservationBlocks []*ReservationBlock `json:"reservation_blocks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaceInventoryEdges) PlaceOrErr() (*Place, error) {
	if e.loadedTypes[0] {
		if e.Place == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: place.Label}
		}
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// InventoryTypeOrErr returns the InventoryType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaceInventoryEdges) InventoryTypeOrErr() (*InventoryType, error) {
	if e.loadedTypes[1] {
		if e.InventoryType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: inventorytype.Label}
		}
		return e.InventoryType, nil
	}
	return nil, &NotLoadedError{edge: "inventory_type"}
}

// AttributesOrErr returns the Attributes value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceInventoryEdges) AttributesOrErr() ([]*PlaceInventoryAttribute, error) {
	if e.loadedTypes[2] {
		return e.Attributes, nil
	}
	return nil, &NotLoadedError{edge: "attributes"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceInventoryEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[3] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// TransactionHistoriesOrErr returns the TransactionHistories value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceInventoryEdges) TransactionHistoriesOrErr() ([]*TransactionHistory, error) {
	if e.loadedTypes[4] {
		return e.TransactionHistories, nil
	}
	return nil, &NotLoadedError{edge: "transaction_histories"}
}

// ReservationBlocksOrErr returns the ReservationBlocks value or an error if the edge
// was not loaded in eager-loading.
func (e PlaceInventoryEdges) ReservationBlocksOrErr() ([]*ReservationBlock, error) {
	if e.loadedTypes[5] {
		return e.ReservationBlocks, nil
	}
	return nil, &NotLoadedError{edge: "reservation_blocks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaceInventory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case placeinventory.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case placeinventory.FieldStockQuantity, placeinventory.FieldMinStockThreshold:
			values[i] = new(sql.NullInt64)
		case placeinventory.FieldID, placeinventory.FieldName, placeinventory.FieldSku, placeinventory.FieldSize, placeinventory.FieldColor, placeinventory.FieldBrand:
			values[i] = new(sql.NullString)
		case placeinventory.FieldExpiryDate, placeinventory.FieldPurchaseDate, placeinventory.FieldLastUpdated:
			values[i] = new(sql.NullTime)
		case placeinventory.ForeignKeys[0]: // inventory_type_place_inventories
			values[i] = new(sql.NullString)
		case placeinventory.ForeignKeys[1]: // place_inventories
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaceInventory fields.
func (pi *PlaceInventory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case placeinventory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pi.ID = value.String
			}
		case placeinventory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pi.Name = value.String
			}
		case placeinventory.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pi.Price = value.Float64
			}
		case placeinventory.FieldStockQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock_quantity", values[i])
			} else if value.Valid {
				pi.StockQuantity = int(value.Int64)
			}
		case placeinventory.FieldMinStockThreshold:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_stock_threshold", values[i])
			} else if value.Valid {
				pi.MinStockThreshold = int(value.Int64)
			}
		case placeinventory.FieldSku:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[i])
			} else if value.Valid {
				pi.Sku = value.String
			}
		case placeinventory.FieldExpiryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry_date", values[i])
			} else if value.Valid {
				pi.ExpiryDate = value.Time
			}
		case placeinventory.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				pi.Size = value.String
			}
		case placeinventory.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				pi.Color = value.String
			}
		case placeinventory.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				pi.Brand = value.String
			}
		case placeinventory.FieldPurchaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field purchase_date", values[i])
			} else if value.Valid {
				pi.PurchaseDate = value.Time
			}
		case placeinventory.FieldLastUpdated:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated", values[i])
			} else if value.Valid {
				pi.LastUpdated = value.Time
			}
		case placeinventory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_type_place_inventories", values[i])
			} else if value.Valid {
				pi.inventory_type_place_inventories = new(string)
				*pi.inventory_type_place_inventories = value.String
			}
		case placeinventory.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place_inventories", values[i])
			} else if value.Valid {
				pi.place_inventories = new(string)
				*pi.place_inventories = value.String
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlaceInventory.
// This includes values selected through modifiers, order, etc.
func (pi *PlaceInventory) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryPlace queries the "place" edge of the PlaceInventory entity.
func (pi *PlaceInventory) QueryPlace() *PlaceQuery {
	return NewPlaceInventoryClient(pi.config).QueryPlace(pi)
}

// QueryInventoryType queries the "inventory_type" edge of the PlaceInventory entity.
func (pi *PlaceInventory) QueryInventoryType() *InventoryTypeQuery {
	return NewPlaceInventoryClient(pi.config).QueryInventoryType(pi)
}

// QueryAttributes queries the "attributes" edge of the PlaceInventory entity.
func (pi *PlaceInventory) QueryAttributes() *PlaceInventoryAttributeQuery {
	return NewPlaceInventoryClient(pi.config).QueryAttributes(pi)
}

// QueryMedia queries the "media" edge of the PlaceInventory entity.
func (pi *PlaceInventory) QueryMedia() *MediaQuery {
	return NewPlaceInventoryClient(pi.config).QueryMedia(pi)
}

// QueryTransactionHistories queries the "transaction_histories" edge of the PlaceInventory entity.
func (pi *PlaceInventory) QueryTransactionHistories() *TransactionHistoryQuery {
	return NewPlaceInventoryClient(pi.config).QueryTransactionHistories(pi)
}

// QueryReservationBlocks queries the "reservation_blocks" edge of the PlaceInventory entity.
func (pi *PlaceInventory) QueryReservationBlocks() *ReservationBlockQuery {
	return NewPlaceInventoryClient(pi.config).QueryReservationBlocks(pi)
}

// Update returns a builder for updating this PlaceInventory.
// Note that you need to call PlaceInventory.Unwrap() before calling this method if this PlaceInventory
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PlaceInventory) Update() *PlaceInventoryUpdateOne {
	return NewPlaceInventoryClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PlaceInventory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PlaceInventory) Unwrap() *PlaceInventory {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaceInventory is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PlaceInventory) String() string {
	var builder strings.Builder
	builder.WriteString("PlaceInventory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("name=")
	builder.WriteString(pi.Name)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pi.Price))
	builder.WriteString(", ")
	builder.WriteString("stock_quantity=")
	builder.WriteString(fmt.Sprintf("%v", pi.StockQuantity))
	builder.WriteString(", ")
	builder.WriteString("min_stock_threshold=")
	builder.WriteString(fmt.Sprintf("%v", pi.MinStockThreshold))
	builder.WriteString(", ")
	builder.WriteString("sku=")
	builder.WriteString(pi.Sku)
	builder.WriteString(", ")
	builder.WriteString("expiry_date=")
	builder.WriteString(pi.ExpiryDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(pi.Size)
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(pi.Color)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(pi.Brand)
	builder.WriteString(", ")
	builder.WriteString("purchase_date=")
	builder.WriteString(pi.PurchaseDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_updated=")
	builder.WriteString(pi.LastUpdated.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PlaceInventories is a parsable slice of PlaceInventory.
type PlaceInventories []*PlaceInventory

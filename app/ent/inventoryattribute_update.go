// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio_api/inventoryattribute"
	"placio_api/inventorytype"
	"placio_api/placeinventoryattribute"
	"placio_api/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryAttributeUpdate is the builder for updating InventoryAttribute entities.
type InventoryAttributeUpdate struct {
	config
	hooks    []Hook
	mutation *InventoryAttributeMutation
}

// Where appends a list predicates to the InventoryAttributeUpdate builder.
func (iau *InventoryAttributeUpdate) Where(ps ...predicate.InventoryAttribute) *InventoryAttributeUpdate {
	iau.mutation.Where(ps...)
	return iau
}

// SetName sets the "name" field.
func (iau *InventoryAttributeUpdate) SetName(s string) *InventoryAttributeUpdate {
	iau.mutation.SetName(s)
	return iau
}

// SetIsMandatory sets the "is_mandatory" field.
func (iau *InventoryAttributeUpdate) SetIsMandatory(b bool) *InventoryAttributeUpdate {
	iau.mutation.SetIsMandatory(b)
	return iau
}

// SetNillableIsMandatory sets the "is_mandatory" field if the given value is not nil.
func (iau *InventoryAttributeUpdate) SetNillableIsMandatory(b *bool) *InventoryAttributeUpdate {
	if b != nil {
		iau.SetIsMandatory(*b)
	}
	return iau
}

// SetDataType sets the "data_type" field.
func (iau *InventoryAttributeUpdate) SetDataType(it inventoryattribute.DataType) *InventoryAttributeUpdate {
	iau.mutation.SetDataType(it)
	return iau
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (iau *InventoryAttributeUpdate) SetNillableDataType(it *inventoryattribute.DataType) *InventoryAttributeUpdate {
	if it != nil {
		iau.SetDataType(*it)
	}
	return iau
}

// ClearDataType clears the value of the "data_type" field.
func (iau *InventoryAttributeUpdate) ClearDataType() *InventoryAttributeUpdate {
	iau.mutation.ClearDataType()
	return iau
}

// SetInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID.
func (iau *InventoryAttributeUpdate) SetInventoryTypeID(id string) *InventoryAttributeUpdate {
	iau.mutation.SetInventoryTypeID(id)
	return iau
}

// SetNillableInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID if the given value is not nil.
func (iau *InventoryAttributeUpdate) SetNillableInventoryTypeID(id *string) *InventoryAttributeUpdate {
	if id != nil {
		iau = iau.SetInventoryTypeID(*id)
	}
	return iau
}

// SetInventoryType sets the "inventory_type" edge to the InventoryType entity.
func (iau *InventoryAttributeUpdate) SetInventoryType(i *InventoryType) *InventoryAttributeUpdate {
	return iau.SetInventoryTypeID(i.ID)
}

// AddPlaceInventoryAttributeIDs adds the "place_inventory_attributes" edge to the PlaceInventoryAttribute entity by IDs.
func (iau *InventoryAttributeUpdate) AddPlaceInventoryAttributeIDs(ids ...string) *InventoryAttributeUpdate {
	iau.mutation.AddPlaceInventoryAttributeIDs(ids...)
	return iau
}

// AddPlaceInventoryAttributes adds the "place_inventory_attributes" edges to the PlaceInventoryAttribute entity.
func (iau *InventoryAttributeUpdate) AddPlaceInventoryAttributes(p ...*PlaceInventoryAttribute) *InventoryAttributeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iau.AddPlaceInventoryAttributeIDs(ids...)
}

// Mutation returns the InventoryAttributeMutation object of the builder.
func (iau *InventoryAttributeUpdate) Mutation() *InventoryAttributeMutation {
	return iau.mutation
}

// ClearInventoryType clears the "inventory_type" edge to the InventoryType entity.
func (iau *InventoryAttributeUpdate) ClearInventoryType() *InventoryAttributeUpdate {
	iau.mutation.ClearInventoryType()
	return iau
}

// ClearPlaceInventoryAttributes clears all "place_inventory_attributes" edges to the PlaceInventoryAttribute entity.
func (iau *InventoryAttributeUpdate) ClearPlaceInventoryAttributes() *InventoryAttributeUpdate {
	iau.mutation.ClearPlaceInventoryAttributes()
	return iau
}

// RemovePlaceInventoryAttributeIDs removes the "place_inventory_attributes" edge to PlaceInventoryAttribute entities by IDs.
func (iau *InventoryAttributeUpdate) RemovePlaceInventoryAttributeIDs(ids ...string) *InventoryAttributeUpdate {
	iau.mutation.RemovePlaceInventoryAttributeIDs(ids...)
	return iau
}

// RemovePlaceInventoryAttributes removes "place_inventory_attributes" edges to PlaceInventoryAttribute entities.
func (iau *InventoryAttributeUpdate) RemovePlaceInventoryAttributes(p ...*PlaceInventoryAttribute) *InventoryAttributeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iau.RemovePlaceInventoryAttributeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iau *InventoryAttributeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iau.sqlSave, iau.mutation, iau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iau *InventoryAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := iau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iau *InventoryAttributeUpdate) Exec(ctx context.Context) error {
	_, err := iau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iau *InventoryAttributeUpdate) ExecX(ctx context.Context) {
	if err := iau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iau *InventoryAttributeUpdate) check() error {
	if v, ok := iau.mutation.DataType(); ok {
		if err := inventoryattribute.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`placio_api: validator failed for field "InventoryAttribute.data_type": %w`, err)}
		}
	}
	return nil
}

func (iau *InventoryAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventoryattribute.Table, inventoryattribute.Columns, sqlgraph.NewFieldSpec(inventoryattribute.FieldID, field.TypeString))
	if ps := iau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iau.mutation.Name(); ok {
		_spec.SetField(inventoryattribute.FieldName, field.TypeString, value)
	}
	if value, ok := iau.mutation.IsMandatory(); ok {
		_spec.SetField(inventoryattribute.FieldIsMandatory, field.TypeBool, value)
	}
	if value, ok := iau.mutation.DataType(); ok {
		_spec.SetField(inventoryattribute.FieldDataType, field.TypeEnum, value)
	}
	if iau.mutation.DataTypeCleared() {
		_spec.ClearField(inventoryattribute.FieldDataType, field.TypeEnum)
	}
	if iau.mutation.InventoryTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryattribute.InventoryTypeTable,
			Columns: []string{inventoryattribute.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.InventoryTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryattribute.InventoryTypeTable,
			Columns: []string{inventoryattribute.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iau.mutation.PlaceInventoryAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryattribute.PlaceInventoryAttributesTable,
			Columns: []string{inventoryattribute.PlaceInventoryAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.RemovedPlaceInventoryAttributesIDs(); len(nodes) > 0 && !iau.mutation.PlaceInventoryAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryattribute.PlaceInventoryAttributesTable,
			Columns: []string{inventoryattribute.PlaceInventoryAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iau.mutation.PlaceInventoryAttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryattribute.PlaceInventoryAttributesTable,
			Columns: []string{inventoryattribute.PlaceInventoryAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iau.mutation.done = true
	return n, nil
}

// InventoryAttributeUpdateOne is the builder for updating a single InventoryAttribute entity.
type InventoryAttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventoryAttributeMutation
}

// SetName sets the "name" field.
func (iauo *InventoryAttributeUpdateOne) SetName(s string) *InventoryAttributeUpdateOne {
	iauo.mutation.SetName(s)
	return iauo
}

// SetIsMandatory sets the "is_mandatory" field.
func (iauo *InventoryAttributeUpdateOne) SetIsMandatory(b bool) *InventoryAttributeUpdateOne {
	iauo.mutation.SetIsMandatory(b)
	return iauo
}

// SetNillableIsMandatory sets the "is_mandatory" field if the given value is not nil.
func (iauo *InventoryAttributeUpdateOne) SetNillableIsMandatory(b *bool) *InventoryAttributeUpdateOne {
	if b != nil {
		iauo.SetIsMandatory(*b)
	}
	return iauo
}

// SetDataType sets the "data_type" field.
func (iauo *InventoryAttributeUpdateOne) SetDataType(it inventoryattribute.DataType) *InventoryAttributeUpdateOne {
	iauo.mutation.SetDataType(it)
	return iauo
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (iauo *InventoryAttributeUpdateOne) SetNillableDataType(it *inventoryattribute.DataType) *InventoryAttributeUpdateOne {
	if it != nil {
		iauo.SetDataType(*it)
	}
	return iauo
}

// ClearDataType clears the value of the "data_type" field.
func (iauo *InventoryAttributeUpdateOne) ClearDataType() *InventoryAttributeUpdateOne {
	iauo.mutation.ClearDataType()
	return iauo
}

// SetInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID.
func (iauo *InventoryAttributeUpdateOne) SetInventoryTypeID(id string) *InventoryAttributeUpdateOne {
	iauo.mutation.SetInventoryTypeID(id)
	return iauo
}

// SetNillableInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID if the given value is not nil.
func (iauo *InventoryAttributeUpdateOne) SetNillableInventoryTypeID(id *string) *InventoryAttributeUpdateOne {
	if id != nil {
		iauo = iauo.SetInventoryTypeID(*id)
	}
	return iauo
}

// SetInventoryType sets the "inventory_type" edge to the InventoryType entity.
func (iauo *InventoryAttributeUpdateOne) SetInventoryType(i *InventoryType) *InventoryAttributeUpdateOne {
	return iauo.SetInventoryTypeID(i.ID)
}

// AddPlaceInventoryAttributeIDs adds the "place_inventory_attributes" edge to the PlaceInventoryAttribute entity by IDs.
func (iauo *InventoryAttributeUpdateOne) AddPlaceInventoryAttributeIDs(ids ...string) *InventoryAttributeUpdateOne {
	iauo.mutation.AddPlaceInventoryAttributeIDs(ids...)
	return iauo
}

// AddPlaceInventoryAttributes adds the "place_inventory_attributes" edges to the PlaceInventoryAttribute entity.
func (iauo *InventoryAttributeUpdateOne) AddPlaceInventoryAttributes(p ...*PlaceInventoryAttribute) *InventoryAttributeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iauo.AddPlaceInventoryAttributeIDs(ids...)
}

// Mutation returns the InventoryAttributeMutation object of the builder.
func (iauo *InventoryAttributeUpdateOne) Mutation() *InventoryAttributeMutation {
	return iauo.mutation
}

// ClearInventoryType clears the "inventory_type" edge to the InventoryType entity.
func (iauo *InventoryAttributeUpdateOne) ClearInventoryType() *InventoryAttributeUpdateOne {
	iauo.mutation.ClearInventoryType()
	return iauo
}

// ClearPlaceInventoryAttributes clears all "place_inventory_attributes" edges to the PlaceInventoryAttribute entity.
func (iauo *InventoryAttributeUpdateOne) ClearPlaceInventoryAttributes() *InventoryAttributeUpdateOne {
	iauo.mutation.ClearPlaceInventoryAttributes()
	return iauo
}

// RemovePlaceInventoryAttributeIDs removes the "place_inventory_attributes" edge to PlaceInventoryAttribute entities by IDs.
func (iauo *InventoryAttributeUpdateOne) RemovePlaceInventoryAttributeIDs(ids ...string) *InventoryAttributeUpdateOne {
	iauo.mutation.RemovePlaceInventoryAttributeIDs(ids...)
	return iauo
}

// RemovePlaceInventoryAttributes removes "place_inventory_attributes" edges to PlaceInventoryAttribute entities.
func (iauo *InventoryAttributeUpdateOne) RemovePlaceInventoryAttributes(p ...*PlaceInventoryAttribute) *InventoryAttributeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iauo.RemovePlaceInventoryAttributeIDs(ids...)
}

// Where appends a list predicates to the InventoryAttributeUpdate builder.
func (iauo *InventoryAttributeUpdateOne) Where(ps ...predicate.InventoryAttribute) *InventoryAttributeUpdateOne {
	iauo.mutation.Where(ps...)
	return iauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iauo *InventoryAttributeUpdateOne) Select(field string, fields ...string) *InventoryAttributeUpdateOne {
	iauo.fields = append([]string{field}, fields...)
	return iauo
}

// Save executes the query and returns the updated InventoryAttribute entity.
func (iauo *InventoryAttributeUpdateOne) Save(ctx context.Context) (*InventoryAttribute, error) {
	return withHooks(ctx, iauo.sqlSave, iauo.mutation, iauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iauo *InventoryAttributeUpdateOne) SaveX(ctx context.Context) *InventoryAttribute {
	node, err := iauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iauo *InventoryAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := iauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iauo *InventoryAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := iauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iauo *InventoryAttributeUpdateOne) check() error {
	if v, ok := iauo.mutation.DataType(); ok {
		if err := inventoryattribute.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`placio_api: validator failed for field "InventoryAttribute.data_type": %w`, err)}
		}
	}
	return nil
}

func (iauo *InventoryAttributeUpdateOne) sqlSave(ctx context.Context) (_node *InventoryAttribute, err error) {
	if err := iauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(inventoryattribute.Table, inventoryattribute.Columns, sqlgraph.NewFieldSpec(inventoryattribute.FieldID, field.TypeString))
	id, ok := iauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`placio_api: missing "InventoryAttribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventoryattribute.FieldID)
		for _, f := range fields {
			if !inventoryattribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("placio_api: invalid field %q for query", f)}
			}
			if f != inventoryattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iauo.mutation.Name(); ok {
		_spec.SetField(inventoryattribute.FieldName, field.TypeString, value)
	}
	if value, ok := iauo.mutation.IsMandatory(); ok {
		_spec.SetField(inventoryattribute.FieldIsMandatory, field.TypeBool, value)
	}
	if value, ok := iauo.mutation.DataType(); ok {
		_spec.SetField(inventoryattribute.FieldDataType, field.TypeEnum, value)
	}
	if iauo.mutation.DataTypeCleared() {
		_spec.ClearField(inventoryattribute.FieldDataType, field.TypeEnum)
	}
	if iauo.mutation.InventoryTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryattribute.InventoryTypeTable,
			Columns: []string{inventoryattribute.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.InventoryTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryattribute.InventoryTypeTable,
			Columns: []string{inventoryattribute.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iauo.mutation.PlaceInventoryAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryattribute.PlaceInventoryAttributesTable,
			Columns: []string{inventoryattribute.PlaceInventoryAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.RemovedPlaceInventoryAttributesIDs(); len(nodes) > 0 && !iauo.mutation.PlaceInventoryAttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryattribute.PlaceInventoryAttributesTable,
			Columns: []string{inventoryattribute.PlaceInventoryAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iauo.mutation.PlaceInventoryAttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryattribute.PlaceInventoryAttributesTable,
			Columns: []string{inventoryattribute.PlaceInventoryAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InventoryAttribute{config: iauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventoryattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iauo.mutation.done = true
	return _node, nil
}

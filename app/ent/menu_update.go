// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/category"
	"placio-app/ent/menu"
	"placio-app/ent/menuitem"
	"placio-app/ent/place"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks    []Hook
	mutation *MenuMutation
}

// Where appends a list predicates to the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MenuUpdate) SetName(s string) *MenuUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetDescription sets the "description" field.
func (mu *MenuUpdate) SetDescription(s string) *MenuUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableDescription(s *string) *MenuUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *MenuUpdate) ClearDescription() *MenuUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (mu *MenuUpdate) SetPlaceID(id string) *MenuUpdate {
	mu.mutation.SetPlaceID(id)
	return mu
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (mu *MenuUpdate) SetNillablePlaceID(id *string) *MenuUpdate {
	if id != nil {
		mu = mu.SetPlaceID(*id)
	}
	return mu
}

// SetPlace sets the "place" edge to the Place entity.
func (mu *MenuUpdate) SetPlace(p *Place) *MenuUpdate {
	return mu.SetPlaceID(p.ID)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (mu *MenuUpdate) AddCategoryIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddCategoryIDs(ids...)
	return mu
}

// AddCategories adds the "categories" edges to the Category entity.
func (mu *MenuUpdate) AddCategories(c ...*Category) *MenuUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddCategoryIDs(ids...)
}

// AddMenuItemIDs adds the "menu_items" edge to the MenuItem entity by IDs.
func (mu *MenuUpdate) AddMenuItemIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddMenuItemIDs(ids...)
	return mu
}

// AddMenuItems adds the "menu_items" edges to the MenuItem entity.
func (mu *MenuUpdate) AddMenuItems(m ...*MenuItem) *MenuUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMenuItemIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (mu *MenuUpdate) ClearPlace() *MenuUpdate {
	mu.mutation.ClearPlace()
	return mu
}

// ClearCategories clears all "categories" edges to the Category entity.
func (mu *MenuUpdate) ClearCategories() *MenuUpdate {
	mu.mutation.ClearCategories()
	return mu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (mu *MenuUpdate) RemoveCategoryIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveCategoryIDs(ids...)
	return mu
}

// RemoveCategories removes "categories" edges to Category entities.
func (mu *MenuUpdate) RemoveCategories(c ...*Category) *MenuUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveCategoryIDs(ids...)
}

// ClearMenuItems clears all "menu_items" edges to the MenuItem entity.
func (mu *MenuUpdate) ClearMenuItems() *MenuUpdate {
	mu.mutation.ClearMenuItems()
	return mu
}

// RemoveMenuItemIDs removes the "menu_items" edge to MenuItem entities by IDs.
func (mu *MenuUpdate) RemoveMenuItemIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveMenuItemIDs(ids...)
	return mu
}

// RemoveMenuItems removes "menu_items" edges to MenuItem entities.
func (mu *MenuUpdate) RemoveMenuItems(m ...*MenuItem) *MenuUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMenuItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(menu.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(menu.FieldDescription, field.TypeString)
	}
	if mu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.PlaceTable,
			Columns: []string{menu.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.PlaceTable,
			Columns: []string{menu.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.CategoriesTable,
			Columns: []string{menu.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !mu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.CategoriesTable,
			Columns: []string{menu.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.CategoriesTable,
			Columns: []string{menu.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MenuItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menu.MenuItemsTable,
			Columns: menu.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMenuItemsIDs(); len(nodes) > 0 && !mu.mutation.MenuItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menu.MenuItemsTable,
			Columns: menu.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MenuItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menu.MenuItemsTable,
			Columns: menu.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MenuMutation
}

// SetName sets the "name" field.
func (muo *MenuUpdateOne) SetName(s string) *MenuUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetDescription sets the "description" field.
func (muo *MenuUpdateOne) SetDescription(s string) *MenuUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableDescription(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *MenuUpdateOne) ClearDescription() *MenuUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (muo *MenuUpdateOne) SetPlaceID(id string) *MenuUpdateOne {
	muo.mutation.SetPlaceID(id)
	return muo
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (muo *MenuUpdateOne) SetNillablePlaceID(id *string) *MenuUpdateOne {
	if id != nil {
		muo = muo.SetPlaceID(*id)
	}
	return muo
}

// SetPlace sets the "place" edge to the Place entity.
func (muo *MenuUpdateOne) SetPlace(p *Place) *MenuUpdateOne {
	return muo.SetPlaceID(p.ID)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (muo *MenuUpdateOne) AddCategoryIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddCategoryIDs(ids...)
	return muo
}

// AddCategories adds the "categories" edges to the Category entity.
func (muo *MenuUpdateOne) AddCategories(c ...*Category) *MenuUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddCategoryIDs(ids...)
}

// AddMenuItemIDs adds the "menu_items" edge to the MenuItem entity by IDs.
func (muo *MenuUpdateOne) AddMenuItemIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddMenuItemIDs(ids...)
	return muo
}

// AddMenuItems adds the "menu_items" edges to the MenuItem entity.
func (muo *MenuUpdateOne) AddMenuItems(m ...*MenuItem) *MenuUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMenuItemIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (muo *MenuUpdateOne) ClearPlace() *MenuUpdateOne {
	muo.mutation.ClearPlace()
	return muo
}

// ClearCategories clears all "categories" edges to the Category entity.
func (muo *MenuUpdateOne) ClearCategories() *MenuUpdateOne {
	muo.mutation.ClearCategories()
	return muo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (muo *MenuUpdateOne) RemoveCategoryIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveCategoryIDs(ids...)
	return muo
}

// RemoveCategories removes "categories" edges to Category entities.
func (muo *MenuUpdateOne) RemoveCategories(c ...*Category) *MenuUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveCategoryIDs(ids...)
}

// ClearMenuItems clears all "menu_items" edges to the MenuItem entity.
func (muo *MenuUpdateOne) ClearMenuItems() *MenuUpdateOne {
	muo.mutation.ClearMenuItems()
	return muo
}

// RemoveMenuItemIDs removes the "menu_items" edge to MenuItem entities by IDs.
func (muo *MenuUpdateOne) RemoveMenuItemIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveMenuItemIDs(ids...)
	return muo
}

// RemoveMenuItems removes "menu_items" edges to MenuItem entities.
func (muo *MenuUpdateOne) RemoveMenuItems(m ...*MenuItem) *MenuUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMenuItemIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (muo *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(menu.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(menu.FieldDescription, field.TypeString)
	}
	if muo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.PlaceTable,
			Columns: []string{menu.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.PlaceTable,
			Columns: []string{menu.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.CategoriesTable,
			Columns: []string{menu.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !muo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.CategoriesTable,
			Columns: []string{menu.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.CategoriesTable,
			Columns: []string{menu.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MenuItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menu.MenuItemsTable,
			Columns: menu.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMenuItemsIDs(); len(nodes) > 0 && !muo.mutation.MenuItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menu.MenuItemsTable,
			Columns: menu.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MenuItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menu.MenuItemsTable,
			Columns: menu.MenuItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}

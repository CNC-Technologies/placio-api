// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio_api/accountwallet"
	"placio_api/business"
	"placio_api/predicate"
	"placio_api/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountWalletUpdate is the builder for updating AccountWallet entities.
type AccountWalletUpdate struct {
	config
	hooks    []Hook
	mutation *AccountWalletMutation
}

// Where appends a list predicates to the AccountWalletUpdate builder.
func (awu *AccountWalletUpdate) Where(ps ...predicate.AccountWallet) *AccountWalletUpdate {
	awu.mutation.Where(ps...)
	return awu
}

// SetUserID sets the "user_id" field.
func (awu *AccountWalletUpdate) SetUserID(s string) *AccountWalletUpdate {
	awu.mutation.SetUserID(s)
	return awu
}

// SetBusinessID sets the "business_id" field.
func (awu *AccountWalletUpdate) SetBusinessID(s string) *AccountWalletUpdate {
	awu.mutation.SetBusinessID(s)
	return awu
}

// SetBalance sets the "balance" field.
func (awu *AccountWalletUpdate) SetBalance(f float64) *AccountWalletUpdate {
	awu.mutation.ResetBalance()
	awu.mutation.SetBalance(f)
	return awu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableBalance(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetBalance(*f)
	}
	return awu
}

// AddBalance adds f to the "balance" field.
func (awu *AccountWalletUpdate) AddBalance(f float64) *AccountWalletUpdate {
	awu.mutation.AddBalance(f)
	return awu
}

// SetTotalDeposited sets the "total_deposited" field.
func (awu *AccountWalletUpdate) SetTotalDeposited(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalDeposited()
	awu.mutation.SetTotalDeposited(f)
	return awu
}

// SetNillableTotalDeposited sets the "total_deposited" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalDeposited(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalDeposited(*f)
	}
	return awu
}

// AddTotalDeposited adds f to the "total_deposited" field.
func (awu *AccountWalletUpdate) AddTotalDeposited(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalDeposited(f)
	return awu
}

// SetTotalWithdrawn sets the "total_withdrawn" field.
func (awu *AccountWalletUpdate) SetTotalWithdrawn(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalWithdrawn()
	awu.mutation.SetTotalWithdrawn(f)
	return awu
}

// SetNillableTotalWithdrawn sets the "total_withdrawn" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalWithdrawn(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalWithdrawn(*f)
	}
	return awu
}

// AddTotalWithdrawn adds f to the "total_withdrawn" field.
func (awu *AccountWalletUpdate) AddTotalWithdrawn(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalWithdrawn(f)
	return awu
}

// SetTotalEarned sets the "total_earned" field.
func (awu *AccountWalletUpdate) SetTotalEarned(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalEarned()
	awu.mutation.SetTotalEarned(f)
	return awu
}

// SetNillableTotalEarned sets the "total_earned" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalEarned(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalEarned(*f)
	}
	return awu
}

// AddTotalEarned adds f to the "total_earned" field.
func (awu *AccountWalletUpdate) AddTotalEarned(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalEarned(f)
	return awu
}

// SetTotalSpent sets the "total_spent" field.
func (awu *AccountWalletUpdate) SetTotalSpent(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalSpent()
	awu.mutation.SetTotalSpent(f)
	return awu
}

// SetNillableTotalSpent sets the "total_spent" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalSpent(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalSpent(*f)
	}
	return awu
}

// AddTotalSpent adds f to the "total_spent" field.
func (awu *AccountWalletUpdate) AddTotalSpent(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalSpent(f)
	return awu
}

// SetTotalRefunded sets the "total_refunded" field.
func (awu *AccountWalletUpdate) SetTotalRefunded(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalRefunded()
	awu.mutation.SetTotalRefunded(f)
	return awu
}

// SetNillableTotalRefunded sets the "total_refunded" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalRefunded(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalRefunded(*f)
	}
	return awu
}

// AddTotalRefunded adds f to the "total_refunded" field.
func (awu *AccountWalletUpdate) AddTotalRefunded(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalRefunded(f)
	return awu
}

// SetTotalFees sets the "total_fees" field.
func (awu *AccountWalletUpdate) SetTotalFees(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalFees()
	awu.mutation.SetTotalFees(f)
	return awu
}

// SetNillableTotalFees sets the "total_fees" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalFees(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalFees(*f)
	}
	return awu
}

// AddTotalFees adds f to the "total_fees" field.
func (awu *AccountWalletUpdate) AddTotalFees(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalFees(f)
	return awu
}

// SetTotalTax sets the "total_tax" field.
func (awu *AccountWalletUpdate) SetTotalTax(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalTax()
	awu.mutation.SetTotalTax(f)
	return awu
}

// SetNillableTotalTax sets the "total_tax" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalTax(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalTax(*f)
	}
	return awu
}

// AddTotalTax adds f to the "total_tax" field.
func (awu *AccountWalletUpdate) AddTotalTax(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalTax(f)
	return awu
}

// SetTotalDiscount sets the "total_discount" field.
func (awu *AccountWalletUpdate) SetTotalDiscount(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalDiscount()
	awu.mutation.SetTotalDiscount(f)
	return awu
}

// SetNillableTotalDiscount sets the "total_discount" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalDiscount(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalDiscount(*f)
	}
	return awu
}

// AddTotalDiscount adds f to the "total_discount" field.
func (awu *AccountWalletUpdate) AddTotalDiscount(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalDiscount(f)
	return awu
}

// SetTotalRevenue sets the "total_revenue" field.
func (awu *AccountWalletUpdate) SetTotalRevenue(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalRevenue()
	awu.mutation.SetTotalRevenue(f)
	return awu
}

// SetNillableTotalRevenue sets the "total_revenue" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalRevenue(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalRevenue(*f)
	}
	return awu
}

// AddTotalRevenue adds f to the "total_revenue" field.
func (awu *AccountWalletUpdate) AddTotalRevenue(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalRevenue(f)
	return awu
}

// SetTotalExpenses sets the "total_expenses" field.
func (awu *AccountWalletUpdate) SetTotalExpenses(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalExpenses()
	awu.mutation.SetTotalExpenses(f)
	return awu
}

// SetNillableTotalExpenses sets the "total_expenses" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalExpenses(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalExpenses(*f)
	}
	return awu
}

// AddTotalExpenses adds f to the "total_expenses" field.
func (awu *AccountWalletUpdate) AddTotalExpenses(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalExpenses(f)
	return awu
}

// SetTotalProfit sets the "total_profit" field.
func (awu *AccountWalletUpdate) SetTotalProfit(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalProfit()
	awu.mutation.SetTotalProfit(f)
	return awu
}

// SetNillableTotalProfit sets the "total_profit" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalProfit(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalProfit(*f)
	}
	return awu
}

// AddTotalProfit adds f to the "total_profit" field.
func (awu *AccountWalletUpdate) AddTotalProfit(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalProfit(f)
	return awu
}

// SetTotalLoss sets the "total_loss" field.
func (awu *AccountWalletUpdate) SetTotalLoss(f float64) *AccountWalletUpdate {
	awu.mutation.ResetTotalLoss()
	awu.mutation.SetTotalLoss(f)
	return awu
}

// SetNillableTotalLoss sets the "total_loss" field if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableTotalLoss(f *float64) *AccountWalletUpdate {
	if f != nil {
		awu.SetTotalLoss(*f)
	}
	return awu
}

// AddTotalLoss adds f to the "total_loss" field.
func (awu *AccountWalletUpdate) AddTotalLoss(f float64) *AccountWalletUpdate {
	awu.mutation.AddTotalLoss(f)
	return awu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (awu *AccountWalletUpdate) SetUserID(id string) *AccountWalletUpdate {
	awu.mutation.SetUserID(id)
	return awu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableUserID(id *string) *AccountWalletUpdate {
	if id != nil {
		awu = awu.SetUserID(*id)
	}
	return awu
}

// SetUser sets the "user" edge to the User entity.
func (awu *AccountWalletUpdate) SetUser(u *User) *AccountWalletUpdate {
	return awu.SetUserID(u.ID)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (awu *AccountWalletUpdate) SetBusinessID(id string) *AccountWalletUpdate {
	awu.mutation.SetBusinessID(id)
	return awu
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (awu *AccountWalletUpdate) SetNillableBusinessID(id *string) *AccountWalletUpdate {
	if id != nil {
		awu = awu.SetBusinessID(*id)
	}
	return awu
}

// SetBusiness sets the "business" edge to the Business entity.
func (awu *AccountWalletUpdate) SetBusiness(b *Business) *AccountWalletUpdate {
	return awu.SetBusinessID(b.ID)
}

// Mutation returns the AccountWalletMutation object of the builder.
func (awu *AccountWalletUpdate) Mutation() *AccountWalletMutation {
	return awu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (awu *AccountWalletUpdate) ClearUser() *AccountWalletUpdate {
	awu.mutation.ClearUser()
	return awu
}

// ClearBusiness clears the "business" edge to the Business entity.
func (awu *AccountWalletUpdate) ClearBusiness() *AccountWalletUpdate {
	awu.mutation.ClearBusiness()
	return awu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (awu *AccountWalletUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, awu.sqlSave, awu.mutation, awu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (awu *AccountWalletUpdate) SaveX(ctx context.Context) int {
	affected, err := awu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (awu *AccountWalletUpdate) Exec(ctx context.Context) error {
	_, err := awu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awu *AccountWalletUpdate) ExecX(ctx context.Context) {
	if err := awu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (awu *AccountWalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountwallet.Table, accountwallet.Columns, sqlgraph.NewFieldSpec(accountwallet.FieldID, field.TypeString))
	if ps := awu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := awu.mutation.UserID(); ok {
		_spec.SetField(accountwallet.FieldUserID, field.TypeString, value)
	}
	if value, ok := awu.mutation.BusinessID(); ok {
		_spec.SetField(accountwallet.FieldBusinessID, field.TypeString, value)
	}
	if value, ok := awu.mutation.Balance(); ok {
		_spec.SetField(accountwallet.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedBalance(); ok {
		_spec.AddField(accountwallet.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalDeposited(); ok {
		_spec.SetField(accountwallet.FieldTotalDeposited, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalDeposited(); ok {
		_spec.AddField(accountwallet.FieldTotalDeposited, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalWithdrawn(); ok {
		_spec.SetField(accountwallet.FieldTotalWithdrawn, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalWithdrawn(); ok {
		_spec.AddField(accountwallet.FieldTotalWithdrawn, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalEarned(); ok {
		_spec.SetField(accountwallet.FieldTotalEarned, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalEarned(); ok {
		_spec.AddField(accountwallet.FieldTotalEarned, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalSpent(); ok {
		_spec.SetField(accountwallet.FieldTotalSpent, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalSpent(); ok {
		_spec.AddField(accountwallet.FieldTotalSpent, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalRefunded(); ok {
		_spec.SetField(accountwallet.FieldTotalRefunded, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalRefunded(); ok {
		_spec.AddField(accountwallet.FieldTotalRefunded, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalFees(); ok {
		_spec.SetField(accountwallet.FieldTotalFees, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalFees(); ok {
		_spec.AddField(accountwallet.FieldTotalFees, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalTax(); ok {
		_spec.SetField(accountwallet.FieldTotalTax, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalTax(); ok {
		_spec.AddField(accountwallet.FieldTotalTax, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalDiscount(); ok {
		_spec.SetField(accountwallet.FieldTotalDiscount, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalDiscount(); ok {
		_spec.AddField(accountwallet.FieldTotalDiscount, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalRevenue(); ok {
		_spec.SetField(accountwallet.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalRevenue(); ok {
		_spec.AddField(accountwallet.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalExpenses(); ok {
		_spec.SetField(accountwallet.FieldTotalExpenses, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalExpenses(); ok {
		_spec.AddField(accountwallet.FieldTotalExpenses, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalProfit(); ok {
		_spec.SetField(accountwallet.FieldTotalProfit, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalProfit(); ok {
		_spec.AddField(accountwallet.FieldTotalProfit, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.TotalLoss(); ok {
		_spec.SetField(accountwallet.FieldTotalLoss, field.TypeFloat64, value)
	}
	if value, ok := awu.mutation.AddedTotalLoss(); ok {
		_spec.AddField(accountwallet.FieldTotalLoss, field.TypeFloat64, value)
	}
	if awu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.UserTable,
			Columns: []string{accountwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := awu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.UserTable,
			Columns: []string{accountwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if awu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.BusinessTable,
			Columns: []string{accountwallet.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := awu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.BusinessTable,
			Columns: []string{accountwallet.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, awu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	awu.mutation.done = true
	return n, nil
}

// AccountWalletUpdateOne is the builder for updating a single AccountWallet entity.
type AccountWalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountWalletMutation
}

// SetUserID sets the "user_id" field.
func (awuo *AccountWalletUpdateOne) SetUserID(s string) *AccountWalletUpdateOne {
	awuo.mutation.SetUserID(s)
	return awuo
}

// SetBusinessID sets the "business_id" field.
func (awuo *AccountWalletUpdateOne) SetBusinessID(s string) *AccountWalletUpdateOne {
	awuo.mutation.SetBusinessID(s)
	return awuo
}

// SetBalance sets the "balance" field.
func (awuo *AccountWalletUpdateOne) SetBalance(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetBalance()
	awuo.mutation.SetBalance(f)
	return awuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableBalance(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetBalance(*f)
	}
	return awuo
}

// AddBalance adds f to the "balance" field.
func (awuo *AccountWalletUpdateOne) AddBalance(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddBalance(f)
	return awuo
}

// SetTotalDeposited sets the "total_deposited" field.
func (awuo *AccountWalletUpdateOne) SetTotalDeposited(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalDeposited()
	awuo.mutation.SetTotalDeposited(f)
	return awuo
}

// SetNillableTotalDeposited sets the "total_deposited" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalDeposited(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalDeposited(*f)
	}
	return awuo
}

// AddTotalDeposited adds f to the "total_deposited" field.
func (awuo *AccountWalletUpdateOne) AddTotalDeposited(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalDeposited(f)
	return awuo
}

// SetTotalWithdrawn sets the "total_withdrawn" field.
func (awuo *AccountWalletUpdateOne) SetTotalWithdrawn(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalWithdrawn()
	awuo.mutation.SetTotalWithdrawn(f)
	return awuo
}

// SetNillableTotalWithdrawn sets the "total_withdrawn" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalWithdrawn(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalWithdrawn(*f)
	}
	return awuo
}

// AddTotalWithdrawn adds f to the "total_withdrawn" field.
func (awuo *AccountWalletUpdateOne) AddTotalWithdrawn(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalWithdrawn(f)
	return awuo
}

// SetTotalEarned sets the "total_earned" field.
func (awuo *AccountWalletUpdateOne) SetTotalEarned(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalEarned()
	awuo.mutation.SetTotalEarned(f)
	return awuo
}

// SetNillableTotalEarned sets the "total_earned" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalEarned(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalEarned(*f)
	}
	return awuo
}

// AddTotalEarned adds f to the "total_earned" field.
func (awuo *AccountWalletUpdateOne) AddTotalEarned(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalEarned(f)
	return awuo
}

// SetTotalSpent sets the "total_spent" field.
func (awuo *AccountWalletUpdateOne) SetTotalSpent(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalSpent()
	awuo.mutation.SetTotalSpent(f)
	return awuo
}

// SetNillableTotalSpent sets the "total_spent" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalSpent(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalSpent(*f)
	}
	return awuo
}

// AddTotalSpent adds f to the "total_spent" field.
func (awuo *AccountWalletUpdateOne) AddTotalSpent(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalSpent(f)
	return awuo
}

// SetTotalRefunded sets the "total_refunded" field.
func (awuo *AccountWalletUpdateOne) SetTotalRefunded(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalRefunded()
	awuo.mutation.SetTotalRefunded(f)
	return awuo
}

// SetNillableTotalRefunded sets the "total_refunded" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalRefunded(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalRefunded(*f)
	}
	return awuo
}

// AddTotalRefunded adds f to the "total_refunded" field.
func (awuo *AccountWalletUpdateOne) AddTotalRefunded(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalRefunded(f)
	return awuo
}

// SetTotalFees sets the "total_fees" field.
func (awuo *AccountWalletUpdateOne) SetTotalFees(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalFees()
	awuo.mutation.SetTotalFees(f)
	return awuo
}

// SetNillableTotalFees sets the "total_fees" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalFees(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalFees(*f)
	}
	return awuo
}

// AddTotalFees adds f to the "total_fees" field.
func (awuo *AccountWalletUpdateOne) AddTotalFees(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalFees(f)
	return awuo
}

// SetTotalTax sets the "total_tax" field.
func (awuo *AccountWalletUpdateOne) SetTotalTax(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalTax()
	awuo.mutation.SetTotalTax(f)
	return awuo
}

// SetNillableTotalTax sets the "total_tax" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalTax(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalTax(*f)
	}
	return awuo
}

// AddTotalTax adds f to the "total_tax" field.
func (awuo *AccountWalletUpdateOne) AddTotalTax(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalTax(f)
	return awuo
}

// SetTotalDiscount sets the "total_discount" field.
func (awuo *AccountWalletUpdateOne) SetTotalDiscount(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalDiscount()
	awuo.mutation.SetTotalDiscount(f)
	return awuo
}

// SetNillableTotalDiscount sets the "total_discount" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalDiscount(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalDiscount(*f)
	}
	return awuo
}

// AddTotalDiscount adds f to the "total_discount" field.
func (awuo *AccountWalletUpdateOne) AddTotalDiscount(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalDiscount(f)
	return awuo
}

// SetTotalRevenue sets the "total_revenue" field.
func (awuo *AccountWalletUpdateOne) SetTotalRevenue(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalRevenue()
	awuo.mutation.SetTotalRevenue(f)
	return awuo
}

// SetNillableTotalRevenue sets the "total_revenue" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalRevenue(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalRevenue(*f)
	}
	return awuo
}

// AddTotalRevenue adds f to the "total_revenue" field.
func (awuo *AccountWalletUpdateOne) AddTotalRevenue(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalRevenue(f)
	return awuo
}

// SetTotalExpenses sets the "total_expenses" field.
func (awuo *AccountWalletUpdateOne) SetTotalExpenses(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalExpenses()
	awuo.mutation.SetTotalExpenses(f)
	return awuo
}

// SetNillableTotalExpenses sets the "total_expenses" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalExpenses(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalExpenses(*f)
	}
	return awuo
}

// AddTotalExpenses adds f to the "total_expenses" field.
func (awuo *AccountWalletUpdateOne) AddTotalExpenses(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalExpenses(f)
	return awuo
}

// SetTotalProfit sets the "total_profit" field.
func (awuo *AccountWalletUpdateOne) SetTotalProfit(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalProfit()
	awuo.mutation.SetTotalProfit(f)
	return awuo
}

// SetNillableTotalProfit sets the "total_profit" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalProfit(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalProfit(*f)
	}
	return awuo
}

// AddTotalProfit adds f to the "total_profit" field.
func (awuo *AccountWalletUpdateOne) AddTotalProfit(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalProfit(f)
	return awuo
}

// SetTotalLoss sets the "total_loss" field.
func (awuo *AccountWalletUpdateOne) SetTotalLoss(f float64) *AccountWalletUpdateOne {
	awuo.mutation.ResetTotalLoss()
	awuo.mutation.SetTotalLoss(f)
	return awuo
}

// SetNillableTotalLoss sets the "total_loss" field if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableTotalLoss(f *float64) *AccountWalletUpdateOne {
	if f != nil {
		awuo.SetTotalLoss(*f)
	}
	return awuo
}

// AddTotalLoss adds f to the "total_loss" field.
func (awuo *AccountWalletUpdateOne) AddTotalLoss(f float64) *AccountWalletUpdateOne {
	awuo.mutation.AddTotalLoss(f)
	return awuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (awuo *AccountWalletUpdateOne) SetUserID(id string) *AccountWalletUpdateOne {
	awuo.mutation.SetUserID(id)
	return awuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableUserID(id *string) *AccountWalletUpdateOne {
	if id != nil {
		awuo = awuo.SetUserID(*id)
	}
	return awuo
}

// SetUser sets the "user" edge to the User entity.
func (awuo *AccountWalletUpdateOne) SetUser(u *User) *AccountWalletUpdateOne {
	return awuo.SetUserID(u.ID)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (awuo *AccountWalletUpdateOne) SetBusinessID(id string) *AccountWalletUpdateOne {
	awuo.mutation.SetBusinessID(id)
	return awuo
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (awuo *AccountWalletUpdateOne) SetNillableBusinessID(id *string) *AccountWalletUpdateOne {
	if id != nil {
		awuo = awuo.SetBusinessID(*id)
	}
	return awuo
}

// SetBusiness sets the "business" edge to the Business entity.
func (awuo *AccountWalletUpdateOne) SetBusiness(b *Business) *AccountWalletUpdateOne {
	return awuo.SetBusinessID(b.ID)
}

// Mutation returns the AccountWalletMutation object of the builder.
func (awuo *AccountWalletUpdateOne) Mutation() *AccountWalletMutation {
	return awuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (awuo *AccountWalletUpdateOne) ClearUser() *AccountWalletUpdateOne {
	awuo.mutation.ClearUser()
	return awuo
}

// ClearBusiness clears the "business" edge to the Business entity.
func (awuo *AccountWalletUpdateOne) ClearBusiness() *AccountWalletUpdateOne {
	awuo.mutation.ClearBusiness()
	return awuo
}

// Where appends a list predicates to the AccountWalletUpdate builder.
func (awuo *AccountWalletUpdateOne) Where(ps ...predicate.AccountWallet) *AccountWalletUpdateOne {
	awuo.mutation.Where(ps...)
	return awuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (awuo *AccountWalletUpdateOne) Select(field string, fields ...string) *AccountWalletUpdateOne {
	awuo.fields = append([]string{field}, fields...)
	return awuo
}

// Save executes the query and returns the updated AccountWallet entity.
func (awuo *AccountWalletUpdateOne) Save(ctx context.Context) (*AccountWallet, error) {
	return withHooks(ctx, awuo.sqlSave, awuo.mutation, awuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (awuo *AccountWalletUpdateOne) SaveX(ctx context.Context) *AccountWallet {
	node, err := awuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (awuo *AccountWalletUpdateOne) Exec(ctx context.Context) error {
	_, err := awuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (awuo *AccountWalletUpdateOne) ExecX(ctx context.Context) {
	if err := awuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (awuo *AccountWalletUpdateOne) sqlSave(ctx context.Context) (_node *AccountWallet, err error) {
	_spec := sqlgraph.NewUpdateSpec(accountwallet.Table, accountwallet.Columns, sqlgraph.NewFieldSpec(accountwallet.FieldID, field.TypeString))
	id, ok := awuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`placio_api: missing "AccountWallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := awuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountwallet.FieldID)
		for _, f := range fields {
			if !accountwallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("placio_api: invalid field %q for query", f)}
			}
			if f != accountwallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := awuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := awuo.mutation.UserID(); ok {
		_spec.SetField(accountwallet.FieldUserID, field.TypeString, value)
	}
	if value, ok := awuo.mutation.BusinessID(); ok {
		_spec.SetField(accountwallet.FieldBusinessID, field.TypeString, value)
	}
	if value, ok := awuo.mutation.Balance(); ok {
		_spec.SetField(accountwallet.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedBalance(); ok {
		_spec.AddField(accountwallet.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalDeposited(); ok {
		_spec.SetField(accountwallet.FieldTotalDeposited, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalDeposited(); ok {
		_spec.AddField(accountwallet.FieldTotalDeposited, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalWithdrawn(); ok {
		_spec.SetField(accountwallet.FieldTotalWithdrawn, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalWithdrawn(); ok {
		_spec.AddField(accountwallet.FieldTotalWithdrawn, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalEarned(); ok {
		_spec.SetField(accountwallet.FieldTotalEarned, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalEarned(); ok {
		_spec.AddField(accountwallet.FieldTotalEarned, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalSpent(); ok {
		_spec.SetField(accountwallet.FieldTotalSpent, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalSpent(); ok {
		_spec.AddField(accountwallet.FieldTotalSpent, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalRefunded(); ok {
		_spec.SetField(accountwallet.FieldTotalRefunded, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalRefunded(); ok {
		_spec.AddField(accountwallet.FieldTotalRefunded, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalFees(); ok {
		_spec.SetField(accountwallet.FieldTotalFees, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalFees(); ok {
		_spec.AddField(accountwallet.FieldTotalFees, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalTax(); ok {
		_spec.SetField(accountwallet.FieldTotalTax, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalTax(); ok {
		_spec.AddField(accountwallet.FieldTotalTax, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalDiscount(); ok {
		_spec.SetField(accountwallet.FieldTotalDiscount, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalDiscount(); ok {
		_spec.AddField(accountwallet.FieldTotalDiscount, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalRevenue(); ok {
		_spec.SetField(accountwallet.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalRevenue(); ok {
		_spec.AddField(accountwallet.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalExpenses(); ok {
		_spec.SetField(accountwallet.FieldTotalExpenses, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalExpenses(); ok {
		_spec.AddField(accountwallet.FieldTotalExpenses, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalProfit(); ok {
		_spec.SetField(accountwallet.FieldTotalProfit, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalProfit(); ok {
		_spec.AddField(accountwallet.FieldTotalProfit, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.TotalLoss(); ok {
		_spec.SetField(accountwallet.FieldTotalLoss, field.TypeFloat64, value)
	}
	if value, ok := awuo.mutation.AddedTotalLoss(); ok {
		_spec.AddField(accountwallet.FieldTotalLoss, field.TypeFloat64, value)
	}
	if awuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.UserTable,
			Columns: []string{accountwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := awuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.UserTable,
			Columns: []string{accountwallet.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if awuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.BusinessTable,
			Columns: []string{accountwallet.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := awuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountwallet.BusinessTable,
			Columns: []string{accountwallet.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountWallet{config: awuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, awuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	awuo.mutation.done = true
	return _node, nil
}

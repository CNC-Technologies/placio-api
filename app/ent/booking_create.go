// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/booking"
	"placio-app/ent/room"
	"placio-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookingCreate is the builder for creating a Booking entity.
type BookingCreate struct {
	config
	mutation *BookingMutation
	hooks    []Hook
}

// SetStartDate sets the "startDate" field.
func (bc *BookingCreate) SetStartDate(t time.Time) *BookingCreate {
	bc.mutation.SetStartDate(t)
	return bc
}

// SetEndDate sets the "endDate" field.
func (bc *BookingCreate) SetEndDate(t time.Time) *BookingCreate {
	bc.mutation.SetEndDate(t)
	return bc
}

// SetStatus sets the "status" field.
func (bc *BookingCreate) SetStatus(s string) *BookingCreate {
	bc.mutation.SetStatus(s)
	return bc
}

// SetBookingDate sets the "bookingDate" field.
func (bc *BookingCreate) SetBookingDate(t time.Time) *BookingCreate {
	bc.mutation.SetBookingDate(t)
	return bc
}

// SetID sets the "id" field.
func (bc *BookingCreate) SetID(s string) *BookingCreate {
	bc.mutation.SetID(s)
	return bc
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (bc *BookingCreate) SetRoomID(id string) *BookingCreate {
	bc.mutation.SetRoomID(id)
	return bc
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillableRoomID(id *string) *BookingCreate {
	if id != nil {
		bc = bc.SetRoomID(*id)
	}
	return bc
}

// SetRoom sets the "room" edge to the Room entity.
func (bc *BookingCreate) SetRoom(r *Room) *BookingCreate {
	return bc.SetRoomID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bc *BookingCreate) SetUserID(id string) *BookingCreate {
	bc.mutation.SetUserID(id)
	return bc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bc *BookingCreate) SetNillableUserID(id *string) *BookingCreate {
	if id != nil {
		bc = bc.SetUserID(*id)
	}
	return bc
}

// SetUser sets the "user" edge to the User entity.
func (bc *BookingCreate) SetUser(u *User) *BookingCreate {
	return bc.SetUserID(u.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (bc *BookingCreate) Mutation() *BookingMutation {
	return bc.mutation
}

// Save creates the Booking in the database.
func (bc *BookingCreate) Save(ctx context.Context) (*Booking, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookingCreate) SaveX(ctx context.Context) *Booking {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BookingCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BookingCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BookingCreate) check() error {
	if _, ok := bc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "startDate", err: errors.New(`ent: missing required field "Booking.startDate"`)}
	}
	if _, ok := bc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "endDate", err: errors.New(`ent: missing required field "Booking.endDate"`)}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Booking.status"`)}
	}
	if _, ok := bc.mutation.BookingDate(); !ok {
		return &ValidationError{Name: "bookingDate", err: errors.New(`ent: missing required field "Booking.bookingDate"`)}
	}
	if v, ok := bc.mutation.ID(); ok {
		if err := booking.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Booking.id": %w`, err)}
		}
	}
	return nil
}

func (bc *BookingCreate) sqlSave(ctx context.Context) (*Booking, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Booking.ID type: %T", _spec.ID.Value)
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BookingCreate) createSpec() (*Booking, *sqlgraph.CreateSpec) {
	var (
		_node = &Booking{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(booking.Table, sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.StartDate(); ok {
		_spec.SetField(booking.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := bc.mutation.EndDate(); ok {
		_spec.SetField(booking.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(booking.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.BookingDate(); ok {
		_spec.SetField(booking.FieldBookingDate, field.TypeTime, value)
		_node.BookingDate = value
	}
	if nodes := bc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.RoomTable,
			Columns: []string{booking.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_bookings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.UserTable,
			Columns: []string{booking.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_bookings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BookingCreateBulk is the builder for creating many Booking entities in bulk.
type BookingCreateBulk struct {
	config
	builders []*BookingCreate
}

// Save creates the Booking entities in the database.
func (bcb *BookingCreateBulk) Save(ctx context.Context) ([]*Booking, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Booking, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BookingCreateBulk) SaveX(ctx context.Context) []*Booking {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BookingCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BookingCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

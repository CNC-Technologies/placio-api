// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/category"
	"placio-app/ent/inventorytype"
	"placio-app/ent/media"
	"placio-app/ent/place"
	"placio-app/ent/placeinventory"
	"placio-app/ent/placeinventoryattribute"
	"placio-app/ent/predicate"
	"placio-app/ent/reservationblock"
	"placio-app/ent/transactionhistory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceInventoryUpdate is the builder for updating PlaceInventory entities.
type PlaceInventoryUpdate struct {
	config
	hooks    []Hook
	mutation *PlaceInventoryMutation
}

// Where appends a list predicates to the PlaceInventoryUpdate builder.
func (piu *PlaceInventoryUpdate) Where(ps ...predicate.PlaceInventory) *PlaceInventoryUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetName sets the "name" field.
func (piu *PlaceInventoryUpdate) SetName(s string) *PlaceInventoryUpdate {
	piu.mutation.SetName(s)
	return piu
}

// SetPrice sets the "price" field.
func (piu *PlaceInventoryUpdate) SetPrice(f float64) *PlaceInventoryUpdate {
	piu.mutation.ResetPrice()
	piu.mutation.SetPrice(f)
	return piu
}

// AddPrice adds f to the "price" field.
func (piu *PlaceInventoryUpdate) AddPrice(f float64) *PlaceInventoryUpdate {
	piu.mutation.AddPrice(f)
	return piu
}

// SetStockQuantity sets the "stock_quantity" field.
func (piu *PlaceInventoryUpdate) SetStockQuantity(i int) *PlaceInventoryUpdate {
	piu.mutation.ResetStockQuantity()
	piu.mutation.SetStockQuantity(i)
	return piu
}

// AddStockQuantity adds i to the "stock_quantity" field.
func (piu *PlaceInventoryUpdate) AddStockQuantity(i int) *PlaceInventoryUpdate {
	piu.mutation.AddStockQuantity(i)
	return piu
}

// SetMinStockThreshold sets the "min_stock_threshold" field.
func (piu *PlaceInventoryUpdate) SetMinStockThreshold(i int) *PlaceInventoryUpdate {
	piu.mutation.ResetMinStockThreshold()
	piu.mutation.SetMinStockThreshold(i)
	return piu
}

// SetNillableMinStockThreshold sets the "min_stock_threshold" field if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableMinStockThreshold(i *int) *PlaceInventoryUpdate {
	if i != nil {
		piu.SetMinStockThreshold(*i)
	}
	return piu
}

// AddMinStockThreshold adds i to the "min_stock_threshold" field.
func (piu *PlaceInventoryUpdate) AddMinStockThreshold(i int) *PlaceInventoryUpdate {
	piu.mutation.AddMinStockThreshold(i)
	return piu
}

// ClearMinStockThreshold clears the value of the "min_stock_threshold" field.
func (piu *PlaceInventoryUpdate) ClearMinStockThreshold() *PlaceInventoryUpdate {
	piu.mutation.ClearMinStockThreshold()
	return piu
}

// SetSku sets the "sku" field.
func (piu *PlaceInventoryUpdate) SetSku(s string) *PlaceInventoryUpdate {
	piu.mutation.SetSku(s)
	return piu
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableSku(s *string) *PlaceInventoryUpdate {
	if s != nil {
		piu.SetSku(*s)
	}
	return piu
}

// ClearSku clears the value of the "sku" field.
func (piu *PlaceInventoryUpdate) ClearSku() *PlaceInventoryUpdate {
	piu.mutation.ClearSku()
	return piu
}

// SetExpiryDate sets the "expiry_date" field.
func (piu *PlaceInventoryUpdate) SetExpiryDate(t time.Time) *PlaceInventoryUpdate {
	piu.mutation.SetExpiryDate(t)
	return piu
}

// SetNillableExpiryDate sets the "expiry_date" field if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableExpiryDate(t *time.Time) *PlaceInventoryUpdate {
	if t != nil {
		piu.SetExpiryDate(*t)
	}
	return piu
}

// ClearExpiryDate clears the value of the "expiry_date" field.
func (piu *PlaceInventoryUpdate) ClearExpiryDate() *PlaceInventoryUpdate {
	piu.mutation.ClearExpiryDate()
	return piu
}

// SetSize sets the "size" field.
func (piu *PlaceInventoryUpdate) SetSize(s string) *PlaceInventoryUpdate {
	piu.mutation.SetSize(s)
	return piu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableSize(s *string) *PlaceInventoryUpdate {
	if s != nil {
		piu.SetSize(*s)
	}
	return piu
}

// ClearSize clears the value of the "size" field.
func (piu *PlaceInventoryUpdate) ClearSize() *PlaceInventoryUpdate {
	piu.mutation.ClearSize()
	return piu
}

// SetColor sets the "color" field.
func (piu *PlaceInventoryUpdate) SetColor(s string) *PlaceInventoryUpdate {
	piu.mutation.SetColor(s)
	return piu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableColor(s *string) *PlaceInventoryUpdate {
	if s != nil {
		piu.SetColor(*s)
	}
	return piu
}

// ClearColor clears the value of the "color" field.
func (piu *PlaceInventoryUpdate) ClearColor() *PlaceInventoryUpdate {
	piu.mutation.ClearColor()
	return piu
}

// SetBrand sets the "brand" field.
func (piu *PlaceInventoryUpdate) SetBrand(s string) *PlaceInventoryUpdate {
	piu.mutation.SetBrand(s)
	return piu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableBrand(s *string) *PlaceInventoryUpdate {
	if s != nil {
		piu.SetBrand(*s)
	}
	return piu
}

// ClearBrand clears the value of the "brand" field.
func (piu *PlaceInventoryUpdate) ClearBrand() *PlaceInventoryUpdate {
	piu.mutation.ClearBrand()
	return piu
}

// SetPurchaseDate sets the "purchase_date" field.
func (piu *PlaceInventoryUpdate) SetPurchaseDate(t time.Time) *PlaceInventoryUpdate {
	piu.mutation.SetPurchaseDate(t)
	return piu
}

// SetNillablePurchaseDate sets the "purchase_date" field if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillablePurchaseDate(t *time.Time) *PlaceInventoryUpdate {
	if t != nil {
		piu.SetPurchaseDate(*t)
	}
	return piu
}

// ClearPurchaseDate clears the value of the "purchase_date" field.
func (piu *PlaceInventoryUpdate) ClearPurchaseDate() *PlaceInventoryUpdate {
	piu.mutation.ClearPurchaseDate()
	return piu
}

// SetLastUpdated sets the "last_updated" field.
func (piu *PlaceInventoryUpdate) SetLastUpdated(t time.Time) *PlaceInventoryUpdate {
	piu.mutation.SetLastUpdated(t)
	return piu
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableLastUpdated(t *time.Time) *PlaceInventoryUpdate {
	if t != nil {
		piu.SetLastUpdated(*t)
	}
	return piu
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (piu *PlaceInventoryUpdate) SetPlaceID(id string) *PlaceInventoryUpdate {
	piu.mutation.SetPlaceID(id)
	return piu
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillablePlaceID(id *string) *PlaceInventoryUpdate {
	if id != nil {
		piu = piu.SetPlaceID(*id)
	}
	return piu
}

// SetPlace sets the "place" edge to the Place entity.
func (piu *PlaceInventoryUpdate) SetPlace(p *Place) *PlaceInventoryUpdate {
	return piu.SetPlaceID(p.ID)
}

// SetInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID.
func (piu *PlaceInventoryUpdate) SetInventoryTypeID(id string) *PlaceInventoryUpdate {
	piu.mutation.SetInventoryTypeID(id)
	return piu
}

// SetNillableInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableInventoryTypeID(id *string) *PlaceInventoryUpdate {
	if id != nil {
		piu = piu.SetInventoryTypeID(*id)
	}
	return piu
}

// SetInventoryType sets the "inventory_type" edge to the InventoryType entity.
func (piu *PlaceInventoryUpdate) SetInventoryType(i *InventoryType) *PlaceInventoryUpdate {
	return piu.SetInventoryTypeID(i.ID)
}

// AddAttributeIDs adds the "attributes" edge to the PlaceInventoryAttribute entity by IDs.
func (piu *PlaceInventoryUpdate) AddAttributeIDs(ids ...string) *PlaceInventoryUpdate {
	piu.mutation.AddAttributeIDs(ids...)
	return piu
}

// AddAttributes adds the "attributes" edges to the PlaceInventoryAttribute entity.
func (piu *PlaceInventoryUpdate) AddAttributes(p ...*PlaceInventoryAttribute) *PlaceInventoryUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.AddAttributeIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (piu *PlaceInventoryUpdate) AddMediumIDs(ids ...string) *PlaceInventoryUpdate {
	piu.mutation.AddMediumIDs(ids...)
	return piu
}

// AddMedia adds the "media" edges to the Media entity.
func (piu *PlaceInventoryUpdate) AddMedia(m ...*Media) *PlaceInventoryUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return piu.AddMediumIDs(ids...)
}

// AddTransactionHistoryIDs adds the "transaction_histories" edge to the TransactionHistory entity by IDs.
func (piu *PlaceInventoryUpdate) AddTransactionHistoryIDs(ids ...string) *PlaceInventoryUpdate {
	piu.mutation.AddTransactionHistoryIDs(ids...)
	return piu
}

// AddTransactionHistories adds the "transaction_histories" edges to the TransactionHistory entity.
func (piu *PlaceInventoryUpdate) AddTransactionHistories(t ...*TransactionHistory) *PlaceInventoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piu.AddTransactionHistoryIDs(ids...)
}

// AddReservationBlockIDs adds the "reservation_blocks" edge to the ReservationBlock entity by IDs.
func (piu *PlaceInventoryUpdate) AddReservationBlockIDs(ids ...string) *PlaceInventoryUpdate {
	piu.mutation.AddReservationBlockIDs(ids...)
	return piu
}

// AddReservationBlocks adds the "reservation_blocks" edges to the ReservationBlock entity.
func (piu *PlaceInventoryUpdate) AddReservationBlocks(r ...*ReservationBlock) *PlaceInventoryUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return piu.AddReservationBlockIDs(ids...)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (piu *PlaceInventoryUpdate) SetBusinessID(id string) *PlaceInventoryUpdate {
	piu.mutation.SetBusinessID(id)
	return piu
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableBusinessID(id *string) *PlaceInventoryUpdate {
	if id != nil {
		piu = piu.SetBusinessID(*id)
	}
	return piu
}

// SetBusiness sets the "business" edge to the Business entity.
func (piu *PlaceInventoryUpdate) SetBusiness(b *Business) *PlaceInventoryUpdate {
	return piu.SetBusinessID(b.ID)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (piu *PlaceInventoryUpdate) SetCategoryID(id string) *PlaceInventoryUpdate {
	piu.mutation.SetCategoryID(id)
	return piu
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (piu *PlaceInventoryUpdate) SetNillableCategoryID(id *string) *PlaceInventoryUpdate {
	if id != nil {
		piu = piu.SetCategoryID(*id)
	}
	return piu
}

// SetCategory sets the "category" edge to the Category entity.
func (piu *PlaceInventoryUpdate) SetCategory(c *Category) *PlaceInventoryUpdate {
	return piu.SetCategoryID(c.ID)
}

// Mutation returns the PlaceInventoryMutation object of the builder.
func (piu *PlaceInventoryUpdate) Mutation() *PlaceInventoryMutation {
	return piu.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (piu *PlaceInventoryUpdate) ClearPlace() *PlaceInventoryUpdate {
	piu.mutation.ClearPlace()
	return piu
}

// ClearInventoryType clears the "inventory_type" edge to the InventoryType entity.
func (piu *PlaceInventoryUpdate) ClearInventoryType() *PlaceInventoryUpdate {
	piu.mutation.ClearInventoryType()
	return piu
}

// ClearAttributes clears all "attributes" edges to the PlaceInventoryAttribute entity.
func (piu *PlaceInventoryUpdate) ClearAttributes() *PlaceInventoryUpdate {
	piu.mutation.ClearAttributes()
	return piu
}

// RemoveAttributeIDs removes the "attributes" edge to PlaceInventoryAttribute entities by IDs.
func (piu *PlaceInventoryUpdate) RemoveAttributeIDs(ids ...string) *PlaceInventoryUpdate {
	piu.mutation.RemoveAttributeIDs(ids...)
	return piu
}

// RemoveAttributes removes "attributes" edges to PlaceInventoryAttribute entities.
func (piu *PlaceInventoryUpdate) RemoveAttributes(p ...*PlaceInventoryAttribute) *PlaceInventoryUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piu.RemoveAttributeIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (piu *PlaceInventoryUpdate) ClearMedia() *PlaceInventoryUpdate {
	piu.mutation.ClearMedia()
	return piu
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (piu *PlaceInventoryUpdate) RemoveMediumIDs(ids ...string) *PlaceInventoryUpdate {
	piu.mutation.RemoveMediumIDs(ids...)
	return piu
}

// RemoveMedia removes "media" edges to Media entities.
func (piu *PlaceInventoryUpdate) RemoveMedia(m ...*Media) *PlaceInventoryUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return piu.RemoveMediumIDs(ids...)
}

// ClearTransactionHistories clears all "transaction_histories" edges to the TransactionHistory entity.
func (piu *PlaceInventoryUpdate) ClearTransactionHistories() *PlaceInventoryUpdate {
	piu.mutation.ClearTransactionHistories()
	return piu
}

// RemoveTransactionHistoryIDs removes the "transaction_histories" edge to TransactionHistory entities by IDs.
func (piu *PlaceInventoryUpdate) RemoveTransactionHistoryIDs(ids ...string) *PlaceInventoryUpdate {
	piu.mutation.RemoveTransactionHistoryIDs(ids...)
	return piu
}

// RemoveTransactionHistories removes "transaction_histories" edges to TransactionHistory entities.
func (piu *PlaceInventoryUpdate) RemoveTransactionHistories(t ...*TransactionHistory) *PlaceInventoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piu.RemoveTransactionHistoryIDs(ids...)
}

// ClearReservationBlocks clears all "reservation_blocks" edges to the ReservationBlock entity.
func (piu *PlaceInventoryUpdate) ClearReservationBlocks() *PlaceInventoryUpdate {
	piu.mutation.ClearReservationBlocks()
	return piu
}

// RemoveReservationBlockIDs removes the "reservation_blocks" edge to ReservationBlock entities by IDs.
func (piu *PlaceInventoryUpdate) RemoveReservationBlockIDs(ids ...string) *PlaceInventoryUpdate {
	piu.mutation.RemoveReservationBlockIDs(ids...)
	return piu
}

// RemoveReservationBlocks removes "reservation_blocks" edges to ReservationBlock entities.
func (piu *PlaceInventoryUpdate) RemoveReservationBlocks(r ...*ReservationBlock) *PlaceInventoryUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return piu.RemoveReservationBlockIDs(ids...)
}

// ClearBusiness clears the "business" edge to the Business entity.
func (piu *PlaceInventoryUpdate) ClearBusiness() *PlaceInventoryUpdate {
	piu.mutation.ClearBusiness()
	return piu
}

// ClearCategory clears the "category" edge to the Category entity.
func (piu *PlaceInventoryUpdate) ClearCategory() *PlaceInventoryUpdate {
	piu.mutation.ClearCategory()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PlaceInventoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PlaceInventoryUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PlaceInventoryUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PlaceInventoryUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *PlaceInventoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(placeinventory.Table, placeinventory.Columns, sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Name(); ok {
		_spec.SetField(placeinventory.FieldName, field.TypeString, value)
	}
	if value, ok := piu.mutation.Price(); ok {
		_spec.SetField(placeinventory.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := piu.mutation.AddedPrice(); ok {
		_spec.AddField(placeinventory.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := piu.mutation.StockQuantity(); ok {
		_spec.SetField(placeinventory.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedStockQuantity(); ok {
		_spec.AddField(placeinventory.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := piu.mutation.MinStockThreshold(); ok {
		_spec.SetField(placeinventory.FieldMinStockThreshold, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedMinStockThreshold(); ok {
		_spec.AddField(placeinventory.FieldMinStockThreshold, field.TypeInt, value)
	}
	if piu.mutation.MinStockThresholdCleared() {
		_spec.ClearField(placeinventory.FieldMinStockThreshold, field.TypeInt)
	}
	if value, ok := piu.mutation.Sku(); ok {
		_spec.SetField(placeinventory.FieldSku, field.TypeString, value)
	}
	if piu.mutation.SkuCleared() {
		_spec.ClearField(placeinventory.FieldSku, field.TypeString)
	}
	if value, ok := piu.mutation.ExpiryDate(); ok {
		_spec.SetField(placeinventory.FieldExpiryDate, field.TypeTime, value)
	}
	if piu.mutation.ExpiryDateCleared() {
		_spec.ClearField(placeinventory.FieldExpiryDate, field.TypeTime)
	}
	if value, ok := piu.mutation.Size(); ok {
		_spec.SetField(placeinventory.FieldSize, field.TypeString, value)
	}
	if piu.mutation.SizeCleared() {
		_spec.ClearField(placeinventory.FieldSize, field.TypeString)
	}
	if value, ok := piu.mutation.Color(); ok {
		_spec.SetField(placeinventory.FieldColor, field.TypeString, value)
	}
	if piu.mutation.ColorCleared() {
		_spec.ClearField(placeinventory.FieldColor, field.TypeString)
	}
	if value, ok := piu.mutation.Brand(); ok {
		_spec.SetField(placeinventory.FieldBrand, field.TypeString, value)
	}
	if piu.mutation.BrandCleared() {
		_spec.ClearField(placeinventory.FieldBrand, field.TypeString)
	}
	if value, ok := piu.mutation.PurchaseDate(); ok {
		_spec.SetField(placeinventory.FieldPurchaseDate, field.TypeTime, value)
	}
	if piu.mutation.PurchaseDateCleared() {
		_spec.ClearField(placeinventory.FieldPurchaseDate, field.TypeTime)
	}
	if value, ok := piu.mutation.LastUpdated(); ok {
		_spec.SetField(placeinventory.FieldLastUpdated, field.TypeTime, value)
	}
	if piu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.PlaceTable,
			Columns: []string{placeinventory.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.PlaceTable,
			Columns: []string{placeinventory.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.InventoryTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.InventoryTypeTable,
			Columns: []string{placeinventory.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.InventoryTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.InventoryTypeTable,
			Columns: []string{placeinventory.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.AttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.AttributesTable,
			Columns: []string{placeinventory.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedAttributesIDs(); len(nodes) > 0 && !piu.mutation.AttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.AttributesTable,
			Columns: []string{placeinventory.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.AttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.AttributesTable,
			Columns: []string{placeinventory.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   placeinventory.MediaTable,
			Columns: placeinventory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedMediaIDs(); len(nodes) > 0 && !piu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   placeinventory.MediaTable,
			Columns: placeinventory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   placeinventory.MediaTable,
			Columns: placeinventory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.TransactionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.TransactionHistoriesTable,
			Columns: []string{placeinventory.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedTransactionHistoriesIDs(); len(nodes) > 0 && !piu.mutation.TransactionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.TransactionHistoriesTable,
			Columns: []string{placeinventory.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.TransactionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.TransactionHistoriesTable,
			Columns: []string{placeinventory.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.ReservationBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.ReservationBlocksTable,
			Columns: []string{placeinventory.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedReservationBlocksIDs(); len(nodes) > 0 && !piu.mutation.ReservationBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.ReservationBlocksTable,
			Columns: []string{placeinventory.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ReservationBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.ReservationBlocksTable,
			Columns: []string{placeinventory.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.BusinessTable,
			Columns: []string{placeinventory.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.BusinessTable,
			Columns: []string{placeinventory.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.CategoryTable,
			Columns: []string{placeinventory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.CategoryTable,
			Columns: []string{placeinventory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{placeinventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PlaceInventoryUpdateOne is the builder for updating a single PlaceInventory entity.
type PlaceInventoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaceInventoryMutation
}

// SetName sets the "name" field.
func (piuo *PlaceInventoryUpdateOne) SetName(s string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetName(s)
	return piuo
}

// SetPrice sets the "price" field.
func (piuo *PlaceInventoryUpdateOne) SetPrice(f float64) *PlaceInventoryUpdateOne {
	piuo.mutation.ResetPrice()
	piuo.mutation.SetPrice(f)
	return piuo
}

// AddPrice adds f to the "price" field.
func (piuo *PlaceInventoryUpdateOne) AddPrice(f float64) *PlaceInventoryUpdateOne {
	piuo.mutation.AddPrice(f)
	return piuo
}

// SetStockQuantity sets the "stock_quantity" field.
func (piuo *PlaceInventoryUpdateOne) SetStockQuantity(i int) *PlaceInventoryUpdateOne {
	piuo.mutation.ResetStockQuantity()
	piuo.mutation.SetStockQuantity(i)
	return piuo
}

// AddStockQuantity adds i to the "stock_quantity" field.
func (piuo *PlaceInventoryUpdateOne) AddStockQuantity(i int) *PlaceInventoryUpdateOne {
	piuo.mutation.AddStockQuantity(i)
	return piuo
}

// SetMinStockThreshold sets the "min_stock_threshold" field.
func (piuo *PlaceInventoryUpdateOne) SetMinStockThreshold(i int) *PlaceInventoryUpdateOne {
	piuo.mutation.ResetMinStockThreshold()
	piuo.mutation.SetMinStockThreshold(i)
	return piuo
}

// SetNillableMinStockThreshold sets the "min_stock_threshold" field if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableMinStockThreshold(i *int) *PlaceInventoryUpdateOne {
	if i != nil {
		piuo.SetMinStockThreshold(*i)
	}
	return piuo
}

// AddMinStockThreshold adds i to the "min_stock_threshold" field.
func (piuo *PlaceInventoryUpdateOne) AddMinStockThreshold(i int) *PlaceInventoryUpdateOne {
	piuo.mutation.AddMinStockThreshold(i)
	return piuo
}

// ClearMinStockThreshold clears the value of the "min_stock_threshold" field.
func (piuo *PlaceInventoryUpdateOne) ClearMinStockThreshold() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearMinStockThreshold()
	return piuo
}

// SetSku sets the "sku" field.
func (piuo *PlaceInventoryUpdateOne) SetSku(s string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetSku(s)
	return piuo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableSku(s *string) *PlaceInventoryUpdateOne {
	if s != nil {
		piuo.SetSku(*s)
	}
	return piuo
}

// ClearSku clears the value of the "sku" field.
func (piuo *PlaceInventoryUpdateOne) ClearSku() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearSku()
	return piuo
}

// SetExpiryDate sets the "expiry_date" field.
func (piuo *PlaceInventoryUpdateOne) SetExpiryDate(t time.Time) *PlaceInventoryUpdateOne {
	piuo.mutation.SetExpiryDate(t)
	return piuo
}

// SetNillableExpiryDate sets the "expiry_date" field if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableExpiryDate(t *time.Time) *PlaceInventoryUpdateOne {
	if t != nil {
		piuo.SetExpiryDate(*t)
	}
	return piuo
}

// ClearExpiryDate clears the value of the "expiry_date" field.
func (piuo *PlaceInventoryUpdateOne) ClearExpiryDate() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearExpiryDate()
	return piuo
}

// SetSize sets the "size" field.
func (piuo *PlaceInventoryUpdateOne) SetSize(s string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetSize(s)
	return piuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableSize(s *string) *PlaceInventoryUpdateOne {
	if s != nil {
		piuo.SetSize(*s)
	}
	return piuo
}

// ClearSize clears the value of the "size" field.
func (piuo *PlaceInventoryUpdateOne) ClearSize() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearSize()
	return piuo
}

// SetColor sets the "color" field.
func (piuo *PlaceInventoryUpdateOne) SetColor(s string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetColor(s)
	return piuo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableColor(s *string) *PlaceInventoryUpdateOne {
	if s != nil {
		piuo.SetColor(*s)
	}
	return piuo
}

// ClearColor clears the value of the "color" field.
func (piuo *PlaceInventoryUpdateOne) ClearColor() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearColor()
	return piuo
}

// SetBrand sets the "brand" field.
func (piuo *PlaceInventoryUpdateOne) SetBrand(s string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetBrand(s)
	return piuo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableBrand(s *string) *PlaceInventoryUpdateOne {
	if s != nil {
		piuo.SetBrand(*s)
	}
	return piuo
}

// ClearBrand clears the value of the "brand" field.
func (piuo *PlaceInventoryUpdateOne) ClearBrand() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearBrand()
	return piuo
}

// SetPurchaseDate sets the "purchase_date" field.
func (piuo *PlaceInventoryUpdateOne) SetPurchaseDate(t time.Time) *PlaceInventoryUpdateOne {
	piuo.mutation.SetPurchaseDate(t)
	return piuo
}

// SetNillablePurchaseDate sets the "purchase_date" field if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillablePurchaseDate(t *time.Time) *PlaceInventoryUpdateOne {
	if t != nil {
		piuo.SetPurchaseDate(*t)
	}
	return piuo
}

// ClearPurchaseDate clears the value of the "purchase_date" field.
func (piuo *PlaceInventoryUpdateOne) ClearPurchaseDate() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearPurchaseDate()
	return piuo
}

// SetLastUpdated sets the "last_updated" field.
func (piuo *PlaceInventoryUpdateOne) SetLastUpdated(t time.Time) *PlaceInventoryUpdateOne {
	piuo.mutation.SetLastUpdated(t)
	return piuo
}

// SetNillableLastUpdated sets the "last_updated" field if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableLastUpdated(t *time.Time) *PlaceInventoryUpdateOne {
	if t != nil {
		piuo.SetLastUpdated(*t)
	}
	return piuo
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (piuo *PlaceInventoryUpdateOne) SetPlaceID(id string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetPlaceID(id)
	return piuo
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillablePlaceID(id *string) *PlaceInventoryUpdateOne {
	if id != nil {
		piuo = piuo.SetPlaceID(*id)
	}
	return piuo
}

// SetPlace sets the "place" edge to the Place entity.
func (piuo *PlaceInventoryUpdateOne) SetPlace(p *Place) *PlaceInventoryUpdateOne {
	return piuo.SetPlaceID(p.ID)
}

// SetInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID.
func (piuo *PlaceInventoryUpdateOne) SetInventoryTypeID(id string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetInventoryTypeID(id)
	return piuo
}

// SetNillableInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableInventoryTypeID(id *string) *PlaceInventoryUpdateOne {
	if id != nil {
		piuo = piuo.SetInventoryTypeID(*id)
	}
	return piuo
}

// SetInventoryType sets the "inventory_type" edge to the InventoryType entity.
func (piuo *PlaceInventoryUpdateOne) SetInventoryType(i *InventoryType) *PlaceInventoryUpdateOne {
	return piuo.SetInventoryTypeID(i.ID)
}

// AddAttributeIDs adds the "attributes" edge to the PlaceInventoryAttribute entity by IDs.
func (piuo *PlaceInventoryUpdateOne) AddAttributeIDs(ids ...string) *PlaceInventoryUpdateOne {
	piuo.mutation.AddAttributeIDs(ids...)
	return piuo
}

// AddAttributes adds the "attributes" edges to the PlaceInventoryAttribute entity.
func (piuo *PlaceInventoryUpdateOne) AddAttributes(p ...*PlaceInventoryAttribute) *PlaceInventoryUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.AddAttributeIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (piuo *PlaceInventoryUpdateOne) AddMediumIDs(ids ...string) *PlaceInventoryUpdateOne {
	piuo.mutation.AddMediumIDs(ids...)
	return piuo
}

// AddMedia adds the "media" edges to the Media entity.
func (piuo *PlaceInventoryUpdateOne) AddMedia(m ...*Media) *PlaceInventoryUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return piuo.AddMediumIDs(ids...)
}

// AddTransactionHistoryIDs adds the "transaction_histories" edge to the TransactionHistory entity by IDs.
func (piuo *PlaceInventoryUpdateOne) AddTransactionHistoryIDs(ids ...string) *PlaceInventoryUpdateOne {
	piuo.mutation.AddTransactionHistoryIDs(ids...)
	return piuo
}

// AddTransactionHistories adds the "transaction_histories" edges to the TransactionHistory entity.
func (piuo *PlaceInventoryUpdateOne) AddTransactionHistories(t ...*TransactionHistory) *PlaceInventoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piuo.AddTransactionHistoryIDs(ids...)
}

// AddReservationBlockIDs adds the "reservation_blocks" edge to the ReservationBlock entity by IDs.
func (piuo *PlaceInventoryUpdateOne) AddReservationBlockIDs(ids ...string) *PlaceInventoryUpdateOne {
	piuo.mutation.AddReservationBlockIDs(ids...)
	return piuo
}

// AddReservationBlocks adds the "reservation_blocks" edges to the ReservationBlock entity.
func (piuo *PlaceInventoryUpdateOne) AddReservationBlocks(r ...*ReservationBlock) *PlaceInventoryUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return piuo.AddReservationBlockIDs(ids...)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (piuo *PlaceInventoryUpdateOne) SetBusinessID(id string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetBusinessID(id)
	return piuo
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableBusinessID(id *string) *PlaceInventoryUpdateOne {
	if id != nil {
		piuo = piuo.SetBusinessID(*id)
	}
	return piuo
}

// SetBusiness sets the "business" edge to the Business entity.
func (piuo *PlaceInventoryUpdateOne) SetBusiness(b *Business) *PlaceInventoryUpdateOne {
	return piuo.SetBusinessID(b.ID)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (piuo *PlaceInventoryUpdateOne) SetCategoryID(id string) *PlaceInventoryUpdateOne {
	piuo.mutation.SetCategoryID(id)
	return piuo
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (piuo *PlaceInventoryUpdateOne) SetNillableCategoryID(id *string) *PlaceInventoryUpdateOne {
	if id != nil {
		piuo = piuo.SetCategoryID(*id)
	}
	return piuo
}

// SetCategory sets the "category" edge to the Category entity.
func (piuo *PlaceInventoryUpdateOne) SetCategory(c *Category) *PlaceInventoryUpdateOne {
	return piuo.SetCategoryID(c.ID)
}

// Mutation returns the PlaceInventoryMutation object of the builder.
func (piuo *PlaceInventoryUpdateOne) Mutation() *PlaceInventoryMutation {
	return piuo.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (piuo *PlaceInventoryUpdateOne) ClearPlace() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearPlace()
	return piuo
}

// ClearInventoryType clears the "inventory_type" edge to the InventoryType entity.
func (piuo *PlaceInventoryUpdateOne) ClearInventoryType() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearInventoryType()
	return piuo
}

// ClearAttributes clears all "attributes" edges to the PlaceInventoryAttribute entity.
func (piuo *PlaceInventoryUpdateOne) ClearAttributes() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearAttributes()
	return piuo
}

// RemoveAttributeIDs removes the "attributes" edge to PlaceInventoryAttribute entities by IDs.
func (piuo *PlaceInventoryUpdateOne) RemoveAttributeIDs(ids ...string) *PlaceInventoryUpdateOne {
	piuo.mutation.RemoveAttributeIDs(ids...)
	return piuo
}

// RemoveAttributes removes "attributes" edges to PlaceInventoryAttribute entities.
func (piuo *PlaceInventoryUpdateOne) RemoveAttributes(p ...*PlaceInventoryAttribute) *PlaceInventoryUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return piuo.RemoveAttributeIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (piuo *PlaceInventoryUpdateOne) ClearMedia() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearMedia()
	return piuo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (piuo *PlaceInventoryUpdateOne) RemoveMediumIDs(ids ...string) *PlaceInventoryUpdateOne {
	piuo.mutation.RemoveMediumIDs(ids...)
	return piuo
}

// RemoveMedia removes "media" edges to Media entities.
func (piuo *PlaceInventoryUpdateOne) RemoveMedia(m ...*Media) *PlaceInventoryUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return piuo.RemoveMediumIDs(ids...)
}

// ClearTransactionHistories clears all "transaction_histories" edges to the TransactionHistory entity.
func (piuo *PlaceInventoryUpdateOne) ClearTransactionHistories() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearTransactionHistories()
	return piuo
}

// RemoveTransactionHistoryIDs removes the "transaction_histories" edge to TransactionHistory entities by IDs.
func (piuo *PlaceInventoryUpdateOne) RemoveTransactionHistoryIDs(ids ...string) *PlaceInventoryUpdateOne {
	piuo.mutation.RemoveTransactionHistoryIDs(ids...)
	return piuo
}

// RemoveTransactionHistories removes "transaction_histories" edges to TransactionHistory entities.
func (piuo *PlaceInventoryUpdateOne) RemoveTransactionHistories(t ...*TransactionHistory) *PlaceInventoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return piuo.RemoveTransactionHistoryIDs(ids...)
}

// ClearReservationBlocks clears all "reservation_blocks" edges to the ReservationBlock entity.
func (piuo *PlaceInventoryUpdateOne) ClearReservationBlocks() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearReservationBlocks()
	return piuo
}

// RemoveReservationBlockIDs removes the "reservation_blocks" edge to ReservationBlock entities by IDs.
func (piuo *PlaceInventoryUpdateOne) RemoveReservationBlockIDs(ids ...string) *PlaceInventoryUpdateOne {
	piuo.mutation.RemoveReservationBlockIDs(ids...)
	return piuo
}

// RemoveReservationBlocks removes "reservation_blocks" edges to ReservationBlock entities.
func (piuo *PlaceInventoryUpdateOne) RemoveReservationBlocks(r ...*ReservationBlock) *PlaceInventoryUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return piuo.RemoveReservationBlockIDs(ids...)
}

// ClearBusiness clears the "business" edge to the Business entity.
func (piuo *PlaceInventoryUpdateOne) ClearBusiness() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearBusiness()
	return piuo
}

// ClearCategory clears the "category" edge to the Category entity.
func (piuo *PlaceInventoryUpdateOne) ClearCategory() *PlaceInventoryUpdateOne {
	piuo.mutation.ClearCategory()
	return piuo
}

// Where appends a list predicates to the PlaceInventoryUpdate builder.
func (piuo *PlaceInventoryUpdateOne) Where(ps ...predicate.PlaceInventory) *PlaceInventoryUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PlaceInventoryUpdateOne) Select(field string, fields ...string) *PlaceInventoryUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PlaceInventory entity.
func (piuo *PlaceInventoryUpdateOne) Save(ctx context.Context) (*PlaceInventory, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PlaceInventoryUpdateOne) SaveX(ctx context.Context) *PlaceInventory {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PlaceInventoryUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PlaceInventoryUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *PlaceInventoryUpdateOne) sqlSave(ctx context.Context) (_node *PlaceInventory, err error) {
	_spec := sqlgraph.NewUpdateSpec(placeinventory.Table, placeinventory.Columns, sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaceInventory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, placeinventory.FieldID)
		for _, f := range fields {
			if !placeinventory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != placeinventory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Name(); ok {
		_spec.SetField(placeinventory.FieldName, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Price(); ok {
		_spec.SetField(placeinventory.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := piuo.mutation.AddedPrice(); ok {
		_spec.AddField(placeinventory.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := piuo.mutation.StockQuantity(); ok {
		_spec.SetField(placeinventory.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedStockQuantity(); ok {
		_spec.AddField(placeinventory.FieldStockQuantity, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.MinStockThreshold(); ok {
		_spec.SetField(placeinventory.FieldMinStockThreshold, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedMinStockThreshold(); ok {
		_spec.AddField(placeinventory.FieldMinStockThreshold, field.TypeInt, value)
	}
	if piuo.mutation.MinStockThresholdCleared() {
		_spec.ClearField(placeinventory.FieldMinStockThreshold, field.TypeInt)
	}
	if value, ok := piuo.mutation.Sku(); ok {
		_spec.SetField(placeinventory.FieldSku, field.TypeString, value)
	}
	if piuo.mutation.SkuCleared() {
		_spec.ClearField(placeinventory.FieldSku, field.TypeString)
	}
	if value, ok := piuo.mutation.ExpiryDate(); ok {
		_spec.SetField(placeinventory.FieldExpiryDate, field.TypeTime, value)
	}
	if piuo.mutation.ExpiryDateCleared() {
		_spec.ClearField(placeinventory.FieldExpiryDate, field.TypeTime)
	}
	if value, ok := piuo.mutation.Size(); ok {
		_spec.SetField(placeinventory.FieldSize, field.TypeString, value)
	}
	if piuo.mutation.SizeCleared() {
		_spec.ClearField(placeinventory.FieldSize, field.TypeString)
	}
	if value, ok := piuo.mutation.Color(); ok {
		_spec.SetField(placeinventory.FieldColor, field.TypeString, value)
	}
	if piuo.mutation.ColorCleared() {
		_spec.ClearField(placeinventory.FieldColor, field.TypeString)
	}
	if value, ok := piuo.mutation.Brand(); ok {
		_spec.SetField(placeinventory.FieldBrand, field.TypeString, value)
	}
	if piuo.mutation.BrandCleared() {
		_spec.ClearField(placeinventory.FieldBrand, field.TypeString)
	}
	if value, ok := piuo.mutation.PurchaseDate(); ok {
		_spec.SetField(placeinventory.FieldPurchaseDate, field.TypeTime, value)
	}
	if piuo.mutation.PurchaseDateCleared() {
		_spec.ClearField(placeinventory.FieldPurchaseDate, field.TypeTime)
	}
	if value, ok := piuo.mutation.LastUpdated(); ok {
		_spec.SetField(placeinventory.FieldLastUpdated, field.TypeTime, value)
	}
	if piuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.PlaceTable,
			Columns: []string{placeinventory.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.PlaceTable,
			Columns: []string{placeinventory.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.InventoryTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.InventoryTypeTable,
			Columns: []string{placeinventory.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.InventoryTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.InventoryTypeTable,
			Columns: []string{placeinventory.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.AttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.AttributesTable,
			Columns: []string{placeinventory.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedAttributesIDs(); len(nodes) > 0 && !piuo.mutation.AttributesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.AttributesTable,
			Columns: []string{placeinventory.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.AttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.AttributesTable,
			Columns: []string{placeinventory.AttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   placeinventory.MediaTable,
			Columns: placeinventory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !piuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   placeinventory.MediaTable,
			Columns: placeinventory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   placeinventory.MediaTable,
			Columns: placeinventory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.TransactionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.TransactionHistoriesTable,
			Columns: []string{placeinventory.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedTransactionHistoriesIDs(); len(nodes) > 0 && !piuo.mutation.TransactionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.TransactionHistoriesTable,
			Columns: []string{placeinventory.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.TransactionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.TransactionHistoriesTable,
			Columns: []string{placeinventory.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.ReservationBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.ReservationBlocksTable,
			Columns: []string{placeinventory.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedReservationBlocksIDs(); len(nodes) > 0 && !piuo.mutation.ReservationBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.ReservationBlocksTable,
			Columns: []string{placeinventory.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ReservationBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   placeinventory.ReservationBlocksTable,
			Columns: []string{placeinventory.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.BusinessTable,
			Columns: []string{placeinventory.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.BusinessTable,
			Columns: []string{placeinventory.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.CategoryTable,
			Columns: []string{placeinventory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventory.CategoryTable,
			Columns: []string{placeinventory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaceInventory{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{placeinventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}

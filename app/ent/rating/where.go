// Code generated by ent, DO NOT EDIT.

package rating

import (
	"placio_api/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Rating {
	return predicate.Rating(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Rating {
	return predicate.Rating(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Rating {
	return predicate.Rating(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Rating {
	return predicate.Rating(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Rating {
	return predicate.Rating(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Rating {
	return predicate.Rating(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Rating {
	return predicate.Rating(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Rating {
	return predicate.Rating(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Rating {
	return predicate.Rating(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Rating {
	return predicate.Rating(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Rating {
	return predicate.Rating(sql.FieldContainsFold(FieldID, id))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.Rating {
	return predicate.Rating(sql.FieldEQ(FieldScore, v))
}

// Review applies equality check predicate on the "review" field. It's identical to ReviewEQ.
func Review(v string) predicate.Rating {
	return predicate.Rating(sql.FieldEQ(FieldReview, v))
}

// RatedAt applies equality check predicate on the "ratedAt" field. It's identical to RatedAtEQ.
func RatedAt(v time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldEQ(FieldRatedAt, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.Rating {
	return predicate.Rating(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.Rating {
	return predicate.Rating(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.Rating {
	return predicate.Rating(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.Rating {
	return predicate.Rating(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.Rating {
	return predicate.Rating(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.Rating {
	return predicate.Rating(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.Rating {
	return predicate.Rating(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.Rating {
	return predicate.Rating(sql.FieldLTE(FieldScore, v))
}

// ReviewEQ applies the EQ predicate on the "review" field.
func ReviewEQ(v string) predicate.Rating {
	return predicate.Rating(sql.FieldEQ(FieldReview, v))
}

// ReviewNEQ applies the NEQ predicate on the "review" field.
func ReviewNEQ(v string) predicate.Rating {
	return predicate.Rating(sql.FieldNEQ(FieldReview, v))
}

// ReviewIn applies the In predicate on the "review" field.
func ReviewIn(vs ...string) predicate.Rating {
	return predicate.Rating(sql.FieldIn(FieldReview, vs...))
}

// ReviewNotIn applies the NotIn predicate on the "review" field.
func ReviewNotIn(vs ...string) predicate.Rating {
	return predicate.Rating(sql.FieldNotIn(FieldReview, vs...))
}

// ReviewGT applies the GT predicate on the "review" field.
func ReviewGT(v string) predicate.Rating {
	return predicate.Rating(sql.FieldGT(FieldReview, v))
}

// ReviewGTE applies the GTE predicate on the "review" field.
func ReviewGTE(v string) predicate.Rating {
	return predicate.Rating(sql.FieldGTE(FieldReview, v))
}

// ReviewLT applies the LT predicate on the "review" field.
func ReviewLT(v string) predicate.Rating {
	return predicate.Rating(sql.FieldLT(FieldReview, v))
}

// ReviewLTE applies the LTE predicate on the "review" field.
func ReviewLTE(v string) predicate.Rating {
	return predicate.Rating(sql.FieldLTE(FieldReview, v))
}

// ReviewContains applies the Contains predicate on the "review" field.
func ReviewContains(v string) predicate.Rating {
	return predicate.Rating(sql.FieldContains(FieldReview, v))
}

// ReviewHasPrefix applies the HasPrefix predicate on the "review" field.
func ReviewHasPrefix(v string) predicate.Rating {
	return predicate.Rating(sql.FieldHasPrefix(FieldReview, v))
}

// ReviewHasSuffix applies the HasSuffix predicate on the "review" field.
func ReviewHasSuffix(v string) predicate.Rating {
	return predicate.Rating(sql.FieldHasSuffix(FieldReview, v))
}

// ReviewIsNil applies the IsNil predicate on the "review" field.
func ReviewIsNil() predicate.Rating {
	return predicate.Rating(sql.FieldIsNull(FieldReview))
}

// ReviewNotNil applies the NotNil predicate on the "review" field.
func ReviewNotNil() predicate.Rating {
	return predicate.Rating(sql.FieldNotNull(FieldReview))
}

// ReviewEqualFold applies the EqualFold predicate on the "review" field.
func ReviewEqualFold(v string) predicate.Rating {
	return predicate.Rating(sql.FieldEqualFold(FieldReview, v))
}

// ReviewContainsFold applies the ContainsFold predicate on the "review" field.
func ReviewContainsFold(v string) predicate.Rating {
	return predicate.Rating(sql.FieldContainsFold(FieldReview, v))
}

// RatedAtEQ applies the EQ predicate on the "ratedAt" field.
func RatedAtEQ(v time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldEQ(FieldRatedAt, v))
}

// RatedAtNEQ applies the NEQ predicate on the "ratedAt" field.
func RatedAtNEQ(v time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldNEQ(FieldRatedAt, v))
}

// RatedAtIn applies the In predicate on the "ratedAt" field.
func RatedAtIn(vs ...time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldIn(FieldRatedAt, vs...))
}

// RatedAtNotIn applies the NotIn predicate on the "ratedAt" field.
func RatedAtNotIn(vs ...time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldNotIn(FieldRatedAt, vs...))
}

// RatedAtGT applies the GT predicate on the "ratedAt" field.
func RatedAtGT(v time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldGT(FieldRatedAt, v))
}

// RatedAtGTE applies the GTE predicate on the "ratedAt" field.
func RatedAtGTE(v time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldGTE(FieldRatedAt, v))
}

// RatedAtLT applies the LT predicate on the "ratedAt" field.
func RatedAtLT(v time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldLT(FieldRatedAt, v))
}

// RatedAtLTE applies the LTE predicate on the "ratedAt" field.
func RatedAtLTE(v time.Time) predicate.Rating {
	return predicate.Rating(sql.FieldLTE(FieldRatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusiness applies the HasEdge predicate on the "business" edge.
func HasBusiness() predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessTable, BusinessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessWith applies the HasEdge predicate on the "business" edge with a given conditions (other predicates).
func HasBusinessWith(preds ...predicate.Business) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		step := newBusinessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlace applies the HasEdge predicate on the "place" edge.
func HasPlace() predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PlaceTable, PlaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
func HasPlaceWith(preds ...predicate.Place) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Rating {
	return predicate.Rating(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rating) predicate.Rating {
	return predicate.Rating(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rating) predicate.Rating {
	return predicate.Rating(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rating) predicate.Rating {
	return predicate.Rating(sql.NotPredicates(p))
}

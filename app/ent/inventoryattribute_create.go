// Code generated by ent, DO NOT EDIT.

package placio_api

import (
	"context"
	"errors"
	"fmt"
	"placio_api/inventoryattribute"
	"placio_api/inventorytype"
	"placio_api/placeinventoryattribute"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventoryAttributeCreate is the builder for creating a InventoryAttribute entity.
type InventoryAttributeCreate struct {
	config
	mutation *InventoryAttributeMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (iac *InventoryAttributeCreate) SetName(s string) *InventoryAttributeCreate {
	iac.mutation.SetName(s)
	return iac
}

// SetIsMandatory sets the "is_mandatory" field.
func (iac *InventoryAttributeCreate) SetIsMandatory(b bool) *InventoryAttributeCreate {
	iac.mutation.SetIsMandatory(b)
	return iac
}

// SetNillableIsMandatory sets the "is_mandatory" field if the given value is not nil.
func (iac *InventoryAttributeCreate) SetNillableIsMandatory(b *bool) *InventoryAttributeCreate {
	if b != nil {
		iac.SetIsMandatory(*b)
	}
	return iac
}

// SetDataType sets the "data_type" field.
func (iac *InventoryAttributeCreate) SetDataType(it inventoryattribute.DataType) *InventoryAttributeCreate {
	iac.mutation.SetDataType(it)
	return iac
}

// SetNillableDataType sets the "data_type" field if the given value is not nil.
func (iac *InventoryAttributeCreate) SetNillableDataType(it *inventoryattribute.DataType) *InventoryAttributeCreate {
	if it != nil {
		iac.SetDataType(*it)
	}
	return iac
}

// SetID sets the "id" field.
func (iac *InventoryAttributeCreate) SetID(s string) *InventoryAttributeCreate {
	iac.mutation.SetID(s)
	return iac
}

// SetInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID.
func (iac *InventoryAttributeCreate) SetInventoryTypeID(id string) *InventoryAttributeCreate {
	iac.mutation.SetInventoryTypeID(id)
	return iac
}

// SetNillableInventoryTypeID sets the "inventory_type" edge to the InventoryType entity by ID if the given value is not nil.
func (iac *InventoryAttributeCreate) SetNillableInventoryTypeID(id *string) *InventoryAttributeCreate {
	if id != nil {
		iac = iac.SetInventoryTypeID(*id)
	}
	return iac
}

// SetInventoryType sets the "inventory_type" edge to the InventoryType entity.
func (iac *InventoryAttributeCreate) SetInventoryType(i *InventoryType) *InventoryAttributeCreate {
	return iac.SetInventoryTypeID(i.ID)
}

// AddPlaceInventoryAttributeIDs adds the "place_inventory_attributes" edge to the PlaceInventoryAttribute entity by IDs.
func (iac *InventoryAttributeCreate) AddPlaceInventoryAttributeIDs(ids ...string) *InventoryAttributeCreate {
	iac.mutation.AddPlaceInventoryAttributeIDs(ids...)
	return iac
}

// AddPlaceInventoryAttributes adds the "place_inventory_attributes" edges to the PlaceInventoryAttribute entity.
func (iac *InventoryAttributeCreate) AddPlaceInventoryAttributes(p ...*PlaceInventoryAttribute) *InventoryAttributeCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iac.AddPlaceInventoryAttributeIDs(ids...)
}

// Mutation returns the InventoryAttributeMutation object of the builder.
func (iac *InventoryAttributeCreate) Mutation() *InventoryAttributeMutation {
	return iac.mutation
}

// Save creates the InventoryAttribute in the database.
func (iac *InventoryAttributeCreate) Save(ctx context.Context) (*InventoryAttribute, error) {
	iac.defaults()
	return withHooks(ctx, iac.sqlSave, iac.mutation, iac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iac *InventoryAttributeCreate) SaveX(ctx context.Context) *InventoryAttribute {
	v, err := iac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iac *InventoryAttributeCreate) Exec(ctx context.Context) error {
	_, err := iac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iac *InventoryAttributeCreate) ExecX(ctx context.Context) {
	if err := iac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iac *InventoryAttributeCreate) defaults() {
	if _, ok := iac.mutation.IsMandatory(); !ok {
		v := inventoryattribute.DefaultIsMandatory
		iac.mutation.SetIsMandatory(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iac *InventoryAttributeCreate) check() error {
	if _, ok := iac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`placio_api: missing required field "InventoryAttribute.name"`)}
	}
	if _, ok := iac.mutation.IsMandatory(); !ok {
		return &ValidationError{Name: "is_mandatory", err: errors.New(`placio_api: missing required field "InventoryAttribute.is_mandatory"`)}
	}
	if v, ok := iac.mutation.DataType(); ok {
		if err := inventoryattribute.DataTypeValidator(v); err != nil {
			return &ValidationError{Name: "data_type", err: fmt.Errorf(`placio_api: validator failed for field "InventoryAttribute.data_type": %w`, err)}
		}
	}
	if v, ok := iac.mutation.ID(); ok {
		if err := inventoryattribute.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`placio_api: validator failed for field "InventoryAttribute.id": %w`, err)}
		}
	}
	return nil
}

func (iac *InventoryAttributeCreate) sqlSave(ctx context.Context) (*InventoryAttribute, error) {
	if err := iac.check(); err != nil {
		return nil, err
	}
	_node, _spec := iac.createSpec()
	if err := sqlgraph.CreateNode(ctx, iac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected InventoryAttribute.ID type: %T", _spec.ID.Value)
		}
	}
	iac.mutation.id = &_node.ID
	iac.mutation.done = true
	return _node, nil
}

func (iac *InventoryAttributeCreate) createSpec() (*InventoryAttribute, *sqlgraph.CreateSpec) {
	var (
		_node = &InventoryAttribute{config: iac.config}
		_spec = sqlgraph.NewCreateSpec(inventoryattribute.Table, sqlgraph.NewFieldSpec(inventoryattribute.FieldID, field.TypeString))
	)
	if id, ok := iac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iac.mutation.Name(); ok {
		_spec.SetField(inventoryattribute.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := iac.mutation.IsMandatory(); ok {
		_spec.SetField(inventoryattribute.FieldIsMandatory, field.TypeBool, value)
		_node.IsMandatory = value
	}
	if value, ok := iac.mutation.DataType(); ok {
		_spec.SetField(inventoryattribute.FieldDataType, field.TypeEnum, value)
		_node.DataType = value
	}
	if nodes := iac.mutation.InventoryTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   inventoryattribute.InventoryTypeTable,
			Columns: []string{inventoryattribute.InventoryTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventorytype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inventory_type_attributes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := iac.mutation.PlaceInventoryAttributesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventoryattribute.PlaceInventoryAttributesTable,
			Columns: []string{inventoryattribute.PlaceInventoryAttributesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InventoryAttributeCreateBulk is the builder for creating many InventoryAttribute entities in bulk.
type InventoryAttributeCreateBulk struct {
	config
	err      error
	builders []*InventoryAttributeCreate
}

// Save creates the InventoryAttribute entities in the database.
func (iacb *InventoryAttributeCreateBulk) Save(ctx context.Context) ([]*InventoryAttribute, error) {
	if iacb.err != nil {
		return nil, iacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iacb.builders))
	nodes := make([]*InventoryAttribute, len(iacb.builders))
	mutators := make([]Mutator, len(iacb.builders))
	for i := range iacb.builders {
		func(i int, root context.Context) {
			builder := iacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryAttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iacb *InventoryAttributeCreateBulk) SaveX(ctx context.Context) []*InventoryAttribute {
	v, err := iacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iacb *InventoryAttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := iacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacb *InventoryAttributeCreateBulk) ExecX(ctx context.Context) {
	if err := iacb.Exec(ctx); err != nil {
		panic(err)
	}
}

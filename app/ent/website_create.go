// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/customblock"
	"placio-app/ent/media"
	"placio-app/ent/template"
	"placio-app/ent/website"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebsiteCreate is the builder for creating a Website entity.
type WebsiteCreate struct {
	config
	mutation *WebsiteMutation
	hooks    []Hook
}

// SetDomainName sets the "domainName" field.
func (wc *WebsiteCreate) SetDomainName(s string) *WebsiteCreate {
	wc.mutation.SetDomainName(s)
	return wc
}

// SetCreationDate sets the "creationDate" field.
func (wc *WebsiteCreate) SetCreationDate(t time.Time) *WebsiteCreate {
	wc.mutation.SetCreationDate(t)
	return wc
}

// SetNillableCreationDate sets the "creationDate" field if the given value is not nil.
func (wc *WebsiteCreate) SetNillableCreationDate(t *time.Time) *WebsiteCreate {
	if t != nil {
		wc.SetCreationDate(*t)
	}
	return wc
}

// SetLastUpdated sets the "lastUpdated" field.
func (wc *WebsiteCreate) SetLastUpdated(t time.Time) *WebsiteCreate {
	wc.mutation.SetLastUpdated(t)
	return wc
}

// SetTitle sets the "title" field.
func (wc *WebsiteCreate) SetTitle(s string) *WebsiteCreate {
	wc.mutation.SetTitle(s)
	return wc
}

// SetDescription sets the "description" field.
func (wc *WebsiteCreate) SetDescription(s string) *WebsiteCreate {
	wc.mutation.SetDescription(s)
	return wc
}

// SetKeywords sets the "keywords" field.
func (wc *WebsiteCreate) SetKeywords(s string) *WebsiteCreate {
	wc.mutation.SetKeywords(s)
	return wc
}

// SetLanguage sets the "language" field.
func (wc *WebsiteCreate) SetLanguage(s string) *WebsiteCreate {
	wc.mutation.SetLanguage(s)
	return wc
}

// SetLogo sets the "logo" field.
func (wc *WebsiteCreate) SetLogo(s string) *WebsiteCreate {
	wc.mutation.SetLogo(s)
	return wc
}

// SetFavicon sets the "favicon" field.
func (wc *WebsiteCreate) SetFavicon(s string) *WebsiteCreate {
	wc.mutation.SetFavicon(s)
	return wc
}

// SetFacebook sets the "facebook" field.
func (wc *WebsiteCreate) SetFacebook(s string) *WebsiteCreate {
	wc.mutation.SetFacebook(s)
	return wc
}

// SetTwitter sets the "twitter" field.
func (wc *WebsiteCreate) SetTwitter(s string) *WebsiteCreate {
	wc.mutation.SetTwitter(s)
	return wc
}

// SetInstagram sets the "instagram" field.
func (wc *WebsiteCreate) SetInstagram(s string) *WebsiteCreate {
	wc.mutation.SetInstagram(s)
	return wc
}

// SetYoutube sets the "youtube" field.
func (wc *WebsiteCreate) SetYoutube(s string) *WebsiteCreate {
	wc.mutation.SetYoutube(s)
	return wc
}

// SetLinkedin sets the "linkedin" field.
func (wc *WebsiteCreate) SetLinkedin(s string) *WebsiteCreate {
	wc.mutation.SetLinkedin(s)
	return wc
}

// SetPinterest sets the "pinterest" field.
func (wc *WebsiteCreate) SetPinterest(s string) *WebsiteCreate {
	wc.mutation.SetPinterest(s)
	return wc
}

// SetMapCoordinates sets the "mapCoordinates" field.
func (wc *WebsiteCreate) SetMapCoordinates(m map[string]interface{}) *WebsiteCreate {
	wc.mutation.SetMapCoordinates(m)
	return wc
}

// SetLongitude sets the "longitude" field.
func (wc *WebsiteCreate) SetLongitude(s string) *WebsiteCreate {
	wc.mutation.SetLongitude(s)
	return wc
}

// SetLatitude sets the "latitude" field.
func (wc *WebsiteCreate) SetLatitude(s string) *WebsiteCreate {
	wc.mutation.SetLatitude(s)
	return wc
}

// SetAddress sets the "address" field.
func (wc *WebsiteCreate) SetAddress(s string) *WebsiteCreate {
	wc.mutation.SetAddress(s)
	return wc
}

// SetCity sets the "city" field.
func (wc *WebsiteCreate) SetCity(s string) *WebsiteCreate {
	wc.mutation.SetCity(s)
	return wc
}

// SetState sets the "state" field.
func (wc *WebsiteCreate) SetState(s string) *WebsiteCreate {
	wc.mutation.SetState(s)
	return wc
}

// SetCountry sets the "country" field.
func (wc *WebsiteCreate) SetCountry(s string) *WebsiteCreate {
	wc.mutation.SetCountry(s)
	return wc
}

// SetZipCode sets the "zipCode" field.
func (wc *WebsiteCreate) SetZipCode(s string) *WebsiteCreate {
	wc.mutation.SetZipCode(s)
	return wc
}

// SetPhoneNumber sets the "phoneNumber" field.
func (wc *WebsiteCreate) SetPhoneNumber(s string) *WebsiteCreate {
	wc.mutation.SetPhoneNumber(s)
	return wc
}

// SetEmail sets the "email" field.
func (wc *WebsiteCreate) SetEmail(s string) *WebsiteCreate {
	wc.mutation.SetEmail(s)
	return wc
}

// SetMetaTags sets the "metaTags" field.
func (wc *WebsiteCreate) SetMetaTags(m map[string]interface{}) *WebsiteCreate {
	wc.mutation.SetMetaTags(m)
	return wc
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (wc *WebsiteCreate) SetBusinessID(id string) *WebsiteCreate {
	wc.mutation.SetBusinessID(id)
	return wc
}

// SetBusiness sets the "business" edge to the Business entity.
func (wc *WebsiteCreate) SetBusiness(b *Business) *WebsiteCreate {
	return wc.SetBusinessID(b.ID)
}

// SetTemplateID sets the "template" edge to the Template entity by ID.
func (wc *WebsiteCreate) SetTemplateID(id string) *WebsiteCreate {
	wc.mutation.SetTemplateID(id)
	return wc
}

// SetTemplate sets the "template" edge to the Template entity.
func (wc *WebsiteCreate) SetTemplate(t *Template) *WebsiteCreate {
	return wc.SetTemplateID(t.ID)
}

// AddCustomBlockIDs adds the "customBlocks" edge to the CustomBlock entity by IDs.
func (wc *WebsiteCreate) AddCustomBlockIDs(ids ...string) *WebsiteCreate {
	wc.mutation.AddCustomBlockIDs(ids...)
	return wc
}

// AddCustomBlocks adds the "customBlocks" edges to the CustomBlock entity.
func (wc *WebsiteCreate) AddCustomBlocks(c ...*CustomBlock) *WebsiteCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wc.AddCustomBlockIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Media entity by IDs.
func (wc *WebsiteCreate) AddAssetIDs(ids ...string) *WebsiteCreate {
	wc.mutation.AddAssetIDs(ids...)
	return wc
}

// AddAssets adds the "assets" edges to the Media entity.
func (wc *WebsiteCreate) AddAssets(m ...*Media) *WebsiteCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wc.AddAssetIDs(ids...)
}

// Mutation returns the WebsiteMutation object of the builder.
func (wc *WebsiteCreate) Mutation() *WebsiteMutation {
	return wc.mutation
}

// Save creates the Website in the database.
func (wc *WebsiteCreate) Save(ctx context.Context) (*Website, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WebsiteCreate) SaveX(ctx context.Context) *Website {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WebsiteCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WebsiteCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WebsiteCreate) defaults() {
	if _, ok := wc.mutation.CreationDate(); !ok {
		v := website.DefaultCreationDate()
		wc.mutation.SetCreationDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WebsiteCreate) check() error {
	if _, ok := wc.mutation.DomainName(); !ok {
		return &ValidationError{Name: "domainName", err: errors.New(`ent: missing required field "Website.domainName"`)}
	}
	if _, ok := wc.mutation.CreationDate(); !ok {
		return &ValidationError{Name: "creationDate", err: errors.New(`ent: missing required field "Website.creationDate"`)}
	}
	if _, ok := wc.mutation.LastUpdated(); !ok {
		return &ValidationError{Name: "lastUpdated", err: errors.New(`ent: missing required field "Website.lastUpdated"`)}
	}
	if _, ok := wc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Website.title"`)}
	}
	if _, ok := wc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Website.description"`)}
	}
	if _, ok := wc.mutation.Keywords(); !ok {
		return &ValidationError{Name: "keywords", err: errors.New(`ent: missing required field "Website.keywords"`)}
	}
	if _, ok := wc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Website.language"`)}
	}
	if _, ok := wc.mutation.Logo(); !ok {
		return &ValidationError{Name: "logo", err: errors.New(`ent: missing required field "Website.logo"`)}
	}
	if _, ok := wc.mutation.Favicon(); !ok {
		return &ValidationError{Name: "favicon", err: errors.New(`ent: missing required field "Website.favicon"`)}
	}
	if _, ok := wc.mutation.Facebook(); !ok {
		return &ValidationError{Name: "facebook", err: errors.New(`ent: missing required field "Website.facebook"`)}
	}
	if _, ok := wc.mutation.Twitter(); !ok {
		return &ValidationError{Name: "twitter", err: errors.New(`ent: missing required field "Website.twitter"`)}
	}
	if _, ok := wc.mutation.Instagram(); !ok {
		return &ValidationError{Name: "instagram", err: errors.New(`ent: missing required field "Website.instagram"`)}
	}
	if _, ok := wc.mutation.Youtube(); !ok {
		return &ValidationError{Name: "youtube", err: errors.New(`ent: missing required field "Website.youtube"`)}
	}
	if _, ok := wc.mutation.Linkedin(); !ok {
		return &ValidationError{Name: "linkedin", err: errors.New(`ent: missing required field "Website.linkedin"`)}
	}
	if _, ok := wc.mutation.Pinterest(); !ok {
		return &ValidationError{Name: "pinterest", err: errors.New(`ent: missing required field "Website.pinterest"`)}
	}
	if _, ok := wc.mutation.MapCoordinates(); !ok {
		return &ValidationError{Name: "mapCoordinates", err: errors.New(`ent: missing required field "Website.mapCoordinates"`)}
	}
	if _, ok := wc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Website.longitude"`)}
	}
	if _, ok := wc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Website.latitude"`)}
	}
	if _, ok := wc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Website.address"`)}
	}
	if _, ok := wc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Website.city"`)}
	}
	if _, ok := wc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Website.state"`)}
	}
	if _, ok := wc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Website.country"`)}
	}
	if _, ok := wc.mutation.ZipCode(); !ok {
		return &ValidationError{Name: "zipCode", err: errors.New(`ent: missing required field "Website.zipCode"`)}
	}
	if _, ok := wc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phoneNumber", err: errors.New(`ent: missing required field "Website.phoneNumber"`)}
	}
	if _, ok := wc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Website.email"`)}
	}
	if _, ok := wc.mutation.MetaTags(); !ok {
		return &ValidationError{Name: "metaTags", err: errors.New(`ent: missing required field "Website.metaTags"`)}
	}
	if _, ok := wc.mutation.BusinessID(); !ok {
		return &ValidationError{Name: "business", err: errors.New(`ent: missing required edge "Website.business"`)}
	}
	if _, ok := wc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required edge "Website.template"`)}
	}
	return nil
}

func (wc *WebsiteCreate) sqlSave(ctx context.Context) (*Website, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Website.ID type: %T", _spec.ID.Value)
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WebsiteCreate) createSpec() (*Website, *sqlgraph.CreateSpec) {
	var (
		_node = &Website{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(website.Table, sqlgraph.NewFieldSpec(website.FieldID, field.TypeString))
	)
	if value, ok := wc.mutation.DomainName(); ok {
		_spec.SetField(website.FieldDomainName, field.TypeString, value)
		_node.DomainName = value
	}
	if value, ok := wc.mutation.CreationDate(); ok {
		_spec.SetField(website.FieldCreationDate, field.TypeTime, value)
		_node.CreationDate = value
	}
	if value, ok := wc.mutation.LastUpdated(); ok {
		_spec.SetField(website.FieldLastUpdated, field.TypeTime, value)
		_node.LastUpdated = value
	}
	if value, ok := wc.mutation.Title(); ok {
		_spec.SetField(website.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := wc.mutation.Description(); ok {
		_spec.SetField(website.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := wc.mutation.Keywords(); ok {
		_spec.SetField(website.FieldKeywords, field.TypeString, value)
		_node.Keywords = value
	}
	if value, ok := wc.mutation.Language(); ok {
		_spec.SetField(website.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := wc.mutation.Logo(); ok {
		_spec.SetField(website.FieldLogo, field.TypeString, value)
		_node.Logo = value
	}
	if value, ok := wc.mutation.Favicon(); ok {
		_spec.SetField(website.FieldFavicon, field.TypeString, value)
		_node.Favicon = value
	}
	if value, ok := wc.mutation.Facebook(); ok {
		_spec.SetField(website.FieldFacebook, field.TypeString, value)
		_node.Facebook = value
	}
	if value, ok := wc.mutation.Twitter(); ok {
		_spec.SetField(website.FieldTwitter, field.TypeString, value)
		_node.Twitter = value
	}
	if value, ok := wc.mutation.Instagram(); ok {
		_spec.SetField(website.FieldInstagram, field.TypeString, value)
		_node.Instagram = value
	}
	if value, ok := wc.mutation.Youtube(); ok {
		_spec.SetField(website.FieldYoutube, field.TypeString, value)
		_node.Youtube = value
	}
	if value, ok := wc.mutation.Linkedin(); ok {
		_spec.SetField(website.FieldLinkedin, field.TypeString, value)
		_node.Linkedin = value
	}
	if value, ok := wc.mutation.Pinterest(); ok {
		_spec.SetField(website.FieldPinterest, field.TypeString, value)
		_node.Pinterest = value
	}
	if value, ok := wc.mutation.MapCoordinates(); ok {
		_spec.SetField(website.FieldMapCoordinates, field.TypeJSON, value)
		_node.MapCoordinates = value
	}
	if value, ok := wc.mutation.Longitude(); ok {
		_spec.SetField(website.FieldLongitude, field.TypeString, value)
		_node.Longitude = value
	}
	if value, ok := wc.mutation.Latitude(); ok {
		_spec.SetField(website.FieldLatitude, field.TypeString, value)
		_node.Latitude = value
	}
	if value, ok := wc.mutation.Address(); ok {
		_spec.SetField(website.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := wc.mutation.City(); ok {
		_spec.SetField(website.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := wc.mutation.State(); ok {
		_spec.SetField(website.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := wc.mutation.Country(); ok {
		_spec.SetField(website.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := wc.mutation.ZipCode(); ok {
		_spec.SetField(website.FieldZipCode, field.TypeString, value)
		_node.ZipCode = value
	}
	if value, ok := wc.mutation.PhoneNumber(); ok {
		_spec.SetField(website.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := wc.mutation.Email(); ok {
		_spec.SetField(website.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := wc.mutation.MetaTags(); ok {
		_spec.SetField(website.FieldMetaTags, field.TypeJSON, value)
		_node.MetaTags = value
	}
	if nodes := wc.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   website.BusinessTable,
			Columns: []string{website.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.business_websites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   website.TemplateTable,
			Columns: []string{website.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.template_websites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.CustomBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.CustomBlocksTable,
			Columns: []string{website.CustomBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.AssetsTable,
			Columns: []string{website.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WebsiteCreateBulk is the builder for creating many Website entities in bulk.
type WebsiteCreateBulk struct {
	config
	builders []*WebsiteCreate
}

// Save creates the Website entities in the database.
func (wcb *WebsiteCreateBulk) Save(ctx context.Context) ([]*Website, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Website, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebsiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WebsiteCreateBulk) SaveX(ctx context.Context) []*Website {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WebsiteCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WebsiteCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package template

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldName, v))
}

// DefaultHTML applies equality check predicate on the "defaultHTML" field. It's identical to DefaultHTMLEQ.
func DefaultHTML(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldDefaultHTML, v))
}

// DefaultCSS applies equality check predicate on the "defaultCSS" field. It's identical to DefaultCSSEQ.
func DefaultCSS(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldDefaultCSS, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldName, v))
}

// DefaultHTMLEQ applies the EQ predicate on the "defaultHTML" field.
func DefaultHTMLEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldDefaultHTML, v))
}

// DefaultHTMLNEQ applies the NEQ predicate on the "defaultHTML" field.
func DefaultHTMLNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldDefaultHTML, v))
}

// DefaultHTMLIn applies the In predicate on the "defaultHTML" field.
func DefaultHTMLIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldDefaultHTML, vs...))
}

// DefaultHTMLNotIn applies the NotIn predicate on the "defaultHTML" field.
func DefaultHTMLNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldDefaultHTML, vs...))
}

// DefaultHTMLGT applies the GT predicate on the "defaultHTML" field.
func DefaultHTMLGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldDefaultHTML, v))
}

// DefaultHTMLGTE applies the GTE predicate on the "defaultHTML" field.
func DefaultHTMLGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldDefaultHTML, v))
}

// DefaultHTMLLT applies the LT predicate on the "defaultHTML" field.
func DefaultHTMLLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldDefaultHTML, v))
}

// DefaultHTMLLTE applies the LTE predicate on the "defaultHTML" field.
func DefaultHTMLLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldDefaultHTML, v))
}

// DefaultHTMLContains applies the Contains predicate on the "defaultHTML" field.
func DefaultHTMLContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldDefaultHTML, v))
}

// DefaultHTMLHasPrefix applies the HasPrefix predicate on the "defaultHTML" field.
func DefaultHTMLHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldDefaultHTML, v))
}

// DefaultHTMLHasSuffix applies the HasSuffix predicate on the "defaultHTML" field.
func DefaultHTMLHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldDefaultHTML, v))
}

// DefaultHTMLEqualFold applies the EqualFold predicate on the "defaultHTML" field.
func DefaultHTMLEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldDefaultHTML, v))
}

// DefaultHTMLContainsFold applies the ContainsFold predicate on the "defaultHTML" field.
func DefaultHTMLContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldDefaultHTML, v))
}

// DefaultCSSEQ applies the EQ predicate on the "defaultCSS" field.
func DefaultCSSEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldEQ(FieldDefaultCSS, v))
}

// DefaultCSSNEQ applies the NEQ predicate on the "defaultCSS" field.
func DefaultCSSNEQ(v string) predicate.Template {
	return predicate.Template(sql.FieldNEQ(FieldDefaultCSS, v))
}

// DefaultCSSIn applies the In predicate on the "defaultCSS" field.
func DefaultCSSIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldIn(FieldDefaultCSS, vs...))
}

// DefaultCSSNotIn applies the NotIn predicate on the "defaultCSS" field.
func DefaultCSSNotIn(vs ...string) predicate.Template {
	return predicate.Template(sql.FieldNotIn(FieldDefaultCSS, vs...))
}

// DefaultCSSGT applies the GT predicate on the "defaultCSS" field.
func DefaultCSSGT(v string) predicate.Template {
	return predicate.Template(sql.FieldGT(FieldDefaultCSS, v))
}

// DefaultCSSGTE applies the GTE predicate on the "defaultCSS" field.
func DefaultCSSGTE(v string) predicate.Template {
	return predicate.Template(sql.FieldGTE(FieldDefaultCSS, v))
}

// DefaultCSSLT applies the LT predicate on the "defaultCSS" field.
func DefaultCSSLT(v string) predicate.Template {
	return predicate.Template(sql.FieldLT(FieldDefaultCSS, v))
}

// DefaultCSSLTE applies the LTE predicate on the "defaultCSS" field.
func DefaultCSSLTE(v string) predicate.Template {
	return predicate.Template(sql.FieldLTE(FieldDefaultCSS, v))
}

// DefaultCSSContains applies the Contains predicate on the "defaultCSS" field.
func DefaultCSSContains(v string) predicate.Template {
	return predicate.Template(sql.FieldContains(FieldDefaultCSS, v))
}

// DefaultCSSHasPrefix applies the HasPrefix predicate on the "defaultCSS" field.
func DefaultCSSHasPrefix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasPrefix(FieldDefaultCSS, v))
}

// DefaultCSSHasSuffix applies the HasSuffix predicate on the "defaultCSS" field.
func DefaultCSSHasSuffix(v string) predicate.Template {
	return predicate.Template(sql.FieldHasSuffix(FieldDefaultCSS, v))
}

// DefaultCSSEqualFold applies the EqualFold predicate on the "defaultCSS" field.
func DefaultCSSEqualFold(v string) predicate.Template {
	return predicate.Template(sql.FieldEqualFold(FieldDefaultCSS, v))
}

// DefaultCSSContainsFold applies the ContainsFold predicate on the "defaultCSS" field.
func DefaultCSSContainsFold(v string) predicate.Template {
	return predicate.Template(sql.FieldContainsFold(FieldDefaultCSS, v))
}

// HasWebsites applies the HasEdge predicate on the "websites" edge.
func HasWebsites() predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WebsitesTable, WebsitesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWebsitesWith applies the HasEdge predicate on the "websites" edge with a given conditions (other predicates).
func HasWebsitesWith(preds ...predicate.Website) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		step := newWebsitesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Template) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Template) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Template) predicate.Template {
	return predicate.Template(func(s *sql.Selector) {
		p(s.Not())
	})
}

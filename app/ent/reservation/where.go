
// Code generated by ent, DO NOT EDIT.



	

package reservation




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)



	// ID filters vertices based on their ID field.
	func ID(id string) predicate.Reservation {
		return predicate.Reservation(sql.FieldEQ(FieldID, id))
	}

	
		
		
		// IDEQ applies the EQ predicate on the ID field.
		func IDEQ(id string) predicate.Reservation {
			return predicate.Reservation(sql.FieldEQ(FieldID,id))
		}
	
		
		
		// IDNEQ applies the NEQ predicate on the ID field.
		func IDNEQ(id string) predicate.Reservation {
			return predicate.Reservation(sql.FieldNEQ(FieldID,id))
		}
	
		
		
		// IDIn applies the In predicate on the ID field.
		func IDIn(ids ...string) predicate.Reservation {
			return predicate.Reservation(sql.FieldIn(FieldID,ids...))
		}
	
		
		
		// IDNotIn applies the NotIn predicate on the ID field.
		func IDNotIn(ids ...string) predicate.Reservation {
			return predicate.Reservation(sql.FieldNotIn(FieldID,ids...))
		}
	
		
		
		// IDGT applies the GT predicate on the ID field.
		func IDGT(id string) predicate.Reservation {
			return predicate.Reservation(sql.FieldGT(FieldID,id))
		}
	
		
		
		// IDGTE applies the GTE predicate on the ID field.
		func IDGTE(id string) predicate.Reservation {
			return predicate.Reservation(sql.FieldGTE(FieldID,id))
		}
	
		
		
		// IDLT applies the LT predicate on the ID field.
		func IDLT(id string) predicate.Reservation {
			return predicate.Reservation(sql.FieldLT(FieldID,id))
		}
	
		
		
		// IDLTE applies the LTE predicate on the ID field.
		func IDLTE(id string) predicate.Reservation {
			return predicate.Reservation(sql.FieldLTE(FieldID,id))
		}
	
		
		
		// IDEqualFold applies the EqualFold predicate on the ID field.
		func IDEqualFold(id string) predicate.Reservation {
			return predicate.Reservation(sql.FieldEqualFold(FieldID,id))
		}
	
		
		
		// IDContainsFold applies the ContainsFold predicate on the ID field.
		func IDContainsFold(id string) predicate.Reservation {
			return predicate.Reservation(sql.FieldContainsFold(FieldID,id))
		}
	



	
	
	
	
	
		
		// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
		func Date(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldEQ(FieldDate, v))
		}

	
	
	
	
	
		
		// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
		func Time(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldEQ(FieldTime, v))
		}

	
	
	
	
	
		
		// NumberOfPeople applies equality check predicate on the "numberOfPeople" field. It's identical to NumberOfPeopleEQ.
		func NumberOfPeople(v int) predicate.Reservation {
				return predicate.Reservation(sql.FieldEQ(FieldNumberOfPeople, v))
		}

	
	
	
	
	
		
		// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
		func Status(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldEQ(FieldStatus, v))
		}



	
		
		
		
		
		// DateEQ applies the EQ predicate on the "date" field.
		func DateEQ(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldEQ(FieldDate, v))
		}
	
		
		
		
		
		// DateNEQ applies the NEQ predicate on the "date" field.
		func DateNEQ(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldNEQ(FieldDate, v))
		}
	
		
		
		
		
		// DateIn applies the In predicate on the "date" field.
		func DateIn(vs ...time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldIn(FieldDate, vs...))
		}
	
		
		
		
		
		// DateNotIn applies the NotIn predicate on the "date" field.
		func DateNotIn(vs ...time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldNotIn(FieldDate, vs...))
		}
	
		
		
		
		
		// DateGT applies the GT predicate on the "date" field.
		func DateGT(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldGT(FieldDate, v))
		}
	
		
		
		
		
		// DateGTE applies the GTE predicate on the "date" field.
		func DateGTE(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldGTE(FieldDate, v))
		}
	
		
		
		
		
		// DateLT applies the LT predicate on the "date" field.
		func DateLT(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldLT(FieldDate, v))
		}
	
		
		
		
		
		// DateLTE applies the LTE predicate on the "date" field.
		func DateLTE(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldLTE(FieldDate, v))
		}
	

	
		
		
		
		
		// TimeEQ applies the EQ predicate on the "time" field.
		func TimeEQ(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldEQ(FieldTime, v))
		}
	
		
		
		
		
		// TimeNEQ applies the NEQ predicate on the "time" field.
		func TimeNEQ(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldNEQ(FieldTime, v))
		}
	
		
		
		
		
		// TimeIn applies the In predicate on the "time" field.
		func TimeIn(vs ...time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldIn(FieldTime, vs...))
		}
	
		
		
		
		
		// TimeNotIn applies the NotIn predicate on the "time" field.
		func TimeNotIn(vs ...time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldNotIn(FieldTime, vs...))
		}
	
		
		
		
		
		// TimeGT applies the GT predicate on the "time" field.
		func TimeGT(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldGT(FieldTime, v))
		}
	
		
		
		
		
		// TimeGTE applies the GTE predicate on the "time" field.
		func TimeGTE(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldGTE(FieldTime, v))
		}
	
		
		
		
		
		// TimeLT applies the LT predicate on the "time" field.
		func TimeLT(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldLT(FieldTime, v))
		}
	
		
		
		
		
		// TimeLTE applies the LTE predicate on the "time" field.
		func TimeLTE(v time.Time) predicate.Reservation {
				return predicate.Reservation(sql.FieldLTE(FieldTime, v))
		}
	

	
		
		
		
		
		// NumberOfPeopleEQ applies the EQ predicate on the "numberOfPeople" field.
		func NumberOfPeopleEQ(v int) predicate.Reservation {
				return predicate.Reservation(sql.FieldEQ(FieldNumberOfPeople, v))
		}
	
		
		
		
		
		// NumberOfPeopleNEQ applies the NEQ predicate on the "numberOfPeople" field.
		func NumberOfPeopleNEQ(v int) predicate.Reservation {
				return predicate.Reservation(sql.FieldNEQ(FieldNumberOfPeople, v))
		}
	
		
		
		
		
		// NumberOfPeopleIn applies the In predicate on the "numberOfPeople" field.
		func NumberOfPeopleIn(vs ...int) predicate.Reservation {
				return predicate.Reservation(sql.FieldIn(FieldNumberOfPeople, vs...))
		}
	
		
		
		
		
		// NumberOfPeopleNotIn applies the NotIn predicate on the "numberOfPeople" field.
		func NumberOfPeopleNotIn(vs ...int) predicate.Reservation {
				return predicate.Reservation(sql.FieldNotIn(FieldNumberOfPeople, vs...))
		}
	
		
		
		
		
		// NumberOfPeopleGT applies the GT predicate on the "numberOfPeople" field.
		func NumberOfPeopleGT(v int) predicate.Reservation {
				return predicate.Reservation(sql.FieldGT(FieldNumberOfPeople, v))
		}
	
		
		
		
		
		// NumberOfPeopleGTE applies the GTE predicate on the "numberOfPeople" field.
		func NumberOfPeopleGTE(v int) predicate.Reservation {
				return predicate.Reservation(sql.FieldGTE(FieldNumberOfPeople, v))
		}
	
		
		
		
		
		// NumberOfPeopleLT applies the LT predicate on the "numberOfPeople" field.
		func NumberOfPeopleLT(v int) predicate.Reservation {
				return predicate.Reservation(sql.FieldLT(FieldNumberOfPeople, v))
		}
	
		
		
		
		
		// NumberOfPeopleLTE applies the LTE predicate on the "numberOfPeople" field.
		func NumberOfPeopleLTE(v int) predicate.Reservation {
				return predicate.Reservation(sql.FieldLTE(FieldNumberOfPeople, v))
		}
	

	
		
		
		
		
		// StatusEQ applies the EQ predicate on the "status" field.
		func StatusEQ(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldEQ(FieldStatus, v))
		}
	
		
		
		
		
		// StatusNEQ applies the NEQ predicate on the "status" field.
		func StatusNEQ(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldNEQ(FieldStatus, v))
		}
	
		
		
		
		
		// StatusIn applies the In predicate on the "status" field.
		func StatusIn(vs ...string) predicate.Reservation {
				return predicate.Reservation(sql.FieldIn(FieldStatus, vs...))
		}
	
		
		
		
		
		// StatusNotIn applies the NotIn predicate on the "status" field.
		func StatusNotIn(vs ...string) predicate.Reservation {
				return predicate.Reservation(sql.FieldNotIn(FieldStatus, vs...))
		}
	
		
		
		
		
		// StatusGT applies the GT predicate on the "status" field.
		func StatusGT(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldGT(FieldStatus, v))
		}
	
		
		
		
		
		// StatusGTE applies the GTE predicate on the "status" field.
		func StatusGTE(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldGTE(FieldStatus, v))
		}
	
		
		
		
		
		// StatusLT applies the LT predicate on the "status" field.
		func StatusLT(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldLT(FieldStatus, v))
		}
	
		
		
		
		
		// StatusLTE applies the LTE predicate on the "status" field.
		func StatusLTE(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldLTE(FieldStatus, v))
		}
	
		
		
		
		
		// StatusContains applies the Contains predicate on the "status" field.
		func StatusContains(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldContains(FieldStatus, v))
		}
	
		
		
		
		
		// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
		func StatusHasPrefix(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldHasPrefix(FieldStatus, v))
		}
	
		
		
		
		
		// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
		func StatusHasSuffix(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldHasSuffix(FieldStatus, v))
		}
	
		
		
		
		
		// StatusEqualFold applies the EqualFold predicate on the "status" field.
		func StatusEqualFold(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldEqualFold(FieldStatus, v))
		}
	
		
		
		
		
		// StatusContainsFold applies the ContainsFold predicate on the "status" field.
		func StatusContainsFold(v string) predicate.Reservation {
				return predicate.Reservation(sql.FieldContainsFold(FieldStatus, v))
		}
	



	
	// HasPlace applies the HasEdge predicate on the "place" edge.
	func HasPlace() predicate.Reservation {
		return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlaceTable,PlaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
	func HasPlaceWith(preds ...predicate.Place) predicate.Reservation {
		return predicate.Reservation(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}

	
	// HasUser applies the HasEdge predicate on the "user" edge.
	func HasUser() predicate.Reservation {
		return predicate.Reservation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable,UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
	func HasUserWith(preds ...predicate.User) predicate.Reservation {
		return predicate.Reservation(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}


// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reservation) predicate.Reservation {
	return predicate.Reservation(sql.NotPredicates(p))
}






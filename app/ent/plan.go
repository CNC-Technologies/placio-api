// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"placio-app/ent/plan"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Overview holds the value of the "overview" field.
	Overview string `json:"overview,omitempty"`
	// Features holds the value of the "features" field.
	Features []string `json:"features,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanQuery when eager-loading is set.
	Edges        PlanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlanEdges holds the relations/edges for other nodes in the graph.
type PlanEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Businesses holds the value of the businesses edge.
	Businesses []*Business `json:"businesses,omitempty"`
	// Places holds the value of the places edge.
	Places []*Place `json:"places,omitempty"`
	// Media holds the value of the media edge.
	Media []*Media `json:"media,omitempty"`
	// Prices holds the value of the prices edge.
	Prices []*Price `json:"prices,omitempty"`
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// BusinessesOrErr returns the Businesses value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) BusinessesOrErr() ([]*Business, error) {
	if e.loadedTypes[1] {
		return e.Businesses, nil
	}
	return nil, &NotLoadedError{edge: "businesses"}
}

// PlacesOrErr returns the Places value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PlacesOrErr() ([]*Place, error) {
	if e.loadedTypes[2] {
		return e.Places, nil
	}
	return nil, &NotLoadedError{edge: "places"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[3] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// PricesOrErr returns the Prices value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PricesOrErr() ([]*Price, error) {
	if e.loadedTypes[4] {
		return e.Prices, nil
	}
	return nil, &NotLoadedError{edge: "prices"}
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[5] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plan.FieldFeatures:
			values[i] = new([]byte)
		case plan.FieldID, plan.FieldName, plan.FieldDescription, plan.FieldOverview:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pl.ID = value.String
			}
		case plan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plan.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pl.Description = value.String
			}
		case plan.FieldOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overview", values[i])
			} else if value.Valid {
				pl.Overview = value.String
			}
		case plan.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plan.
// This includes values selected through modifiers, order, etc.
func (pl *Plan) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Plan entity.
func (pl *Plan) QueryUsers() *UserQuery {
	return NewPlanClient(pl.config).QueryUsers(pl)
}

// QueryBusinesses queries the "businesses" edge of the Plan entity.
func (pl *Plan) QueryBusinesses() *BusinessQuery {
	return NewPlanClient(pl.config).QueryBusinesses(pl)
}

// QueryPlaces queries the "places" edge of the Plan entity.
func (pl *Plan) QueryPlaces() *PlaceQuery {
	return NewPlanClient(pl.config).QueryPlaces(pl)
}

// QueryMedia queries the "media" edge of the Plan entity.
func (pl *Plan) QueryMedia() *MediaQuery {
	return NewPlanClient(pl.config).QueryMedia(pl)
}

// QueryPrices queries the "prices" edge of the Plan entity.
func (pl *Plan) QueryPrices() *PriceQuery {
	return NewPlanClient(pl.config).QueryPrices(pl)
}

// QuerySubscriptions queries the "subscriptions" edge of the Plan entity.
func (pl *Plan) QuerySubscriptions() *SubscriptionQuery {
	return NewPlanClient(pl.config).QuerySubscriptions(pl)
}

// Update returns a builder for updating this Plan.
// Note that you need to call Plan.Unwrap() before calling this method if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return NewPlanClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pl.Description)
	builder.WriteString(", ")
	builder.WriteString("overview=")
	builder.WriteString(pl.Overview)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", pl.Features))
	builder.WriteByte(')')
	return builder.String()
}

// Plans is a parsable slice of Plan.
type Plans []*Plan

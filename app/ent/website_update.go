// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio_api/business"
	"placio_api/customblock"
	"placio_api/media"
	"placio_api/predicate"
	"placio_api/template"
	"placio_api/website"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebsiteUpdate is the builder for updating Website entities.
type WebsiteUpdate struct {
	config
	hooks    []Hook
	mutation *WebsiteMutation
}

// Where appends a list predicates to the WebsiteUpdate builder.
func (wu *WebsiteUpdate) Where(ps ...predicate.Website) *WebsiteUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetDomainName sets the "domainName" field.
func (wu *WebsiteUpdate) SetDomainName(s string) *WebsiteUpdate {
	wu.mutation.SetDomainName(s)
	return wu
}

// SetHeadingText sets the "heading_text" field.
func (wu *WebsiteUpdate) SetHeadingText(s string) *WebsiteUpdate {
	wu.mutation.SetHeadingText(s)
	return wu
}

// SetBusinessLogo sets the "business_logo" field.
func (wu *WebsiteUpdate) SetBusinessLogo(s string) *WebsiteUpdate {
	wu.mutation.SetBusinessLogo(s)
	return wu
}

// SetBusinessName sets the "business_name" field.
func (wu *WebsiteUpdate) SetBusinessName(s string) *WebsiteUpdate {
	wu.mutation.SetBusinessName(s)
	return wu
}

// SetBannerSectionBackgroundImage sets the "banner_section_background_image" field.
func (wu *WebsiteUpdate) SetBannerSectionBackgroundImage(s string) *WebsiteUpdate {
	wu.mutation.SetBannerSectionBackgroundImage(s)
	return wu
}

// SetBannerSectionBackgroundColor sets the "banner_section_background_color" field.
func (wu *WebsiteUpdate) SetBannerSectionBackgroundColor(s string) *WebsiteUpdate {
	wu.mutation.SetBannerSectionBackgroundColor(s)
	return wu
}

// SetBannerSectionText sets the "banner_section_text" field.
func (wu *WebsiteUpdate) SetBannerSectionText(s string) *WebsiteUpdate {
	wu.mutation.SetBannerSectionText(s)
	return wu
}

// SetThreeItemsSectionHeadingText sets the "three_items_section_heading_text" field.
func (wu *WebsiteUpdate) SetThreeItemsSectionHeadingText(s string) *WebsiteUpdate {
	wu.mutation.SetThreeItemsSectionHeadingText(s)
	return wu
}

// SetThreeItemsSectionDetailsText sets the "three_items_section_details_text" field.
func (wu *WebsiteUpdate) SetThreeItemsSectionDetailsText(s string) *WebsiteUpdate {
	wu.mutation.SetThreeItemsSectionDetailsText(s)
	return wu
}

// SetThreeItemsSectionItemOneText sets the "three_items_section_item_one_text" field.
func (wu *WebsiteUpdate) SetThreeItemsSectionItemOneText(s string) *WebsiteUpdate {
	wu.mutation.SetThreeItemsSectionItemOneText(s)
	return wu
}

// SetThreeItemsSectionItemTwoText sets the "three_items_section_item_two_text" field.
func (wu *WebsiteUpdate) SetThreeItemsSectionItemTwoText(s string) *WebsiteUpdate {
	wu.mutation.SetThreeItemsSectionItemTwoText(s)
	return wu
}

// SetThreeItemsSectionItemThreeText sets the "three_items_section_item_three_text" field.
func (wu *WebsiteUpdate) SetThreeItemsSectionItemThreeText(s string) *WebsiteUpdate {
	wu.mutation.SetThreeItemsSectionItemThreeText(s)
	return wu
}

// SetBannerTwoSectionBackgroundImage sets the "banner_two_section_background_image" field.
func (wu *WebsiteUpdate) SetBannerTwoSectionBackgroundImage(s string) *WebsiteUpdate {
	wu.mutation.SetBannerTwoSectionBackgroundImage(s)
	return wu
}

// SetBannerTwoSectionBackgroundColor sets the "banner_two_section_background_color" field.
func (wu *WebsiteUpdate) SetBannerTwoSectionBackgroundColor(s string) *WebsiteUpdate {
	wu.mutation.SetBannerTwoSectionBackgroundColor(s)
	return wu
}

// SetBannerTwoLeftSectionHeadingText sets the "banner_two_left_section_heading_text" field.
func (wu *WebsiteUpdate) SetBannerTwoLeftSectionHeadingText(s string) *WebsiteUpdate {
	wu.mutation.SetBannerTwoLeftSectionHeadingText(s)
	return wu
}

// SetBannerTwoLeftSectionDetailsText sets the "banner_two_left_section_details_text" field.
func (wu *WebsiteUpdate) SetBannerTwoLeftSectionDetailsText(s string) *WebsiteUpdate {
	wu.mutation.SetBannerTwoLeftSectionDetailsText(s)
	return wu
}

// SetBannerTwoLeftSectionButtonText sets the "banner_two_left_section_button_text" field.
func (wu *WebsiteUpdate) SetBannerTwoLeftSectionButtonText(s string) *WebsiteUpdate {
	wu.mutation.SetBannerTwoLeftSectionButtonText(s)
	return wu
}

// SetBannerTwoLeftSectionButtonLink sets the "banner_two_left_section_button_link" field.
func (wu *WebsiteUpdate) SetBannerTwoLeftSectionButtonLink(s string) *WebsiteUpdate {
	wu.mutation.SetBannerTwoLeftSectionButtonLink(s)
	return wu
}

// SetBannerTwoRightSideImage sets the "banner_two_right_side_image" field.
func (wu *WebsiteUpdate) SetBannerTwoRightSideImage(s string) *WebsiteUpdate {
	wu.mutation.SetBannerTwoRightSideImage(s)
	return wu
}

// SetAchievementsSection sets the "achievements_section" field.
func (wu *WebsiteUpdate) SetAchievementsSection(m map[string]interface{}) *WebsiteUpdate {
	wu.mutation.SetAchievementsSection(m)
	return wu
}

// SetInventorySectionHeadingText sets the "Inventory_section_heading_text" field.
func (wu *WebsiteUpdate) SetInventorySectionHeadingText(s string) *WebsiteUpdate {
	wu.mutation.SetInventorySectionHeadingText(s)
	return wu
}

// SetCreationDate sets the "creationDate" field.
func (wu *WebsiteUpdate) SetCreationDate(t time.Time) *WebsiteUpdate {
	wu.mutation.SetCreationDate(t)
	return wu
}

// SetNillableCreationDate sets the "creationDate" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableCreationDate(t *time.Time) *WebsiteUpdate {
	if t != nil {
		wu.SetCreationDate(*t)
	}
	return wu
}

// SetLastUpdated sets the "lastUpdated" field.
func (wu *WebsiteUpdate) SetLastUpdated(t time.Time) *WebsiteUpdate {
	wu.mutation.SetLastUpdated(t)
	return wu
}

// SetTitle sets the "title" field.
func (wu *WebsiteUpdate) SetTitle(s string) *WebsiteUpdate {
	wu.mutation.SetTitle(s)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WebsiteUpdate) SetDescription(s string) *WebsiteUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetKeywords sets the "keywords" field.
func (wu *WebsiteUpdate) SetKeywords(s string) *WebsiteUpdate {
	wu.mutation.SetKeywords(s)
	return wu
}

// SetLanguage sets the "language" field.
func (wu *WebsiteUpdate) SetLanguage(s string) *WebsiteUpdate {
	wu.mutation.SetLanguage(s)
	return wu
}

// SetLogo sets the "logo" field.
func (wu *WebsiteUpdate) SetLogo(s string) *WebsiteUpdate {
	wu.mutation.SetLogo(s)
	return wu
}

// SetFavicon sets the "favicon" field.
func (wu *WebsiteUpdate) SetFavicon(s string) *WebsiteUpdate {
	wu.mutation.SetFavicon(s)
	return wu
}

// SetFacebook sets the "facebook" field.
func (wu *WebsiteUpdate) SetFacebook(s string) *WebsiteUpdate {
	wu.mutation.SetFacebook(s)
	return wu
}

// SetTwitter sets the "twitter" field.
func (wu *WebsiteUpdate) SetTwitter(s string) *WebsiteUpdate {
	wu.mutation.SetTwitter(s)
	return wu
}

// SetInstagram sets the "instagram" field.
func (wu *WebsiteUpdate) SetInstagram(s string) *WebsiteUpdate {
	wu.mutation.SetInstagram(s)
	return wu
}

// SetYoutube sets the "youtube" field.
func (wu *WebsiteUpdate) SetYoutube(s string) *WebsiteUpdate {
	wu.mutation.SetYoutube(s)
	return wu
}

// SetLinkedin sets the "linkedin" field.
func (wu *WebsiteUpdate) SetLinkedin(s string) *WebsiteUpdate {
	wu.mutation.SetLinkedin(s)
	return wu
}

// SetPinterest sets the "pinterest" field.
func (wu *WebsiteUpdate) SetPinterest(s string) *WebsiteUpdate {
	wu.mutation.SetPinterest(s)
	return wu
}

// SetMapCoordinates sets the "mapCoordinates" field.
func (wu *WebsiteUpdate) SetMapCoordinates(m map[string]interface{}) *WebsiteUpdate {
	wu.mutation.SetMapCoordinates(m)
	return wu
}

// SetLongitude sets the "longitude" field.
func (wu *WebsiteUpdate) SetLongitude(s string) *WebsiteUpdate {
	wu.mutation.SetLongitude(s)
	return wu
}

// SetLatitude sets the "latitude" field.
func (wu *WebsiteUpdate) SetLatitude(s string) *WebsiteUpdate {
	wu.mutation.SetLatitude(s)
	return wu
}

// SetAddress sets the "address" field.
func (wu *WebsiteUpdate) SetAddress(s string) *WebsiteUpdate {
	wu.mutation.SetAddress(s)
	return wu
}

// SetCity sets the "city" field.
func (wu *WebsiteUpdate) SetCity(s string) *WebsiteUpdate {
	wu.mutation.SetCity(s)
	return wu
}

// SetState sets the "state" field.
func (wu *WebsiteUpdate) SetState(s string) *WebsiteUpdate {
	wu.mutation.SetState(s)
	return wu
}

// SetCountry sets the "country" field.
func (wu *WebsiteUpdate) SetCountry(s string) *WebsiteUpdate {
	wu.mutation.SetCountry(s)
	return wu
}

// SetZipCode sets the "zipCode" field.
func (wu *WebsiteUpdate) SetZipCode(s string) *WebsiteUpdate {
	wu.mutation.SetZipCode(s)
	return wu
}

// SetPhoneNumber sets the "phoneNumber" field.
func (wu *WebsiteUpdate) SetPhoneNumber(s string) *WebsiteUpdate {
	wu.mutation.SetPhoneNumber(s)
	return wu
}

// SetEmail sets the "email" field.
func (wu *WebsiteUpdate) SetEmail(s string) *WebsiteUpdate {
	wu.mutation.SetEmail(s)
	return wu
}

// SetMetaTags sets the "metaTags" field.
func (wu *WebsiteUpdate) SetMetaTags(m map[string]interface{}) *WebsiteUpdate {
	wu.mutation.SetMetaTags(m)
	return wu
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (wu *WebsiteUpdate) SetBusinessID(id string) *WebsiteUpdate {
	wu.mutation.SetBusinessID(id)
	return wu
}

// SetBusiness sets the "business" edge to the Business entity.
func (wu *WebsiteUpdate) SetBusiness(b *Business) *WebsiteUpdate {
	return wu.SetBusinessID(b.ID)
}

// SetTemplateID sets the "template" edge to the Template entity by ID.
func (wu *WebsiteUpdate) SetTemplateID(id string) *WebsiteUpdate {
	wu.mutation.SetTemplateID(id)
	return wu
}

// SetTemplate sets the "template" edge to the Template entity.
func (wu *WebsiteUpdate) SetTemplate(t *Template) *WebsiteUpdate {
	return wu.SetTemplateID(t.ID)
}

// AddCustomBlockIDs adds the "customBlocks" edge to the CustomBlock entity by IDs.
func (wu *WebsiteUpdate) AddCustomBlockIDs(ids ...string) *WebsiteUpdate {
	wu.mutation.AddCustomBlockIDs(ids...)
	return wu
}

// AddCustomBlocks adds the "customBlocks" edges to the CustomBlock entity.
func (wu *WebsiteUpdate) AddCustomBlocks(c ...*CustomBlock) *WebsiteUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wu.AddCustomBlockIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Media entity by IDs.
func (wu *WebsiteUpdate) AddAssetIDs(ids ...string) *WebsiteUpdate {
	wu.mutation.AddAssetIDs(ids...)
	return wu
}

// AddAssets adds the "assets" edges to the Media entity.
func (wu *WebsiteUpdate) AddAssets(m ...*Media) *WebsiteUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wu.AddAssetIDs(ids...)
}

// Mutation returns the WebsiteMutation object of the builder.
func (wu *WebsiteUpdate) Mutation() *WebsiteMutation {
	return wu.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (wu *WebsiteUpdate) ClearBusiness() *WebsiteUpdate {
	wu.mutation.ClearBusiness()
	return wu
}

// ClearTemplate clears the "template" edge to the Template entity.
func (wu *WebsiteUpdate) ClearTemplate() *WebsiteUpdate {
	wu.mutation.ClearTemplate()
	return wu
}

// ClearCustomBlocks clears all "customBlocks" edges to the CustomBlock entity.
func (wu *WebsiteUpdate) ClearCustomBlocks() *WebsiteUpdate {
	wu.mutation.ClearCustomBlocks()
	return wu
}

// RemoveCustomBlockIDs removes the "customBlocks" edge to CustomBlock entities by IDs.
func (wu *WebsiteUpdate) RemoveCustomBlockIDs(ids ...string) *WebsiteUpdate {
	wu.mutation.RemoveCustomBlockIDs(ids...)
	return wu
}

// RemoveCustomBlocks removes "customBlocks" edges to CustomBlock entities.
func (wu *WebsiteUpdate) RemoveCustomBlocks(c ...*CustomBlock) *WebsiteUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wu.RemoveCustomBlockIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Media entity.
func (wu *WebsiteUpdate) ClearAssets() *WebsiteUpdate {
	wu.mutation.ClearAssets()
	return wu
}

// RemoveAssetIDs removes the "assets" edge to Media entities by IDs.
func (wu *WebsiteUpdate) RemoveAssetIDs(ids ...string) *WebsiteUpdate {
	wu.mutation.RemoveAssetIDs(ids...)
	return wu
}

// RemoveAssets removes "assets" edges to Media entities.
func (wu *WebsiteUpdate) RemoveAssets(m ...*Media) *WebsiteUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wu.RemoveAssetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WebsiteUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WebsiteUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WebsiteUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WebsiteUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WebsiteUpdate) defaults() {
	if _, ok := wu.mutation.LastUpdated(); !ok {
		v := website.UpdateDefaultLastUpdated()
		wu.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WebsiteUpdate) check() error {
	if _, ok := wu.mutation.BusinessID(); wu.mutation.BusinessCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "Website.business"`)
	}
	if _, ok := wu.mutation.TemplateID(); wu.mutation.TemplateCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "Website.template"`)
	}
	return nil
}

func (wu *WebsiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(website.Table, website.Columns, sqlgraph.NewFieldSpec(website.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.DomainName(); ok {
		_spec.SetField(website.FieldDomainName, field.TypeString, value)
	}
	if value, ok := wu.mutation.HeadingText(); ok {
		_spec.SetField(website.FieldHeadingText, field.TypeString, value)
	}
	if value, ok := wu.mutation.BusinessLogo(); ok {
		_spec.SetField(website.FieldBusinessLogo, field.TypeString, value)
	}
	if value, ok := wu.mutation.BusinessName(); ok {
		_spec.SetField(website.FieldBusinessName, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerSectionBackgroundImage(); ok {
		_spec.SetField(website.FieldBannerSectionBackgroundImage, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerSectionBackgroundColor(); ok {
		_spec.SetField(website.FieldBannerSectionBackgroundColor, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerSectionText(); ok {
		_spec.SetField(website.FieldBannerSectionText, field.TypeString, value)
	}
	if value, ok := wu.mutation.ThreeItemsSectionHeadingText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionHeadingText, field.TypeString, value)
	}
	if value, ok := wu.mutation.ThreeItemsSectionDetailsText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionDetailsText, field.TypeString, value)
	}
	if value, ok := wu.mutation.ThreeItemsSectionItemOneText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionItemOneText, field.TypeString, value)
	}
	if value, ok := wu.mutation.ThreeItemsSectionItemTwoText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionItemTwoText, field.TypeString, value)
	}
	if value, ok := wu.mutation.ThreeItemsSectionItemThreeText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionItemThreeText, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerTwoSectionBackgroundImage(); ok {
		_spec.SetField(website.FieldBannerTwoSectionBackgroundImage, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerTwoSectionBackgroundColor(); ok {
		_spec.SetField(website.FieldBannerTwoSectionBackgroundColor, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerTwoLeftSectionHeadingText(); ok {
		_spec.SetField(website.FieldBannerTwoLeftSectionHeadingText, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerTwoLeftSectionDetailsText(); ok {
		_spec.SetField(website.FieldBannerTwoLeftSectionDetailsText, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerTwoLeftSectionButtonText(); ok {
		_spec.SetField(website.FieldBannerTwoLeftSectionButtonText, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerTwoLeftSectionButtonLink(); ok {
		_spec.SetField(website.FieldBannerTwoLeftSectionButtonLink, field.TypeString, value)
	}
	if value, ok := wu.mutation.BannerTwoRightSideImage(); ok {
		_spec.SetField(website.FieldBannerTwoRightSideImage, field.TypeString, value)
	}
	if value, ok := wu.mutation.AchievementsSection(); ok {
		_spec.SetField(website.FieldAchievementsSection, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.InventorySectionHeadingText(); ok {
		_spec.SetField(website.FieldInventorySectionHeadingText, field.TypeString, value)
	}
	if value, ok := wu.mutation.CreationDate(); ok {
		_spec.SetField(website.FieldCreationDate, field.TypeTime, value)
	}
	if value, ok := wu.mutation.LastUpdated(); ok {
		_spec.SetField(website.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Title(); ok {
		_spec.SetField(website.FieldTitle, field.TypeString, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(website.FieldDescription, field.TypeString, value)
	}
	if value, ok := wu.mutation.Keywords(); ok {
		_spec.SetField(website.FieldKeywords, field.TypeString, value)
	}
	if value, ok := wu.mutation.Language(); ok {
		_spec.SetField(website.FieldLanguage, field.TypeString, value)
	}
	if value, ok := wu.mutation.Logo(); ok {
		_spec.SetField(website.FieldLogo, field.TypeString, value)
	}
	if value, ok := wu.mutation.Favicon(); ok {
		_spec.SetField(website.FieldFavicon, field.TypeString, value)
	}
	if value, ok := wu.mutation.Facebook(); ok {
		_spec.SetField(website.FieldFacebook, field.TypeString, value)
	}
	if value, ok := wu.mutation.Twitter(); ok {
		_spec.SetField(website.FieldTwitter, field.TypeString, value)
	}
	if value, ok := wu.mutation.Instagram(); ok {
		_spec.SetField(website.FieldInstagram, field.TypeString, value)
	}
	if value, ok := wu.mutation.Youtube(); ok {
		_spec.SetField(website.FieldYoutube, field.TypeString, value)
	}
	if value, ok := wu.mutation.Linkedin(); ok {
		_spec.SetField(website.FieldLinkedin, field.TypeString, value)
	}
	if value, ok := wu.mutation.Pinterest(); ok {
		_spec.SetField(website.FieldPinterest, field.TypeString, value)
	}
	if value, ok := wu.mutation.MapCoordinates(); ok {
		_spec.SetField(website.FieldMapCoordinates, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.Longitude(); ok {
		_spec.SetField(website.FieldLongitude, field.TypeString, value)
	}
	if value, ok := wu.mutation.Latitude(); ok {
		_spec.SetField(website.FieldLatitude, field.TypeString, value)
	}
	if value, ok := wu.mutation.Address(); ok {
		_spec.SetField(website.FieldAddress, field.TypeString, value)
	}
	if value, ok := wu.mutation.City(); ok {
		_spec.SetField(website.FieldCity, field.TypeString, value)
	}
	if value, ok := wu.mutation.State(); ok {
		_spec.SetField(website.FieldState, field.TypeString, value)
	}
	if value, ok := wu.mutation.Country(); ok {
		_spec.SetField(website.FieldCountry, field.TypeString, value)
	}
	if value, ok := wu.mutation.ZipCode(); ok {
		_spec.SetField(website.FieldZipCode, field.TypeString, value)
	}
	if value, ok := wu.mutation.PhoneNumber(); ok {
		_spec.SetField(website.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := wu.mutation.Email(); ok {
		_spec.SetField(website.FieldEmail, field.TypeString, value)
	}
	if value, ok := wu.mutation.MetaTags(); ok {
		_spec.SetField(website.FieldMetaTags, field.TypeJSON, value)
	}
	if wu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   website.BusinessTable,
			Columns: []string{website.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   website.BusinessTable,
			Columns: []string{website.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   website.TemplateTable,
			Columns: []string{website.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   website.TemplateTable,
			Columns: []string{website.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.CustomBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.CustomBlocksTable,
			Columns: []string{website.CustomBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customblock.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedCustomBlocksIDs(); len(nodes) > 0 && !wu.mutation.CustomBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.CustomBlocksTable,
			Columns: []string{website.CustomBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CustomBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.CustomBlocksTable,
			Columns: []string{website.CustomBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.AssetsTable,
			Columns: []string{website.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !wu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.AssetsTable,
			Columns: []string{website.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.AssetsTable,
			Columns: []string{website.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{website.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WebsiteUpdateOne is the builder for updating a single Website entity.
type WebsiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebsiteMutation
}

// SetDomainName sets the "domainName" field.
func (wuo *WebsiteUpdateOne) SetDomainName(s string) *WebsiteUpdateOne {
	wuo.mutation.SetDomainName(s)
	return wuo
}

// SetHeadingText sets the "heading_text" field.
func (wuo *WebsiteUpdateOne) SetHeadingText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetHeadingText(s)
	return wuo
}

// SetBusinessLogo sets the "business_logo" field.
func (wuo *WebsiteUpdateOne) SetBusinessLogo(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBusinessLogo(s)
	return wuo
}

// SetBusinessName sets the "business_name" field.
func (wuo *WebsiteUpdateOne) SetBusinessName(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBusinessName(s)
	return wuo
}

// SetBannerSectionBackgroundImage sets the "banner_section_background_image" field.
func (wuo *WebsiteUpdateOne) SetBannerSectionBackgroundImage(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerSectionBackgroundImage(s)
	return wuo
}

// SetBannerSectionBackgroundColor sets the "banner_section_background_color" field.
func (wuo *WebsiteUpdateOne) SetBannerSectionBackgroundColor(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerSectionBackgroundColor(s)
	return wuo
}

// SetBannerSectionText sets the "banner_section_text" field.
func (wuo *WebsiteUpdateOne) SetBannerSectionText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerSectionText(s)
	return wuo
}

// SetThreeItemsSectionHeadingText sets the "three_items_section_heading_text" field.
func (wuo *WebsiteUpdateOne) SetThreeItemsSectionHeadingText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetThreeItemsSectionHeadingText(s)
	return wuo
}

// SetThreeItemsSectionDetailsText sets the "three_items_section_details_text" field.
func (wuo *WebsiteUpdateOne) SetThreeItemsSectionDetailsText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetThreeItemsSectionDetailsText(s)
	return wuo
}

// SetThreeItemsSectionItemOneText sets the "three_items_section_item_one_text" field.
func (wuo *WebsiteUpdateOne) SetThreeItemsSectionItemOneText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetThreeItemsSectionItemOneText(s)
	return wuo
}

// SetThreeItemsSectionItemTwoText sets the "three_items_section_item_two_text" field.
func (wuo *WebsiteUpdateOne) SetThreeItemsSectionItemTwoText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetThreeItemsSectionItemTwoText(s)
	return wuo
}

// SetThreeItemsSectionItemThreeText sets the "three_items_section_item_three_text" field.
func (wuo *WebsiteUpdateOne) SetThreeItemsSectionItemThreeText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetThreeItemsSectionItemThreeText(s)
	return wuo
}

// SetBannerTwoSectionBackgroundImage sets the "banner_two_section_background_image" field.
func (wuo *WebsiteUpdateOne) SetBannerTwoSectionBackgroundImage(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerTwoSectionBackgroundImage(s)
	return wuo
}

// SetBannerTwoSectionBackgroundColor sets the "banner_two_section_background_color" field.
func (wuo *WebsiteUpdateOne) SetBannerTwoSectionBackgroundColor(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerTwoSectionBackgroundColor(s)
	return wuo
}

// SetBannerTwoLeftSectionHeadingText sets the "banner_two_left_section_heading_text" field.
func (wuo *WebsiteUpdateOne) SetBannerTwoLeftSectionHeadingText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerTwoLeftSectionHeadingText(s)
	return wuo
}

// SetBannerTwoLeftSectionDetailsText sets the "banner_two_left_section_details_text" field.
func (wuo *WebsiteUpdateOne) SetBannerTwoLeftSectionDetailsText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerTwoLeftSectionDetailsText(s)
	return wuo
}

// SetBannerTwoLeftSectionButtonText sets the "banner_two_left_section_button_text" field.
func (wuo *WebsiteUpdateOne) SetBannerTwoLeftSectionButtonText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerTwoLeftSectionButtonText(s)
	return wuo
}

// SetBannerTwoLeftSectionButtonLink sets the "banner_two_left_section_button_link" field.
func (wuo *WebsiteUpdateOne) SetBannerTwoLeftSectionButtonLink(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerTwoLeftSectionButtonLink(s)
	return wuo
}

// SetBannerTwoRightSideImage sets the "banner_two_right_side_image" field.
func (wuo *WebsiteUpdateOne) SetBannerTwoRightSideImage(s string) *WebsiteUpdateOne {
	wuo.mutation.SetBannerTwoRightSideImage(s)
	return wuo
}

// SetAchievementsSection sets the "achievements_section" field.
func (wuo *WebsiteUpdateOne) SetAchievementsSection(m map[string]interface{}) *WebsiteUpdateOne {
	wuo.mutation.SetAchievementsSection(m)
	return wuo
}

// SetInventorySectionHeadingText sets the "Inventory_section_heading_text" field.
func (wuo *WebsiteUpdateOne) SetInventorySectionHeadingText(s string) *WebsiteUpdateOne {
	wuo.mutation.SetInventorySectionHeadingText(s)
	return wuo
}

// SetCreationDate sets the "creationDate" field.
func (wuo *WebsiteUpdateOne) SetCreationDate(t time.Time) *WebsiteUpdateOne {
	wuo.mutation.SetCreationDate(t)
	return wuo
}

// SetNillableCreationDate sets the "creationDate" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableCreationDate(t *time.Time) *WebsiteUpdateOne {
	if t != nil {
		wuo.SetCreationDate(*t)
	}
	return wuo
}

// SetLastUpdated sets the "lastUpdated" field.
func (wuo *WebsiteUpdateOne) SetLastUpdated(t time.Time) *WebsiteUpdateOne {
	wuo.mutation.SetLastUpdated(t)
	return wuo
}

// SetTitle sets the "title" field.
func (wuo *WebsiteUpdateOne) SetTitle(s string) *WebsiteUpdateOne {
	wuo.mutation.SetTitle(s)
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WebsiteUpdateOne) SetDescription(s string) *WebsiteUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetKeywords sets the "keywords" field.
func (wuo *WebsiteUpdateOne) SetKeywords(s string) *WebsiteUpdateOne {
	wuo.mutation.SetKeywords(s)
	return wuo
}

// SetLanguage sets the "language" field.
func (wuo *WebsiteUpdateOne) SetLanguage(s string) *WebsiteUpdateOne {
	wuo.mutation.SetLanguage(s)
	return wuo
}

// SetLogo sets the "logo" field.
func (wuo *WebsiteUpdateOne) SetLogo(s string) *WebsiteUpdateOne {
	wuo.mutation.SetLogo(s)
	return wuo
}

// SetFavicon sets the "favicon" field.
func (wuo *WebsiteUpdateOne) SetFavicon(s string) *WebsiteUpdateOne {
	wuo.mutation.SetFavicon(s)
	return wuo
}

// SetFacebook sets the "facebook" field.
func (wuo *WebsiteUpdateOne) SetFacebook(s string) *WebsiteUpdateOne {
	wuo.mutation.SetFacebook(s)
	return wuo
}

// SetTwitter sets the "twitter" field.
func (wuo *WebsiteUpdateOne) SetTwitter(s string) *WebsiteUpdateOne {
	wuo.mutation.SetTwitter(s)
	return wuo
}

// SetInstagram sets the "instagram" field.
func (wuo *WebsiteUpdateOne) SetInstagram(s string) *WebsiteUpdateOne {
	wuo.mutation.SetInstagram(s)
	return wuo
}

// SetYoutube sets the "youtube" field.
func (wuo *WebsiteUpdateOne) SetYoutube(s string) *WebsiteUpdateOne {
	wuo.mutation.SetYoutube(s)
	return wuo
}

// SetLinkedin sets the "linkedin" field.
func (wuo *WebsiteUpdateOne) SetLinkedin(s string) *WebsiteUpdateOne {
	wuo.mutation.SetLinkedin(s)
	return wuo
}

// SetPinterest sets the "pinterest" field.
func (wuo *WebsiteUpdateOne) SetPinterest(s string) *WebsiteUpdateOne {
	wuo.mutation.SetPinterest(s)
	return wuo
}

// SetMapCoordinates sets the "mapCoordinates" field.
func (wuo *WebsiteUpdateOne) SetMapCoordinates(m map[string]interface{}) *WebsiteUpdateOne {
	wuo.mutation.SetMapCoordinates(m)
	return wuo
}

// SetLongitude sets the "longitude" field.
func (wuo *WebsiteUpdateOne) SetLongitude(s string) *WebsiteUpdateOne {
	wuo.mutation.SetLongitude(s)
	return wuo
}

// SetLatitude sets the "latitude" field.
func (wuo *WebsiteUpdateOne) SetLatitude(s string) *WebsiteUpdateOne {
	wuo.mutation.SetLatitude(s)
	return wuo
}

// SetAddress sets the "address" field.
func (wuo *WebsiteUpdateOne) SetAddress(s string) *WebsiteUpdateOne {
	wuo.mutation.SetAddress(s)
	return wuo
}

// SetCity sets the "city" field.
func (wuo *WebsiteUpdateOne) SetCity(s string) *WebsiteUpdateOne {
	wuo.mutation.SetCity(s)
	return wuo
}

// SetState sets the "state" field.
func (wuo *WebsiteUpdateOne) SetState(s string) *WebsiteUpdateOne {
	wuo.mutation.SetState(s)
	return wuo
}

// SetCountry sets the "country" field.
func (wuo *WebsiteUpdateOne) SetCountry(s string) *WebsiteUpdateOne {
	wuo.mutation.SetCountry(s)
	return wuo
}

// SetZipCode sets the "zipCode" field.
func (wuo *WebsiteUpdateOne) SetZipCode(s string) *WebsiteUpdateOne {
	wuo.mutation.SetZipCode(s)
	return wuo
}

// SetPhoneNumber sets the "phoneNumber" field.
func (wuo *WebsiteUpdateOne) SetPhoneNumber(s string) *WebsiteUpdateOne {
	wuo.mutation.SetPhoneNumber(s)
	return wuo
}

// SetEmail sets the "email" field.
func (wuo *WebsiteUpdateOne) SetEmail(s string) *WebsiteUpdateOne {
	wuo.mutation.SetEmail(s)
	return wuo
}

// SetMetaTags sets the "metaTags" field.
func (wuo *WebsiteUpdateOne) SetMetaTags(m map[string]interface{}) *WebsiteUpdateOne {
	wuo.mutation.SetMetaTags(m)
	return wuo
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (wuo *WebsiteUpdateOne) SetBusinessID(id string) *WebsiteUpdateOne {
	wuo.mutation.SetBusinessID(id)
	return wuo
}

// SetBusiness sets the "business" edge to the Business entity.
func (wuo *WebsiteUpdateOne) SetBusiness(b *Business) *WebsiteUpdateOne {
	return wuo.SetBusinessID(b.ID)
}

// SetTemplateID sets the "template" edge to the Template entity by ID.
func (wuo *WebsiteUpdateOne) SetTemplateID(id string) *WebsiteUpdateOne {
	wuo.mutation.SetTemplateID(id)
	return wuo
}

// SetTemplate sets the "template" edge to the Template entity.
func (wuo *WebsiteUpdateOne) SetTemplate(t *Template) *WebsiteUpdateOne {
	return wuo.SetTemplateID(t.ID)
}

// AddCustomBlockIDs adds the "customBlocks" edge to the CustomBlock entity by IDs.
func (wuo *WebsiteUpdateOne) AddCustomBlockIDs(ids ...string) *WebsiteUpdateOne {
	wuo.mutation.AddCustomBlockIDs(ids...)
	return wuo
}

// AddCustomBlocks adds the "customBlocks" edges to the CustomBlock entity.
func (wuo *WebsiteUpdateOne) AddCustomBlocks(c ...*CustomBlock) *WebsiteUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wuo.AddCustomBlockIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Media entity by IDs.
func (wuo *WebsiteUpdateOne) AddAssetIDs(ids ...string) *WebsiteUpdateOne {
	wuo.mutation.AddAssetIDs(ids...)
	return wuo
}

// AddAssets adds the "assets" edges to the Media entity.
func (wuo *WebsiteUpdateOne) AddAssets(m ...*Media) *WebsiteUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wuo.AddAssetIDs(ids...)
}

// Mutation returns the WebsiteMutation object of the builder.
func (wuo *WebsiteUpdateOne) Mutation() *WebsiteMutation {
	return wuo.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (wuo *WebsiteUpdateOne) ClearBusiness() *WebsiteUpdateOne {
	wuo.mutation.ClearBusiness()
	return wuo
}

// ClearTemplate clears the "template" edge to the Template entity.
func (wuo *WebsiteUpdateOne) ClearTemplate() *WebsiteUpdateOne {
	wuo.mutation.ClearTemplate()
	return wuo
}

// ClearCustomBlocks clears all "customBlocks" edges to the CustomBlock entity.
func (wuo *WebsiteUpdateOne) ClearCustomBlocks() *WebsiteUpdateOne {
	wuo.mutation.ClearCustomBlocks()
	return wuo
}

// RemoveCustomBlockIDs removes the "customBlocks" edge to CustomBlock entities by IDs.
func (wuo *WebsiteUpdateOne) RemoveCustomBlockIDs(ids ...string) *WebsiteUpdateOne {
	wuo.mutation.RemoveCustomBlockIDs(ids...)
	return wuo
}

// RemoveCustomBlocks removes "customBlocks" edges to CustomBlock entities.
func (wuo *WebsiteUpdateOne) RemoveCustomBlocks(c ...*CustomBlock) *WebsiteUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wuo.RemoveCustomBlockIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Media entity.
func (wuo *WebsiteUpdateOne) ClearAssets() *WebsiteUpdateOne {
	wuo.mutation.ClearAssets()
	return wuo
}

// RemoveAssetIDs removes the "assets" edge to Media entities by IDs.
func (wuo *WebsiteUpdateOne) RemoveAssetIDs(ids ...string) *WebsiteUpdateOne {
	wuo.mutation.RemoveAssetIDs(ids...)
	return wuo
}

// RemoveAssets removes "assets" edges to Media entities.
func (wuo *WebsiteUpdateOne) RemoveAssets(m ...*Media) *WebsiteUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return wuo.RemoveAssetIDs(ids...)
}

// Where appends a list predicates to the WebsiteUpdate builder.
func (wuo *WebsiteUpdateOne) Where(ps ...predicate.Website) *WebsiteUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WebsiteUpdateOne) Select(field string, fields ...string) *WebsiteUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Website entity.
func (wuo *WebsiteUpdateOne) Save(ctx context.Context) (*Website, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WebsiteUpdateOne) SaveX(ctx context.Context) *Website {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WebsiteUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WebsiteUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WebsiteUpdateOne) defaults() {
	if _, ok := wuo.mutation.LastUpdated(); !ok {
		v := website.UpdateDefaultLastUpdated()
		wuo.mutation.SetLastUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WebsiteUpdateOne) check() error {
	if _, ok := wuo.mutation.BusinessID(); wuo.mutation.BusinessCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "Website.business"`)
	}
	if _, ok := wuo.mutation.TemplateID(); wuo.mutation.TemplateCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "Website.template"`)
	}
	return nil
}

func (wuo *WebsiteUpdateOne) sqlSave(ctx context.Context) (_node *Website, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(website.Table, website.Columns, sqlgraph.NewFieldSpec(website.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`placio_api: missing "Website.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, website.FieldID)
		for _, f := range fields {
			if !website.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("placio_api: invalid field %q for query", f)}
			}
			if f != website.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.DomainName(); ok {
		_spec.SetField(website.FieldDomainName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.HeadingText(); ok {
		_spec.SetField(website.FieldHeadingText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BusinessLogo(); ok {
		_spec.SetField(website.FieldBusinessLogo, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BusinessName(); ok {
		_spec.SetField(website.FieldBusinessName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerSectionBackgroundImage(); ok {
		_spec.SetField(website.FieldBannerSectionBackgroundImage, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerSectionBackgroundColor(); ok {
		_spec.SetField(website.FieldBannerSectionBackgroundColor, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerSectionText(); ok {
		_spec.SetField(website.FieldBannerSectionText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ThreeItemsSectionHeadingText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionHeadingText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ThreeItemsSectionDetailsText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionDetailsText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ThreeItemsSectionItemOneText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionItemOneText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ThreeItemsSectionItemTwoText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionItemTwoText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ThreeItemsSectionItemThreeText(); ok {
		_spec.SetField(website.FieldThreeItemsSectionItemThreeText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerTwoSectionBackgroundImage(); ok {
		_spec.SetField(website.FieldBannerTwoSectionBackgroundImage, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerTwoSectionBackgroundColor(); ok {
		_spec.SetField(website.FieldBannerTwoSectionBackgroundColor, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerTwoLeftSectionHeadingText(); ok {
		_spec.SetField(website.FieldBannerTwoLeftSectionHeadingText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerTwoLeftSectionDetailsText(); ok {
		_spec.SetField(website.FieldBannerTwoLeftSectionDetailsText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerTwoLeftSectionButtonText(); ok {
		_spec.SetField(website.FieldBannerTwoLeftSectionButtonText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerTwoLeftSectionButtonLink(); ok {
		_spec.SetField(website.FieldBannerTwoLeftSectionButtonLink, field.TypeString, value)
	}
	if value, ok := wuo.mutation.BannerTwoRightSideImage(); ok {
		_spec.SetField(website.FieldBannerTwoRightSideImage, field.TypeString, value)
	}
	if value, ok := wuo.mutation.AchievementsSection(); ok {
		_spec.SetField(website.FieldAchievementsSection, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.InventorySectionHeadingText(); ok {
		_spec.SetField(website.FieldInventorySectionHeadingText, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CreationDate(); ok {
		_spec.SetField(website.FieldCreationDate, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.LastUpdated(); ok {
		_spec.SetField(website.FieldLastUpdated, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Title(); ok {
		_spec.SetField(website.FieldTitle, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(website.FieldDescription, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Keywords(); ok {
		_spec.SetField(website.FieldKeywords, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Language(); ok {
		_spec.SetField(website.FieldLanguage, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Logo(); ok {
		_spec.SetField(website.FieldLogo, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Favicon(); ok {
		_spec.SetField(website.FieldFavicon, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Facebook(); ok {
		_spec.SetField(website.FieldFacebook, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Twitter(); ok {
		_spec.SetField(website.FieldTwitter, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Instagram(); ok {
		_spec.SetField(website.FieldInstagram, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Youtube(); ok {
		_spec.SetField(website.FieldYoutube, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Linkedin(); ok {
		_spec.SetField(website.FieldLinkedin, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Pinterest(); ok {
		_spec.SetField(website.FieldPinterest, field.TypeString, value)
	}
	if value, ok := wuo.mutation.MapCoordinates(); ok {
		_spec.SetField(website.FieldMapCoordinates, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.Longitude(); ok {
		_spec.SetField(website.FieldLongitude, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Latitude(); ok {
		_spec.SetField(website.FieldLatitude, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Address(); ok {
		_spec.SetField(website.FieldAddress, field.TypeString, value)
	}
	if value, ok := wuo.mutation.City(); ok {
		_spec.SetField(website.FieldCity, field.TypeString, value)
	}
	if value, ok := wuo.mutation.State(); ok {
		_spec.SetField(website.FieldState, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Country(); ok {
		_spec.SetField(website.FieldCountry, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ZipCode(); ok {
		_spec.SetField(website.FieldZipCode, field.TypeString, value)
	}
	if value, ok := wuo.mutation.PhoneNumber(); ok {
		_spec.SetField(website.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Email(); ok {
		_spec.SetField(website.FieldEmail, field.TypeString, value)
	}
	if value, ok := wuo.mutation.MetaTags(); ok {
		_spec.SetField(website.FieldMetaTags, field.TypeJSON, value)
	}
	if wuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   website.BusinessTable,
			Columns: []string{website.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   website.BusinessTable,
			Columns: []string{website.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   website.TemplateTable,
			Columns: []string{website.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   website.TemplateTable,
			Columns: []string{website.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.CustomBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.CustomBlocksTable,
			Columns: []string{website.CustomBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customblock.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedCustomBlocksIDs(); len(nodes) > 0 && !wuo.mutation.CustomBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.CustomBlocksTable,
			Columns: []string{website.CustomBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CustomBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.CustomBlocksTable,
			Columns: []string{website.CustomBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.AssetsTable,
			Columns: []string{website.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !wuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.AssetsTable,
			Columns: []string{website.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   website.AssetsTable,
			Columns: []string{website.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Website{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{website.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}

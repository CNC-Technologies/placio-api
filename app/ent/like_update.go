// Code generated by ent, DO NOT EDIT.

package placio_api

import (
	"context"
	"errors"
	"fmt"
	"placio_api/like"
	"placio_api/media"
	"placio_api/post"
	"placio_api/predicate"
	"placio_api/review"
	"placio_api/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LikeUpdate is the builder for updating Like entities.
type LikeUpdate struct {
	config
	hooks    []Hook
	mutation *LikeMutation
}

// Where appends a list predicates to the LikeUpdate builder.
func (lu *LikeUpdate) Where(ps ...predicate.Like) *LikeUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetCreatedAt sets the "createdAt" field.
func (lu *LikeUpdate) SetCreatedAt(t time.Time) *LikeUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (lu *LikeUpdate) SetNillableCreatedAt(t *time.Time) *LikeUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// SetUpdatedAt sets the "updatedAt" field.
func (lu *LikeUpdate) SetUpdatedAt(t time.Time) *LikeUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetLike sets the "like" field.
func (lu *LikeUpdate) SetLike(b bool) *LikeUpdate {
	lu.mutation.SetLike(b)
	return lu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (lu *LikeUpdate) SetUserID(id string) *LikeUpdate {
	lu.mutation.SetUserID(id)
	return lu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (lu *LikeUpdate) SetNillableUserID(id *string) *LikeUpdate {
	if id != nil {
		lu = lu.SetUserID(*id)
	}
	return lu
}

// SetUser sets the "user" edge to the User entity.
func (lu *LikeUpdate) SetUser(u *User) *LikeUpdate {
	return lu.SetUserID(u.ID)
}

// SetReviewID sets the "review" edge to the Review entity by ID.
func (lu *LikeUpdate) SetReviewID(id string) *LikeUpdate {
	lu.mutation.SetReviewID(id)
	return lu
}

// SetNillableReviewID sets the "review" edge to the Review entity by ID if the given value is not nil.
func (lu *LikeUpdate) SetNillableReviewID(id *string) *LikeUpdate {
	if id != nil {
		lu = lu.SetReviewID(*id)
	}
	return lu
}

// SetReview sets the "review" edge to the Review entity.
func (lu *LikeUpdate) SetReview(r *Review) *LikeUpdate {
	return lu.SetReviewID(r.ID)
}

// SetMediaID sets the "media" edge to the Media entity by ID.
func (lu *LikeUpdate) SetMediaID(id string) *LikeUpdate {
	lu.mutation.SetMediaID(id)
	return lu
}

// SetNillableMediaID sets the "media" edge to the Media entity by ID if the given value is not nil.
func (lu *LikeUpdate) SetNillableMediaID(id *string) *LikeUpdate {
	if id != nil {
		lu = lu.SetMediaID(*id)
	}
	return lu
}

// SetMedia sets the "media" edge to the Media entity.
func (lu *LikeUpdate) SetMedia(m *Media) *LikeUpdate {
	return lu.SetMediaID(m.ID)
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (lu *LikeUpdate) SetPostID(id string) *LikeUpdate {
	lu.mutation.SetPostID(id)
	return lu
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (lu *LikeUpdate) SetNillablePostID(id *string) *LikeUpdate {
	if id != nil {
		lu = lu.SetPostID(*id)
	}
	return lu
}

// SetPost sets the "post" edge to the Post entity.
func (lu *LikeUpdate) SetPost(p *Post) *LikeUpdate {
	return lu.SetPostID(p.ID)
}

// Mutation returns the LikeMutation object of the builder.
func (lu *LikeUpdate) Mutation() *LikeMutation {
	return lu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lu *LikeUpdate) ClearUser() *LikeUpdate {
	lu.mutation.ClearUser()
	return lu
}

// ClearReview clears the "review" edge to the Review entity.
func (lu *LikeUpdate) ClearReview() *LikeUpdate {
	lu.mutation.ClearReview()
	return lu
}

// ClearMedia clears the "media" edge to the Media entity.
func (lu *LikeUpdate) ClearMedia() *LikeUpdate {
	lu.mutation.ClearMedia()
	return lu
}

// ClearPost clears the "post" edge to the Post entity.
func (lu *LikeUpdate) ClearPost() *LikeUpdate {
	lu.mutation.ClearPost()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LikeUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LikeUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LikeUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LikeUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LikeUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := like.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

func (lu *LikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(like.Table, like.Columns, sqlgraph.NewFieldSpec(like.FieldID, field.TypeString))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.SetField(like.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(like.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Like(); ok {
		_spec.SetField(like.FieldLike, field.TypeBool, value)
	}
	if lu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   like.UserTable,
			Columns: []string{like.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   like.UserTable,
			Columns: []string{like.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.ReviewTable,
			Columns: []string{like.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.ReviewTable,
			Columns: []string{like.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.MediaTable,
			Columns: []string{like.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.MediaTable,
			Columns: []string{like.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.PostTable,
			Columns: []string{like.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.PostTable,
			Columns: []string{like.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{like.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LikeUpdateOne is the builder for updating a single Like entity.
type LikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikeMutation
}

// SetCreatedAt sets the "createdAt" field.
func (luo *LikeUpdateOne) SetCreatedAt(t time.Time) *LikeUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (luo *LikeUpdateOne) SetNillableCreatedAt(t *time.Time) *LikeUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// SetUpdatedAt sets the "updatedAt" field.
func (luo *LikeUpdateOne) SetUpdatedAt(t time.Time) *LikeUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetLike sets the "like" field.
func (luo *LikeUpdateOne) SetLike(b bool) *LikeUpdateOne {
	luo.mutation.SetLike(b)
	return luo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (luo *LikeUpdateOne) SetUserID(id string) *LikeUpdateOne {
	luo.mutation.SetUserID(id)
	return luo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (luo *LikeUpdateOne) SetNillableUserID(id *string) *LikeUpdateOne {
	if id != nil {
		luo = luo.SetUserID(*id)
	}
	return luo
}

// SetUser sets the "user" edge to the User entity.
func (luo *LikeUpdateOne) SetUser(u *User) *LikeUpdateOne {
	return luo.SetUserID(u.ID)
}

// SetReviewID sets the "review" edge to the Review entity by ID.
func (luo *LikeUpdateOne) SetReviewID(id string) *LikeUpdateOne {
	luo.mutation.SetReviewID(id)
	return luo
}

// SetNillableReviewID sets the "review" edge to the Review entity by ID if the given value is not nil.
func (luo *LikeUpdateOne) SetNillableReviewID(id *string) *LikeUpdateOne {
	if id != nil {
		luo = luo.SetReviewID(*id)
	}
	return luo
}

// SetReview sets the "review" edge to the Review entity.
func (luo *LikeUpdateOne) SetReview(r *Review) *LikeUpdateOne {
	return luo.SetReviewID(r.ID)
}

// SetMediaID sets the "media" edge to the Media entity by ID.
func (luo *LikeUpdateOne) SetMediaID(id string) *LikeUpdateOne {
	luo.mutation.SetMediaID(id)
	return luo
}

// SetNillableMediaID sets the "media" edge to the Media entity by ID if the given value is not nil.
func (luo *LikeUpdateOne) SetNillableMediaID(id *string) *LikeUpdateOne {
	if id != nil {
		luo = luo.SetMediaID(*id)
	}
	return luo
}

// SetMedia sets the "media" edge to the Media entity.
func (luo *LikeUpdateOne) SetMedia(m *Media) *LikeUpdateOne {
	return luo.SetMediaID(m.ID)
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (luo *LikeUpdateOne) SetPostID(id string) *LikeUpdateOne {
	luo.mutation.SetPostID(id)
	return luo
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (luo *LikeUpdateOne) SetNillablePostID(id *string) *LikeUpdateOne {
	if id != nil {
		luo = luo.SetPostID(*id)
	}
	return luo
}

// SetPost sets the "post" edge to the Post entity.
func (luo *LikeUpdateOne) SetPost(p *Post) *LikeUpdateOne {
	return luo.SetPostID(p.ID)
}

// Mutation returns the LikeMutation object of the builder.
func (luo *LikeUpdateOne) Mutation() *LikeMutation {
	return luo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (luo *LikeUpdateOne) ClearUser() *LikeUpdateOne {
	luo.mutation.ClearUser()
	return luo
}

// ClearReview clears the "review" edge to the Review entity.
func (luo *LikeUpdateOne) ClearReview() *LikeUpdateOne {
	luo.mutation.ClearReview()
	return luo
}

// ClearMedia clears the "media" edge to the Media entity.
func (luo *LikeUpdateOne) ClearMedia() *LikeUpdateOne {
	luo.mutation.ClearMedia()
	return luo
}

// ClearPost clears the "post" edge to the Post entity.
func (luo *LikeUpdateOne) ClearPost() *LikeUpdateOne {
	luo.mutation.ClearPost()
	return luo
}

// Where appends a list predicates to the LikeUpdate builder.
func (luo *LikeUpdateOne) Where(ps ...predicate.Like) *LikeUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LikeUpdateOne) Select(field string, fields ...string) *LikeUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Like entity.
func (luo *LikeUpdateOne) Save(ctx context.Context) (*Like, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LikeUpdateOne) SaveX(ctx context.Context) *Like {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LikeUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LikeUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LikeUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := like.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

func (luo *LikeUpdateOne) sqlSave(ctx context.Context) (_node *Like, err error) {
	_spec := sqlgraph.NewUpdateSpec(like.Table, like.Columns, sqlgraph.NewFieldSpec(like.FieldID, field.TypeString))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`placio_api: missing "Like.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, like.FieldID)
		for _, f := range fields {
			if !like.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("placio_api: invalid field %q for query", f)}
			}
			if f != like.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.SetField(like.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(like.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Like(); ok {
		_spec.SetField(like.FieldLike, field.TypeBool, value)
	}
	if luo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   like.UserTable,
			Columns: []string{like.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   like.UserTable,
			Columns: []string{like.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.ReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.ReviewTable,
			Columns: []string{like.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.ReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.ReviewTable,
			Columns: []string{like.ReviewColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.MediaTable,
			Columns: []string{like.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.MediaTable,
			Columns: []string{like.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.PostTable,
			Columns: []string{like.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   like.PostTable,
			Columns: []string{like.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Like{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{like.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/permission"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/staff"
	"placio-app/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StaffUpdate is the builder for updating Staff entities.
type StaffUpdate struct {
	config
	hooks    []Hook
	mutation *StaffMutation
}

// Where appends a list predicates to the StaffUpdate builder.
func (su *StaffUpdate) Where(ps ...predicate.Staff) *StaffUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetPosition sets the "position" field.
func (su *StaffUpdate) SetPosition(s string) *StaffUpdate {
	su.mutation.SetPosition(s)
	return su
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (su *StaffUpdate) SetNillablePosition(s *string) *StaffUpdate {
	if s != nil {
		su.SetPosition(*s)
	}
	return su
}

// ClearPosition clears the value of the "position" field.
func (su *StaffUpdate) ClearPosition() *StaffUpdate {
	su.mutation.ClearPosition()
	return su
}

// SetUserID sets the "user" edge to the User entity by ID.
func (su *StaffUpdate) SetUserID(id string) *StaffUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (su *StaffUpdate) SetNillableUserID(id *string) *StaffUpdate {
	if id != nil {
		su = su.SetUserID(*id)
	}
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *StaffUpdate) SetUser(u *User) *StaffUpdate {
	return su.SetUserID(u.ID)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (su *StaffUpdate) AddPlaceIDs(ids ...string) *StaffUpdate {
	su.mutation.AddPlaceIDs(ids...)
	return su
}

// AddPlace adds the "place" edges to the Place entity.
func (su *StaffUpdate) AddPlace(p ...*Place) *StaffUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPlaceIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (su *StaffUpdate) AddPermissionIDs(ids ...string) *StaffUpdate {
	su.mutation.AddPermissionIDs(ids...)
	return su
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (su *StaffUpdate) AddPermissions(p ...*Permission) *StaffUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddPermissionIDs(ids...)
}

// AddBusinesIDs adds the "business" edge to the Business entity by IDs.
func (su *StaffUpdate) AddBusinesIDs(ids ...string) *StaffUpdate {
	su.mutation.AddBusinesIDs(ids...)
	return su
}

// AddBusiness adds the "business" edges to the Business entity.
func (su *StaffUpdate) AddBusiness(b ...*Business) *StaffUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.AddBusinesIDs(ids...)
}

// Mutation returns the StaffMutation object of the builder.
func (su *StaffUpdate) Mutation() *StaffMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *StaffUpdate) ClearUser() *StaffUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearPlace clears all "place" edges to the Place entity.
func (su *StaffUpdate) ClearPlace() *StaffUpdate {
	su.mutation.ClearPlace()
	return su
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (su *StaffUpdate) RemovePlaceIDs(ids ...string) *StaffUpdate {
	su.mutation.RemovePlaceIDs(ids...)
	return su
}

// RemovePlace removes "place" edges to Place entities.
func (su *StaffUpdate) RemovePlace(p ...*Place) *StaffUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePlaceIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (su *StaffUpdate) ClearPermissions() *StaffUpdate {
	su.mutation.ClearPermissions()
	return su
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (su *StaffUpdate) RemovePermissionIDs(ids ...string) *StaffUpdate {
	su.mutation.RemovePermissionIDs(ids...)
	return su
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (su *StaffUpdate) RemovePermissions(p ...*Permission) *StaffUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemovePermissionIDs(ids...)
}

// ClearBusiness clears all "business" edges to the Business entity.
func (su *StaffUpdate) ClearBusiness() *StaffUpdate {
	su.mutation.ClearBusiness()
	return su
}

// RemoveBusinesIDs removes the "business" edge to Business entities by IDs.
func (su *StaffUpdate) RemoveBusinesIDs(ids ...string) *StaffUpdate {
	su.mutation.RemoveBusinesIDs(ids...)
	return su
}

// RemoveBusiness removes "business" edges to Business entities.
func (su *StaffUpdate) RemoveBusiness(b ...*Business) *StaffUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return su.RemoveBusinesIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StaffUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StaffUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StaffUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StaffUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(staff.Table, staff.Columns, sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Position(); ok {
		_spec.SetField(staff.FieldPosition, field.TypeString, value)
	}
	if su.mutation.PositionCleared() {
		_spec.ClearField(staff.FieldPosition, field.TypeString)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff.UserTable,
			Columns: []string{staff.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff.UserTable,
			Columns: []string{staff.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.PlaceTable,
			Columns: staff.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !su.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.PlaceTable,
			Columns: staff.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.PlaceTable,
			Columns: staff.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staff.PermissionsTable,
			Columns: staff.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !su.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staff.PermissionsTable,
			Columns: staff.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staff.PermissionsTable,
			Columns: staff.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.BusinessTable,
			Columns: staff.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBusinessIDs(); len(nodes) > 0 && !su.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.BusinessTable,
			Columns: staff.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.BusinessTable,
			Columns: staff.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StaffUpdateOne is the builder for updating a single Staff entity.
type StaffUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StaffMutation
}

// SetPosition sets the "position" field.
func (suo *StaffUpdateOne) SetPosition(s string) *StaffUpdateOne {
	suo.mutation.SetPosition(s)
	return suo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillablePosition(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetPosition(*s)
	}
	return suo
}

// ClearPosition clears the value of the "position" field.
func (suo *StaffUpdateOne) ClearPosition() *StaffUpdateOne {
	suo.mutation.ClearPosition()
	return suo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (suo *StaffUpdateOne) SetUserID(id string) *StaffUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableUserID(id *string) *StaffUpdateOne {
	if id != nil {
		suo = suo.SetUserID(*id)
	}
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *StaffUpdateOne) SetUser(u *User) *StaffUpdateOne {
	return suo.SetUserID(u.ID)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (suo *StaffUpdateOne) AddPlaceIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.AddPlaceIDs(ids...)
	return suo
}

// AddPlace adds the "place" edges to the Place entity.
func (suo *StaffUpdateOne) AddPlace(p ...*Place) *StaffUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPlaceIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (suo *StaffUpdateOne) AddPermissionIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.AddPermissionIDs(ids...)
	return suo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (suo *StaffUpdateOne) AddPermissions(p ...*Permission) *StaffUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddPermissionIDs(ids...)
}

// AddBusinesIDs adds the "business" edge to the Business entity by IDs.
func (suo *StaffUpdateOne) AddBusinesIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.AddBusinesIDs(ids...)
	return suo
}

// AddBusiness adds the "business" edges to the Business entity.
func (suo *StaffUpdateOne) AddBusiness(b ...*Business) *StaffUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.AddBusinesIDs(ids...)
}

// Mutation returns the StaffMutation object of the builder.
func (suo *StaffUpdateOne) Mutation() *StaffMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *StaffUpdateOne) ClearUser() *StaffUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearPlace clears all "place" edges to the Place entity.
func (suo *StaffUpdateOne) ClearPlace() *StaffUpdateOne {
	suo.mutation.ClearPlace()
	return suo
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (suo *StaffUpdateOne) RemovePlaceIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.RemovePlaceIDs(ids...)
	return suo
}

// RemovePlace removes "place" edges to Place entities.
func (suo *StaffUpdateOne) RemovePlace(p ...*Place) *StaffUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePlaceIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (suo *StaffUpdateOne) ClearPermissions() *StaffUpdateOne {
	suo.mutation.ClearPermissions()
	return suo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (suo *StaffUpdateOne) RemovePermissionIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.RemovePermissionIDs(ids...)
	return suo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (suo *StaffUpdateOne) RemovePermissions(p ...*Permission) *StaffUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemovePermissionIDs(ids...)
}

// ClearBusiness clears all "business" edges to the Business entity.
func (suo *StaffUpdateOne) ClearBusiness() *StaffUpdateOne {
	suo.mutation.ClearBusiness()
	return suo
}

// RemoveBusinesIDs removes the "business" edge to Business entities by IDs.
func (suo *StaffUpdateOne) RemoveBusinesIDs(ids ...string) *StaffUpdateOne {
	suo.mutation.RemoveBusinesIDs(ids...)
	return suo
}

// RemoveBusiness removes "business" edges to Business entities.
func (suo *StaffUpdateOne) RemoveBusiness(b ...*Business) *StaffUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return suo.RemoveBusinesIDs(ids...)
}

// Where appends a list predicates to the StaffUpdate builder.
func (suo *StaffUpdateOne) Where(ps ...predicate.Staff) *StaffUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StaffUpdateOne) Select(field string, fields ...string) *StaffUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Staff entity.
func (suo *StaffUpdateOne) Save(ctx context.Context) (*Staff, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StaffUpdateOne) SaveX(ctx context.Context) *Staff {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StaffUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StaffUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StaffUpdateOne) sqlSave(ctx context.Context) (_node *Staff, err error) {
	_spec := sqlgraph.NewUpdateSpec(staff.Table, staff.Columns, sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Staff.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staff.FieldID)
		for _, f := range fields {
			if !staff.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != staff.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Position(); ok {
		_spec.SetField(staff.FieldPosition, field.TypeString, value)
	}
	if suo.mutation.PositionCleared() {
		_spec.ClearField(staff.FieldPosition, field.TypeString)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff.UserTable,
			Columns: []string{staff.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   staff.UserTable,
			Columns: []string{staff.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.PlaceTable,
			Columns: staff.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !suo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.PlaceTable,
			Columns: staff.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.PlaceTable,
			Columns: staff.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staff.PermissionsTable,
			Columns: staff.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !suo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staff.PermissionsTable,
			Columns: staff.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   staff.PermissionsTable,
			Columns: staff.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.BusinessTable,
			Columns: staff.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBusinessIDs(); len(nodes) > 0 && !suo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.BusinessTable,
			Columns: staff.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   staff.BusinessTable,
			Columns: staff.BusinessPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Staff{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

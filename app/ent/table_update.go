// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/order"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/table"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TableUpdate is the builder for updating Table entities.
type TableUpdate struct {
	config
	hooks    []Hook
	mutation *TableMutation
}

// Where appends a list predicates to the TableUpdate builder.
func (tu *TableUpdate) Where(ps ...predicate.Table) *TableUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetNumber sets the "number" field.
func (tu *TableUpdate) SetNumber(i int) *TableUpdate {
	tu.mutation.ResetNumber()
	tu.mutation.SetNumber(i)
	return tu
}

// AddNumber adds i to the "number" field.
func (tu *TableUpdate) AddNumber(i int) *TableUpdate {
	tu.mutation.AddNumber(i)
	return tu
}

// SetQrCode sets the "qr_code" field.
func (tu *TableUpdate) SetQrCode(s string) *TableUpdate {
	tu.mutation.SetQrCode(s)
	return tu
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (tu *TableUpdate) SetNillableQrCode(s *string) *TableUpdate {
	if s != nil {
		tu.SetQrCode(*s)
	}
	return tu
}

// ClearQrCode clears the value of the "qr_code" field.
func (tu *TableUpdate) ClearQrCode() *TableUpdate {
	tu.mutation.ClearQrCode()
	return tu
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (tu *TableUpdate) SetPlaceID(id string) *TableUpdate {
	tu.mutation.SetPlaceID(id)
	return tu
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (tu *TableUpdate) SetNillablePlaceID(id *string) *TableUpdate {
	if id != nil {
		tu = tu.SetPlaceID(*id)
	}
	return tu
}

// SetPlace sets the "place" edge to the Place entity.
func (tu *TableUpdate) SetPlace(p *Place) *TableUpdate {
	return tu.SetPlaceID(p.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (tu *TableUpdate) AddOrderIDs(ids ...string) *TableUpdate {
	tu.mutation.AddOrderIDs(ids...)
	return tu
}

// AddOrders adds the "orders" edges to the Order entity.
func (tu *TableUpdate) AddOrders(o ...*Order) *TableUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.AddOrderIDs(ids...)
}

// Mutation returns the TableMutation object of the builder.
func (tu *TableUpdate) Mutation() *TableMutation {
	return tu.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (tu *TableUpdate) ClearPlace() *TableUpdate {
	tu.mutation.ClearPlace()
	return tu
}

// ClearOrders clears all "orders" edges to the Order entity.
func (tu *TableUpdate) ClearOrders() *TableUpdate {
	tu.mutation.ClearOrders()
	return tu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (tu *TableUpdate) RemoveOrderIDs(ids ...string) *TableUpdate {
	tu.mutation.RemoveOrderIDs(ids...)
	return tu
}

// RemoveOrders removes "orders" edges to Order entities.
func (tu *TableUpdate) RemoveOrders(o ...*Order) *TableUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TableUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TableUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TableUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TableUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(table.Table, table.Columns, sqlgraph.NewFieldSpec(table.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Number(); ok {
		_spec.SetField(table.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedNumber(); ok {
		_spec.AddField(table.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tu.mutation.QrCode(); ok {
		_spec.SetField(table.FieldQrCode, field.TypeString, value)
	}
	if tu.mutation.QrCodeCleared() {
		_spec.ClearField(table.FieldQrCode, field.TypeString)
	}
	if tu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   table.PlaceTable,
			Columns: []string{table.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   table.PlaceTable,
			Columns: []string{table.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   table.OrdersTable,
			Columns: table.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !tu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   table.OrdersTable,
			Columns: table.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   table.OrdersTable,
			Columns: table.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{table.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TableUpdateOne is the builder for updating a single Table entity.
type TableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TableMutation
}

// SetNumber sets the "number" field.
func (tuo *TableUpdateOne) SetNumber(i int) *TableUpdateOne {
	tuo.mutation.ResetNumber()
	tuo.mutation.SetNumber(i)
	return tuo
}

// AddNumber adds i to the "number" field.
func (tuo *TableUpdateOne) AddNumber(i int) *TableUpdateOne {
	tuo.mutation.AddNumber(i)
	return tuo
}

// SetQrCode sets the "qr_code" field.
func (tuo *TableUpdateOne) SetQrCode(s string) *TableUpdateOne {
	tuo.mutation.SetQrCode(s)
	return tuo
}

// SetNillableQrCode sets the "qr_code" field if the given value is not nil.
func (tuo *TableUpdateOne) SetNillableQrCode(s *string) *TableUpdateOne {
	if s != nil {
		tuo.SetQrCode(*s)
	}
	return tuo
}

// ClearQrCode clears the value of the "qr_code" field.
func (tuo *TableUpdateOne) ClearQrCode() *TableUpdateOne {
	tuo.mutation.ClearQrCode()
	return tuo
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (tuo *TableUpdateOne) SetPlaceID(id string) *TableUpdateOne {
	tuo.mutation.SetPlaceID(id)
	return tuo
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (tuo *TableUpdateOne) SetNillablePlaceID(id *string) *TableUpdateOne {
	if id != nil {
		tuo = tuo.SetPlaceID(*id)
	}
	return tuo
}

// SetPlace sets the "place" edge to the Place entity.
func (tuo *TableUpdateOne) SetPlace(p *Place) *TableUpdateOne {
	return tuo.SetPlaceID(p.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (tuo *TableUpdateOne) AddOrderIDs(ids ...string) *TableUpdateOne {
	tuo.mutation.AddOrderIDs(ids...)
	return tuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (tuo *TableUpdateOne) AddOrders(o ...*Order) *TableUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.AddOrderIDs(ids...)
}

// Mutation returns the TableMutation object of the builder.
func (tuo *TableUpdateOne) Mutation() *TableMutation {
	return tuo.mutation
}

// ClearPlace clears the "place" edge to the Place entity.
func (tuo *TableUpdateOne) ClearPlace() *TableUpdateOne {
	tuo.mutation.ClearPlace()
	return tuo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (tuo *TableUpdateOne) ClearOrders() *TableUpdateOne {
	tuo.mutation.ClearOrders()
	return tuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (tuo *TableUpdateOne) RemoveOrderIDs(ids ...string) *TableUpdateOne {
	tuo.mutation.RemoveOrderIDs(ids...)
	return tuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (tuo *TableUpdateOne) RemoveOrders(o ...*Order) *TableUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the TableUpdate builder.
func (tuo *TableUpdateOne) Where(ps ...predicate.Table) *TableUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TableUpdateOne) Select(field string, fields ...string) *TableUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Table entity.
func (tuo *TableUpdateOne) Save(ctx context.Context) (*Table, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TableUpdateOne) SaveX(ctx context.Context) *Table {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TableUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TableUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TableUpdateOne) sqlSave(ctx context.Context) (_node *Table, err error) {
	_spec := sqlgraph.NewUpdateSpec(table.Table, table.Columns, sqlgraph.NewFieldSpec(table.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Table.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, table.FieldID)
		for _, f := range fields {
			if !table.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != table.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Number(); ok {
		_spec.SetField(table.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedNumber(); ok {
		_spec.AddField(table.FieldNumber, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.QrCode(); ok {
		_spec.SetField(table.FieldQrCode, field.TypeString, value)
	}
	if tuo.mutation.QrCodeCleared() {
		_spec.ClearField(table.FieldQrCode, field.TypeString)
	}
	if tuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   table.PlaceTable,
			Columns: []string{table.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   table.PlaceTable,
			Columns: []string{table.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   table.OrdersTable,
			Columns: table.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !tuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   table.OrdersTable,
			Columns: table.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   table.OrdersTable,
			Columns: table.OrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Table{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{table.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

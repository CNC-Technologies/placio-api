// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/accountwallet"
	"placio-app/ent/booking"
	"placio-app/ent/businessfollowuser"
	"placio-app/ent/category"
	"placio-app/ent/categoryassignment"
	"placio-app/ent/comment"
	"placio-app/ent/event"
	"placio-app/ent/like"
	"placio-app/ent/menu"
	"placio-app/ent/notification"
	"placio-app/ent/order"
	"placio-app/ent/place"
	"placio-app/ent/placetable"
	"placio-app/ent/plan"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/rating"
	"placio-app/ent/reservation"
	"placio-app/ent/reservationblock"
	"placio-app/ent/review"
	"placio-app/ent/staff"
	"placio-app/ent/subscription"
	"placio-app/ent/trainer"
	"placio-app/ent/transactionhistory"
	"placio-app/ent/user"
	"placio-app/ent/userbusiness"
	"placio-app/ent/userfollowbusiness"
	"placio-app/ent/userfollowevent"
	"placio-app/ent/userfollowplace"
	"placio-app/ent/userfollowuser"
	"placio-app/ent/userlikeplace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auth0/go-auth0/management"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetAuth0ID sets the "auth0_id" field.
func (uu *UserUpdate) SetAuth0ID(s string) *UserUpdate {
	uu.mutation.SetAuth0ID(s)
	return uu
}

// SetNillableAuth0ID sets the "auth0_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAuth0ID(s *string) *UserUpdate {
	if s != nil {
		uu.SetAuth0ID(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetPicture sets the "picture" field.
func (uu *UserUpdate) SetPicture(s string) *UserUpdate {
	uu.mutation.SetPicture(s)
	return uu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePicture(s *string) *UserUpdate {
	if s != nil {
		uu.SetPicture(*s)
	}
	return uu
}

// ClearPicture clears the value of the "picture" field.
func (uu *UserUpdate) ClearPicture() *UserUpdate {
	uu.mutation.ClearPicture()
	return uu
}

// SetCoverImage sets the "cover_image" field.
func (uu *UserUpdate) SetCoverImage(s string) *UserUpdate {
	uu.mutation.SetCoverImage(s)
	return uu
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCoverImage(s *string) *UserUpdate {
	if s != nil {
		uu.SetCoverImage(*s)
	}
	return uu
}

// ClearCoverImage clears the value of the "cover_image" field.
func (uu *UserUpdate) ClearCoverImage() *UserUpdate {
	uu.mutation.ClearCoverImage()
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetWebsite sets the "website" field.
func (uu *UserUpdate) SetWebsite(s string) *UserUpdate {
	uu.mutation.SetWebsite(s)
	return uu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWebsite(s *string) *UserUpdate {
	if s != nil {
		uu.SetWebsite(*s)
	}
	return uu
}

// ClearWebsite clears the value of the "website" field.
func (uu *UserUpdate) ClearWebsite() *UserUpdate {
	uu.mutation.ClearWebsite()
	return uu
}

// SetLocation sets the "location" field.
func (uu *UserUpdate) SetLocation(s string) *UserUpdate {
	uu.mutation.SetLocation(s)
	return uu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocation(s *string) *UserUpdate {
	if s != nil {
		uu.SetLocation(*s)
	}
	return uu
}

// ClearLocation clears the value of the "location" field.
func (uu *UserUpdate) ClearLocation() *UserUpdate {
	uu.mutation.ClearLocation()
	return uu
}

// SetMapCoordinates sets the "map_coordinates" field.
func (uu *UserUpdate) SetMapCoordinates(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetMapCoordinates(m)
	return uu
}

// ClearMapCoordinates clears the value of the "map_coordinates" field.
func (uu *UserUpdate) ClearMapCoordinates() *UserUpdate {
	uu.mutation.ClearMapCoordinates()
	return uu
}

// SetLongitude sets the "longitude" field.
func (uu *UserUpdate) SetLongitude(s string) *UserUpdate {
	uu.mutation.SetLongitude(s)
	return uu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLongitude(s *string) *UserUpdate {
	if s != nil {
		uu.SetLongitude(*s)
	}
	return uu
}

// ClearLongitude clears the value of the "longitude" field.
func (uu *UserUpdate) ClearLongitude() *UserUpdate {
	uu.mutation.ClearLongitude()
	return uu
}

// SetLatitude sets the "latitude" field.
func (uu *UserUpdate) SetLatitude(s string) *UserUpdate {
	uu.mutation.SetLatitude(s)
	return uu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLatitude(s *string) *UserUpdate {
	if s != nil {
		uu.SetLatitude(*s)
	}
	return uu
}

// ClearLatitude clears the value of the "latitude" field.
func (uu *UserUpdate) ClearLatitude() *UserUpdate {
	uu.mutation.ClearLatitude()
	return uu
}

// SetBio sets the "bio" field.
func (uu *UserUpdate) SetBio(s string) *UserUpdate {
	uu.mutation.SetBio(s)
	return uu
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBio(s *string) *UserUpdate {
	if s != nil {
		uu.SetBio(*s)
	}
	return uu
}

// ClearBio clears the value of the "bio" field.
func (uu *UserUpdate) ClearBio() *UserUpdate {
	uu.mutation.ClearBio()
	return uu
}

// SetAuth0Data sets the "auth0_data" field.
func (uu *UserUpdate) SetAuth0Data(m *management.User) *UserUpdate {
	uu.mutation.SetAuth0Data(m)
	return uu
}

// ClearAuth0Data clears the value of the "auth0_data" field.
func (uu *UserUpdate) ClearAuth0Data() *UserUpdate {
	uu.mutation.ClearAuth0Data()
	return uu
}

// SetAppSettings sets the "app_settings" field.
func (uu *UserUpdate) SetAppSettings(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetAppSettings(m)
	return uu
}

// ClearAppSettings clears the value of the "app_settings" field.
func (uu *UserUpdate) ClearAppSettings() *UserUpdate {
	uu.mutation.ClearAppSettings()
	return uu
}

// SetUserSettings sets the "user_settings" field.
func (uu *UserUpdate) SetUserSettings(m map[string]interface{}) *UserUpdate {
	uu.mutation.SetUserSettings(m)
	return uu
}

// ClearUserSettings clears the value of the "user_settings" field.
func (uu *UserUpdate) ClearUserSettings() *UserUpdate {
	uu.mutation.ClearUserSettings()
	return uu
}

// SetSearchText sets the "search_text" field.
func (uu *UserUpdate) SetSearchText(s string) *UserUpdate {
	uu.mutation.SetSearchText(s)
	return uu
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSearchText(s *string) *UserUpdate {
	if s != nil {
		uu.SetSearchText(*s)
	}
	return uu
}

// ClearSearchText clears the value of the "search_text" field.
func (uu *UserUpdate) ClearSearchText() *UserUpdate {
	uu.mutation.ClearSearchText()
	return uu
}

// SetRelevanceScore sets the "relevance_score" field.
func (uu *UserUpdate) SetRelevanceScore(f float64) *UserUpdate {
	uu.mutation.ResetRelevanceScore()
	uu.mutation.SetRelevanceScore(f)
	return uu
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRelevanceScore(f *float64) *UserUpdate {
	if f != nil {
		uu.SetRelevanceScore(*f)
	}
	return uu
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (uu *UserUpdate) AddRelevanceScore(f float64) *UserUpdate {
	uu.mutation.AddRelevanceScore(f)
	return uu
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (uu *UserUpdate) ClearRelevanceScore() *UserUpdate {
	uu.mutation.ClearRelevanceScore()
	return uu
}

// SetFollowerCount sets the "follower_count" field.
func (uu *UserUpdate) SetFollowerCount(i int) *UserUpdate {
	uu.mutation.ResetFollowerCount()
	uu.mutation.SetFollowerCount(i)
	return uu
}

// SetNillableFollowerCount sets the "follower_count" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFollowerCount(i *int) *UserUpdate {
	if i != nil {
		uu.SetFollowerCount(*i)
	}
	return uu
}

// AddFollowerCount adds i to the "follower_count" field.
func (uu *UserUpdate) AddFollowerCount(i int) *UserUpdate {
	uu.mutation.AddFollowerCount(i)
	return uu
}

// SetFollowingCount sets the "following_count" field.
func (uu *UserUpdate) SetFollowingCount(i int) *UserUpdate {
	uu.mutation.ResetFollowingCount()
	uu.mutation.SetFollowingCount(i)
	return uu
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFollowingCount(i *int) *UserUpdate {
	if i != nil {
		uu.SetFollowingCount(*i)
	}
	return uu
}

// AddFollowingCount adds i to the "following_count" field.
func (uu *UserUpdate) AddFollowingCount(i int) *UserUpdate {
	uu.mutation.AddFollowingCount(i)
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// SetPermissions sets the "permissions" field.
func (uu *UserUpdate) SetPermissions(s []string) *UserUpdate {
	uu.mutation.SetPermissions(s)
	return uu
}

// AppendPermissions appends s to the "permissions" field.
func (uu *UserUpdate) AppendPermissions(s []string) *UserUpdate {
	uu.mutation.AppendPermissions(s)
	return uu
}

// ClearPermissions clears the value of the "permissions" field.
func (uu *UserUpdate) ClearPermissions() *UserUpdate {
	uu.mutation.ClearPermissions()
	return uu
}

// SetIsPremium sets the "is_premium" field.
func (uu *UserUpdate) SetIsPremium(b bool) *UserUpdate {
	uu.mutation.SetIsPremium(b)
	return uu
}

// SetNillableIsPremium sets the "is_premium" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsPremium(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsPremium(*b)
	}
	return uu
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (uu *UserUpdate) AddUserBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserBusinessIDs(ids...)
	return uu
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (uu *UserUpdate) AddUserBusinesses(u ...*UserBusiness) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserBusinessIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uu *UserUpdate) AddCommentIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCommentIDs(ids...)
	return uu
}

// AddComments adds the "comments" edges to the Comment entity.
func (uu *UserUpdate) AddComments(c ...*Comment) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCommentIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (uu *UserUpdate) AddLikeIDs(ids ...string) *UserUpdate {
	uu.mutation.AddLikeIDs(ids...)
	return uu
}

// AddLikes adds the "likes" edges to the Like entity.
func (uu *UserUpdate) AddLikes(l ...*Like) *UserUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.AddLikeIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uu *UserUpdate) AddPostIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPostIDs(ids...)
	return uu
}

// AddPosts adds the "posts" edges to the Post entity.
func (uu *UserUpdate) AddPosts(p ...*Post) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPostIDs(ids...)
}

// AddFollowedUserIDs adds the "followedUsers" edge to the UserFollowUser entity by IDs.
func (uu *UserUpdate) AddFollowedUserIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowedUserIDs(ids...)
	return uu
}

// AddFollowedUsers adds the "followedUsers" edges to the UserFollowUser entity.
func (uu *UserUpdate) AddFollowedUsers(u ...*UserFollowUser) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFollowedUserIDs(ids...)
}

// AddFollowerUserIDs adds the "followerUsers" edge to the UserFollowUser entity by IDs.
func (uu *UserUpdate) AddFollowerUserIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowerUserIDs(ids...)
	return uu
}

// AddFollowerUsers adds the "followerUsers" edges to the UserFollowUser entity.
func (uu *UserUpdate) AddFollowerUsers(u ...*UserFollowUser) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFollowerUserIDs(ids...)
}

// AddFollowedBusinessIDs adds the "followedBusinesses" edge to the UserFollowBusiness entity by IDs.
func (uu *UserUpdate) AddFollowedBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowedBusinessIDs(ids...)
	return uu
}

// AddFollowedBusinesses adds the "followedBusinesses" edges to the UserFollowBusiness entity.
func (uu *UserUpdate) AddFollowedBusinesses(u ...*UserFollowBusiness) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFollowedBusinessIDs(ids...)
}

// AddFollowerBusinessIDs adds the "followerBusinesses" edge to the BusinessFollowUser entity by IDs.
func (uu *UserUpdate) AddFollowerBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowerBusinessIDs(ids...)
	return uu
}

// AddFollowerBusinesses adds the "followerBusinesses" edges to the BusinessFollowUser entity.
func (uu *UserUpdate) AddFollowerBusinesses(b ...*BusinessFollowUser) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddFollowerBusinessIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (uu *UserUpdate) AddReviewIDs(ids ...string) *UserUpdate {
	uu.mutation.AddReviewIDs(ids...)
	return uu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (uu *UserUpdate) AddReviews(r ...*Review) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddReviewIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (uu *UserUpdate) AddBookingIDs(ids ...string) *UserUpdate {
	uu.mutation.AddBookingIDs(ids...)
	return uu
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (uu *UserUpdate) AddBookings(b ...*Booking) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddBookingIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (uu *UserUpdate) AddReservationIDs(ids ...string) *UserUpdate {
	uu.mutation.AddReservationIDs(ids...)
	return uu
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (uu *UserUpdate) AddReservations(r ...*Reservation) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddReservationIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (uu *UserUpdate) AddCategoryIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCategoryIDs(ids...)
	return uu
}

// AddCategories adds the "categories" edges to the Category entity.
func (uu *UserUpdate) AddCategories(c ...*Category) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCategoryIDs(ids...)
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (uu *UserUpdate) AddPlaceIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPlaceIDs(ids...)
	return uu
}

// AddPlaces adds the "places" edges to the Place entity.
func (uu *UserUpdate) AddPlaces(p ...*Place) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPlaceIDs(ids...)
}

// AddCategoryAssignmentIDs adds the "categoryAssignments" edge to the CategoryAssignment entity by IDs.
func (uu *UserUpdate) AddCategoryAssignmentIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCategoryAssignmentIDs(ids...)
	return uu
}

// AddCategoryAssignments adds the "categoryAssignments" edges to the CategoryAssignment entity.
func (uu *UserUpdate) AddCategoryAssignments(c ...*CategoryAssignment) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCategoryAssignmentIDs(ids...)
}

// SetOwnedEventsID sets the "ownedEvents" edge to the Event entity by ID.
func (uu *UserUpdate) SetOwnedEventsID(id string) *UserUpdate {
	uu.mutation.SetOwnedEventsID(id)
	return uu
}

// SetNillableOwnedEventsID sets the "ownedEvents" edge to the Event entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableOwnedEventsID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetOwnedEventsID(*id)
	}
	return uu
}

// SetOwnedEvents sets the "ownedEvents" edge to the Event entity.
func (uu *UserUpdate) SetOwnedEvents(e *Event) *UserUpdate {
	return uu.SetOwnedEventsID(e.ID)
}

// AddUserFollowEventIDs adds the "userFollowEvents" edge to the UserFollowEvent entity by IDs.
func (uu *UserUpdate) AddUserFollowEventIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserFollowEventIDs(ids...)
	return uu
}

// AddUserFollowEvents adds the "userFollowEvents" edges to the UserFollowEvent entity.
func (uu *UserUpdate) AddUserFollowEvents(u ...*UserFollowEvent) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserFollowEventIDs(ids...)
}

// AddFollowedPlaceIDs adds the "followedPlaces" edge to the UserFollowPlace entity by IDs.
func (uu *UserUpdate) AddFollowedPlaceIDs(ids ...string) *UserUpdate {
	uu.mutation.AddFollowedPlaceIDs(ids...)
	return uu
}

// AddFollowedPlaces adds the "followedPlaces" edges to the UserFollowPlace entity.
func (uu *UserUpdate) AddFollowedPlaces(u ...*UserFollowPlace) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddFollowedPlaceIDs(ids...)
}

// AddLikedPlaceIDs adds the "likedPlaces" edge to the UserLikePlace entity by IDs.
func (uu *UserUpdate) AddLikedPlaceIDs(ids ...string) *UserUpdate {
	uu.mutation.AddLikedPlaceIDs(ids...)
	return uu
}

// AddLikedPlaces adds the "likedPlaces" edges to the UserLikePlace entity.
func (uu *UserUpdate) AddLikedPlaces(u ...*UserLikePlace) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddLikedPlaceIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (uu *UserUpdate) AddRatingIDs(ids ...string) *UserUpdate {
	uu.mutation.AddRatingIDs(ids...)
	return uu
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (uu *UserUpdate) AddRatings(r ...*Rating) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRatingIDs(ids...)
}

// AddTransactionHistoryIDs adds the "transaction_histories" edge to the TransactionHistory entity by IDs.
func (uu *UserUpdate) AddTransactionHistoryIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTransactionHistoryIDs(ids...)
	return uu
}

// AddTransactionHistories adds the "transaction_histories" edges to the TransactionHistory entity.
func (uu *UserUpdate) AddTransactionHistories(t ...*TransactionHistory) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTransactionHistoryIDs(ids...)
}

// AddReservationBlockIDs adds the "reservation_blocks" edge to the ReservationBlock entity by IDs.
func (uu *UserUpdate) AddReservationBlockIDs(ids ...string) *UserUpdate {
	uu.mutation.AddReservationBlockIDs(ids...)
	return uu
}

// AddReservationBlocks adds the "reservation_blocks" edges to the ReservationBlock entity.
func (uu *UserUpdate) AddReservationBlocks(r ...*ReservationBlock) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddReservationBlockIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uu *UserUpdate) AddNotificationIDs(ids ...string) *UserUpdate {
	uu.mutation.AddNotificationIDs(ids...)
	return uu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uu *UserUpdate) AddNotifications(n ...*Notification) *UserUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotificationIDs(ids...)
}

// SetWalletID sets the "wallet" edge to the AccountWallet entity by ID.
func (uu *UserUpdate) SetWalletID(id string) *UserUpdate {
	uu.mutation.SetWalletID(id)
	return uu
}

// SetNillableWalletID sets the "wallet" edge to the AccountWallet entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableWalletID(id *string) *UserUpdate {
	if id != nil {
		uu = uu.SetWalletID(*id)
	}
	return uu
}

// SetWallet sets the "wallet" edge to the AccountWallet entity.
func (uu *UserUpdate) SetWallet(a *AccountWallet) *UserUpdate {
	return uu.SetWalletID(a.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (uu *UserUpdate) AddOrderIDs(ids ...string) *UserUpdate {
	uu.mutation.AddOrderIDs(ids...)
	return uu
}

// AddOrders adds the "orders" edges to the Order entity.
func (uu *UserUpdate) AddOrders(o ...*Order) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOrderIDs(ids...)
}

// AddTablesCreatedIDs adds the "tables_created" edge to the PlaceTable entity by IDs.
func (uu *UserUpdate) AddTablesCreatedIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTablesCreatedIDs(ids...)
	return uu
}

// AddTablesCreated adds the "tables_created" edges to the PlaceTable entity.
func (uu *UserUpdate) AddTablesCreated(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddTablesCreatedIDs(ids...)
}

// AddTablesUpdatedIDs adds the "tables_updated" edge to the PlaceTable entity by IDs.
func (uu *UserUpdate) AddTablesUpdatedIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTablesUpdatedIDs(ids...)
	return uu
}

// AddTablesUpdated adds the "tables_updated" edges to the PlaceTable entity.
func (uu *UserUpdate) AddTablesUpdated(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddTablesUpdatedIDs(ids...)
}

// AddTablesDeletedIDs adds the "tables_deleted" edge to the PlaceTable entity by IDs.
func (uu *UserUpdate) AddTablesDeletedIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTablesDeletedIDs(ids...)
	return uu
}

// AddTablesDeleted adds the "tables_deleted" edges to the PlaceTable entity.
func (uu *UserUpdate) AddTablesDeleted(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddTablesDeletedIDs(ids...)
}

// AddTablesReservedIDs adds the "tables_reserved" edge to the PlaceTable entity by IDs.
func (uu *UserUpdate) AddTablesReservedIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTablesReservedIDs(ids...)
	return uu
}

// AddTablesReserved adds the "tables_reserved" edges to the PlaceTable entity.
func (uu *UserUpdate) AddTablesReserved(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddTablesReservedIDs(ids...)
}

// AddTablesWaitedIDs adds the "tables_waited" edge to the PlaceTable entity by IDs.
func (uu *UserUpdate) AddTablesWaitedIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTablesWaitedIDs(ids...)
	return uu
}

// AddTablesWaited adds the "tables_waited" edges to the PlaceTable entity.
func (uu *UserUpdate) AddTablesWaited(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddTablesWaitedIDs(ids...)
}

// AddStaffIDs adds the "staffs" edge to the Staff entity by IDs.
func (uu *UserUpdate) AddStaffIDs(ids ...string) *UserUpdate {
	uu.mutation.AddStaffIDs(ids...)
	return uu
}

// AddStaffs adds the "staffs" edges to the Staff entity.
func (uu *UserUpdate) AddStaffs(s ...*Staff) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddStaffIDs(ids...)
}

// AddCreatedMenuIDs adds the "created_menus" edge to the Menu entity by IDs.
func (uu *UserUpdate) AddCreatedMenuIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCreatedMenuIDs(ids...)
	return uu
}

// AddCreatedMenus adds the "created_menus" edges to the Menu entity.
func (uu *UserUpdate) AddCreatedMenus(m ...*Menu) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddCreatedMenuIDs(ids...)
}

// AddUpdatedMenuIDs adds the "updated_menus" edge to the Menu entity by IDs.
func (uu *UserUpdate) AddUpdatedMenuIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUpdatedMenuIDs(ids...)
	return uu
}

// AddUpdatedMenus adds the "updated_menus" edges to the Menu entity.
func (uu *UserUpdate) AddUpdatedMenus(m ...*Menu) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddUpdatedMenuIDs(ids...)
}

// AddPlanIDs adds the "plans" edge to the Plan entity by IDs.
func (uu *UserUpdate) AddPlanIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPlanIDs(ids...)
	return uu
}

// AddPlans adds the "plans" edges to the Plan entity.
func (uu *UserUpdate) AddPlans(p ...*Plan) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPlanIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (uu *UserUpdate) AddSubscriptionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSubscriptionIDs(ids...)
	return uu
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (uu *UserUpdate) AddSubscriptions(s ...*Subscription) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSubscriptionIDs(ids...)
}

// AddTrainerIDs adds the "trainers" edge to the Trainer entity by IDs.
func (uu *UserUpdate) AddTrainerIDs(ids ...string) *UserUpdate {
	uu.mutation.AddTrainerIDs(ids...)
	return uu
}

// AddTrainers adds the "trainers" edges to the Trainer entity.
func (uu *UserUpdate) AddTrainers(t ...*Trainer) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTrainerIDs(ids...)
}

// AddMemberOfIDs adds the "memberOf" edge to the Place entity by IDs.
func (uu *UserUpdate) AddMemberOfIDs(ids ...string) *UserUpdate {
	uu.mutation.AddMemberOfIDs(ids...)
	return uu
}

// AddMemberOf adds the "memberOf" edges to the Place entity.
func (uu *UserUpdate) AddMemberOf(p ...*Place) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddMemberOfIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Place entity by IDs.
func (uu *UserUpdate) AddCustomerIDs(ids ...string) *UserUpdate {
	uu.mutation.AddCustomerIDs(ids...)
	return uu
}

// AddCustomer adds the "customer" edges to the Place entity.
func (uu *UserUpdate) AddCustomer(p ...*Place) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddCustomerIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUserBusinesses clears all "userBusinesses" edges to the UserBusiness entity.
func (uu *UserUpdate) ClearUserBusinesses() *UserUpdate {
	uu.mutation.ClearUserBusinesses()
	return uu
}

// RemoveUserBusinessIDs removes the "userBusinesses" edge to UserBusiness entities by IDs.
func (uu *UserUpdate) RemoveUserBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserBusinessIDs(ids...)
	return uu
}

// RemoveUserBusinesses removes "userBusinesses" edges to UserBusiness entities.
func (uu *UserUpdate) RemoveUserBusinesses(u ...*UserBusiness) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserBusinessIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (uu *UserUpdate) ClearComments() *UserUpdate {
	uu.mutation.ClearComments()
	return uu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (uu *UserUpdate) RemoveCommentIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCommentIDs(ids...)
	return uu
}

// RemoveComments removes "comments" edges to Comment entities.
func (uu *UserUpdate) RemoveComments(c ...*Comment) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCommentIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (uu *UserUpdate) ClearLikes() *UserUpdate {
	uu.mutation.ClearLikes()
	return uu
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (uu *UserUpdate) RemoveLikeIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveLikeIDs(ids...)
	return uu
}

// RemoveLikes removes "likes" edges to Like entities.
func (uu *UserUpdate) RemoveLikes(l ...*Like) *UserUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.RemoveLikeIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (uu *UserUpdate) ClearPosts() *UserUpdate {
	uu.mutation.ClearPosts()
	return uu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (uu *UserUpdate) RemovePostIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePostIDs(ids...)
	return uu
}

// RemovePosts removes "posts" edges to Post entities.
func (uu *UserUpdate) RemovePosts(p ...*Post) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePostIDs(ids...)
}

// ClearFollowedUsers clears all "followedUsers" edges to the UserFollowUser entity.
func (uu *UserUpdate) ClearFollowedUsers() *UserUpdate {
	uu.mutation.ClearFollowedUsers()
	return uu
}

// RemoveFollowedUserIDs removes the "followedUsers" edge to UserFollowUser entities by IDs.
func (uu *UserUpdate) RemoveFollowedUserIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowedUserIDs(ids...)
	return uu
}

// RemoveFollowedUsers removes "followedUsers" edges to UserFollowUser entities.
func (uu *UserUpdate) RemoveFollowedUsers(u ...*UserFollowUser) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFollowedUserIDs(ids...)
}

// ClearFollowerUsers clears all "followerUsers" edges to the UserFollowUser entity.
func (uu *UserUpdate) ClearFollowerUsers() *UserUpdate {
	uu.mutation.ClearFollowerUsers()
	return uu
}

// RemoveFollowerUserIDs removes the "followerUsers" edge to UserFollowUser entities by IDs.
func (uu *UserUpdate) RemoveFollowerUserIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowerUserIDs(ids...)
	return uu
}

// RemoveFollowerUsers removes "followerUsers" edges to UserFollowUser entities.
func (uu *UserUpdate) RemoveFollowerUsers(u ...*UserFollowUser) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFollowerUserIDs(ids...)
}

// ClearFollowedBusinesses clears all "followedBusinesses" edges to the UserFollowBusiness entity.
func (uu *UserUpdate) ClearFollowedBusinesses() *UserUpdate {
	uu.mutation.ClearFollowedBusinesses()
	return uu
}

// RemoveFollowedBusinessIDs removes the "followedBusinesses" edge to UserFollowBusiness entities by IDs.
func (uu *UserUpdate) RemoveFollowedBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowedBusinessIDs(ids...)
	return uu
}

// RemoveFollowedBusinesses removes "followedBusinesses" edges to UserFollowBusiness entities.
func (uu *UserUpdate) RemoveFollowedBusinesses(u ...*UserFollowBusiness) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFollowedBusinessIDs(ids...)
}

// ClearFollowerBusinesses clears all "followerBusinesses" edges to the BusinessFollowUser entity.
func (uu *UserUpdate) ClearFollowerBusinesses() *UserUpdate {
	uu.mutation.ClearFollowerBusinesses()
	return uu
}

// RemoveFollowerBusinessIDs removes the "followerBusinesses" edge to BusinessFollowUser entities by IDs.
func (uu *UserUpdate) RemoveFollowerBusinessIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowerBusinessIDs(ids...)
	return uu
}

// RemoveFollowerBusinesses removes "followerBusinesses" edges to BusinessFollowUser entities.
func (uu *UserUpdate) RemoveFollowerBusinesses(b ...*BusinessFollowUser) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveFollowerBusinessIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (uu *UserUpdate) ClearReviews() *UserUpdate {
	uu.mutation.ClearReviews()
	return uu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (uu *UserUpdate) RemoveReviewIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveReviewIDs(ids...)
	return uu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (uu *UserUpdate) RemoveReviews(r ...*Review) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveReviewIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (uu *UserUpdate) ClearBookings() *UserUpdate {
	uu.mutation.ClearBookings()
	return uu
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (uu *UserUpdate) RemoveBookingIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveBookingIDs(ids...)
	return uu
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (uu *UserUpdate) RemoveBookings(b ...*Booking) *UserUpdate {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveBookingIDs(ids...)
}

// ClearReservations clears all "reservations" edges to the Reservation entity.
func (uu *UserUpdate) ClearReservations() *UserUpdate {
	uu.mutation.ClearReservations()
	return uu
}

// RemoveReservationIDs removes the "reservations" edge to Reservation entities by IDs.
func (uu *UserUpdate) RemoveReservationIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveReservationIDs(ids...)
	return uu
}

// RemoveReservations removes "reservations" edges to Reservation entities.
func (uu *UserUpdate) RemoveReservations(r ...*Reservation) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveReservationIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (uu *UserUpdate) ClearCategories() *UserUpdate {
	uu.mutation.ClearCategories()
	return uu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (uu *UserUpdate) RemoveCategoryIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCategoryIDs(ids...)
	return uu
}

// RemoveCategories removes "categories" edges to Category entities.
func (uu *UserUpdate) RemoveCategories(c ...*Category) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCategoryIDs(ids...)
}

// ClearPlaces clears all "places" edges to the Place entity.
func (uu *UserUpdate) ClearPlaces() *UserUpdate {
	uu.mutation.ClearPlaces()
	return uu
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (uu *UserUpdate) RemovePlaceIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePlaceIDs(ids...)
	return uu
}

// RemovePlaces removes "places" edges to Place entities.
func (uu *UserUpdate) RemovePlaces(p ...*Place) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePlaceIDs(ids...)
}

// ClearCategoryAssignments clears all "categoryAssignments" edges to the CategoryAssignment entity.
func (uu *UserUpdate) ClearCategoryAssignments() *UserUpdate {
	uu.mutation.ClearCategoryAssignments()
	return uu
}

// RemoveCategoryAssignmentIDs removes the "categoryAssignments" edge to CategoryAssignment entities by IDs.
func (uu *UserUpdate) RemoveCategoryAssignmentIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCategoryAssignmentIDs(ids...)
	return uu
}

// RemoveCategoryAssignments removes "categoryAssignments" edges to CategoryAssignment entities.
func (uu *UserUpdate) RemoveCategoryAssignments(c ...*CategoryAssignment) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCategoryAssignmentIDs(ids...)
}

// ClearOwnedEvents clears the "ownedEvents" edge to the Event entity.
func (uu *UserUpdate) ClearOwnedEvents() *UserUpdate {
	uu.mutation.ClearOwnedEvents()
	return uu
}

// ClearUserFollowEvents clears all "userFollowEvents" edges to the UserFollowEvent entity.
func (uu *UserUpdate) ClearUserFollowEvents() *UserUpdate {
	uu.mutation.ClearUserFollowEvents()
	return uu
}

// RemoveUserFollowEventIDs removes the "userFollowEvents" edge to UserFollowEvent entities by IDs.
func (uu *UserUpdate) RemoveUserFollowEventIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserFollowEventIDs(ids...)
	return uu
}

// RemoveUserFollowEvents removes "userFollowEvents" edges to UserFollowEvent entities.
func (uu *UserUpdate) RemoveUserFollowEvents(u ...*UserFollowEvent) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserFollowEventIDs(ids...)
}

// ClearFollowedPlaces clears all "followedPlaces" edges to the UserFollowPlace entity.
func (uu *UserUpdate) ClearFollowedPlaces() *UserUpdate {
	uu.mutation.ClearFollowedPlaces()
	return uu
}

// RemoveFollowedPlaceIDs removes the "followedPlaces" edge to UserFollowPlace entities by IDs.
func (uu *UserUpdate) RemoveFollowedPlaceIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveFollowedPlaceIDs(ids...)
	return uu
}

// RemoveFollowedPlaces removes "followedPlaces" edges to UserFollowPlace entities.
func (uu *UserUpdate) RemoveFollowedPlaces(u ...*UserFollowPlace) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveFollowedPlaceIDs(ids...)
}

// ClearLikedPlaces clears all "likedPlaces" edges to the UserLikePlace entity.
func (uu *UserUpdate) ClearLikedPlaces() *UserUpdate {
	uu.mutation.ClearLikedPlaces()
	return uu
}

// RemoveLikedPlaceIDs removes the "likedPlaces" edge to UserLikePlace entities by IDs.
func (uu *UserUpdate) RemoveLikedPlaceIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveLikedPlaceIDs(ids...)
	return uu
}

// RemoveLikedPlaces removes "likedPlaces" edges to UserLikePlace entities.
func (uu *UserUpdate) RemoveLikedPlaces(u ...*UserLikePlace) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveLikedPlaceIDs(ids...)
}

// ClearRatings clears all "ratings" edges to the Rating entity.
func (uu *UserUpdate) ClearRatings() *UserUpdate {
	uu.mutation.ClearRatings()
	return uu
}

// RemoveRatingIDs removes the "ratings" edge to Rating entities by IDs.
func (uu *UserUpdate) RemoveRatingIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveRatingIDs(ids...)
	return uu
}

// RemoveRatings removes "ratings" edges to Rating entities.
func (uu *UserUpdate) RemoveRatings(r ...*Rating) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRatingIDs(ids...)
}

// ClearTransactionHistories clears all "transaction_histories" edges to the TransactionHistory entity.
func (uu *UserUpdate) ClearTransactionHistories() *UserUpdate {
	uu.mutation.ClearTransactionHistories()
	return uu
}

// RemoveTransactionHistoryIDs removes the "transaction_histories" edge to TransactionHistory entities by IDs.
func (uu *UserUpdate) RemoveTransactionHistoryIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTransactionHistoryIDs(ids...)
	return uu
}

// RemoveTransactionHistories removes "transaction_histories" edges to TransactionHistory entities.
func (uu *UserUpdate) RemoveTransactionHistories(t ...*TransactionHistory) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTransactionHistoryIDs(ids...)
}

// ClearReservationBlocks clears all "reservation_blocks" edges to the ReservationBlock entity.
func (uu *UserUpdate) ClearReservationBlocks() *UserUpdate {
	uu.mutation.ClearReservationBlocks()
	return uu
}

// RemoveReservationBlockIDs removes the "reservation_blocks" edge to ReservationBlock entities by IDs.
func (uu *UserUpdate) RemoveReservationBlockIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveReservationBlockIDs(ids...)
	return uu
}

// RemoveReservationBlocks removes "reservation_blocks" edges to ReservationBlock entities.
func (uu *UserUpdate) RemoveReservationBlocks(r ...*ReservationBlock) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveReservationBlockIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uu *UserUpdate) ClearNotifications() *UserUpdate {
	uu.mutation.ClearNotifications()
	return uu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uu *UserUpdate) RemoveNotificationIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveNotificationIDs(ids...)
	return uu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uu *UserUpdate) RemoveNotifications(n ...*Notification) *UserUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotificationIDs(ids...)
}

// ClearWallet clears the "wallet" edge to the AccountWallet entity.
func (uu *UserUpdate) ClearWallet() *UserUpdate {
	uu.mutation.ClearWallet()
	return uu
}

// ClearOrders clears all "orders" edges to the Order entity.
func (uu *UserUpdate) ClearOrders() *UserUpdate {
	uu.mutation.ClearOrders()
	return uu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (uu *UserUpdate) RemoveOrderIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveOrderIDs(ids...)
	return uu
}

// RemoveOrders removes "orders" edges to Order entities.
func (uu *UserUpdate) RemoveOrders(o ...*Order) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOrderIDs(ids...)
}

// ClearTablesCreated clears all "tables_created" edges to the PlaceTable entity.
func (uu *UserUpdate) ClearTablesCreated() *UserUpdate {
	uu.mutation.ClearTablesCreated()
	return uu
}

// RemoveTablesCreatedIDs removes the "tables_created" edge to PlaceTable entities by IDs.
func (uu *UserUpdate) RemoveTablesCreatedIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTablesCreatedIDs(ids...)
	return uu
}

// RemoveTablesCreated removes "tables_created" edges to PlaceTable entities.
func (uu *UserUpdate) RemoveTablesCreated(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveTablesCreatedIDs(ids...)
}

// ClearTablesUpdated clears all "tables_updated" edges to the PlaceTable entity.
func (uu *UserUpdate) ClearTablesUpdated() *UserUpdate {
	uu.mutation.ClearTablesUpdated()
	return uu
}

// RemoveTablesUpdatedIDs removes the "tables_updated" edge to PlaceTable entities by IDs.
func (uu *UserUpdate) RemoveTablesUpdatedIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTablesUpdatedIDs(ids...)
	return uu
}

// RemoveTablesUpdated removes "tables_updated" edges to PlaceTable entities.
func (uu *UserUpdate) RemoveTablesUpdated(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveTablesUpdatedIDs(ids...)
}

// ClearTablesDeleted clears all "tables_deleted" edges to the PlaceTable entity.
func (uu *UserUpdate) ClearTablesDeleted() *UserUpdate {
	uu.mutation.ClearTablesDeleted()
	return uu
}

// RemoveTablesDeletedIDs removes the "tables_deleted" edge to PlaceTable entities by IDs.
func (uu *UserUpdate) RemoveTablesDeletedIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTablesDeletedIDs(ids...)
	return uu
}

// RemoveTablesDeleted removes "tables_deleted" edges to PlaceTable entities.
func (uu *UserUpdate) RemoveTablesDeleted(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveTablesDeletedIDs(ids...)
}

// ClearTablesReserved clears all "tables_reserved" edges to the PlaceTable entity.
func (uu *UserUpdate) ClearTablesReserved() *UserUpdate {
	uu.mutation.ClearTablesReserved()
	return uu
}

// RemoveTablesReservedIDs removes the "tables_reserved" edge to PlaceTable entities by IDs.
func (uu *UserUpdate) RemoveTablesReservedIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTablesReservedIDs(ids...)
	return uu
}

// RemoveTablesReserved removes "tables_reserved" edges to PlaceTable entities.
func (uu *UserUpdate) RemoveTablesReserved(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveTablesReservedIDs(ids...)
}

// ClearTablesWaited clears all "tables_waited" edges to the PlaceTable entity.
func (uu *UserUpdate) ClearTablesWaited() *UserUpdate {
	uu.mutation.ClearTablesWaited()
	return uu
}

// RemoveTablesWaitedIDs removes the "tables_waited" edge to PlaceTable entities by IDs.
func (uu *UserUpdate) RemoveTablesWaitedIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTablesWaitedIDs(ids...)
	return uu
}

// RemoveTablesWaited removes "tables_waited" edges to PlaceTable entities.
func (uu *UserUpdate) RemoveTablesWaited(p ...*PlaceTable) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveTablesWaitedIDs(ids...)
}

// ClearStaffs clears all "staffs" edges to the Staff entity.
func (uu *UserUpdate) ClearStaffs() *UserUpdate {
	uu.mutation.ClearStaffs()
	return uu
}

// RemoveStaffIDs removes the "staffs" edge to Staff entities by IDs.
func (uu *UserUpdate) RemoveStaffIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveStaffIDs(ids...)
	return uu
}

// RemoveStaffs removes "staffs" edges to Staff entities.
func (uu *UserUpdate) RemoveStaffs(s ...*Staff) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveStaffIDs(ids...)
}

// ClearCreatedMenus clears all "created_menus" edges to the Menu entity.
func (uu *UserUpdate) ClearCreatedMenus() *UserUpdate {
	uu.mutation.ClearCreatedMenus()
	return uu
}

// RemoveCreatedMenuIDs removes the "created_menus" edge to Menu entities by IDs.
func (uu *UserUpdate) RemoveCreatedMenuIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCreatedMenuIDs(ids...)
	return uu
}

// RemoveCreatedMenus removes "created_menus" edges to Menu entities.
func (uu *UserUpdate) RemoveCreatedMenus(m ...*Menu) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveCreatedMenuIDs(ids...)
}

// ClearUpdatedMenus clears all "updated_menus" edges to the Menu entity.
func (uu *UserUpdate) ClearUpdatedMenus() *UserUpdate {
	uu.mutation.ClearUpdatedMenus()
	return uu
}

// RemoveUpdatedMenuIDs removes the "updated_menus" edge to Menu entities by IDs.
func (uu *UserUpdate) RemoveUpdatedMenuIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUpdatedMenuIDs(ids...)
	return uu
}

// RemoveUpdatedMenus removes "updated_menus" edges to Menu entities.
func (uu *UserUpdate) RemoveUpdatedMenus(m ...*Menu) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveUpdatedMenuIDs(ids...)
}

// ClearPlans clears all "plans" edges to the Plan entity.
func (uu *UserUpdate) ClearPlans() *UserUpdate {
	uu.mutation.ClearPlans()
	return uu
}

// RemovePlanIDs removes the "plans" edge to Plan entities by IDs.
func (uu *UserUpdate) RemovePlanIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePlanIDs(ids...)
	return uu
}

// RemovePlans removes "plans" edges to Plan entities.
func (uu *UserUpdate) RemovePlans(p ...*Plan) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePlanIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (uu *UserUpdate) ClearSubscriptions() *UserUpdate {
	uu.mutation.ClearSubscriptions()
	return uu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (uu *UserUpdate) RemoveSubscriptionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSubscriptionIDs(ids...)
	return uu
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (uu *UserUpdate) RemoveSubscriptions(s ...*Subscription) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSubscriptionIDs(ids...)
}

// ClearTrainers clears all "trainers" edges to the Trainer entity.
func (uu *UserUpdate) ClearTrainers() *UserUpdate {
	uu.mutation.ClearTrainers()
	return uu
}

// RemoveTrainerIDs removes the "trainers" edge to Trainer entities by IDs.
func (uu *UserUpdate) RemoveTrainerIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveTrainerIDs(ids...)
	return uu
}

// RemoveTrainers removes "trainers" edges to Trainer entities.
func (uu *UserUpdate) RemoveTrainers(t ...*Trainer) *UserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTrainerIDs(ids...)
}

// ClearMemberOf clears all "memberOf" edges to the Place entity.
func (uu *UserUpdate) ClearMemberOf() *UserUpdate {
	uu.mutation.ClearMemberOf()
	return uu
}

// RemoveMemberOfIDs removes the "memberOf" edge to Place entities by IDs.
func (uu *UserUpdate) RemoveMemberOfIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveMemberOfIDs(ids...)
	return uu
}

// RemoveMemberOf removes "memberOf" edges to Place entities.
func (uu *UserUpdate) RemoveMemberOf(p ...*Place) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveMemberOfIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Place entity.
func (uu *UserUpdate) ClearCustomer() *UserUpdate {
	uu.mutation.ClearCustomer()
	return uu
}

// RemoveCustomerIDs removes the "customer" edge to Place entities by IDs.
func (uu *UserUpdate) RemoveCustomerIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveCustomerIDs(ids...)
	return uu
}

// RemoveCustomer removes "customer" edges to Place entities.
func (uu *UserUpdate) RemoveCustomer(p ...*Place) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Auth0ID(); ok {
		_spec.SetField(user.FieldAuth0ID, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if uu.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := uu.mutation.CoverImage(); ok {
		_spec.SetField(user.FieldCoverImage, field.TypeString, value)
	}
	if uu.mutation.CoverImageCleared() {
		_spec.ClearField(user.FieldCoverImage, field.TypeString)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Website(); ok {
		_spec.SetField(user.FieldWebsite, field.TypeString, value)
	}
	if uu.mutation.WebsiteCleared() {
		_spec.ClearField(user.FieldWebsite, field.TypeString)
	}
	if value, ok := uu.mutation.Location(); ok {
		_spec.SetField(user.FieldLocation, field.TypeString, value)
	}
	if uu.mutation.LocationCleared() {
		_spec.ClearField(user.FieldLocation, field.TypeString)
	}
	if value, ok := uu.mutation.MapCoordinates(); ok {
		_spec.SetField(user.FieldMapCoordinates, field.TypeJSON, value)
	}
	if uu.mutation.MapCoordinatesCleared() {
		_spec.ClearField(user.FieldMapCoordinates, field.TypeJSON)
	}
	if value, ok := uu.mutation.Longitude(); ok {
		_spec.SetField(user.FieldLongitude, field.TypeString, value)
	}
	if uu.mutation.LongitudeCleared() {
		_spec.ClearField(user.FieldLongitude, field.TypeString)
	}
	if value, ok := uu.mutation.Latitude(); ok {
		_spec.SetField(user.FieldLatitude, field.TypeString, value)
	}
	if uu.mutation.LatitudeCleared() {
		_spec.ClearField(user.FieldLatitude, field.TypeString)
	}
	if value, ok := uu.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if uu.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := uu.mutation.Auth0Data(); ok {
		_spec.SetField(user.FieldAuth0Data, field.TypeJSON, value)
	}
	if uu.mutation.Auth0DataCleared() {
		_spec.ClearField(user.FieldAuth0Data, field.TypeJSON)
	}
	if value, ok := uu.mutation.AppSettings(); ok {
		_spec.SetField(user.FieldAppSettings, field.TypeJSON, value)
	}
	if uu.mutation.AppSettingsCleared() {
		_spec.ClearField(user.FieldAppSettings, field.TypeJSON)
	}
	if value, ok := uu.mutation.UserSettings(); ok {
		_spec.SetField(user.FieldUserSettings, field.TypeJSON, value)
	}
	if uu.mutation.UserSettingsCleared() {
		_spec.ClearField(user.FieldUserSettings, field.TypeJSON)
	}
	if value, ok := uu.mutation.SearchText(); ok {
		_spec.SetField(user.FieldSearchText, field.TypeString, value)
	}
	if uu.mutation.SearchTextCleared() {
		_spec.ClearField(user.FieldSearchText, field.TypeString)
	}
	if value, ok := uu.mutation.RelevanceScore(); ok {
		_spec.SetField(user.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(user.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if uu.mutation.RelevanceScoreCleared() {
		_spec.ClearField(user.FieldRelevanceScore, field.TypeFloat64)
	}
	if value, ok := uu.mutation.FollowerCount(); ok {
		_spec.SetField(user.FieldFollowerCount, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedFollowerCount(); ok {
		_spec.AddField(user.FieldFollowerCount, field.TypeInt, value)
	}
	if value, ok := uu.mutation.FollowingCount(); ok {
		_spec.SetField(user.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedFollowingCount(); ok {
		_spec.AddField(user.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Permissions(); ok {
		_spec.SetField(user.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldPermissions, value)
		})
	}
	if uu.mutation.PermissionsCleared() {
		_spec.ClearField(user.FieldPermissions, field.TypeJSON)
	}
	if value, ok := uu.mutation.IsPremium(); ok {
		_spec.SetField(user.FieldIsPremium, field.TypeBool, value)
	}
	if uu.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserBusinessesIDs(); len(nodes) > 0 && !uu.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !uu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLikesIDs(); len(nodes) > 0 && !uu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !uu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowedUsersIDs(); len(nodes) > 0 && !uu.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowerUsersIDs(); len(nodes) > 0 && !uu.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowedBusinessesIDs(); len(nodes) > 0 && !uu.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowedBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowerBusinessesIDs(); len(nodes) > 0 && !uu.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowerBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReviewsTable,
			Columns: []string{user.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !uu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReviewsTable,
			Columns: []string{user.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReviewsTable,
			Columns: []string{user.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BookingsTable,
			Columns: []string{user.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !uu.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BookingsTable,
			Columns: []string{user.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BookingsTable,
			Columns: []string{user.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationsTable,
			Columns: []string{user.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedReservationsIDs(); len(nodes) > 0 && !uu.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationsTable,
			Columns: []string{user.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationsTable,
			Columns: []string{user.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !uu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlacesTable,
			Columns: user.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !uu.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlacesTable,
			Columns: user.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlacesTable,
			Columns: user.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoryAssignmentsTable,
			Columns: []string{user.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCategoryAssignmentsIDs(); len(nodes) > 0 && !uu.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoryAssignmentsTable,
			Columns: []string{user.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CategoryAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoryAssignmentsTable,
			Columns: []string{user.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OwnedEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OwnedEventsTable,
			Columns: []string{user.OwnedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OwnedEventsTable,
			Columns: []string{user.OwnedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserFollowEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserFollowEventsTable,
			Columns: []string{user.UserFollowEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserFollowEventsIDs(); len(nodes) > 0 && !uu.mutation.UserFollowEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserFollowEventsTable,
			Columns: []string{user.UserFollowEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserFollowEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserFollowEventsTable,
			Columns: []string{user.UserFollowEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FollowedPlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedPlacesTable,
			Columns: []string{user.FollowedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFollowedPlacesIDs(); len(nodes) > 0 && !uu.mutation.FollowedPlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedPlacesTable,
			Columns: []string{user.FollowedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FollowedPlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedPlacesTable,
			Columns: []string{user.FollowedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LikedPlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikedPlacesTable,
			Columns: []string{user.LikedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLikedPlacesIDs(); len(nodes) > 0 && !uu.mutation.LikedPlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikedPlacesTable,
			Columns: []string{user.LikedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LikedPlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikedPlacesTable,
			Columns: []string{user.LikedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RatingsTable,
			Columns: []string{user.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !uu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RatingsTable,
			Columns: []string{user.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RatingsTable,
			Columns: []string{user.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TransactionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionHistoriesTable,
			Columns: []string{user.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTransactionHistoriesIDs(); len(nodes) > 0 && !uu.mutation.TransactionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionHistoriesTable,
			Columns: []string{user.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TransactionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionHistoriesTable,
			Columns: []string{user.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ReservationBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationBlocksTable,
			Columns: []string{user.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedReservationBlocksIDs(); len(nodes) > 0 && !uu.mutation.ReservationBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationBlocksTable,
			Columns: []string{user.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ReservationBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationBlocksTable,
			Columns: []string{user.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: user.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: user.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: user.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.WalletTable,
			Columns: []string{user.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountwallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.WalletTable,
			Columns: []string{user.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountwallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrdersTable,
			Columns: []string{user.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !uu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrdersTable,
			Columns: []string{user.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrdersTable,
			Columns: []string{user.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TablesCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesCreatedTable,
			Columns: []string{user.TablesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTablesCreatedIDs(); len(nodes) > 0 && !uu.mutation.TablesCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesCreatedTable,
			Columns: []string{user.TablesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TablesCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesCreatedTable,
			Columns: []string{user.TablesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TablesUpdatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesUpdatedTable,
			Columns: []string{user.TablesUpdatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTablesUpdatedIDs(); len(nodes) > 0 && !uu.mutation.TablesUpdatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesUpdatedTable,
			Columns: []string{user.TablesUpdatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TablesUpdatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesUpdatedTable,
			Columns: []string{user.TablesUpdatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TablesDeletedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesDeletedTable,
			Columns: []string{user.TablesDeletedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTablesDeletedIDs(); len(nodes) > 0 && !uu.mutation.TablesDeletedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesDeletedTable,
			Columns: []string{user.TablesDeletedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TablesDeletedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesDeletedTable,
			Columns: []string{user.TablesDeletedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TablesReservedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesReservedTable,
			Columns: []string{user.TablesReservedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTablesReservedIDs(); len(nodes) > 0 && !uu.mutation.TablesReservedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesReservedTable,
			Columns: []string{user.TablesReservedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TablesReservedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesReservedTable,
			Columns: []string{user.TablesReservedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TablesWaitedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesWaitedTable,
			Columns: []string{user.TablesWaitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTablesWaitedIDs(); len(nodes) > 0 && !uu.mutation.TablesWaitedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesWaitedTable,
			Columns: []string{user.TablesWaitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TablesWaitedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesWaitedTable,
			Columns: []string{user.TablesWaitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StaffsTable,
			Columns: []string{user.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStaffsIDs(); len(nodes) > 0 && !uu.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StaffsTable,
			Columns: []string{user.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StaffsTable,
			Columns: []string{user.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CreatedMenusTable,
			Columns: user.CreatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedMenusIDs(); len(nodes) > 0 && !uu.mutation.CreatedMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CreatedMenusTable,
			Columns: user.CreatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CreatedMenusTable,
			Columns: user.CreatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpdatedMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UpdatedMenusTable,
			Columns: user.UpdatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUpdatedMenusIDs(); len(nodes) > 0 && !uu.mutation.UpdatedMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UpdatedMenusTable,
			Columns: user.UpdatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdatedMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UpdatedMenusTable,
			Columns: user.UpdatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PlansTable,
			Columns: user.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPlansIDs(); len(nodes) > 0 && !uu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PlansTable,
			Columns: user.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PlansTable,
			Columns: user.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !uu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TrainersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TrainersTable,
			Columns: user.TrainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTrainersIDs(); len(nodes) > 0 && !uu.mutation.TrainersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TrainersTable,
			Columns: user.TrainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TrainersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TrainersTable,
			Columns: user.TrainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MemberOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MemberOfTable,
			Columns: user.MemberOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMemberOfIDs(); len(nodes) > 0 && !uu.mutation.MemberOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MemberOfTable,
			Columns: user.MemberOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MemberOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MemberOfTable,
			Columns: user.MemberOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CustomerTable,
			Columns: user.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !uu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CustomerTable,
			Columns: user.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CustomerTable,
			Columns: user.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetAuth0ID sets the "auth0_id" field.
func (uuo *UserUpdateOne) SetAuth0ID(s string) *UserUpdateOne {
	uuo.mutation.SetAuth0ID(s)
	return uuo
}

// SetNillableAuth0ID sets the "auth0_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAuth0ID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAuth0ID(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetPicture sets the "picture" field.
func (uuo *UserUpdateOne) SetPicture(s string) *UserUpdateOne {
	uuo.mutation.SetPicture(s)
	return uuo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePicture(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPicture(*s)
	}
	return uuo
}

// ClearPicture clears the value of the "picture" field.
func (uuo *UserUpdateOne) ClearPicture() *UserUpdateOne {
	uuo.mutation.ClearPicture()
	return uuo
}

// SetCoverImage sets the "cover_image" field.
func (uuo *UserUpdateOne) SetCoverImage(s string) *UserUpdateOne {
	uuo.mutation.SetCoverImage(s)
	return uuo
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCoverImage(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCoverImage(*s)
	}
	return uuo
}

// ClearCoverImage clears the value of the "cover_image" field.
func (uuo *UserUpdateOne) ClearCoverImage() *UserUpdateOne {
	uuo.mutation.ClearCoverImage()
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetWebsite sets the "website" field.
func (uuo *UserUpdateOne) SetWebsite(s string) *UserUpdateOne {
	uuo.mutation.SetWebsite(s)
	return uuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWebsite(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetWebsite(*s)
	}
	return uuo
}

// ClearWebsite clears the value of the "website" field.
func (uuo *UserUpdateOne) ClearWebsite() *UserUpdateOne {
	uuo.mutation.ClearWebsite()
	return uuo
}

// SetLocation sets the "location" field.
func (uuo *UserUpdateOne) SetLocation(s string) *UserUpdateOne {
	uuo.mutation.SetLocation(s)
	return uuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocation(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLocation(*s)
	}
	return uuo
}

// ClearLocation clears the value of the "location" field.
func (uuo *UserUpdateOne) ClearLocation() *UserUpdateOne {
	uuo.mutation.ClearLocation()
	return uuo
}

// SetMapCoordinates sets the "map_coordinates" field.
func (uuo *UserUpdateOne) SetMapCoordinates(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetMapCoordinates(m)
	return uuo
}

// ClearMapCoordinates clears the value of the "map_coordinates" field.
func (uuo *UserUpdateOne) ClearMapCoordinates() *UserUpdateOne {
	uuo.mutation.ClearMapCoordinates()
	return uuo
}

// SetLongitude sets the "longitude" field.
func (uuo *UserUpdateOne) SetLongitude(s string) *UserUpdateOne {
	uuo.mutation.SetLongitude(s)
	return uuo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLongitude(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLongitude(*s)
	}
	return uuo
}

// ClearLongitude clears the value of the "longitude" field.
func (uuo *UserUpdateOne) ClearLongitude() *UserUpdateOne {
	uuo.mutation.ClearLongitude()
	return uuo
}

// SetLatitude sets the "latitude" field.
func (uuo *UserUpdateOne) SetLatitude(s string) *UserUpdateOne {
	uuo.mutation.SetLatitude(s)
	return uuo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLatitude(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLatitude(*s)
	}
	return uuo
}

// ClearLatitude clears the value of the "latitude" field.
func (uuo *UserUpdateOne) ClearLatitude() *UserUpdateOne {
	uuo.mutation.ClearLatitude()
	return uuo
}

// SetBio sets the "bio" field.
func (uuo *UserUpdateOne) SetBio(s string) *UserUpdateOne {
	uuo.mutation.SetBio(s)
	return uuo
}

// SetNillableBio sets the "bio" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBio(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBio(*s)
	}
	return uuo
}

// ClearBio clears the value of the "bio" field.
func (uuo *UserUpdateOne) ClearBio() *UserUpdateOne {
	uuo.mutation.ClearBio()
	return uuo
}

// SetAuth0Data sets the "auth0_data" field.
func (uuo *UserUpdateOne) SetAuth0Data(m *management.User) *UserUpdateOne {
	uuo.mutation.SetAuth0Data(m)
	return uuo
}

// ClearAuth0Data clears the value of the "auth0_data" field.
func (uuo *UserUpdateOne) ClearAuth0Data() *UserUpdateOne {
	uuo.mutation.ClearAuth0Data()
	return uuo
}

// SetAppSettings sets the "app_settings" field.
func (uuo *UserUpdateOne) SetAppSettings(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetAppSettings(m)
	return uuo
}

// ClearAppSettings clears the value of the "app_settings" field.
func (uuo *UserUpdateOne) ClearAppSettings() *UserUpdateOne {
	uuo.mutation.ClearAppSettings()
	return uuo
}

// SetUserSettings sets the "user_settings" field.
func (uuo *UserUpdateOne) SetUserSettings(m map[string]interface{}) *UserUpdateOne {
	uuo.mutation.SetUserSettings(m)
	return uuo
}

// ClearUserSettings clears the value of the "user_settings" field.
func (uuo *UserUpdateOne) ClearUserSettings() *UserUpdateOne {
	uuo.mutation.ClearUserSettings()
	return uuo
}

// SetSearchText sets the "search_text" field.
func (uuo *UserUpdateOne) SetSearchText(s string) *UserUpdateOne {
	uuo.mutation.SetSearchText(s)
	return uuo
}

// SetNillableSearchText sets the "search_text" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSearchText(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSearchText(*s)
	}
	return uuo
}

// ClearSearchText clears the value of the "search_text" field.
func (uuo *UserUpdateOne) ClearSearchText() *UserUpdateOne {
	uuo.mutation.ClearSearchText()
	return uuo
}

// SetRelevanceScore sets the "relevance_score" field.
func (uuo *UserUpdateOne) SetRelevanceScore(f float64) *UserUpdateOne {
	uuo.mutation.ResetRelevanceScore()
	uuo.mutation.SetRelevanceScore(f)
	return uuo
}

// SetNillableRelevanceScore sets the "relevance_score" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRelevanceScore(f *float64) *UserUpdateOne {
	if f != nil {
		uuo.SetRelevanceScore(*f)
	}
	return uuo
}

// AddRelevanceScore adds f to the "relevance_score" field.
func (uuo *UserUpdateOne) AddRelevanceScore(f float64) *UserUpdateOne {
	uuo.mutation.AddRelevanceScore(f)
	return uuo
}

// ClearRelevanceScore clears the value of the "relevance_score" field.
func (uuo *UserUpdateOne) ClearRelevanceScore() *UserUpdateOne {
	uuo.mutation.ClearRelevanceScore()
	return uuo
}

// SetFollowerCount sets the "follower_count" field.
func (uuo *UserUpdateOne) SetFollowerCount(i int) *UserUpdateOne {
	uuo.mutation.ResetFollowerCount()
	uuo.mutation.SetFollowerCount(i)
	return uuo
}

// SetNillableFollowerCount sets the "follower_count" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFollowerCount(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetFollowerCount(*i)
	}
	return uuo
}

// AddFollowerCount adds i to the "follower_count" field.
func (uuo *UserUpdateOne) AddFollowerCount(i int) *UserUpdateOne {
	uuo.mutation.AddFollowerCount(i)
	return uuo
}

// SetFollowingCount sets the "following_count" field.
func (uuo *UserUpdateOne) SetFollowingCount(i int) *UserUpdateOne {
	uuo.mutation.ResetFollowingCount()
	uuo.mutation.SetFollowingCount(i)
	return uuo
}

// SetNillableFollowingCount sets the "following_count" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFollowingCount(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetFollowingCount(*i)
	}
	return uuo
}

// AddFollowingCount adds i to the "following_count" field.
func (uuo *UserUpdateOne) AddFollowingCount(i int) *UserUpdateOne {
	uuo.mutation.AddFollowingCount(i)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// SetPermissions sets the "permissions" field.
func (uuo *UserUpdateOne) SetPermissions(s []string) *UserUpdateOne {
	uuo.mutation.SetPermissions(s)
	return uuo
}

// AppendPermissions appends s to the "permissions" field.
func (uuo *UserUpdateOne) AppendPermissions(s []string) *UserUpdateOne {
	uuo.mutation.AppendPermissions(s)
	return uuo
}

// ClearPermissions clears the value of the "permissions" field.
func (uuo *UserUpdateOne) ClearPermissions() *UserUpdateOne {
	uuo.mutation.ClearPermissions()
	return uuo
}

// SetIsPremium sets the "is_premium" field.
func (uuo *UserUpdateOne) SetIsPremium(b bool) *UserUpdateOne {
	uuo.mutation.SetIsPremium(b)
	return uuo
}

// SetNillableIsPremium sets the "is_premium" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsPremium(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsPremium(*b)
	}
	return uuo
}

// AddUserBusinessIDs adds the "userBusinesses" edge to the UserBusiness entity by IDs.
func (uuo *UserUpdateOne) AddUserBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserBusinessIDs(ids...)
	return uuo
}

// AddUserBusinesses adds the "userBusinesses" edges to the UserBusiness entity.
func (uuo *UserUpdateOne) AddUserBusinesses(u ...*UserBusiness) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserBusinessIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (uuo *UserUpdateOne) AddCommentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCommentIDs(ids...)
	return uuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (uuo *UserUpdateOne) AddComments(c ...*Comment) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCommentIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (uuo *UserUpdateOne) AddLikeIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddLikeIDs(ids...)
	return uuo
}

// AddLikes adds the "likes" edges to the Like entity.
func (uuo *UserUpdateOne) AddLikes(l ...*Like) *UserUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.AddLikeIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uuo *UserUpdateOne) AddPostIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPostIDs(ids...)
	return uuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (uuo *UserUpdateOne) AddPosts(p ...*Post) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPostIDs(ids...)
}

// AddFollowedUserIDs adds the "followedUsers" edge to the UserFollowUser entity by IDs.
func (uuo *UserUpdateOne) AddFollowedUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowedUserIDs(ids...)
	return uuo
}

// AddFollowedUsers adds the "followedUsers" edges to the UserFollowUser entity.
func (uuo *UserUpdateOne) AddFollowedUsers(u ...*UserFollowUser) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFollowedUserIDs(ids...)
}

// AddFollowerUserIDs adds the "followerUsers" edge to the UserFollowUser entity by IDs.
func (uuo *UserUpdateOne) AddFollowerUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowerUserIDs(ids...)
	return uuo
}

// AddFollowerUsers adds the "followerUsers" edges to the UserFollowUser entity.
func (uuo *UserUpdateOne) AddFollowerUsers(u ...*UserFollowUser) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFollowerUserIDs(ids...)
}

// AddFollowedBusinessIDs adds the "followedBusinesses" edge to the UserFollowBusiness entity by IDs.
func (uuo *UserUpdateOne) AddFollowedBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowedBusinessIDs(ids...)
	return uuo
}

// AddFollowedBusinesses adds the "followedBusinesses" edges to the UserFollowBusiness entity.
func (uuo *UserUpdateOne) AddFollowedBusinesses(u ...*UserFollowBusiness) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFollowedBusinessIDs(ids...)
}

// AddFollowerBusinessIDs adds the "followerBusinesses" edge to the BusinessFollowUser entity by IDs.
func (uuo *UserUpdateOne) AddFollowerBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowerBusinessIDs(ids...)
	return uuo
}

// AddFollowerBusinesses adds the "followerBusinesses" edges to the BusinessFollowUser entity.
func (uuo *UserUpdateOne) AddFollowerBusinesses(b ...*BusinessFollowUser) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddFollowerBusinessIDs(ids...)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (uuo *UserUpdateOne) AddReviewIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddReviewIDs(ids...)
	return uuo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (uuo *UserUpdateOne) AddReviews(r ...*Review) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddReviewIDs(ids...)
}

// AddBookingIDs adds the "bookings" edge to the Booking entity by IDs.
func (uuo *UserUpdateOne) AddBookingIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddBookingIDs(ids...)
	return uuo
}

// AddBookings adds the "bookings" edges to the Booking entity.
func (uuo *UserUpdateOne) AddBookings(b ...*Booking) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddBookingIDs(ids...)
}

// AddReservationIDs adds the "reservations" edge to the Reservation entity by IDs.
func (uuo *UserUpdateOne) AddReservationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddReservationIDs(ids...)
	return uuo
}

// AddReservations adds the "reservations" edges to the Reservation entity.
func (uuo *UserUpdateOne) AddReservations(r ...*Reservation) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddReservationIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (uuo *UserUpdateOne) AddCategoryIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCategoryIDs(ids...)
	return uuo
}

// AddCategories adds the "categories" edges to the Category entity.
func (uuo *UserUpdateOne) AddCategories(c ...*Category) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCategoryIDs(ids...)
}

// AddPlaceIDs adds the "places" edge to the Place entity by IDs.
func (uuo *UserUpdateOne) AddPlaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPlaceIDs(ids...)
	return uuo
}

// AddPlaces adds the "places" edges to the Place entity.
func (uuo *UserUpdateOne) AddPlaces(p ...*Place) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPlaceIDs(ids...)
}

// AddCategoryAssignmentIDs adds the "categoryAssignments" edge to the CategoryAssignment entity by IDs.
func (uuo *UserUpdateOne) AddCategoryAssignmentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCategoryAssignmentIDs(ids...)
	return uuo
}

// AddCategoryAssignments adds the "categoryAssignments" edges to the CategoryAssignment entity.
func (uuo *UserUpdateOne) AddCategoryAssignments(c ...*CategoryAssignment) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCategoryAssignmentIDs(ids...)
}

// SetOwnedEventsID sets the "ownedEvents" edge to the Event entity by ID.
func (uuo *UserUpdateOne) SetOwnedEventsID(id string) *UserUpdateOne {
	uuo.mutation.SetOwnedEventsID(id)
	return uuo
}

// SetNillableOwnedEventsID sets the "ownedEvents" edge to the Event entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOwnedEventsID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetOwnedEventsID(*id)
	}
	return uuo
}

// SetOwnedEvents sets the "ownedEvents" edge to the Event entity.
func (uuo *UserUpdateOne) SetOwnedEvents(e *Event) *UserUpdateOne {
	return uuo.SetOwnedEventsID(e.ID)
}

// AddUserFollowEventIDs adds the "userFollowEvents" edge to the UserFollowEvent entity by IDs.
func (uuo *UserUpdateOne) AddUserFollowEventIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserFollowEventIDs(ids...)
	return uuo
}

// AddUserFollowEvents adds the "userFollowEvents" edges to the UserFollowEvent entity.
func (uuo *UserUpdateOne) AddUserFollowEvents(u ...*UserFollowEvent) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserFollowEventIDs(ids...)
}

// AddFollowedPlaceIDs adds the "followedPlaces" edge to the UserFollowPlace entity by IDs.
func (uuo *UserUpdateOne) AddFollowedPlaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddFollowedPlaceIDs(ids...)
	return uuo
}

// AddFollowedPlaces adds the "followedPlaces" edges to the UserFollowPlace entity.
func (uuo *UserUpdateOne) AddFollowedPlaces(u ...*UserFollowPlace) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddFollowedPlaceIDs(ids...)
}

// AddLikedPlaceIDs adds the "likedPlaces" edge to the UserLikePlace entity by IDs.
func (uuo *UserUpdateOne) AddLikedPlaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddLikedPlaceIDs(ids...)
	return uuo
}

// AddLikedPlaces adds the "likedPlaces" edges to the UserLikePlace entity.
func (uuo *UserUpdateOne) AddLikedPlaces(u ...*UserLikePlace) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddLikedPlaceIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the Rating entity by IDs.
func (uuo *UserUpdateOne) AddRatingIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddRatingIDs(ids...)
	return uuo
}

// AddRatings adds the "ratings" edges to the Rating entity.
func (uuo *UserUpdateOne) AddRatings(r ...*Rating) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRatingIDs(ids...)
}

// AddTransactionHistoryIDs adds the "transaction_histories" edge to the TransactionHistory entity by IDs.
func (uuo *UserUpdateOne) AddTransactionHistoryIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTransactionHistoryIDs(ids...)
	return uuo
}

// AddTransactionHistories adds the "transaction_histories" edges to the TransactionHistory entity.
func (uuo *UserUpdateOne) AddTransactionHistories(t ...*TransactionHistory) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTransactionHistoryIDs(ids...)
}

// AddReservationBlockIDs adds the "reservation_blocks" edge to the ReservationBlock entity by IDs.
func (uuo *UserUpdateOne) AddReservationBlockIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddReservationBlockIDs(ids...)
	return uuo
}

// AddReservationBlocks adds the "reservation_blocks" edges to the ReservationBlock entity.
func (uuo *UserUpdateOne) AddReservationBlocks(r ...*ReservationBlock) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddReservationBlockIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uuo *UserUpdateOne) AddNotificationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddNotificationIDs(ids...)
	return uuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uuo *UserUpdateOne) AddNotifications(n ...*Notification) *UserUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotificationIDs(ids...)
}

// SetWalletID sets the "wallet" edge to the AccountWallet entity by ID.
func (uuo *UserUpdateOne) SetWalletID(id string) *UserUpdateOne {
	uuo.mutation.SetWalletID(id)
	return uuo
}

// SetNillableWalletID sets the "wallet" edge to the AccountWallet entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWalletID(id *string) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetWalletID(*id)
	}
	return uuo
}

// SetWallet sets the "wallet" edge to the AccountWallet entity.
func (uuo *UserUpdateOne) SetWallet(a *AccountWallet) *UserUpdateOne {
	return uuo.SetWalletID(a.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (uuo *UserUpdateOne) AddOrderIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddOrderIDs(ids...)
	return uuo
}

// AddOrders adds the "orders" edges to the Order entity.
func (uuo *UserUpdateOne) AddOrders(o ...*Order) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOrderIDs(ids...)
}

// AddTablesCreatedIDs adds the "tables_created" edge to the PlaceTable entity by IDs.
func (uuo *UserUpdateOne) AddTablesCreatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTablesCreatedIDs(ids...)
	return uuo
}

// AddTablesCreated adds the "tables_created" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) AddTablesCreated(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddTablesCreatedIDs(ids...)
}

// AddTablesUpdatedIDs adds the "tables_updated" edge to the PlaceTable entity by IDs.
func (uuo *UserUpdateOne) AddTablesUpdatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTablesUpdatedIDs(ids...)
	return uuo
}

// AddTablesUpdated adds the "tables_updated" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) AddTablesUpdated(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddTablesUpdatedIDs(ids...)
}

// AddTablesDeletedIDs adds the "tables_deleted" edge to the PlaceTable entity by IDs.
func (uuo *UserUpdateOne) AddTablesDeletedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTablesDeletedIDs(ids...)
	return uuo
}

// AddTablesDeleted adds the "tables_deleted" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) AddTablesDeleted(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddTablesDeletedIDs(ids...)
}

// AddTablesReservedIDs adds the "tables_reserved" edge to the PlaceTable entity by IDs.
func (uuo *UserUpdateOne) AddTablesReservedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTablesReservedIDs(ids...)
	return uuo
}

// AddTablesReserved adds the "tables_reserved" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) AddTablesReserved(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddTablesReservedIDs(ids...)
}

// AddTablesWaitedIDs adds the "tables_waited" edge to the PlaceTable entity by IDs.
func (uuo *UserUpdateOne) AddTablesWaitedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTablesWaitedIDs(ids...)
	return uuo
}

// AddTablesWaited adds the "tables_waited" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) AddTablesWaited(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddTablesWaitedIDs(ids...)
}

// AddStaffIDs adds the "staffs" edge to the Staff entity by IDs.
func (uuo *UserUpdateOne) AddStaffIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddStaffIDs(ids...)
	return uuo
}

// AddStaffs adds the "staffs" edges to the Staff entity.
func (uuo *UserUpdateOne) AddStaffs(s ...*Staff) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddStaffIDs(ids...)
}

// AddCreatedMenuIDs adds the "created_menus" edge to the Menu entity by IDs.
func (uuo *UserUpdateOne) AddCreatedMenuIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCreatedMenuIDs(ids...)
	return uuo
}

// AddCreatedMenus adds the "created_menus" edges to the Menu entity.
func (uuo *UserUpdateOne) AddCreatedMenus(m ...*Menu) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddCreatedMenuIDs(ids...)
}

// AddUpdatedMenuIDs adds the "updated_menus" edge to the Menu entity by IDs.
func (uuo *UserUpdateOne) AddUpdatedMenuIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUpdatedMenuIDs(ids...)
	return uuo
}

// AddUpdatedMenus adds the "updated_menus" edges to the Menu entity.
func (uuo *UserUpdateOne) AddUpdatedMenus(m ...*Menu) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddUpdatedMenuIDs(ids...)
}

// AddPlanIDs adds the "plans" edge to the Plan entity by IDs.
func (uuo *UserUpdateOne) AddPlanIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPlanIDs(ids...)
	return uuo
}

// AddPlans adds the "plans" edges to the Plan entity.
func (uuo *UserUpdateOne) AddPlans(p ...*Plan) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPlanIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (uuo *UserUpdateOne) AddSubscriptionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSubscriptionIDs(ids...)
	return uuo
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (uuo *UserUpdateOne) AddSubscriptions(s ...*Subscription) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSubscriptionIDs(ids...)
}

// AddTrainerIDs adds the "trainers" edge to the Trainer entity by IDs.
func (uuo *UserUpdateOne) AddTrainerIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddTrainerIDs(ids...)
	return uuo
}

// AddTrainers adds the "trainers" edges to the Trainer entity.
func (uuo *UserUpdateOne) AddTrainers(t ...*Trainer) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTrainerIDs(ids...)
}

// AddMemberOfIDs adds the "memberOf" edge to the Place entity by IDs.
func (uuo *UserUpdateOne) AddMemberOfIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddMemberOfIDs(ids...)
	return uuo
}

// AddMemberOf adds the "memberOf" edges to the Place entity.
func (uuo *UserUpdateOne) AddMemberOf(p ...*Place) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddMemberOfIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Place entity by IDs.
func (uuo *UserUpdateOne) AddCustomerIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddCustomerIDs(ids...)
	return uuo
}

// AddCustomer adds the "customer" edges to the Place entity.
func (uuo *UserUpdateOne) AddCustomer(p ...*Place) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddCustomerIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUserBusinesses clears all "userBusinesses" edges to the UserBusiness entity.
func (uuo *UserUpdateOne) ClearUserBusinesses() *UserUpdateOne {
	uuo.mutation.ClearUserBusinesses()
	return uuo
}

// RemoveUserBusinessIDs removes the "userBusinesses" edge to UserBusiness entities by IDs.
func (uuo *UserUpdateOne) RemoveUserBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserBusinessIDs(ids...)
	return uuo
}

// RemoveUserBusinesses removes "userBusinesses" edges to UserBusiness entities.
func (uuo *UserUpdateOne) RemoveUserBusinesses(u ...*UserBusiness) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserBusinessIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (uuo *UserUpdateOne) ClearComments() *UserUpdateOne {
	uuo.mutation.ClearComments()
	return uuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (uuo *UserUpdateOne) RemoveCommentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCommentIDs(ids...)
	return uuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (uuo *UserUpdateOne) RemoveComments(c ...*Comment) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCommentIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (uuo *UserUpdateOne) ClearLikes() *UserUpdateOne {
	uuo.mutation.ClearLikes()
	return uuo
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (uuo *UserUpdateOne) RemoveLikeIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveLikeIDs(ids...)
	return uuo
}

// RemoveLikes removes "likes" edges to Like entities.
func (uuo *UserUpdateOne) RemoveLikes(l ...*Like) *UserUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.RemoveLikeIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (uuo *UserUpdateOne) ClearPosts() *UserUpdateOne {
	uuo.mutation.ClearPosts()
	return uuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (uuo *UserUpdateOne) RemovePostIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePostIDs(ids...)
	return uuo
}

// RemovePosts removes "posts" edges to Post entities.
func (uuo *UserUpdateOne) RemovePosts(p ...*Post) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePostIDs(ids...)
}

// ClearFollowedUsers clears all "followedUsers" edges to the UserFollowUser entity.
func (uuo *UserUpdateOne) ClearFollowedUsers() *UserUpdateOne {
	uuo.mutation.ClearFollowedUsers()
	return uuo
}

// RemoveFollowedUserIDs removes the "followedUsers" edge to UserFollowUser entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowedUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowedUserIDs(ids...)
	return uuo
}

// RemoveFollowedUsers removes "followedUsers" edges to UserFollowUser entities.
func (uuo *UserUpdateOne) RemoveFollowedUsers(u ...*UserFollowUser) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFollowedUserIDs(ids...)
}

// ClearFollowerUsers clears all "followerUsers" edges to the UserFollowUser entity.
func (uuo *UserUpdateOne) ClearFollowerUsers() *UserUpdateOne {
	uuo.mutation.ClearFollowerUsers()
	return uuo
}

// RemoveFollowerUserIDs removes the "followerUsers" edge to UserFollowUser entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowerUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowerUserIDs(ids...)
	return uuo
}

// RemoveFollowerUsers removes "followerUsers" edges to UserFollowUser entities.
func (uuo *UserUpdateOne) RemoveFollowerUsers(u ...*UserFollowUser) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFollowerUserIDs(ids...)
}

// ClearFollowedBusinesses clears all "followedBusinesses" edges to the UserFollowBusiness entity.
func (uuo *UserUpdateOne) ClearFollowedBusinesses() *UserUpdateOne {
	uuo.mutation.ClearFollowedBusinesses()
	return uuo
}

// RemoveFollowedBusinessIDs removes the "followedBusinesses" edge to UserFollowBusiness entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowedBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowedBusinessIDs(ids...)
	return uuo
}

// RemoveFollowedBusinesses removes "followedBusinesses" edges to UserFollowBusiness entities.
func (uuo *UserUpdateOne) RemoveFollowedBusinesses(u ...*UserFollowBusiness) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFollowedBusinessIDs(ids...)
}

// ClearFollowerBusinesses clears all "followerBusinesses" edges to the BusinessFollowUser entity.
func (uuo *UserUpdateOne) ClearFollowerBusinesses() *UserUpdateOne {
	uuo.mutation.ClearFollowerBusinesses()
	return uuo
}

// RemoveFollowerBusinessIDs removes the "followerBusinesses" edge to BusinessFollowUser entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowerBusinessIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowerBusinessIDs(ids...)
	return uuo
}

// RemoveFollowerBusinesses removes "followerBusinesses" edges to BusinessFollowUser entities.
func (uuo *UserUpdateOne) RemoveFollowerBusinesses(b ...*BusinessFollowUser) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveFollowerBusinessIDs(ids...)
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (uuo *UserUpdateOne) ClearReviews() *UserUpdateOne {
	uuo.mutation.ClearReviews()
	return uuo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (uuo *UserUpdateOne) RemoveReviewIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveReviewIDs(ids...)
	return uuo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (uuo *UserUpdateOne) RemoveReviews(r ...*Review) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveReviewIDs(ids...)
}

// ClearBookings clears all "bookings" edges to the Booking entity.
func (uuo *UserUpdateOne) ClearBookings() *UserUpdateOne {
	uuo.mutation.ClearBookings()
	return uuo
}

// RemoveBookingIDs removes the "bookings" edge to Booking entities by IDs.
func (uuo *UserUpdateOne) RemoveBookingIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveBookingIDs(ids...)
	return uuo
}

// RemoveBookings removes "bookings" edges to Booking entities.
func (uuo *UserUpdateOne) RemoveBookings(b ...*Booking) *UserUpdateOne {
	ids := make([]string, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveBookingIDs(ids...)
}

// ClearReservations clears all "reservations" edges to the Reservation entity.
func (uuo *UserUpdateOne) ClearReservations() *UserUpdateOne {
	uuo.mutation.ClearReservations()
	return uuo
}

// RemoveReservationIDs removes the "reservations" edge to Reservation entities by IDs.
func (uuo *UserUpdateOne) RemoveReservationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveReservationIDs(ids...)
	return uuo
}

// RemoveReservations removes "reservations" edges to Reservation entities.
func (uuo *UserUpdateOne) RemoveReservations(r ...*Reservation) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveReservationIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (uuo *UserUpdateOne) ClearCategories() *UserUpdateOne {
	uuo.mutation.ClearCategories()
	return uuo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (uuo *UserUpdateOne) RemoveCategoryIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCategoryIDs(ids...)
	return uuo
}

// RemoveCategories removes "categories" edges to Category entities.
func (uuo *UserUpdateOne) RemoveCategories(c ...*Category) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCategoryIDs(ids...)
}

// ClearPlaces clears all "places" edges to the Place entity.
func (uuo *UserUpdateOne) ClearPlaces() *UserUpdateOne {
	uuo.mutation.ClearPlaces()
	return uuo
}

// RemovePlaceIDs removes the "places" edge to Place entities by IDs.
func (uuo *UserUpdateOne) RemovePlaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePlaceIDs(ids...)
	return uuo
}

// RemovePlaces removes "places" edges to Place entities.
func (uuo *UserUpdateOne) RemovePlaces(p ...*Place) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePlaceIDs(ids...)
}

// ClearCategoryAssignments clears all "categoryAssignments" edges to the CategoryAssignment entity.
func (uuo *UserUpdateOne) ClearCategoryAssignments() *UserUpdateOne {
	uuo.mutation.ClearCategoryAssignments()
	return uuo
}

// RemoveCategoryAssignmentIDs removes the "categoryAssignments" edge to CategoryAssignment entities by IDs.
func (uuo *UserUpdateOne) RemoveCategoryAssignmentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCategoryAssignmentIDs(ids...)
	return uuo
}

// RemoveCategoryAssignments removes "categoryAssignments" edges to CategoryAssignment entities.
func (uuo *UserUpdateOne) RemoveCategoryAssignments(c ...*CategoryAssignment) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCategoryAssignmentIDs(ids...)
}

// ClearOwnedEvents clears the "ownedEvents" edge to the Event entity.
func (uuo *UserUpdateOne) ClearOwnedEvents() *UserUpdateOne {
	uuo.mutation.ClearOwnedEvents()
	return uuo
}

// ClearUserFollowEvents clears all "userFollowEvents" edges to the UserFollowEvent entity.
func (uuo *UserUpdateOne) ClearUserFollowEvents() *UserUpdateOne {
	uuo.mutation.ClearUserFollowEvents()
	return uuo
}

// RemoveUserFollowEventIDs removes the "userFollowEvents" edge to UserFollowEvent entities by IDs.
func (uuo *UserUpdateOne) RemoveUserFollowEventIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserFollowEventIDs(ids...)
	return uuo
}

// RemoveUserFollowEvents removes "userFollowEvents" edges to UserFollowEvent entities.
func (uuo *UserUpdateOne) RemoveUserFollowEvents(u ...*UserFollowEvent) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserFollowEventIDs(ids...)
}

// ClearFollowedPlaces clears all "followedPlaces" edges to the UserFollowPlace entity.
func (uuo *UserUpdateOne) ClearFollowedPlaces() *UserUpdateOne {
	uuo.mutation.ClearFollowedPlaces()
	return uuo
}

// RemoveFollowedPlaceIDs removes the "followedPlaces" edge to UserFollowPlace entities by IDs.
func (uuo *UserUpdateOne) RemoveFollowedPlaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveFollowedPlaceIDs(ids...)
	return uuo
}

// RemoveFollowedPlaces removes "followedPlaces" edges to UserFollowPlace entities.
func (uuo *UserUpdateOne) RemoveFollowedPlaces(u ...*UserFollowPlace) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveFollowedPlaceIDs(ids...)
}

// ClearLikedPlaces clears all "likedPlaces" edges to the UserLikePlace entity.
func (uuo *UserUpdateOne) ClearLikedPlaces() *UserUpdateOne {
	uuo.mutation.ClearLikedPlaces()
	return uuo
}

// RemoveLikedPlaceIDs removes the "likedPlaces" edge to UserLikePlace entities by IDs.
func (uuo *UserUpdateOne) RemoveLikedPlaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveLikedPlaceIDs(ids...)
	return uuo
}

// RemoveLikedPlaces removes "likedPlaces" edges to UserLikePlace entities.
func (uuo *UserUpdateOne) RemoveLikedPlaces(u ...*UserLikePlace) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveLikedPlaceIDs(ids...)
}

// ClearRatings clears all "ratings" edges to the Rating entity.
func (uuo *UserUpdateOne) ClearRatings() *UserUpdateOne {
	uuo.mutation.ClearRatings()
	return uuo
}

// RemoveRatingIDs removes the "ratings" edge to Rating entities by IDs.
func (uuo *UserUpdateOne) RemoveRatingIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveRatingIDs(ids...)
	return uuo
}

// RemoveRatings removes "ratings" edges to Rating entities.
func (uuo *UserUpdateOne) RemoveRatings(r ...*Rating) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRatingIDs(ids...)
}

// ClearTransactionHistories clears all "transaction_histories" edges to the TransactionHistory entity.
func (uuo *UserUpdateOne) ClearTransactionHistories() *UserUpdateOne {
	uuo.mutation.ClearTransactionHistories()
	return uuo
}

// RemoveTransactionHistoryIDs removes the "transaction_histories" edge to TransactionHistory entities by IDs.
func (uuo *UserUpdateOne) RemoveTransactionHistoryIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTransactionHistoryIDs(ids...)
	return uuo
}

// RemoveTransactionHistories removes "transaction_histories" edges to TransactionHistory entities.
func (uuo *UserUpdateOne) RemoveTransactionHistories(t ...*TransactionHistory) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTransactionHistoryIDs(ids...)
}

// ClearReservationBlocks clears all "reservation_blocks" edges to the ReservationBlock entity.
func (uuo *UserUpdateOne) ClearReservationBlocks() *UserUpdateOne {
	uuo.mutation.ClearReservationBlocks()
	return uuo
}

// RemoveReservationBlockIDs removes the "reservation_blocks" edge to ReservationBlock entities by IDs.
func (uuo *UserUpdateOne) RemoveReservationBlockIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveReservationBlockIDs(ids...)
	return uuo
}

// RemoveReservationBlocks removes "reservation_blocks" edges to ReservationBlock entities.
func (uuo *UserUpdateOne) RemoveReservationBlocks(r ...*ReservationBlock) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveReservationBlockIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uuo *UserUpdateOne) ClearNotifications() *UserUpdateOne {
	uuo.mutation.ClearNotifications()
	return uuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uuo *UserUpdateOne) RemoveNotificationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveNotificationIDs(ids...)
	return uuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uuo *UserUpdateOne) RemoveNotifications(n ...*Notification) *UserUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotificationIDs(ids...)
}

// ClearWallet clears the "wallet" edge to the AccountWallet entity.
func (uuo *UserUpdateOne) ClearWallet() *UserUpdateOne {
	uuo.mutation.ClearWallet()
	return uuo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (uuo *UserUpdateOne) ClearOrders() *UserUpdateOne {
	uuo.mutation.ClearOrders()
	return uuo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (uuo *UserUpdateOne) RemoveOrderIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveOrderIDs(ids...)
	return uuo
}

// RemoveOrders removes "orders" edges to Order entities.
func (uuo *UserUpdateOne) RemoveOrders(o ...*Order) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOrderIDs(ids...)
}

// ClearTablesCreated clears all "tables_created" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) ClearTablesCreated() *UserUpdateOne {
	uuo.mutation.ClearTablesCreated()
	return uuo
}

// RemoveTablesCreatedIDs removes the "tables_created" edge to PlaceTable entities by IDs.
func (uuo *UserUpdateOne) RemoveTablesCreatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTablesCreatedIDs(ids...)
	return uuo
}

// RemoveTablesCreated removes "tables_created" edges to PlaceTable entities.
func (uuo *UserUpdateOne) RemoveTablesCreated(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveTablesCreatedIDs(ids...)
}

// ClearTablesUpdated clears all "tables_updated" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) ClearTablesUpdated() *UserUpdateOne {
	uuo.mutation.ClearTablesUpdated()
	return uuo
}

// RemoveTablesUpdatedIDs removes the "tables_updated" edge to PlaceTable entities by IDs.
func (uuo *UserUpdateOne) RemoveTablesUpdatedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTablesUpdatedIDs(ids...)
	return uuo
}

// RemoveTablesUpdated removes "tables_updated" edges to PlaceTable entities.
func (uuo *UserUpdateOne) RemoveTablesUpdated(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveTablesUpdatedIDs(ids...)
}

// ClearTablesDeleted clears all "tables_deleted" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) ClearTablesDeleted() *UserUpdateOne {
	uuo.mutation.ClearTablesDeleted()
	return uuo
}

// RemoveTablesDeletedIDs removes the "tables_deleted" edge to PlaceTable entities by IDs.
func (uuo *UserUpdateOne) RemoveTablesDeletedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTablesDeletedIDs(ids...)
	return uuo
}

// RemoveTablesDeleted removes "tables_deleted" edges to PlaceTable entities.
func (uuo *UserUpdateOne) RemoveTablesDeleted(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveTablesDeletedIDs(ids...)
}

// ClearTablesReserved clears all "tables_reserved" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) ClearTablesReserved() *UserUpdateOne {
	uuo.mutation.ClearTablesReserved()
	return uuo
}

// RemoveTablesReservedIDs removes the "tables_reserved" edge to PlaceTable entities by IDs.
func (uuo *UserUpdateOne) RemoveTablesReservedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTablesReservedIDs(ids...)
	return uuo
}

// RemoveTablesReserved removes "tables_reserved" edges to PlaceTable entities.
func (uuo *UserUpdateOne) RemoveTablesReserved(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveTablesReservedIDs(ids...)
}

// ClearTablesWaited clears all "tables_waited" edges to the PlaceTable entity.
func (uuo *UserUpdateOne) ClearTablesWaited() *UserUpdateOne {
	uuo.mutation.ClearTablesWaited()
	return uuo
}

// RemoveTablesWaitedIDs removes the "tables_waited" edge to PlaceTable entities by IDs.
func (uuo *UserUpdateOne) RemoveTablesWaitedIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTablesWaitedIDs(ids...)
	return uuo
}

// RemoveTablesWaited removes "tables_waited" edges to PlaceTable entities.
func (uuo *UserUpdateOne) RemoveTablesWaited(p ...*PlaceTable) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveTablesWaitedIDs(ids...)
}

// ClearStaffs clears all "staffs" edges to the Staff entity.
func (uuo *UserUpdateOne) ClearStaffs() *UserUpdateOne {
	uuo.mutation.ClearStaffs()
	return uuo
}

// RemoveStaffIDs removes the "staffs" edge to Staff entities by IDs.
func (uuo *UserUpdateOne) RemoveStaffIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveStaffIDs(ids...)
	return uuo
}

// RemoveStaffs removes "staffs" edges to Staff entities.
func (uuo *UserUpdateOne) RemoveStaffs(s ...*Staff) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveStaffIDs(ids...)
}

// ClearCreatedMenus clears all "created_menus" edges to the Menu entity.
func (uuo *UserUpdateOne) ClearCreatedMenus() *UserUpdateOne {
	uuo.mutation.ClearCreatedMenus()
	return uuo
}

// RemoveCreatedMenuIDs removes the "created_menus" edge to Menu entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedMenuIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCreatedMenuIDs(ids...)
	return uuo
}

// RemoveCreatedMenus removes "created_menus" edges to Menu entities.
func (uuo *UserUpdateOne) RemoveCreatedMenus(m ...*Menu) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveCreatedMenuIDs(ids...)
}

// ClearUpdatedMenus clears all "updated_menus" edges to the Menu entity.
func (uuo *UserUpdateOne) ClearUpdatedMenus() *UserUpdateOne {
	uuo.mutation.ClearUpdatedMenus()
	return uuo
}

// RemoveUpdatedMenuIDs removes the "updated_menus" edge to Menu entities by IDs.
func (uuo *UserUpdateOne) RemoveUpdatedMenuIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUpdatedMenuIDs(ids...)
	return uuo
}

// RemoveUpdatedMenus removes "updated_menus" edges to Menu entities.
func (uuo *UserUpdateOne) RemoveUpdatedMenus(m ...*Menu) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveUpdatedMenuIDs(ids...)
}

// ClearPlans clears all "plans" edges to the Plan entity.
func (uuo *UserUpdateOne) ClearPlans() *UserUpdateOne {
	uuo.mutation.ClearPlans()
	return uuo
}

// RemovePlanIDs removes the "plans" edge to Plan entities by IDs.
func (uuo *UserUpdateOne) RemovePlanIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePlanIDs(ids...)
	return uuo
}

// RemovePlans removes "plans" edges to Plan entities.
func (uuo *UserUpdateOne) RemovePlans(p ...*Plan) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePlanIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (uuo *UserUpdateOne) ClearSubscriptions() *UserUpdateOne {
	uuo.mutation.ClearSubscriptions()
	return uuo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (uuo *UserUpdateOne) RemoveSubscriptionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSubscriptionIDs(ids...)
	return uuo
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (uuo *UserUpdateOne) RemoveSubscriptions(s ...*Subscription) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSubscriptionIDs(ids...)
}

// ClearTrainers clears all "trainers" edges to the Trainer entity.
func (uuo *UserUpdateOne) ClearTrainers() *UserUpdateOne {
	uuo.mutation.ClearTrainers()
	return uuo
}

// RemoveTrainerIDs removes the "trainers" edge to Trainer entities by IDs.
func (uuo *UserUpdateOne) RemoveTrainerIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveTrainerIDs(ids...)
	return uuo
}

// RemoveTrainers removes "trainers" edges to Trainer entities.
func (uuo *UserUpdateOne) RemoveTrainers(t ...*Trainer) *UserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTrainerIDs(ids...)
}

// ClearMemberOf clears all "memberOf" edges to the Place entity.
func (uuo *UserUpdateOne) ClearMemberOf() *UserUpdateOne {
	uuo.mutation.ClearMemberOf()
	return uuo
}

// RemoveMemberOfIDs removes the "memberOf" edge to Place entities by IDs.
func (uuo *UserUpdateOne) RemoveMemberOfIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveMemberOfIDs(ids...)
	return uuo
}

// RemoveMemberOf removes "memberOf" edges to Place entities.
func (uuo *UserUpdateOne) RemoveMemberOf(p ...*Place) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveMemberOfIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Place entity.
func (uuo *UserUpdateOne) ClearCustomer() *UserUpdateOne {
	uuo.mutation.ClearCustomer()
	return uuo
}

// RemoveCustomerIDs removes the "customer" edge to Place entities by IDs.
func (uuo *UserUpdateOne) RemoveCustomerIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveCustomerIDs(ids...)
	return uuo
}

// RemoveCustomer removes "customer" edges to Place entities.
func (uuo *UserUpdateOne) RemoveCustomer(p ...*Place) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveCustomerIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Auth0ID(); ok {
		_spec.SetField(user.FieldAuth0ID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Picture(); ok {
		_spec.SetField(user.FieldPicture, field.TypeString, value)
	}
	if uuo.mutation.PictureCleared() {
		_spec.ClearField(user.FieldPicture, field.TypeString)
	}
	if value, ok := uuo.mutation.CoverImage(); ok {
		_spec.SetField(user.FieldCoverImage, field.TypeString, value)
	}
	if uuo.mutation.CoverImageCleared() {
		_spec.ClearField(user.FieldCoverImage, field.TypeString)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Website(); ok {
		_spec.SetField(user.FieldWebsite, field.TypeString, value)
	}
	if uuo.mutation.WebsiteCleared() {
		_spec.ClearField(user.FieldWebsite, field.TypeString)
	}
	if value, ok := uuo.mutation.Location(); ok {
		_spec.SetField(user.FieldLocation, field.TypeString, value)
	}
	if uuo.mutation.LocationCleared() {
		_spec.ClearField(user.FieldLocation, field.TypeString)
	}
	if value, ok := uuo.mutation.MapCoordinates(); ok {
		_spec.SetField(user.FieldMapCoordinates, field.TypeJSON, value)
	}
	if uuo.mutation.MapCoordinatesCleared() {
		_spec.ClearField(user.FieldMapCoordinates, field.TypeJSON)
	}
	if value, ok := uuo.mutation.Longitude(); ok {
		_spec.SetField(user.FieldLongitude, field.TypeString, value)
	}
	if uuo.mutation.LongitudeCleared() {
		_spec.ClearField(user.FieldLongitude, field.TypeString)
	}
	if value, ok := uuo.mutation.Latitude(); ok {
		_spec.SetField(user.FieldLatitude, field.TypeString, value)
	}
	if uuo.mutation.LatitudeCleared() {
		_spec.ClearField(user.FieldLatitude, field.TypeString)
	}
	if value, ok := uuo.mutation.Bio(); ok {
		_spec.SetField(user.FieldBio, field.TypeString, value)
	}
	if uuo.mutation.BioCleared() {
		_spec.ClearField(user.FieldBio, field.TypeString)
	}
	if value, ok := uuo.mutation.Auth0Data(); ok {
		_spec.SetField(user.FieldAuth0Data, field.TypeJSON, value)
	}
	if uuo.mutation.Auth0DataCleared() {
		_spec.ClearField(user.FieldAuth0Data, field.TypeJSON)
	}
	if value, ok := uuo.mutation.AppSettings(); ok {
		_spec.SetField(user.FieldAppSettings, field.TypeJSON, value)
	}
	if uuo.mutation.AppSettingsCleared() {
		_spec.ClearField(user.FieldAppSettings, field.TypeJSON)
	}
	if value, ok := uuo.mutation.UserSettings(); ok {
		_spec.SetField(user.FieldUserSettings, field.TypeJSON, value)
	}
	if uuo.mutation.UserSettingsCleared() {
		_spec.ClearField(user.FieldUserSettings, field.TypeJSON)
	}
	if value, ok := uuo.mutation.SearchText(); ok {
		_spec.SetField(user.FieldSearchText, field.TypeString, value)
	}
	if uuo.mutation.SearchTextCleared() {
		_spec.ClearField(user.FieldSearchText, field.TypeString)
	}
	if value, ok := uuo.mutation.RelevanceScore(); ok {
		_spec.SetField(user.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(user.FieldRelevanceScore, field.TypeFloat64, value)
	}
	if uuo.mutation.RelevanceScoreCleared() {
		_spec.ClearField(user.FieldRelevanceScore, field.TypeFloat64)
	}
	if value, ok := uuo.mutation.FollowerCount(); ok {
		_spec.SetField(user.FieldFollowerCount, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedFollowerCount(); ok {
		_spec.AddField(user.FieldFollowerCount, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.FollowingCount(); ok {
		_spec.SetField(user.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedFollowingCount(); ok {
		_spec.AddField(user.FieldFollowingCount, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Permissions(); ok {
		_spec.SetField(user.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldPermissions, value)
		})
	}
	if uuo.mutation.PermissionsCleared() {
		_spec.ClearField(user.FieldPermissions, field.TypeJSON)
	}
	if value, ok := uuo.mutation.IsPremium(); ok {
		_spec.SetField(user.FieldIsPremium, field.TypeBool, value)
	}
	if uuo.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserBusinessesIDs(); len(nodes) > 0 && !uuo.mutation.UserBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserBusinessesTable,
			Columns: []string{user.UserBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !uuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CommentsTable,
			Columns: []string{user.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !uuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikesTable,
			Columns: []string{user.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !uuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowedUsersIDs(); len(nodes) > 0 && !uuo.mutation.FollowedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedUsersTable,
			Columns: []string{user.FollowedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowerUsersIDs(); len(nodes) > 0 && !uuo.mutation.FollowerUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowerUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerUsersTable,
			Columns: []string{user.FollowerUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowedBusinessesIDs(); len(nodes) > 0 && !uuo.mutation.FollowedBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowedBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedBusinessesTable,
			Columns: []string{user.FollowedBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowbusiness.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowerBusinessesIDs(); len(nodes) > 0 && !uuo.mutation.FollowerBusinessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowerBusinessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowerBusinessesTable,
			Columns: []string{user.FollowerBusinessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReviewsTable,
			Columns: []string{user.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !uuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReviewsTable,
			Columns: []string{user.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReviewsTable,
			Columns: []string{user.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BookingsTable,
			Columns: []string{user.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBookingsIDs(); len(nodes) > 0 && !uuo.mutation.BookingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BookingsTable,
			Columns: []string{user.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BookingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BookingsTable,
			Columns: []string{user.BookingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(booking.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationsTable,
			Columns: []string{user.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedReservationsIDs(); len(nodes) > 0 && !uuo.mutation.ReservationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationsTable,
			Columns: []string{user.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ReservationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationsTable,
			Columns: []string{user.ReservationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !uuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlacesTable,
			Columns: user.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPlacesIDs(); len(nodes) > 0 && !uuo.mutation.PlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlacesTable,
			Columns: user.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlacesTable,
			Columns: user.PlacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoryAssignmentsTable,
			Columns: []string{user.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCategoryAssignmentsIDs(); len(nodes) > 0 && !uuo.mutation.CategoryAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoryAssignmentsTable,
			Columns: []string{user.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CategoryAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoryAssignmentsTable,
			Columns: []string{user.CategoryAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(categoryassignment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OwnedEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OwnedEventsTable,
			Columns: []string{user.OwnedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.OwnedEventsTable,
			Columns: []string{user.OwnedEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserFollowEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserFollowEventsTable,
			Columns: []string{user.UserFollowEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserFollowEventsIDs(); len(nodes) > 0 && !uuo.mutation.UserFollowEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserFollowEventsTable,
			Columns: []string{user.UserFollowEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserFollowEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserFollowEventsTable,
			Columns: []string{user.UserFollowEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FollowedPlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedPlacesTable,
			Columns: []string{user.FollowedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFollowedPlacesIDs(); len(nodes) > 0 && !uuo.mutation.FollowedPlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedPlacesTable,
			Columns: []string{user.FollowedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FollowedPlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FollowedPlacesTable,
			Columns: []string{user.FollowedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userfollowplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LikedPlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikedPlacesTable,
			Columns: []string{user.LikedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLikedPlacesIDs(); len(nodes) > 0 && !uuo.mutation.LikedPlacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikedPlacesTable,
			Columns: []string{user.LikedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LikedPlacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.LikedPlacesTable,
			Columns: []string{user.LikedPlacesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userlikeplace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RatingsTable,
			Columns: []string{user.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !uuo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RatingsTable,
			Columns: []string{user.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RatingsTable,
			Columns: []string{user.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TransactionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionHistoriesTable,
			Columns: []string{user.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTransactionHistoriesIDs(); len(nodes) > 0 && !uuo.mutation.TransactionHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionHistoriesTable,
			Columns: []string{user.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TransactionHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionHistoriesTable,
			Columns: []string{user.TransactionHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transactionhistory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ReservationBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationBlocksTable,
			Columns: []string{user.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedReservationBlocksIDs(); len(nodes) > 0 && !uuo.mutation.ReservationBlocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationBlocksTable,
			Columns: []string{user.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ReservationBlocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ReservationBlocksTable,
			Columns: []string{user.ReservationBlocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(reservationblock.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: user.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: user.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.NotificationsTable,
			Columns: user.NotificationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WalletCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.WalletTable,
			Columns: []string{user.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountwallet.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WalletIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.WalletTable,
			Columns: []string{user.WalletColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accountwallet.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrdersTable,
			Columns: []string{user.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !uuo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrdersTable,
			Columns: []string{user.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrdersTable,
			Columns: []string{user.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TablesCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesCreatedTable,
			Columns: []string{user.TablesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTablesCreatedIDs(); len(nodes) > 0 && !uuo.mutation.TablesCreatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesCreatedTable,
			Columns: []string{user.TablesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TablesCreatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesCreatedTable,
			Columns: []string{user.TablesCreatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TablesUpdatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesUpdatedTable,
			Columns: []string{user.TablesUpdatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTablesUpdatedIDs(); len(nodes) > 0 && !uuo.mutation.TablesUpdatedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesUpdatedTable,
			Columns: []string{user.TablesUpdatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TablesUpdatedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesUpdatedTable,
			Columns: []string{user.TablesUpdatedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TablesDeletedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesDeletedTable,
			Columns: []string{user.TablesDeletedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTablesDeletedIDs(); len(nodes) > 0 && !uuo.mutation.TablesDeletedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesDeletedTable,
			Columns: []string{user.TablesDeletedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TablesDeletedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesDeletedTable,
			Columns: []string{user.TablesDeletedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TablesReservedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesReservedTable,
			Columns: []string{user.TablesReservedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTablesReservedIDs(); len(nodes) > 0 && !uuo.mutation.TablesReservedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesReservedTable,
			Columns: []string{user.TablesReservedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TablesReservedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesReservedTable,
			Columns: []string{user.TablesReservedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TablesWaitedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesWaitedTable,
			Columns: []string{user.TablesWaitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTablesWaitedIDs(); len(nodes) > 0 && !uuo.mutation.TablesWaitedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesWaitedTable,
			Columns: []string{user.TablesWaitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TablesWaitedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TablesWaitedTable,
			Columns: []string{user.TablesWaitedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placetable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StaffsTable,
			Columns: []string{user.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStaffsIDs(); len(nodes) > 0 && !uuo.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StaffsTable,
			Columns: []string{user.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StaffsTable,
			Columns: []string{user.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(staff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CreatedMenusTable,
			Columns: user.CreatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedMenusIDs(); len(nodes) > 0 && !uuo.mutation.CreatedMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CreatedMenusTable,
			Columns: user.CreatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.CreatedMenusTable,
			Columns: user.CreatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpdatedMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UpdatedMenusTable,
			Columns: user.UpdatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUpdatedMenusIDs(); len(nodes) > 0 && !uuo.mutation.UpdatedMenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UpdatedMenusTable,
			Columns: user.UpdatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdatedMenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UpdatedMenusTable,
			Columns: user.UpdatedMenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PlansTable,
			Columns: user.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPlansIDs(); len(nodes) > 0 && !uuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PlansTable,
			Columns: user.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.PlansTable,
			Columns: user.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !uuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TrainersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TrainersTable,
			Columns: user.TrainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTrainersIDs(); len(nodes) > 0 && !uuo.mutation.TrainersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TrainersTable,
			Columns: user.TrainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TrainersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.TrainersTable,
			Columns: user.TrainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trainer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MemberOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MemberOfTable,
			Columns: user.MemberOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMemberOfIDs(); len(nodes) > 0 && !uuo.mutation.MemberOfCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MemberOfTable,
			Columns: user.MemberOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MemberOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MemberOfTable,
			Columns: user.MemberOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CustomerTable,
			Columns: user.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !uuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CustomerTable,
			Columns: user.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.CustomerTable,
			Columns: user.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

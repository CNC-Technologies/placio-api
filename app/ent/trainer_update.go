// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/trainer"
	"placio-app/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TrainerUpdate is the builder for updating Trainer entities.
type TrainerUpdate struct {
	config
	hooks    []Hook
	mutation *TrainerMutation
}

// Where appends a list predicates to the TrainerUpdate builder.
func (tu *TrainerUpdate) Where(ps ...predicate.Trainer) *TrainerUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TrainerUpdate) SetName(s string) *TrainerUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TrainerUpdate) SetNillableName(s *string) *TrainerUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetEmail sets the "email" field.
func (tu *TrainerUpdate) SetEmail(s string) *TrainerUpdate {
	tu.mutation.SetEmail(s)
	return tu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tu *TrainerUpdate) SetNillableEmail(s *string) *TrainerUpdate {
	if s != nil {
		tu.SetEmail(*s)
	}
	return tu
}

// SetPhone sets the "phone" field.
func (tu *TrainerUpdate) SetPhone(s string) *TrainerUpdate {
	tu.mutation.SetPhone(s)
	return tu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tu *TrainerUpdate) SetNillablePhone(s *string) *TrainerUpdate {
	if s != nil {
		tu.SetPhone(*s)
	}
	return tu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (tu *TrainerUpdate) AddUserIDs(ids ...string) *TrainerUpdate {
	tu.mutation.AddUserIDs(ids...)
	return tu
}

// AddUser adds the "user" edges to the User entity.
func (tu *TrainerUpdate) AddUser(u ...*User) *TrainerUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddUserIDs(ids...)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (tu *TrainerUpdate) AddPlaceIDs(ids ...string) *TrainerUpdate {
	tu.mutation.AddPlaceIDs(ids...)
	return tu
}

// AddPlace adds the "place" edges to the Place entity.
func (tu *TrainerUpdate) AddPlace(p ...*Place) *TrainerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPlaceIDs(ids...)
}

// Mutation returns the TrainerMutation object of the builder.
func (tu *TrainerUpdate) Mutation() *TrainerMutation {
	return tu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (tu *TrainerUpdate) ClearUser() *TrainerUpdate {
	tu.mutation.ClearUser()
	return tu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (tu *TrainerUpdate) RemoveUserIDs(ids ...string) *TrainerUpdate {
	tu.mutation.RemoveUserIDs(ids...)
	return tu
}

// RemoveUser removes "user" edges to User entities.
func (tu *TrainerUpdate) RemoveUser(u ...*User) *TrainerUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveUserIDs(ids...)
}

// ClearPlace clears all "place" edges to the Place entity.
func (tu *TrainerUpdate) ClearPlace() *TrainerUpdate {
	tu.mutation.ClearPlace()
	return tu
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (tu *TrainerUpdate) RemovePlaceIDs(ids ...string) *TrainerUpdate {
	tu.mutation.RemovePlaceIDs(ids...)
	return tu
}

// RemovePlace removes "place" edges to Place entities.
func (tu *TrainerUpdate) RemovePlace(p ...*Place) *TrainerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePlaceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TrainerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TrainerUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TrainerUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TrainerUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TrainerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(trainer.Table, trainer.Columns, sqlgraph.NewFieldSpec(trainer.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(trainer.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Email(); ok {
		_spec.SetField(trainer.FieldEmail, field.TypeString, value)
	}
	if value, ok := tu.mutation.Phone(); ok {
		_spec.SetField(trainer.FieldPhone, field.TypeString, value)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.UserTable,
			Columns: trainer.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUserIDs(); len(nodes) > 0 && !tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.UserTable,
			Columns: trainer.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.UserTable,
			Columns: trainer.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.PlaceTable,
			Columns: trainer.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !tu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.PlaceTable,
			Columns: trainer.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.PlaceTable,
			Columns: trainer.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trainer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TrainerUpdateOne is the builder for updating a single Trainer entity.
type TrainerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrainerMutation
}

// SetName sets the "name" field.
func (tuo *TrainerUpdateOne) SetName(s string) *TrainerUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TrainerUpdateOne) SetNillableName(s *string) *TrainerUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetEmail sets the "email" field.
func (tuo *TrainerUpdateOne) SetEmail(s string) *TrainerUpdateOne {
	tuo.mutation.SetEmail(s)
	return tuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tuo *TrainerUpdateOne) SetNillableEmail(s *string) *TrainerUpdateOne {
	if s != nil {
		tuo.SetEmail(*s)
	}
	return tuo
}

// SetPhone sets the "phone" field.
func (tuo *TrainerUpdateOne) SetPhone(s string) *TrainerUpdateOne {
	tuo.mutation.SetPhone(s)
	return tuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (tuo *TrainerUpdateOne) SetNillablePhone(s *string) *TrainerUpdateOne {
	if s != nil {
		tuo.SetPhone(*s)
	}
	return tuo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (tuo *TrainerUpdateOne) AddUserIDs(ids ...string) *TrainerUpdateOne {
	tuo.mutation.AddUserIDs(ids...)
	return tuo
}

// AddUser adds the "user" edges to the User entity.
func (tuo *TrainerUpdateOne) AddUser(u ...*User) *TrainerUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddUserIDs(ids...)
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (tuo *TrainerUpdateOne) AddPlaceIDs(ids ...string) *TrainerUpdateOne {
	tuo.mutation.AddPlaceIDs(ids...)
	return tuo
}

// AddPlace adds the "place" edges to the Place entity.
func (tuo *TrainerUpdateOne) AddPlace(p ...*Place) *TrainerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPlaceIDs(ids...)
}

// Mutation returns the TrainerMutation object of the builder.
func (tuo *TrainerUpdateOne) Mutation() *TrainerMutation {
	return tuo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (tuo *TrainerUpdateOne) ClearUser() *TrainerUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (tuo *TrainerUpdateOne) RemoveUserIDs(ids ...string) *TrainerUpdateOne {
	tuo.mutation.RemoveUserIDs(ids...)
	return tuo
}

// RemoveUser removes "user" edges to User entities.
func (tuo *TrainerUpdateOne) RemoveUser(u ...*User) *TrainerUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveUserIDs(ids...)
}

// ClearPlace clears all "place" edges to the Place entity.
func (tuo *TrainerUpdateOne) ClearPlace() *TrainerUpdateOne {
	tuo.mutation.ClearPlace()
	return tuo
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (tuo *TrainerUpdateOne) RemovePlaceIDs(ids ...string) *TrainerUpdateOne {
	tuo.mutation.RemovePlaceIDs(ids...)
	return tuo
}

// RemovePlace removes "place" edges to Place entities.
func (tuo *TrainerUpdateOne) RemovePlace(p ...*Place) *TrainerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePlaceIDs(ids...)
}

// Where appends a list predicates to the TrainerUpdate builder.
func (tuo *TrainerUpdateOne) Where(ps ...predicate.Trainer) *TrainerUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TrainerUpdateOne) Select(field string, fields ...string) *TrainerUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Trainer entity.
func (tuo *TrainerUpdateOne) Save(ctx context.Context) (*Trainer, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TrainerUpdateOne) SaveX(ctx context.Context) *Trainer {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TrainerUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TrainerUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TrainerUpdateOne) sqlSave(ctx context.Context) (_node *Trainer, err error) {
	_spec := sqlgraph.NewUpdateSpec(trainer.Table, trainer.Columns, sqlgraph.NewFieldSpec(trainer.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Trainer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trainer.FieldID)
		for _, f := range fields {
			if !trainer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trainer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(trainer.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Email(); ok {
		_spec.SetField(trainer.FieldEmail, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Phone(); ok {
		_spec.SetField(trainer.FieldPhone, field.TypeString, value)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.UserTable,
			Columns: trainer.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.UserTable,
			Columns: trainer.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.UserTable,
			Columns: trainer.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.PlaceTable,
			Columns: trainer.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !tuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.PlaceTable,
			Columns: trainer.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   trainer.PlaceTable,
			Columns: trainer.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Trainer{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trainer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

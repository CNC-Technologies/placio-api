// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"placio-app/ent/business"
	"placio-app/ent/businessfollowuser"
	"placio-app/ent/predicate"
	"placio-app/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessFollowUserQuery is the builder for querying BusinessFollowUser entities.
type BusinessFollowUserQuery struct {
	config
	ctx          *QueryContext
	order        []businessfollowuser.OrderOption
	inters       []Interceptor
	predicates   []predicate.BusinessFollowUser
	withBusiness *BusinessQuery
	withUser     *UserQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BusinessFollowUserQuery builder.
func (bfuq *BusinessFollowUserQuery) Where(ps ...predicate.BusinessFollowUser) *BusinessFollowUserQuery {
	bfuq.predicates = append(bfuq.predicates, ps...)
	return bfuq
}

// Limit the number of records to be returned by this query.
func (bfuq *BusinessFollowUserQuery) Limit(limit int) *BusinessFollowUserQuery {
	bfuq.ctx.Limit = &limit
	return bfuq
}

// Offset to cmd from.
func (bfuq *BusinessFollowUserQuery) Offset(offset int) *BusinessFollowUserQuery {
	bfuq.ctx.Offset = &offset
	return bfuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bfuq *BusinessFollowUserQuery) Unique(unique bool) *BusinessFollowUserQuery {
	bfuq.ctx.Unique = &unique
	return bfuq
}

// Order specifies how the records should be ordered.
func (bfuq *BusinessFollowUserQuery) Order(o ...businessfollowuser.OrderOption) *BusinessFollowUserQuery {
	bfuq.order = append(bfuq.order, o...)
	return bfuq
}

// QueryBusiness chains the current query on the "business" edge.
func (bfuq *BusinessFollowUserQuery) QueryBusiness() *BusinessQuery {
	query := (&BusinessClient{config: bfuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bfuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bfuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(businessfollowuser.Table, businessfollowuser.FieldID, selector),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, businessfollowuser.BusinessTable, businessfollowuser.BusinessColumn),
		)
		fromU = sqlgraph.SetNeighbors(bfuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (bfuq *BusinessFollowUserQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: bfuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bfuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bfuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(businessfollowuser.Table, businessfollowuser.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, businessfollowuser.UserTable, businessfollowuser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(bfuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BusinessFollowUser entity from the query.
// Returns a *NotFoundError when no BusinessFollowUser was found.
func (bfuq *BusinessFollowUserQuery) First(ctx context.Context) (*BusinessFollowUser, error) {
	nodes, err := bfuq.Limit(1).All(setContextOp(ctx, bfuq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{businessfollowuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bfuq *BusinessFollowUserQuery) FirstX(ctx context.Context) *BusinessFollowUser {
	node, err := bfuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BusinessFollowUser ID from the query.
// Returns a *NotFoundError when no BusinessFollowUser ID was found.
func (bfuq *BusinessFollowUserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bfuq.Limit(1).IDs(setContextOp(ctx, bfuq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{businessfollowuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bfuq *BusinessFollowUserQuery) FirstIDX(ctx context.Context) string {
	id, err := bfuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BusinessFollowUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BusinessFollowUser entity is found.
// Returns a *NotFoundError when no BusinessFollowUser entities are found.
func (bfuq *BusinessFollowUserQuery) Only(ctx context.Context) (*BusinessFollowUser, error) {
	nodes, err := bfuq.Limit(2).All(setContextOp(ctx, bfuq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{businessfollowuser.Label}
	default:
		return nil, &NotSingularError{businessfollowuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bfuq *BusinessFollowUserQuery) OnlyX(ctx context.Context) *BusinessFollowUser {
	node, err := bfuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BusinessFollowUser ID in the query.
// Returns a *NotSingularError when more than one BusinessFollowUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (bfuq *BusinessFollowUserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = bfuq.Limit(2).IDs(setContextOp(ctx, bfuq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{businessfollowuser.Label}
	default:
		err = &NotSingularError{businessfollowuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bfuq *BusinessFollowUserQuery) OnlyIDX(ctx context.Context) string {
	id, err := bfuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BusinessFollowUsers.
func (bfuq *BusinessFollowUserQuery) All(ctx context.Context) ([]*BusinessFollowUser, error) {
	ctx = setContextOp(ctx, bfuq.ctx, "All")
	if err := bfuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BusinessFollowUser, *BusinessFollowUserQuery]()
	return withInterceptors[[]*BusinessFollowUser](ctx, bfuq, qr, bfuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bfuq *BusinessFollowUserQuery) AllX(ctx context.Context) []*BusinessFollowUser {
	nodes, err := bfuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BusinessFollowUser IDs.
func (bfuq *BusinessFollowUserQuery) IDs(ctx context.Context) (ids []string, err error) {
	if bfuq.ctx.Unique == nil && bfuq.path != nil {
		bfuq.Unique(true)
	}
	ctx = setContextOp(ctx, bfuq.ctx, "IDs")
	if err = bfuq.Select(businessfollowuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bfuq *BusinessFollowUserQuery) IDsX(ctx context.Context) []string {
	ids, err := bfuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bfuq *BusinessFollowUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bfuq.ctx, "Count")
	if err := bfuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bfuq, querierCount[*BusinessFollowUserQuery](), bfuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bfuq *BusinessFollowUserQuery) CountX(ctx context.Context) int {
	count, err := bfuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bfuq *BusinessFollowUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bfuq.ctx, "Exist")
	switch _, err := bfuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bfuq *BusinessFollowUserQuery) ExistX(ctx context.Context) bool {
	exist, err := bfuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BusinessFollowUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bfuq *BusinessFollowUserQuery) Clone() *BusinessFollowUserQuery {
	if bfuq == nil {
		return nil
	}
	return &BusinessFollowUserQuery{
		config:       bfuq.config,
		ctx:          bfuq.ctx.Clone(),
		order:        append([]businessfollowuser.OrderOption{}, bfuq.order...),
		inters:       append([]Interceptor{}, bfuq.inters...),
		predicates:   append([]predicate.BusinessFollowUser{}, bfuq.predicates...),
		withBusiness: bfuq.withBusiness.Clone(),
		withUser:     bfuq.withUser.Clone(),
		// clone intermediate query.
		sql:  bfuq.sql.Clone(),
		path: bfuq.path,
	}
}

// WithBusiness tells the query-builder to eager-load the nodes that are connected to
// the "business" edge. The optional arguments are used to configure the query builder of the edge.
func (bfuq *BusinessFollowUserQuery) WithBusiness(opts ...func(*BusinessQuery)) *BusinessFollowUserQuery {
	query := (&BusinessClient{config: bfuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bfuq.withBusiness = query
	return bfuq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (bfuq *BusinessFollowUserQuery) WithUser(opts ...func(*UserQuery)) *BusinessFollowUserQuery {
	query := (&UserClient{config: bfuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bfuq.withUser = query
	return bfuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"CreatedAt,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BusinessFollowUser.Query().
//		GroupBy(businessfollowuser.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bfuq *BusinessFollowUserQuery) GroupBy(field string, fields ...string) *BusinessFollowUserGroupBy {
	bfuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BusinessFollowUserGroupBy{build: bfuq}
	grbuild.flds = &bfuq.ctx.Fields
	grbuild.label = businessfollowuser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"CreatedAt,omitempty"`
//	}
//
//	client.BusinessFollowUser.Query().
//		Select(businessfollowuser.FieldCreatedAt).
//		Scan(ctx, &v)
func (bfuq *BusinessFollowUserQuery) Select(fields ...string) *BusinessFollowUserSelect {
	bfuq.ctx.Fields = append(bfuq.ctx.Fields, fields...)
	sbuild := &BusinessFollowUserSelect{BusinessFollowUserQuery: bfuq}
	sbuild.label = businessfollowuser.Label
	sbuild.flds, sbuild.scan = &bfuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BusinessFollowUserSelect configured with the given aggregations.
func (bfuq *BusinessFollowUserQuery) Aggregate(fns ...AggregateFunc) *BusinessFollowUserSelect {
	return bfuq.Select().Aggregate(fns...)
}

func (bfuq *BusinessFollowUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bfuq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bfuq); err != nil {
				return err
			}
		}
	}
	for _, f := range bfuq.ctx.Fields {
		if !businessfollowuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bfuq.path != nil {
		prev, err := bfuq.path(ctx)
		if err != nil {
			return err
		}
		bfuq.sql = prev
	}
	return nil
}

func (bfuq *BusinessFollowUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BusinessFollowUser, error) {
	var (
		nodes       = []*BusinessFollowUser{}
		withFKs     = bfuq.withFKs
		_spec       = bfuq.querySpec()
		loadedTypes = [2]bool{
			bfuq.withBusiness != nil,
			bfuq.withUser != nil,
		}
	)
	if bfuq.withBusiness != nil || bfuq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, businessfollowuser.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BusinessFollowUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BusinessFollowUser{config: bfuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bfuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bfuq.withBusiness; query != nil {
		if err := bfuq.loadBusiness(ctx, query, nodes, nil,
			func(n *BusinessFollowUser, e *Business) { n.Edges.Business = e }); err != nil {
			return nil, err
		}
	}
	if query := bfuq.withUser; query != nil {
		if err := bfuq.loadUser(ctx, query, nodes, nil,
			func(n *BusinessFollowUser, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bfuq *BusinessFollowUserQuery) loadBusiness(ctx context.Context, query *BusinessQuery, nodes []*BusinessFollowUser, init func(*BusinessFollowUser), assign func(*BusinessFollowUser, *Business)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BusinessFollowUser)
	for i := range nodes {
		if nodes[i].business_followed_users == nil {
			continue
		}
		fk := *nodes[i].business_followed_users
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(business.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "business_followed_users" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bfuq *BusinessFollowUserQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*BusinessFollowUser, init func(*BusinessFollowUser), assign func(*BusinessFollowUser, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*BusinessFollowUser)
	for i := range nodes {
		if nodes[i].user_follower_businesses == nil {
			continue
		}
		fk := *nodes[i].user_follower_businesses
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_follower_businesses" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bfuq *BusinessFollowUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bfuq.querySpec()
	_spec.Node.Columns = bfuq.ctx.Fields
	if len(bfuq.ctx.Fields) > 0 {
		_spec.Unique = bfuq.ctx.Unique != nil && *bfuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bfuq.driver, _spec)
}

func (bfuq *BusinessFollowUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(businessfollowuser.Table, businessfollowuser.Columns, sqlgraph.NewFieldSpec(businessfollowuser.FieldID, field.TypeString))
	_spec.From = bfuq.sql
	if unique := bfuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bfuq.path != nil {
		_spec.Unique = true
	}
	if fields := bfuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessfollowuser.FieldID)
		for i := range fields {
			if fields[i] != businessfollowuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bfuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bfuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bfuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bfuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bfuq *BusinessFollowUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bfuq.driver.Dialect())
	t1 := builder.Table(businessfollowuser.Table)
	columns := bfuq.ctx.Fields
	if len(columns) == 0 {
		columns = businessfollowuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bfuq.sql != nil {
		selector = bfuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bfuq.ctx.Unique != nil && *bfuq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bfuq.predicates {
		p(selector)
	}
	for _, p := range bfuq.order {
		p(selector)
	}
	if offset := bfuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We cmd
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bfuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BusinessFollowUserGroupBy is the group-by builder for BusinessFollowUser entities.
type BusinessFollowUserGroupBy struct {
	selector
	build *BusinessFollowUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bfugb *BusinessFollowUserGroupBy) Aggregate(fns ...AggregateFunc) *BusinessFollowUserGroupBy {
	bfugb.fns = append(bfugb.fns, fns...)
	return bfugb
}

// Scan applies the selector query and scans the result into the given value.
func (bfugb *BusinessFollowUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bfugb.build.ctx, "GroupBy")
	if err := bfugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessFollowUserQuery, *BusinessFollowUserGroupBy](ctx, bfugb.build, bfugb, bfugb.build.inters, v)
}

func (bfugb *BusinessFollowUserGroupBy) sqlScan(ctx context.Context, root *BusinessFollowUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bfugb.fns))
	for _, fn := range bfugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bfugb.flds)+len(bfugb.fns))
		for _, f := range *bfugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bfugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bfugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BusinessFollowUserSelect is the builder for selecting fields of BusinessFollowUser entities.
type BusinessFollowUserSelect struct {
	*BusinessFollowUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bfus *BusinessFollowUserSelect) Aggregate(fns ...AggregateFunc) *BusinessFollowUserSelect {
	bfus.fns = append(bfus.fns, fns...)
	return bfus
}

// Scan applies the selector query and scans the result into the given value.
func (bfus *BusinessFollowUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bfus.ctx, "Select")
	if err := bfus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BusinessFollowUserQuery, *BusinessFollowUserSelect](ctx, bfus.BusinessFollowUserQuery, bfus, bfus.inters, v)
}

func (bfus *BusinessFollowUserSelect) sqlScan(ctx context.Context, root *BusinessFollowUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bfus.fns))
	for _, fn := range bfus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bfus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bfus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

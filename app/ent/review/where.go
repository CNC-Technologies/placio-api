// Code generated by ent, DO NOT EDIT.

package review

import (
	"placio_api/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Review {
	return predicate.Review(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Review {
	return predicate.Review(sql.FieldContainsFold(FieldID, id))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float64) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldScore, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldContent, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldCreatedAt, v))
}

// LikeCount applies equality check predicate on the "likeCount" field. It's identical to LikeCountEQ.
func LikeCount(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldLikeCount, v))
}

// DislikeCount applies equality check predicate on the "dislikeCount" field. It's identical to DislikeCountEQ.
func DislikeCount(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldDislikeCount, v))
}

// Flag applies equality check predicate on the "flag" field. It's identical to FlagEQ.
func Flag(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldFlag, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float64) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float64) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float64) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float64) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float64) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float64) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float64) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float64) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldScore, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Review {
	return predicate.Review(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Review {
	return predicate.Review(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Review {
	return predicate.Review(sql.FieldContainsFold(FieldContent, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldCreatedAt, v))
}

// LikeCountEQ applies the EQ predicate on the "likeCount" field.
func LikeCountEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldLikeCount, v))
}

// LikeCountNEQ applies the NEQ predicate on the "likeCount" field.
func LikeCountNEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldLikeCount, v))
}

// LikeCountIn applies the In predicate on the "likeCount" field.
func LikeCountIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldLikeCount, vs...))
}

// LikeCountNotIn applies the NotIn predicate on the "likeCount" field.
func LikeCountNotIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldLikeCount, vs...))
}

// LikeCountGT applies the GT predicate on the "likeCount" field.
func LikeCountGT(v int) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldLikeCount, v))
}

// LikeCountGTE applies the GTE predicate on the "likeCount" field.
func LikeCountGTE(v int) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldLikeCount, v))
}

// LikeCountLT applies the LT predicate on the "likeCount" field.
func LikeCountLT(v int) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldLikeCount, v))
}

// LikeCountLTE applies the LTE predicate on the "likeCount" field.
func LikeCountLTE(v int) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldLikeCount, v))
}

// DislikeCountEQ applies the EQ predicate on the "dislikeCount" field.
func DislikeCountEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldDislikeCount, v))
}

// DislikeCountNEQ applies the NEQ predicate on the "dislikeCount" field.
func DislikeCountNEQ(v int) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldDislikeCount, v))
}

// DislikeCountIn applies the In predicate on the "dislikeCount" field.
func DislikeCountIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldDislikeCount, vs...))
}

// DislikeCountNotIn applies the NotIn predicate on the "dislikeCount" field.
func DislikeCountNotIn(vs ...int) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldDislikeCount, vs...))
}

// DislikeCountGT applies the GT predicate on the "dislikeCount" field.
func DislikeCountGT(v int) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldDislikeCount, v))
}

// DislikeCountGTE applies the GTE predicate on the "dislikeCount" field.
func DislikeCountGTE(v int) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldDislikeCount, v))
}

// DislikeCountLT applies the LT predicate on the "dislikeCount" field.
func DislikeCountLT(v int) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldDislikeCount, v))
}

// DislikeCountLTE applies the LTE predicate on the "dislikeCount" field.
func DislikeCountLTE(v int) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldDislikeCount, v))
}

// FlagEQ applies the EQ predicate on the "flag" field.
func FlagEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldEQ(FieldFlag, v))
}

// FlagNEQ applies the NEQ predicate on the "flag" field.
func FlagNEQ(v string) predicate.Review {
	return predicate.Review(sql.FieldNEQ(FieldFlag, v))
}

// FlagIn applies the In predicate on the "flag" field.
func FlagIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldIn(FieldFlag, vs...))
}

// FlagNotIn applies the NotIn predicate on the "flag" field.
func FlagNotIn(vs ...string) predicate.Review {
	return predicate.Review(sql.FieldNotIn(FieldFlag, vs...))
}

// FlagGT applies the GT predicate on the "flag" field.
func FlagGT(v string) predicate.Review {
	return predicate.Review(sql.FieldGT(FieldFlag, v))
}

// FlagGTE applies the GTE predicate on the "flag" field.
func FlagGTE(v string) predicate.Review {
	return predicate.Review(sql.FieldGTE(FieldFlag, v))
}

// FlagLT applies the LT predicate on the "flag" field.
func FlagLT(v string) predicate.Review {
	return predicate.Review(sql.FieldLT(FieldFlag, v))
}

// FlagLTE applies the LTE predicate on the "flag" field.
func FlagLTE(v string) predicate.Review {
	return predicate.Review(sql.FieldLTE(FieldFlag, v))
}

// FlagContains applies the Contains predicate on the "flag" field.
func FlagContains(v string) predicate.Review {
	return predicate.Review(sql.FieldContains(FieldFlag, v))
}

// FlagHasPrefix applies the HasPrefix predicate on the "flag" field.
func FlagHasPrefix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasPrefix(FieldFlag, v))
}

// FlagHasSuffix applies the HasSuffix predicate on the "flag" field.
func FlagHasSuffix(v string) predicate.Review {
	return predicate.Review(sql.FieldHasSuffix(FieldFlag, v))
}

// FlagEqualFold applies the EqualFold predicate on the "flag" field.
func FlagEqualFold(v string) predicate.Review {
	return predicate.Review(sql.FieldEqualFold(FieldFlag, v))
}

// FlagContainsFold applies the ContainsFold predicate on the "flag" field.
func FlagContainsFold(v string) predicate.Review {
	return predicate.Review(sql.FieldContainsFold(FieldFlag, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBusiness applies the HasEdge predicate on the "business" edge.
func HasBusiness() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BusinessTable, BusinessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBusinessWith applies the HasEdge predicate on the "business" edge with a given conditions (other predicates).
func HasBusinessWith(preds ...predicate.Business) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newBusinessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlace applies the HasEdge predicate on the "place" edge.
func HasPlace() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PlaceTable, PlaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
func HasPlaceWith(preds ...predicate.Place) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedias applies the HasEdge predicate on the "medias" edge.
func HasMedias() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MediasTable, MediasColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediasWith applies the HasEdge predicate on the "medias" edge with a given conditions (other predicates).
func HasMediasWith(preds ...predicate.Media) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newMediasStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comment) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLikes applies the HasEdge predicate on the "likes" edge.
func HasLikes() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LikesTable, LikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLikesWith applies the HasEdge predicate on the "likes" edge with a given conditions (other predicates).
func HasLikesWith(preds ...predicate.Like) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := newLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Review) predicate.Review {
	return predicate.Review(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio_api/business"
	"placio_api/businessfollowevent"
	"placio_api/event"
	"placio_api/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BusinessFollowEventUpdate is the builder for updating BusinessFollowEvent entities.
type BusinessFollowEventUpdate struct {
	config
	hooks    []Hook
	mutation *BusinessFollowEventMutation
}

// Where appends a list predicates to the BusinessFollowEventUpdate builder.
func (bfeu *BusinessFollowEventUpdate) Where(ps ...predicate.BusinessFollowEvent) *BusinessFollowEventUpdate {
	bfeu.mutation.Where(ps...)
	return bfeu
}

// SetCreatedAt sets the "createdAt" field.
func (bfeu *BusinessFollowEventUpdate) SetCreatedAt(t time.Time) *BusinessFollowEventUpdate {
	bfeu.mutation.SetCreatedAt(t)
	return bfeu
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (bfeu *BusinessFollowEventUpdate) SetNillableCreatedAt(t *time.Time) *BusinessFollowEventUpdate {
	if t != nil {
		bfeu.SetCreatedAt(*t)
	}
	return bfeu
}

// SetUpdatedAt sets the "updatedAt" field.
func (bfeu *BusinessFollowEventUpdate) SetUpdatedAt(t time.Time) *BusinessFollowEventUpdate {
	bfeu.mutation.SetUpdatedAt(t)
	return bfeu
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (bfeu *BusinessFollowEventUpdate) SetBusinessID(id string) *BusinessFollowEventUpdate {
	bfeu.mutation.SetBusinessID(id)
	return bfeu
}

// SetBusiness sets the "business" edge to the Business entity.
func (bfeu *BusinessFollowEventUpdate) SetBusiness(b *Business) *BusinessFollowEventUpdate {
	return bfeu.SetBusinessID(b.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (bfeu *BusinessFollowEventUpdate) SetEventID(id string) *BusinessFollowEventUpdate {
	bfeu.mutation.SetEventID(id)
	return bfeu
}

// SetEvent sets the "event" edge to the Event entity.
func (bfeu *BusinessFollowEventUpdate) SetEvent(e *Event) *BusinessFollowEventUpdate {
	return bfeu.SetEventID(e.ID)
}

// Mutation returns the BusinessFollowEventMutation object of the builder.
func (bfeu *BusinessFollowEventUpdate) Mutation() *BusinessFollowEventMutation {
	return bfeu.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (bfeu *BusinessFollowEventUpdate) ClearBusiness() *BusinessFollowEventUpdate {
	bfeu.mutation.ClearBusiness()
	return bfeu
}

// ClearEvent clears the "event" edge to the Event entity.
func (bfeu *BusinessFollowEventUpdate) ClearEvent() *BusinessFollowEventUpdate {
	bfeu.mutation.ClearEvent()
	return bfeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bfeu *BusinessFollowEventUpdate) Save(ctx context.Context) (int, error) {
	bfeu.defaults()
	return withHooks(ctx, bfeu.sqlSave, bfeu.mutation, bfeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bfeu *BusinessFollowEventUpdate) SaveX(ctx context.Context) int {
	affected, err := bfeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bfeu *BusinessFollowEventUpdate) Exec(ctx context.Context) error {
	_, err := bfeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfeu *BusinessFollowEventUpdate) ExecX(ctx context.Context) {
	if err := bfeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfeu *BusinessFollowEventUpdate) defaults() {
	if _, ok := bfeu.mutation.UpdatedAt(); !ok {
		v := businessfollowevent.UpdateDefaultUpdatedAt()
		bfeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfeu *BusinessFollowEventUpdate) check() error {
	if _, ok := bfeu.mutation.BusinessID(); bfeu.mutation.BusinessCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "BusinessFollowEvent.business"`)
	}
	if _, ok := bfeu.mutation.EventID(); bfeu.mutation.EventCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "BusinessFollowEvent.event"`)
	}
	return nil
}

func (bfeu *BusinessFollowEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bfeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(businessfollowevent.Table, businessfollowevent.Columns, sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString))
	if ps := bfeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfeu.mutation.CreatedAt(); ok {
		_spec.SetField(businessfollowevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bfeu.mutation.UpdatedAt(); ok {
		_spec.SetField(businessfollowevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if bfeu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businessfollowevent.BusinessTable,
			Columns: []string{businessfollowevent.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfeu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businessfollowevent.BusinessTable,
			Columns: []string{businessfollowevent.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bfeu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   businessfollowevent.EventTable,
			Columns: []string{businessfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfeu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   businessfollowevent.EventTable,
			Columns: []string{businessfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bfeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessfollowevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bfeu.mutation.done = true
	return n, nil
}

// BusinessFollowEventUpdateOne is the builder for updating a single BusinessFollowEvent entity.
type BusinessFollowEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BusinessFollowEventMutation
}

// SetCreatedAt sets the "createdAt" field.
func (bfeuo *BusinessFollowEventUpdateOne) SetCreatedAt(t time.Time) *BusinessFollowEventUpdateOne {
	bfeuo.mutation.SetCreatedAt(t)
	return bfeuo
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (bfeuo *BusinessFollowEventUpdateOne) SetNillableCreatedAt(t *time.Time) *BusinessFollowEventUpdateOne {
	if t != nil {
		bfeuo.SetCreatedAt(*t)
	}
	return bfeuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (bfeuo *BusinessFollowEventUpdateOne) SetUpdatedAt(t time.Time) *BusinessFollowEventUpdateOne {
	bfeuo.mutation.SetUpdatedAt(t)
	return bfeuo
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (bfeuo *BusinessFollowEventUpdateOne) SetBusinessID(id string) *BusinessFollowEventUpdateOne {
	bfeuo.mutation.SetBusinessID(id)
	return bfeuo
}

// SetBusiness sets the "business" edge to the Business entity.
func (bfeuo *BusinessFollowEventUpdateOne) SetBusiness(b *Business) *BusinessFollowEventUpdateOne {
	return bfeuo.SetBusinessID(b.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (bfeuo *BusinessFollowEventUpdateOne) SetEventID(id string) *BusinessFollowEventUpdateOne {
	bfeuo.mutation.SetEventID(id)
	return bfeuo
}

// SetEvent sets the "event" edge to the Event entity.
func (bfeuo *BusinessFollowEventUpdateOne) SetEvent(e *Event) *BusinessFollowEventUpdateOne {
	return bfeuo.SetEventID(e.ID)
}

// Mutation returns the BusinessFollowEventMutation object of the builder.
func (bfeuo *BusinessFollowEventUpdateOne) Mutation() *BusinessFollowEventMutation {
	return bfeuo.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (bfeuo *BusinessFollowEventUpdateOne) ClearBusiness() *BusinessFollowEventUpdateOne {
	bfeuo.mutation.ClearBusiness()
	return bfeuo
}

// ClearEvent clears the "event" edge to the Event entity.
func (bfeuo *BusinessFollowEventUpdateOne) ClearEvent() *BusinessFollowEventUpdateOne {
	bfeuo.mutation.ClearEvent()
	return bfeuo
}

// Where appends a list predicates to the BusinessFollowEventUpdate builder.
func (bfeuo *BusinessFollowEventUpdateOne) Where(ps ...predicate.BusinessFollowEvent) *BusinessFollowEventUpdateOne {
	bfeuo.mutation.Where(ps...)
	return bfeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bfeuo *BusinessFollowEventUpdateOne) Select(field string, fields ...string) *BusinessFollowEventUpdateOne {
	bfeuo.fields = append([]string{field}, fields...)
	return bfeuo
}

// Save executes the query and returns the updated BusinessFollowEvent entity.
func (bfeuo *BusinessFollowEventUpdateOne) Save(ctx context.Context) (*BusinessFollowEvent, error) {
	bfeuo.defaults()
	return withHooks(ctx, bfeuo.sqlSave, bfeuo.mutation, bfeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bfeuo *BusinessFollowEventUpdateOne) SaveX(ctx context.Context) *BusinessFollowEvent {
	node, err := bfeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bfeuo *BusinessFollowEventUpdateOne) Exec(ctx context.Context) error {
	_, err := bfeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfeuo *BusinessFollowEventUpdateOne) ExecX(ctx context.Context) {
	if err := bfeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfeuo *BusinessFollowEventUpdateOne) defaults() {
	if _, ok := bfeuo.mutation.UpdatedAt(); !ok {
		v := businessfollowevent.UpdateDefaultUpdatedAt()
		bfeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfeuo *BusinessFollowEventUpdateOne) check() error {
	if _, ok := bfeuo.mutation.BusinessID(); bfeuo.mutation.BusinessCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "BusinessFollowEvent.business"`)
	}
	if _, ok := bfeuo.mutation.EventID(); bfeuo.mutation.EventCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "BusinessFollowEvent.event"`)
	}
	return nil
}

func (bfeuo *BusinessFollowEventUpdateOne) sqlSave(ctx context.Context) (_node *BusinessFollowEvent, err error) {
	if err := bfeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(businessfollowevent.Table, businessfollowevent.Columns, sqlgraph.NewFieldSpec(businessfollowevent.FieldID, field.TypeString))
	id, ok := bfeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`placio_api: missing "BusinessFollowEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bfeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, businessfollowevent.FieldID)
		for _, f := range fields {
			if !businessfollowevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("placio_api: invalid field %q for query", f)}
			}
			if f != businessfollowevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bfeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfeuo.mutation.CreatedAt(); ok {
		_spec.SetField(businessfollowevent.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bfeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(businessfollowevent.FieldUpdatedAt, field.TypeTime, value)
	}
	if bfeuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businessfollowevent.BusinessTable,
			Columns: []string{businessfollowevent.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfeuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   businessfollowevent.BusinessTable,
			Columns: []string{businessfollowevent.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bfeuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   businessfollowevent.EventTable,
			Columns: []string{businessfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfeuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   businessfollowevent.EventTable,
			Columns: []string{businessfollowevent.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BusinessFollowEvent{config: bfeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bfeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{businessfollowevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bfeuo.mutation.done = true
	return _node, nil
}

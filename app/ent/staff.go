// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/staff"
	"placio-app/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Staff is the model entity for the Staff schema.
type Staff struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Position holds the value of the "position" field.
	Position string `json:"position,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StaffQuery when eager-loading is set.
	Edges        StaffEdges `json:"edges"`
	user_staffs  *string
	selectValues sql.SelectValues
}

// StaffEdges holds the relations/edges for other nodes in the graph.
type StaffEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Place holds the value of the place edge.
	Place []*Place `json:"place,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// Business holds the value of the business edge.
	Business []*Business `json:"business,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StaffEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading.
func (e StaffEdges) PlaceOrErr() ([]*Place, error) {
	if e.loadedTypes[1] {
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e StaffEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[2] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// BusinessOrErr returns the Business value or an error if the edge
// was not loaded in eager-loading.
func (e StaffEdges) BusinessOrErr() ([]*Business, error) {
	if e.loadedTypes[3] {
		return e.Business, nil
	}
	return nil, &NotLoadedError{edge: "business"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Staff) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case staff.FieldID, staff.FieldPosition:
			values[i] = new(sql.NullString)
		case staff.ForeignKeys[0]: // user_staffs
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Staff fields.
func (s *Staff) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staff.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case staff.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				s.Position = value.String
			}
		case staff.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_staffs", values[i])
			} else if value.Valid {
				s.user_staffs = new(string)
				*s.user_staffs = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Staff.
// This includes values selected through modifiers, order, etc.
func (s *Staff) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Staff entity.
func (s *Staff) QueryUser() *UserQuery {
	return NewStaffClient(s.config).QueryUser(s)
}

// QueryPlace queries the "place" edge of the Staff entity.
func (s *Staff) QueryPlace() *PlaceQuery {
	return NewStaffClient(s.config).QueryPlace(s)
}

// QueryPermissions queries the "permissions" edge of the Staff entity.
func (s *Staff) QueryPermissions() *PermissionQuery {
	return NewStaffClient(s.config).QueryPermissions(s)
}

// QueryBusiness queries the "business" edge of the Staff entity.
func (s *Staff) QueryBusiness() *BusinessQuery {
	return NewStaffClient(s.config).QueryBusiness(s)
}

// Update returns a builder for updating this Staff.
// Note that you need to call Staff.Unwrap() before calling this method if this Staff
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Staff) Update() *StaffUpdateOne {
	return NewStaffClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Staff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Staff) Unwrap() *Staff {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Staff is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Staff) String() string {
	var builder strings.Builder
	builder.WriteString("Staff(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("position=")
	builder.WriteString(s.Position)
	builder.WriteByte(')')
	return builder.String()
}

// Staffs is a parsable slice of Staff.
type Staffs []*Staff

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/category"
	"placio-app/ent/comment"
	"placio-app/ent/like"
	"placio-app/ent/media"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetContent sets the "Content" field.
func (pu *PostUpdate) SetContent(s string) *PostUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetCreatedAt sets the "CreatedAt" field.
func (pu *PostUpdate) SetCreatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCreatedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetPrivacy sets the "Privacy" field.
func (pu *PostUpdate) SetPrivacy(po post.Privacy) *PostUpdate {
	pu.mutation.SetPrivacy(po)
	return pu
}

// SetNillablePrivacy sets the "Privacy" field if the given value is not nil.
func (pu *PostUpdate) SetNillablePrivacy(po *post.Privacy) *PostUpdate {
	if po != nil {
		pu.SetPrivacy(*po)
	}
	return pu
}

// SetLikedByMe sets the "LikedByMe" field.
func (pu *PostUpdate) SetLikedByMe(b bool) *PostUpdate {
	pu.mutation.SetLikedByMe(b)
	return pu
}

// SetNillableLikedByMe sets the "LikedByMe" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLikedByMe(b *bool) *PostUpdate {
	if b != nil {
		pu.SetLikedByMe(*b)
	}
	return pu
}

// SetLikeCount sets the "LikeCount" field.
func (pu *PostUpdate) SetLikeCount(i int) *PostUpdate {
	pu.mutation.ResetLikeCount()
	pu.mutation.SetLikeCount(i)
	return pu
}

// SetNillableLikeCount sets the "LikeCount" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLikeCount(i *int) *PostUpdate {
	if i != nil {
		pu.SetLikeCount(*i)
	}
	return pu
}

// AddLikeCount adds i to the "LikeCount" field.
func (pu *PostUpdate) AddLikeCount(i int) *PostUpdate {
	pu.mutation.AddLikeCount(i)
	return pu
}

// SetCommentCount sets the "CommentCount" field.
func (pu *PostUpdate) SetCommentCount(i int) *PostUpdate {
	pu.mutation.ResetCommentCount()
	pu.mutation.SetCommentCount(i)
	return pu
}

// SetNillableCommentCount sets the "CommentCount" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCommentCount(i *int) *PostUpdate {
	if i != nil {
		pu.SetCommentCount(*i)
	}
	return pu
}

// AddCommentCount adds i to the "CommentCount" field.
func (pu *PostUpdate) AddCommentCount(i int) *PostUpdate {
	pu.mutation.AddCommentCount(i)
	return pu
}

// SetShareCount sets the "ShareCount" field.
func (pu *PostUpdate) SetShareCount(i int) *PostUpdate {
	pu.mutation.ResetShareCount()
	pu.mutation.SetShareCount(i)
	return pu
}

// SetNillableShareCount sets the "ShareCount" field if the given value is not nil.
func (pu *PostUpdate) SetNillableShareCount(i *int) *PostUpdate {
	if i != nil {
		pu.SetShareCount(*i)
	}
	return pu
}

// AddShareCount adds i to the "ShareCount" field.
func (pu *PostUpdate) AddShareCount(i int) *PostUpdate {
	pu.mutation.AddShareCount(i)
	return pu
}

// SetViewCount sets the "ViewCount" field.
func (pu *PostUpdate) SetViewCount(i int) *PostUpdate {
	pu.mutation.ResetViewCount()
	pu.mutation.SetViewCount(i)
	return pu
}

// SetNillableViewCount sets the "ViewCount" field if the given value is not nil.
func (pu *PostUpdate) SetNillableViewCount(i *int) *PostUpdate {
	if i != nil {
		pu.SetViewCount(*i)
	}
	return pu
}

// AddViewCount adds i to the "ViewCount" field.
func (pu *PostUpdate) AddViewCount(i int) *PostUpdate {
	pu.mutation.AddViewCount(i)
	return pu
}

// SetIsSponsored sets the "IsSponsored" field.
func (pu *PostUpdate) SetIsSponsored(b bool) *PostUpdate {
	pu.mutation.SetIsSponsored(b)
	return pu
}

// SetNillableIsSponsored sets the "IsSponsored" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsSponsored(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsSponsored(*b)
	}
	return pu
}

// SetIsPromoted sets the "IsPromoted" field.
func (pu *PostUpdate) SetIsPromoted(b bool) *PostUpdate {
	pu.mutation.SetIsPromoted(b)
	return pu
}

// SetNillableIsPromoted sets the "IsPromoted" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsPromoted(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsPromoted(*b)
	}
	return pu
}

// SetIsBoosted sets the "IsBoosted" field.
func (pu *PostUpdate) SetIsBoosted(b bool) *PostUpdate {
	pu.mutation.SetIsBoosted(b)
	return pu
}

// SetNillableIsBoosted sets the "IsBoosted" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsBoosted(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsBoosted(*b)
	}
	return pu
}

// SetIsPinned sets the "IsPinned" field.
func (pu *PostUpdate) SetIsPinned(b bool) *PostUpdate {
	pu.mutation.SetIsPinned(b)
	return pu
}

// SetNillableIsPinned sets the "IsPinned" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsPinned(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsPinned(*b)
	}
	return pu
}

// SetIsHidden sets the "IsHidden" field.
func (pu *PostUpdate) SetIsHidden(b bool) *PostUpdate {
	pu.mutation.SetIsHidden(b)
	return pu
}

// SetNillableIsHidden sets the "IsHidden" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsHidden(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsHidden(*b)
	}
	return pu
}

// SetRelevanceScore sets the "RelevanceScore" field.
func (pu *PostUpdate) SetRelevanceScore(i int) *PostUpdate {
	pu.mutation.ResetRelevanceScore()
	pu.mutation.SetRelevanceScore(i)
	return pu
}

// SetNillableRelevanceScore sets the "RelevanceScore" field if the given value is not nil.
func (pu *PostUpdate) SetNillableRelevanceScore(i *int) *PostUpdate {
	if i != nil {
		pu.SetRelevanceScore(*i)
	}
	return pu
}

// AddRelevanceScore adds i to the "RelevanceScore" field.
func (pu *PostUpdate) AddRelevanceScore(i int) *PostUpdate {
	pu.mutation.AddRelevanceScore(i)
	return pu
}

// SetSearchText sets the "SearchText" field.
func (pu *PostUpdate) SetSearchText(s string) *PostUpdate {
	pu.mutation.SetSearchText(s)
	return pu
}

// SetNillableSearchText sets the "SearchText" field if the given value is not nil.
func (pu *PostUpdate) SetNillableSearchText(s *string) *PostUpdate {
	if s != nil {
		pu.SetSearchText(*s)
	}
	return pu
}

// ClearSearchText clears the value of the "SearchText" field.
func (pu *PostUpdate) ClearSearchText() *PostUpdate {
	pu.mutation.ClearSearchText()
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *PostUpdate) SetUserID(id string) *PostUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pu *PostUpdate) SetNillableUserID(id *string) *PostUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *PostUpdate) SetUser(u *User) *PostUpdate {
	return pu.SetUserID(u.ID)
}

// SetBusinessAccountID sets the "business_account" edge to the Business entity by ID.
func (pu *PostUpdate) SetBusinessAccountID(id string) *PostUpdate {
	pu.mutation.SetBusinessAccountID(id)
	return pu
}

// SetNillableBusinessAccountID sets the "business_account" edge to the Business entity by ID if the given value is not nil.
func (pu *PostUpdate) SetNillableBusinessAccountID(id *string) *PostUpdate {
	if id != nil {
		pu = pu.SetBusinessAccountID(*id)
	}
	return pu
}

// SetBusinessAccount sets the "business_account" edge to the Business entity.
func (pu *PostUpdate) SetBusinessAccount(b *Business) *PostUpdate {
	return pu.SetBusinessAccountID(b.ID)
}

// AddMediaIDs adds the "medias" edge to the Media entity by IDs.
func (pu *PostUpdate) AddMediaIDs(ids ...string) *PostUpdate {
	pu.mutation.AddMediaIDs(ids...)
	return pu
}

// AddMedias adds the "medias" edges to the Media entity.
func (pu *PostUpdate) AddMedias(m ...*Media) *PostUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMediaIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (pu *PostUpdate) AddCommentIDs(ids ...string) *PostUpdate {
	pu.mutation.AddCommentIDs(ids...)
	return pu
}

// AddComments adds the "comments" edges to the Comment entity.
func (pu *PostUpdate) AddComments(c ...*Comment) *PostUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCommentIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (pu *PostUpdate) AddLikeIDs(ids ...string) *PostUpdate {
	pu.mutation.AddLikeIDs(ids...)
	return pu
}

// AddLikes adds the "likes" edges to the Like entity.
func (pu *PostUpdate) AddLikes(l ...*Like) *PostUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.AddLikeIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (pu *PostUpdate) AddCategoryIDs(ids ...string) *PostUpdate {
	pu.mutation.AddCategoryIDs(ids...)
	return pu
}

// AddCategories adds the "categories" edges to the Category entity.
func (pu *PostUpdate) AddCategories(c ...*Category) *PostUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCategoryIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *PostUpdate) ClearUser() *PostUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearBusinessAccount clears the "business_account" edge to the Business entity.
func (pu *PostUpdate) ClearBusinessAccount() *PostUpdate {
	pu.mutation.ClearBusinessAccount()
	return pu
}

// ClearMedias clears all "medias" edges to the Media entity.
func (pu *PostUpdate) ClearMedias() *PostUpdate {
	pu.mutation.ClearMedias()
	return pu
}

// RemoveMediaIDs removes the "medias" edge to Media entities by IDs.
func (pu *PostUpdate) RemoveMediaIDs(ids ...string) *PostUpdate {
	pu.mutation.RemoveMediaIDs(ids...)
	return pu
}

// RemoveMedias removes "medias" edges to Media entities.
func (pu *PostUpdate) RemoveMedias(m ...*Media) *PostUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMediaIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (pu *PostUpdate) ClearComments() *PostUpdate {
	pu.mutation.ClearComments()
	return pu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (pu *PostUpdate) RemoveCommentIDs(ids ...string) *PostUpdate {
	pu.mutation.RemoveCommentIDs(ids...)
	return pu
}

// RemoveComments removes "comments" edges to Comment entities.
func (pu *PostUpdate) RemoveComments(c ...*Comment) *PostUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCommentIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (pu *PostUpdate) ClearLikes() *PostUpdate {
	pu.mutation.ClearLikes()
	return pu
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (pu *PostUpdate) RemoveLikeIDs(ids ...string) *PostUpdate {
	pu.mutation.RemoveLikeIDs(ids...)
	return pu
}

// RemoveLikes removes "likes" edges to Like entities.
func (pu *PostUpdate) RemoveLikes(l ...*Like) *PostUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.RemoveLikeIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (pu *PostUpdate) ClearCategories() *PostUpdate {
	pu.mutation.ClearCategories()
	return pu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (pu *PostUpdate) RemoveCategoryIDs(ids ...string) *PostUpdate {
	pu.mutation.RemoveCategoryIDs(ids...)
	return pu
}

// RemoveCategories removes "categories" edges to Category entities.
func (pu *PostUpdate) RemoveCategories(c ...*Category) *PostUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Content(); ok {
		if err := post.ContentValidator(v); err != nil {
			return &ValidationError{Name: "Content", err: fmt.Errorf(`ent: validator failed for field "Post.Content": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Privacy(); ok {
		if err := post.PrivacyValidator(v); err != nil {
			return &ValidationError{Name: "Privacy", err: fmt.Errorf(`ent: validator failed for field "Post.Privacy": %w`, err)}
		}
	}
	return nil
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Privacy(); ok {
		_spec.SetField(post.FieldPrivacy, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.LikedByMe(); ok {
		_spec.SetField(post.FieldLikedByMe, field.TypeBool, value)
	}
	if value, ok := pu.mutation.LikeCount(); ok {
		_spec.SetField(post.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLikeCount(); ok {
		_spec.AddField(post.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CommentCount(); ok {
		_spec.SetField(post.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedCommentCount(); ok {
		_spec.AddField(post.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ShareCount(); ok {
		_spec.SetField(post.FieldShareCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedShareCount(); ok {
		_spec.AddField(post.FieldShareCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ViewCount(); ok {
		_spec.SetField(post.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedViewCount(); ok {
		_spec.AddField(post.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.IsSponsored(); ok {
		_spec.SetField(post.FieldIsSponsored, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsPromoted(); ok {
		_spec.SetField(post.FieldIsPromoted, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsBoosted(); ok {
		_spec.SetField(post.FieldIsBoosted, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsPinned(); ok {
		_spec.SetField(post.FieldIsPinned, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsHidden(); ok {
		_spec.SetField(post.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := pu.mutation.RelevanceScore(); ok {
		_spec.SetField(post.FieldRelevanceScore, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(post.FieldRelevanceScore, field.TypeInt, value)
	}
	if value, ok := pu.mutation.SearchText(); ok {
		_spec.SetField(post.FieldSearchText, field.TypeString, value)
	}
	if pu.mutation.SearchTextCleared() {
		_spec.ClearField(post.FieldSearchText, field.TypeString)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.BusinessAccountTable,
			Columns: []string{post.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.BusinessAccountTable,
			Columns: []string{post.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MediasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMediasIDs(); len(nodes) > 0 && !pu.mutation.MediasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MediasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !pu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.LikesTable,
			Columns: []string{post.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedLikesIDs(); len(nodes) > 0 && !pu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.LikesTable,
			Columns: []string{post.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.LikesTable,
			Columns: []string{post.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CategoriesTable,
			Columns: []string{post.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !pu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CategoriesTable,
			Columns: []string{post.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CategoriesTable,
			Columns: []string{post.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetContent sets the "Content" field.
func (puo *PostUpdateOne) SetContent(s string) *PostUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetCreatedAt sets the "CreatedAt" field.
func (puo *PostUpdateOne) SetCreatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCreatedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetPrivacy sets the "Privacy" field.
func (puo *PostUpdateOne) SetPrivacy(po post.Privacy) *PostUpdateOne {
	puo.mutation.SetPrivacy(po)
	return puo
}

// SetNillablePrivacy sets the "Privacy" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillablePrivacy(po *post.Privacy) *PostUpdateOne {
	if po != nil {
		puo.SetPrivacy(*po)
	}
	return puo
}

// SetLikedByMe sets the "LikedByMe" field.
func (puo *PostUpdateOne) SetLikedByMe(b bool) *PostUpdateOne {
	puo.mutation.SetLikedByMe(b)
	return puo
}

// SetNillableLikedByMe sets the "LikedByMe" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLikedByMe(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetLikedByMe(*b)
	}
	return puo
}

// SetLikeCount sets the "LikeCount" field.
func (puo *PostUpdateOne) SetLikeCount(i int) *PostUpdateOne {
	puo.mutation.ResetLikeCount()
	puo.mutation.SetLikeCount(i)
	return puo
}

// SetNillableLikeCount sets the "LikeCount" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLikeCount(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetLikeCount(*i)
	}
	return puo
}

// AddLikeCount adds i to the "LikeCount" field.
func (puo *PostUpdateOne) AddLikeCount(i int) *PostUpdateOne {
	puo.mutation.AddLikeCount(i)
	return puo
}

// SetCommentCount sets the "CommentCount" field.
func (puo *PostUpdateOne) SetCommentCount(i int) *PostUpdateOne {
	puo.mutation.ResetCommentCount()
	puo.mutation.SetCommentCount(i)
	return puo
}

// SetNillableCommentCount sets the "CommentCount" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCommentCount(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetCommentCount(*i)
	}
	return puo
}

// AddCommentCount adds i to the "CommentCount" field.
func (puo *PostUpdateOne) AddCommentCount(i int) *PostUpdateOne {
	puo.mutation.AddCommentCount(i)
	return puo
}

// SetShareCount sets the "ShareCount" field.
func (puo *PostUpdateOne) SetShareCount(i int) *PostUpdateOne {
	puo.mutation.ResetShareCount()
	puo.mutation.SetShareCount(i)
	return puo
}

// SetNillableShareCount sets the "ShareCount" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableShareCount(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetShareCount(*i)
	}
	return puo
}

// AddShareCount adds i to the "ShareCount" field.
func (puo *PostUpdateOne) AddShareCount(i int) *PostUpdateOne {
	puo.mutation.AddShareCount(i)
	return puo
}

// SetViewCount sets the "ViewCount" field.
func (puo *PostUpdateOne) SetViewCount(i int) *PostUpdateOne {
	puo.mutation.ResetViewCount()
	puo.mutation.SetViewCount(i)
	return puo
}

// SetNillableViewCount sets the "ViewCount" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableViewCount(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetViewCount(*i)
	}
	return puo
}

// AddViewCount adds i to the "ViewCount" field.
func (puo *PostUpdateOne) AddViewCount(i int) *PostUpdateOne {
	puo.mutation.AddViewCount(i)
	return puo
}

// SetIsSponsored sets the "IsSponsored" field.
func (puo *PostUpdateOne) SetIsSponsored(b bool) *PostUpdateOne {
	puo.mutation.SetIsSponsored(b)
	return puo
}

// SetNillableIsSponsored sets the "IsSponsored" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsSponsored(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsSponsored(*b)
	}
	return puo
}

// SetIsPromoted sets the "IsPromoted" field.
func (puo *PostUpdateOne) SetIsPromoted(b bool) *PostUpdateOne {
	puo.mutation.SetIsPromoted(b)
	return puo
}

// SetNillableIsPromoted sets the "IsPromoted" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsPromoted(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsPromoted(*b)
	}
	return puo
}

// SetIsBoosted sets the "IsBoosted" field.
func (puo *PostUpdateOne) SetIsBoosted(b bool) *PostUpdateOne {
	puo.mutation.SetIsBoosted(b)
	return puo
}

// SetNillableIsBoosted sets the "IsBoosted" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsBoosted(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsBoosted(*b)
	}
	return puo
}

// SetIsPinned sets the "IsPinned" field.
func (puo *PostUpdateOne) SetIsPinned(b bool) *PostUpdateOne {
	puo.mutation.SetIsPinned(b)
	return puo
}

// SetNillableIsPinned sets the "IsPinned" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsPinned(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsPinned(*b)
	}
	return puo
}

// SetIsHidden sets the "IsHidden" field.
func (puo *PostUpdateOne) SetIsHidden(b bool) *PostUpdateOne {
	puo.mutation.SetIsHidden(b)
	return puo
}

// SetNillableIsHidden sets the "IsHidden" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsHidden(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsHidden(*b)
	}
	return puo
}

// SetRelevanceScore sets the "RelevanceScore" field.
func (puo *PostUpdateOne) SetRelevanceScore(i int) *PostUpdateOne {
	puo.mutation.ResetRelevanceScore()
	puo.mutation.SetRelevanceScore(i)
	return puo
}

// SetNillableRelevanceScore sets the "RelevanceScore" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableRelevanceScore(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetRelevanceScore(*i)
	}
	return puo
}

// AddRelevanceScore adds i to the "RelevanceScore" field.
func (puo *PostUpdateOne) AddRelevanceScore(i int) *PostUpdateOne {
	puo.mutation.AddRelevanceScore(i)
	return puo
}

// SetSearchText sets the "SearchText" field.
func (puo *PostUpdateOne) SetSearchText(s string) *PostUpdateOne {
	puo.mutation.SetSearchText(s)
	return puo
}

// SetNillableSearchText sets the "SearchText" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableSearchText(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetSearchText(*s)
	}
	return puo
}

// ClearSearchText clears the value of the "SearchText" field.
func (puo *PostUpdateOne) ClearSearchText() *PostUpdateOne {
	puo.mutation.ClearSearchText()
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *PostUpdateOne) SetUserID(id string) *PostUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (puo *PostUpdateOne) SetNillableUserID(id *string) *PostUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *PostUpdateOne) SetUser(u *User) *PostUpdateOne {
	return puo.SetUserID(u.ID)
}

// SetBusinessAccountID sets the "business_account" edge to the Business entity by ID.
func (puo *PostUpdateOne) SetBusinessAccountID(id string) *PostUpdateOne {
	puo.mutation.SetBusinessAccountID(id)
	return puo
}

// SetNillableBusinessAccountID sets the "business_account" edge to the Business entity by ID if the given value is not nil.
func (puo *PostUpdateOne) SetNillableBusinessAccountID(id *string) *PostUpdateOne {
	if id != nil {
		puo = puo.SetBusinessAccountID(*id)
	}
	return puo
}

// SetBusinessAccount sets the "business_account" edge to the Business entity.
func (puo *PostUpdateOne) SetBusinessAccount(b *Business) *PostUpdateOne {
	return puo.SetBusinessAccountID(b.ID)
}

// AddMediaIDs adds the "medias" edge to the Media entity by IDs.
func (puo *PostUpdateOne) AddMediaIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddMediaIDs(ids...)
	return puo
}

// AddMedias adds the "medias" edges to the Media entity.
func (puo *PostUpdateOne) AddMedias(m ...*Media) *PostUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMediaIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (puo *PostUpdateOne) AddCommentIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddCommentIDs(ids...)
	return puo
}

// AddComments adds the "comments" edges to the Comment entity.
func (puo *PostUpdateOne) AddComments(c ...*Comment) *PostUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCommentIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (puo *PostUpdateOne) AddLikeIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddLikeIDs(ids...)
	return puo
}

// AddLikes adds the "likes" edges to the Like entity.
func (puo *PostUpdateOne) AddLikes(l ...*Like) *PostUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.AddLikeIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (puo *PostUpdateOne) AddCategoryIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddCategoryIDs(ids...)
	return puo
}

// AddCategories adds the "categories" edges to the Category entity.
func (puo *PostUpdateOne) AddCategories(c ...*Category) *PostUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCategoryIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *PostUpdateOne) ClearUser() *PostUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearBusinessAccount clears the "business_account" edge to the Business entity.
func (puo *PostUpdateOne) ClearBusinessAccount() *PostUpdateOne {
	puo.mutation.ClearBusinessAccount()
	return puo
}

// ClearMedias clears all "medias" edges to the Media entity.
func (puo *PostUpdateOne) ClearMedias() *PostUpdateOne {
	puo.mutation.ClearMedias()
	return puo
}

// RemoveMediaIDs removes the "medias" edge to Media entities by IDs.
func (puo *PostUpdateOne) RemoveMediaIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemoveMediaIDs(ids...)
	return puo
}

// RemoveMedias removes "medias" edges to Media entities.
func (puo *PostUpdateOne) RemoveMedias(m ...*Media) *PostUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMediaIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (puo *PostUpdateOne) ClearComments() *PostUpdateOne {
	puo.mutation.ClearComments()
	return puo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (puo *PostUpdateOne) RemoveCommentIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemoveCommentIDs(ids...)
	return puo
}

// RemoveComments removes "comments" edges to Comment entities.
func (puo *PostUpdateOne) RemoveComments(c ...*Comment) *PostUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCommentIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (puo *PostUpdateOne) ClearLikes() *PostUpdateOne {
	puo.mutation.ClearLikes()
	return puo
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (puo *PostUpdateOne) RemoveLikeIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemoveLikeIDs(ids...)
	return puo
}

// RemoveLikes removes "likes" edges to Like entities.
func (puo *PostUpdateOne) RemoveLikes(l ...*Like) *PostUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.RemoveLikeIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (puo *PostUpdateOne) ClearCategories() *PostUpdateOne {
	puo.mutation.ClearCategories()
	return puo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (puo *PostUpdateOne) RemoveCategoryIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemoveCategoryIDs(ids...)
	return puo
}

// RemoveCategories removes "categories" edges to Category entities.
func (puo *PostUpdateOne) RemoveCategories(c ...*Category) *PostUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCategoryIDs(ids...)
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Content(); ok {
		if err := post.ContentValidator(v); err != nil {
			return &ValidationError{Name: "Content", err: fmt.Errorf(`ent: validator failed for field "Post.Content": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Privacy(); ok {
		if err := post.PrivacyValidator(v); err != nil {
			return &ValidationError{Name: "Privacy", err: fmt.Errorf(`ent: validator failed for field "Post.Privacy": %w`, err)}
		}
	}
	return nil
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Privacy(); ok {
		_spec.SetField(post.FieldPrivacy, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.LikedByMe(); ok {
		_spec.SetField(post.FieldLikedByMe, field.TypeBool, value)
	}
	if value, ok := puo.mutation.LikeCount(); ok {
		_spec.SetField(post.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLikeCount(); ok {
		_spec.AddField(post.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CommentCount(); ok {
		_spec.SetField(post.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedCommentCount(); ok {
		_spec.AddField(post.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ShareCount(); ok {
		_spec.SetField(post.FieldShareCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedShareCount(); ok {
		_spec.AddField(post.FieldShareCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ViewCount(); ok {
		_spec.SetField(post.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedViewCount(); ok {
		_spec.AddField(post.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.IsSponsored(); ok {
		_spec.SetField(post.FieldIsSponsored, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsPromoted(); ok {
		_spec.SetField(post.FieldIsPromoted, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsBoosted(); ok {
		_spec.SetField(post.FieldIsBoosted, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsPinned(); ok {
		_spec.SetField(post.FieldIsPinned, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsHidden(); ok {
		_spec.SetField(post.FieldIsHidden, field.TypeBool, value)
	}
	if value, ok := puo.mutation.RelevanceScore(); ok {
		_spec.SetField(post.FieldRelevanceScore, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedRelevanceScore(); ok {
		_spec.AddField(post.FieldRelevanceScore, field.TypeInt, value)
	}
	if value, ok := puo.mutation.SearchText(); ok {
		_spec.SetField(post.FieldSearchText, field.TypeString, value)
	}
	if puo.mutation.SearchTextCleared() {
		_spec.ClearField(post.FieldSearchText, field.TypeString)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.UserTable,
			Columns: []string{post.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.BusinessAccountTable,
			Columns: []string{post.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.BusinessAccountTable,
			Columns: []string{post.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MediasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMediasIDs(); len(nodes) > 0 && !puo.mutation.MediasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MediasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.MediasTable,
			Columns: []string{post.MediasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !puo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.LikesTable,
			Columns: []string{post.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !puo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.LikesTable,
			Columns: []string{post.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.LikesTable,
			Columns: []string{post.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CategoriesTable,
			Columns: []string{post.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !puo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CategoriesTable,
			Columns: []string{post.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CategoriesTable,
			Columns: []string{post.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

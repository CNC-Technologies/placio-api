
// Code generated by ent, DO NOT EDIT.



	

package userfollowbusiness




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)


const (
	// Label holds the string label denoting the userfollowbusiness type in the database.
	Label = "user_follow_business"
		// FieldID holds the string denoting the id field in the database.
		FieldID = "id"
		// FieldCreatedAt holds the string denoting the createdat field in the database.
		FieldCreatedAt = "created_at"
		// FieldUpdatedAt holds the string denoting the updatedat field in the database.
		FieldUpdatedAt = "updated_at"
		// EdgeUser holds the string denoting the user edge name in mutations.
		EdgeUser = "user"
		// EdgeBusiness holds the string denoting the business edge name in mutations.
		EdgeBusiness = "business"
	// Table holds the table name of the userfollowbusiness in the database.
	Table = "user_follow_businesses"
		// UserTable is the table that holds the user relation/edge.
		UserTable = "user_follow_businesses"
			// UserInverseTable is the table name for the User entity.
			// It exists in this package in order to avoid circular dependency with the "user" package.
			UserInverseTable = "users"
			// UserColumn is the table column denoting the user relation/edge.
			UserColumn = "user_followed_businesses"
		// BusinessTable is the table that holds the business relation/edge.
		BusinessTable = "user_follow_businesses"
			// BusinessInverseTable is the table name for the Business entity.
			// It exists in this package in order to avoid circular dependency with the "business" package.
			BusinessInverseTable = "businesses"
			// BusinessColumn is the table column denoting the business relation/edge.
			BusinessColumn = "business_follower_users"

)



	
	// Columns holds all SQL columns for userfollowbusiness fields.
	var Columns = []string{
			FieldID,
			FieldCreatedAt,
			FieldUpdatedAt,
	}
	
	
		// ForeignKeys holds the SQL foreign-keys that are owned by the "user_follow_businesses"
		// table and are not defined as standalone fields in the schema.
		var ForeignKeys = []string{
				"business_follower_users",
				"user_followed_businesses",
		}
	

	





	
// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
		for i := range ForeignKeys {
			if column == ForeignKeys[i] {
				return true
			}
		}
	return false
}









	var (
				// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
				DefaultCreatedAt func() time.Time
				// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
				UpdateDefaultUpdatedAt func() time.Time
	)






// OrderOption defines the ordering options for the UserFollowBusiness queries.
type OrderOption func(*sql.Selector)

	
	
		// ByID orders the results by the id field.
		func ByID(opts ...sql.OrderTermOption) OrderOption {
			return sql.OrderByField(FieldID, opts...).ToFunc()
		}
	
			// ByCreatedAt orders the results by the CreatedAt field.
			func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
			}
			// ByUpdatedAt orders the results by the UpdatedAt field.
			func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
			}
			// ByUserField orders the results by user field.
			func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
				return func(s *sql.Selector) {
					sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
				}
			}
			// ByBusinessField orders the results by business field.
			func ByBusinessField(field string, opts ...sql.OrderTermOption) OrderOption {
				return func(s *sql.Selector) {
					sqlgraph.OrderByNeighborTerms(s, newBusinessStep(), sql.OrderByField(field, opts...))
				}
			}
		func newUserStep() *sqlgraph.Step {
			return sqlgraph.NewStep(
					sqlgraph.From(Table, FieldID),
						sqlgraph.To(UserInverseTable, FieldID),
				sqlgraph.Edge(sqlgraph.M2O, true, UserTable,UserColumn),
			)
		}
		func newBusinessStep() *sqlgraph.Step {
			return sqlgraph.NewStep(
					sqlgraph.From(Table, FieldID),
						sqlgraph.To(BusinessInverseTable, FieldID),
				sqlgraph.Edge(sqlgraph.M2O, true, BusinessTable,BusinessColumn),
			)
		}








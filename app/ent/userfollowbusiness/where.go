
// Code generated by ent, DO NOT EDIT.



	

package userfollowbusiness




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)



	// ID filters vertices based on their ID field.
	func ID(id string) predicate.UserFollowBusiness {
		return predicate.UserFollowBusiness(sql.FieldEQ(FieldID, id))
	}

	
		
		
		// IDEQ applies the EQ predicate on the ID field.
		func IDEQ(id string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldEQ(FieldID,id))
		}
	
		
		
		// IDNEQ applies the NEQ predicate on the ID field.
		func IDNEQ(id string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldNEQ(FieldID,id))
		}
	
		
		
		// IDIn applies the In predicate on the ID field.
		func IDIn(ids ...string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldIn(FieldID,ids...))
		}
	
		
		
		// IDNotIn applies the NotIn predicate on the ID field.
		func IDNotIn(ids ...string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldNotIn(FieldID,ids...))
		}
	
		
		
		// IDGT applies the GT predicate on the ID field.
		func IDGT(id string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldGT(FieldID,id))
		}
	
		
		
		// IDGTE applies the GTE predicate on the ID field.
		func IDGTE(id string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldGTE(FieldID,id))
		}
	
		
		
		// IDLT applies the LT predicate on the ID field.
		func IDLT(id string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldLT(FieldID,id))
		}
	
		
		
		// IDLTE applies the LTE predicate on the ID field.
		func IDLTE(id string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldLTE(FieldID,id))
		}
	
		
		
		// IDEqualFold applies the EqualFold predicate on the ID field.
		func IDEqualFold(id string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldEqualFold(FieldID,id))
		}
	
		
		
		// IDContainsFold applies the ContainsFold predicate on the ID field.
		func IDContainsFold(id string) predicate.UserFollowBusiness {
			return predicate.UserFollowBusiness(sql.FieldContainsFold(FieldID,id))
		}
	



	
	
	
	
	
		
		// CreatedAt applies equality check predicate on the "CreatedAt" field. It's identical to CreatedAtEQ.
		func CreatedAt(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldEQ(FieldCreatedAt, v))
		}

	
	
	
	
	
		
		// UpdatedAt applies equality check predicate on the "UpdatedAt" field. It's identical to UpdatedAtEQ.
		func UpdatedAt(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldEQ(FieldUpdatedAt, v))
		}



	
		
		
		
		
		// CreatedAtEQ applies the EQ predicate on the "CreatedAt" field.
		func CreatedAtEQ(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldEQ(FieldCreatedAt, v))
		}
	
		
		
		
		
		// CreatedAtNEQ applies the NEQ predicate on the "CreatedAt" field.
		func CreatedAtNEQ(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldNEQ(FieldCreatedAt, v))
		}
	
		
		
		
		
		// CreatedAtIn applies the In predicate on the "CreatedAt" field.
		func CreatedAtIn(vs ...time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldIn(FieldCreatedAt, vs...))
		}
	
		
		
		
		
		// CreatedAtNotIn applies the NotIn predicate on the "CreatedAt" field.
		func CreatedAtNotIn(vs ...time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldNotIn(FieldCreatedAt, vs...))
		}
	
		
		
		
		
		// CreatedAtGT applies the GT predicate on the "CreatedAt" field.
		func CreatedAtGT(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldGT(FieldCreatedAt, v))
		}
	
		
		
		
		
		// CreatedAtGTE applies the GTE predicate on the "CreatedAt" field.
		func CreatedAtGTE(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldGTE(FieldCreatedAt, v))
		}
	
		
		
		
		
		// CreatedAtLT applies the LT predicate on the "CreatedAt" field.
		func CreatedAtLT(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldLT(FieldCreatedAt, v))
		}
	
		
		
		
		
		// CreatedAtLTE applies the LTE predicate on the "CreatedAt" field.
		func CreatedAtLTE(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldLTE(FieldCreatedAt, v))
		}
	

	
		
		
		
		
		// UpdatedAtEQ applies the EQ predicate on the "UpdatedAt" field.
		func UpdatedAtEQ(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldEQ(FieldUpdatedAt, v))
		}
	
		
		
		
		
		// UpdatedAtNEQ applies the NEQ predicate on the "UpdatedAt" field.
		func UpdatedAtNEQ(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldNEQ(FieldUpdatedAt, v))
		}
	
		
		
		
		
		// UpdatedAtIn applies the In predicate on the "UpdatedAt" field.
		func UpdatedAtIn(vs ...time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldIn(FieldUpdatedAt, vs...))
		}
	
		
		
		
		
		// UpdatedAtNotIn applies the NotIn predicate on the "UpdatedAt" field.
		func UpdatedAtNotIn(vs ...time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldNotIn(FieldUpdatedAt, vs...))
		}
	
		
		
		
		
		// UpdatedAtGT applies the GT predicate on the "UpdatedAt" field.
		func UpdatedAtGT(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldGT(FieldUpdatedAt, v))
		}
	
		
		
		
		
		// UpdatedAtGTE applies the GTE predicate on the "UpdatedAt" field.
		func UpdatedAtGTE(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldGTE(FieldUpdatedAt, v))
		}
	
		
		
		
		
		// UpdatedAtLT applies the LT predicate on the "UpdatedAt" field.
		func UpdatedAtLT(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldLT(FieldUpdatedAt, v))
		}
	
		
		
		
		
		// UpdatedAtLTE applies the LTE predicate on the "UpdatedAt" field.
		func UpdatedAtLTE(v time.Time) predicate.UserFollowBusiness {
				return predicate.UserFollowBusiness(sql.FieldLTE(FieldUpdatedAt, v))
		}
	



	
	// HasUser applies the HasEdge predicate on the "user" edge.
	func HasUser() predicate.UserFollowBusiness {
		return predicate.UserFollowBusiness(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable,UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
	func HasUserWith(preds ...predicate.User) predicate.UserFollowBusiness {
		return predicate.UserFollowBusiness(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}

	
	// HasBusiness applies the HasEdge predicate on the "business" edge.
	func HasBusiness() predicate.UserFollowBusiness {
		return predicate.UserFollowBusiness(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BusinessTable,BusinessColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasBusinessWith applies the HasEdge predicate on the "business" edge with a given conditions (other predicates).
	func HasBusinessWith(preds ...predicate.Business) predicate.UserFollowBusiness {
		return predicate.UserFollowBusiness(func(s *sql.Selector) {
		step := newBusinessStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}


// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserFollowBusiness) predicate.UserFollowBusiness {
	return predicate.UserFollowBusiness(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserFollowBusiness) predicate.UserFollowBusiness {
	return predicate.UserFollowBusiness(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserFollowBusiness) predicate.UserFollowBusiness {
	return predicate.UserFollowBusiness(sql.NotPredicates(p))
}






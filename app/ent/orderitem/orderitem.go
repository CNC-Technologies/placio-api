// Code generated by ent, DO NOT EDIT.

package orderitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orderitem type in the database.
	Label = "order_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldPricePerItem holds the string denoting the price_per_item field in the database.
	FieldPricePerItem = "price_per_item"
	// FieldTotalPrice holds the string denoting the total_price field in the database.
	FieldTotalPrice = "total_price"
	// FieldOptions holds the string denoting the options field in the database.
	FieldOptions = "options"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeMenuItem holds the string denoting the menu_item edge name in mutations.
	EdgeMenuItem = "menu_item"
	// Table holds the table name of the orderitem in the database.
	Table = "order_items"
	// OrderTable is the table that holds the order relation/edge. The primary key declared below.
	OrderTable = "order_order_items"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "orders"
	// MenuItemTable is the table that holds the menu_item relation/edge. The primary key declared below.
	MenuItemTable = "menu_item_order_items"
	// MenuItemInverseTable is the table name for the MenuItem entity.
	// It exists in this package in order to avoid circular dependency with the "menuitem" package.
	MenuItemInverseTable = "menu_items"
)

// Columns holds all SQL columns for orderitem fields.
var Columns = []string{
	FieldID,
	FieldQuantity,
	FieldPricePerItem,
	FieldTotalPrice,
	FieldOptions,
}

var (
	// OrderPrimaryKey and OrderColumn2 are the table columns denoting the
	// primary key for the order relation (M2M).
	OrderPrimaryKey = []string{"order_id", "order_item_id"}
	// MenuItemPrimaryKey and MenuItemColumn2 are the table columns denoting the
	// primary key for the menu_item relation (M2M).
	MenuItemPrimaryKey = []string{"menu_item_id", "order_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultQuantity holds the default value on creation for the "quantity" field.
	DefaultQuantity int
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the OrderItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByPricePerItem orders the results by the price_per_item field.
func ByPricePerItem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPricePerItem, opts...).ToFunc()
}

// ByTotalPrice orders the results by the total_price field.
func ByTotalPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalPrice, opts...).ToFunc()
}

// ByOrderCount orders the results by order count.
func ByOrderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderStep(), opts...)
	}
}

// ByOrder orders the results by order terms.
func ByOrder(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMenuItemCount orders the results by menu_item count.
func ByMenuItemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMenuItemStep(), opts...)
	}
}

// ByMenuItem orders the results by menu_item terms.
func ByMenuItem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMenuItemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OrderTable, OrderPrimaryKey...),
	)
}
func newMenuItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MenuItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MenuItemTable, MenuItemPrimaryKey...),
	)
}

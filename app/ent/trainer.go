// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/trainer"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Trainer is the model entity for the Trainer schema.
type Trainer struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrainerQuery when eager-loading is set.
	Edges        TrainerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrainerEdges holds the relations/edges for other nodes in the graph.
type TrainerEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Place holds the value of the place edge.
	Place []*Place `json:"place,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e TrainerEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading.
func (e TrainerEdges) PlaceOrErr() ([]*Place, error) {
	if e.loadedTypes[1] {
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Trainer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trainer.FieldID, trainer.FieldName, trainer.FieldEmail, trainer.FieldPhone:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Trainer fields.
func (t *Trainer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trainer.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case trainer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case trainer.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				t.Email = value.String
			}
		case trainer.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				t.Phone = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Trainer.
// This includes values selected through modifiers, order, etc.
func (t *Trainer) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Trainer entity.
func (t *Trainer) QueryUser() *UserQuery {
	return NewTrainerClient(t.config).QueryUser(t)
}

// QueryPlace queries the "place" edge of the Trainer entity.
func (t *Trainer) QueryPlace() *PlaceQuery {
	return NewTrainerClient(t.config).QueryPlace(t)
}

// Update returns a builder for updating this Trainer.
// Note that you need to call Trainer.Unwrap() before calling this method if this Trainer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Trainer) Update() *TrainerUpdateOne {
	return NewTrainerClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Trainer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Trainer) Unwrap() *Trainer {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Trainer is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Trainer) String() string {
	var builder strings.Builder
	builder.WriteString("Trainer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(t.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(t.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// Trainers is a parsable slice of Trainer.
type Trainers []*Trainer

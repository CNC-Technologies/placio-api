// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"placio-app/ent/room"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// RoomNumber holds the value of the "room_number" field.
	RoomNumber string `json:"room_number,omitempty"`
	// RoomType holds the value of the "room_type" field.
	RoomType string `json:"room_type,omitempty"`
	// RoomStatus holds the value of the "room_status" field.
	RoomStatus string `json:"room_status,omitempty"`
	// RoomRating holds the value of the "room_rating" field.
	RoomRating string `json:"room_rating,omitempty"`
	// RoomPrice holds the value of the "room_price" field.
	RoomPrice float64 `json:"room_price,omitempty"`
	// Status holds the value of the "status" field.
	Status room.Status `json:"status,omitempty"`
	// Extras holds the value of the "extras" field.
	Extras map[string]interface{} `json:"extras,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Availability holds the value of the "availability" field.
	Availability bool `json:"availability,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges        RoomEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// Place holds the value of the place edge.
	Place []*Place `json:"place,omitempty"`
	// RoomCategory holds the value of the room_category edge.
	RoomCategory []*RoomCategory `json:"room_category,omitempty"`
	// Bookings holds the value of the bookings edge.
	Bookings []*Booking `json:"bookings,omitempty"`
	// Amenities holds the value of the amenities edge.
	Amenities []*Amenity `json:"amenities,omitempty"`
	// Media holds the value of the media edge.
	Media []*Media `json:"media,omitempty"`
	// Reservations holds the value of the reservations edge.
	Reservations []*Reservation `json:"reservations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) PlaceOrErr() ([]*Place, error) {
	if e.loadedTypes[0] {
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// RoomCategoryOrErr returns the RoomCategory value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) RoomCategoryOrErr() ([]*RoomCategory, error) {
	if e.loadedTypes[1] {
		return e.RoomCategory, nil
	}
	return nil, &NotLoadedError{edge: "room_category"}
}

// BookingsOrErr returns the Bookings value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) BookingsOrErr() ([]*Booking, error) {
	if e.loadedTypes[2] {
		return e.Bookings, nil
	}
	return nil, &NotLoadedError{edge: "bookings"}
}

// AmenitiesOrErr returns the Amenities value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) AmenitiesOrErr() ([]*Amenity, error) {
	if e.loadedTypes[3] {
		return e.Amenities, nil
	}
	return nil, &NotLoadedError{edge: "amenities"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[4] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// ReservationsOrErr returns the Reservations value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) ReservationsOrErr() ([]*Reservation, error) {
	if e.loadedTypes[5] {
		return e.Reservations, nil
	}
	return nil, &NotLoadedError{edge: "reservations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case room.FieldExtras:
			values[i] = new([]byte)
		case room.FieldAvailability:
			values[i] = new(sql.NullBool)
		case room.FieldRoomPrice:
			values[i] = new(sql.NullFloat64)
		case room.FieldID, room.FieldRoomNumber, room.FieldRoomType, room.FieldRoomStatus, room.FieldRoomRating, room.FieldStatus, room.FieldDescription, room.FieldImage:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case room.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case room.FieldRoomNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_number", values[i])
			} else if value.Valid {
				r.RoomNumber = value.String
			}
		case room.FieldRoomType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_type", values[i])
			} else if value.Valid {
				r.RoomType = value.String
			}
		case room.FieldRoomStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_status", values[i])
			} else if value.Valid {
				r.RoomStatus = value.String
			}
		case room.FieldRoomRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_rating", values[i])
			} else if value.Valid {
				r.RoomRating = value.String
			}
		case room.FieldRoomPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field room_price", values[i])
			} else if value.Valid {
				r.RoomPrice = value.Float64
			}
		case room.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = room.Status(value.String)
			}
		case room.FieldExtras:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extras", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Extras); err != nil {
					return fmt.Errorf("unmarshal field extras: %w", err)
				}
			}
		case room.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case room.FieldAvailability:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field availability", values[i])
			} else if value.Valid {
				r.Availability = value.Bool
			}
		case room.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				r.Image = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Room.
// This includes values selected through modifiers, order, etc.
func (r *Room) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryPlace queries the "place" edge of the Room entity.
func (r *Room) QueryPlace() *PlaceQuery {
	return NewRoomClient(r.config).QueryPlace(r)
}

// QueryRoomCategory queries the "room_category" edge of the Room entity.
func (r *Room) QueryRoomCategory() *RoomCategoryQuery {
	return NewRoomClient(r.config).QueryRoomCategory(r)
}

// QueryBookings queries the "bookings" edge of the Room entity.
func (r *Room) QueryBookings() *BookingQuery {
	return NewRoomClient(r.config).QueryBookings(r)
}

// QueryAmenities queries the "amenities" edge of the Room entity.
func (r *Room) QueryAmenities() *AmenityQuery {
	return NewRoomClient(r.config).QueryAmenities(r)
}

// QueryMedia queries the "media" edge of the Room entity.
func (r *Room) QueryMedia() *MediaQuery {
	return NewRoomClient(r.config).QueryMedia(r)
}

// QueryReservations queries the "reservations" edge of the Room entity.
func (r *Room) QueryReservations() *ReservationQuery {
	return NewRoomClient(r.config).QueryReservations(r)
}

// Update returns a builder for updating this Room.
// Note that you need to call Room.Unwrap() before calling this method if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return NewRoomClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Room entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("room_number=")
	builder.WriteString(r.RoomNumber)
	builder.WriteString(", ")
	builder.WriteString("room_type=")
	builder.WriteString(r.RoomType)
	builder.WriteString(", ")
	builder.WriteString("room_status=")
	builder.WriteString(r.RoomStatus)
	builder.WriteString(", ")
	builder.WriteString("room_rating=")
	builder.WriteString(r.RoomRating)
	builder.WriteString(", ")
	builder.WriteString("room_price=")
	builder.WriteString(fmt.Sprintf("%v", r.RoomPrice))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", ")
	builder.WriteString("extras=")
	builder.WriteString(fmt.Sprintf("%v", r.Extras))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("availability=")
	builder.WriteString(fmt.Sprintf("%v", r.Availability))
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(r.Image)
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room

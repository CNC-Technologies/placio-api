// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"placio-app/ent/event"
	"placio-app/ent/predicate"
	"placio-app/ent/user"
	"placio-app/ent/userfollowevent"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFollowEventQuery is the builder for querying UserFollowEvent entities.
type UserFollowEventQuery struct {
	config
	ctx        *QueryContext
	order      []userfollowevent.OrderOption
	inters     []Interceptor
	predicates []predicate.UserFollowEvent
	withUser   *UserQuery
	withEvent  *EventQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserFollowEventQuery builder.
func (ufeq *UserFollowEventQuery) Where(ps ...predicate.UserFollowEvent) *UserFollowEventQuery {
	ufeq.predicates = append(ufeq.predicates, ps...)
	return ufeq
}

// Limit the number of records to be returned by this query.
func (ufeq *UserFollowEventQuery) Limit(limit int) *UserFollowEventQuery {
	ufeq.ctx.Limit = &limit
	return ufeq
}

// Offset to cmd from.
func (ufeq *UserFollowEventQuery) Offset(offset int) *UserFollowEventQuery {
	ufeq.ctx.Offset = &offset
	return ufeq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ufeq *UserFollowEventQuery) Unique(unique bool) *UserFollowEventQuery {
	ufeq.ctx.Unique = &unique
	return ufeq
}

// Order specifies how the records should be ordered.
func (ufeq *UserFollowEventQuery) Order(o ...userfollowevent.OrderOption) *UserFollowEventQuery {
	ufeq.order = append(ufeq.order, o...)
	return ufeq
}

// QueryUser chains the current query on the "user" edge.
func (ufeq *UserFollowEventQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ufeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ufeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ufeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userfollowevent.Table, userfollowevent.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userfollowevent.UserTable, userfollowevent.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ufeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvent chains the current query on the "event" edge.
func (ufeq *UserFollowEventQuery) QueryEvent() *EventQuery {
	query := (&EventClient{config: ufeq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ufeq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ufeq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userfollowevent.Table, userfollowevent.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userfollowevent.EventTable, userfollowevent.EventColumn),
		)
		fromU = sqlgraph.SetNeighbors(ufeq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserFollowEvent entity from the query.
// Returns a *NotFoundError when no UserFollowEvent was found.
func (ufeq *UserFollowEventQuery) First(ctx context.Context) (*UserFollowEvent, error) {
	nodes, err := ufeq.Limit(1).All(setContextOp(ctx, ufeq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userfollowevent.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ufeq *UserFollowEventQuery) FirstX(ctx context.Context) *UserFollowEvent {
	node, err := ufeq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserFollowEvent ID from the query.
// Returns a *NotFoundError when no UserFollowEvent ID was found.
func (ufeq *UserFollowEventQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ufeq.Limit(1).IDs(setContextOp(ctx, ufeq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userfollowevent.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ufeq *UserFollowEventQuery) FirstIDX(ctx context.Context) string {
	id, err := ufeq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserFollowEvent entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserFollowEvent entity is found.
// Returns a *NotFoundError when no UserFollowEvent entities are found.
func (ufeq *UserFollowEventQuery) Only(ctx context.Context) (*UserFollowEvent, error) {
	nodes, err := ufeq.Limit(2).All(setContextOp(ctx, ufeq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userfollowevent.Label}
	default:
		return nil, &NotSingularError{userfollowevent.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ufeq *UserFollowEventQuery) OnlyX(ctx context.Context) *UserFollowEvent {
	node, err := ufeq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserFollowEvent ID in the query.
// Returns a *NotSingularError when more than one UserFollowEvent ID is found.
// Returns a *NotFoundError when no entities are found.
func (ufeq *UserFollowEventQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ufeq.Limit(2).IDs(setContextOp(ctx, ufeq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userfollowevent.Label}
	default:
		err = &NotSingularError{userfollowevent.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ufeq *UserFollowEventQuery) OnlyIDX(ctx context.Context) string {
	id, err := ufeq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserFollowEvents.
func (ufeq *UserFollowEventQuery) All(ctx context.Context) ([]*UserFollowEvent, error) {
	ctx = setContextOp(ctx, ufeq.ctx, "All")
	if err := ufeq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserFollowEvent, *UserFollowEventQuery]()
	return withInterceptors[[]*UserFollowEvent](ctx, ufeq, qr, ufeq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ufeq *UserFollowEventQuery) AllX(ctx context.Context) []*UserFollowEvent {
	nodes, err := ufeq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserFollowEvent IDs.
func (ufeq *UserFollowEventQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ufeq.ctx.Unique == nil && ufeq.path != nil {
		ufeq.Unique(true)
	}
	ctx = setContextOp(ctx, ufeq.ctx, "IDs")
	if err = ufeq.Select(userfollowevent.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ufeq *UserFollowEventQuery) IDsX(ctx context.Context) []string {
	ids, err := ufeq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ufeq *UserFollowEventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ufeq.ctx, "Count")
	if err := ufeq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ufeq, querierCount[*UserFollowEventQuery](), ufeq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ufeq *UserFollowEventQuery) CountX(ctx context.Context) int {
	count, err := ufeq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ufeq *UserFollowEventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ufeq.ctx, "Exist")
	switch _, err := ufeq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ufeq *UserFollowEventQuery) ExistX(ctx context.Context) bool {
	exist, err := ufeq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserFollowEventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ufeq *UserFollowEventQuery) Clone() *UserFollowEventQuery {
	if ufeq == nil {
		return nil
	}
	return &UserFollowEventQuery{
		config:     ufeq.config,
		ctx:        ufeq.ctx.Clone(),
		order:      append([]userfollowevent.OrderOption{}, ufeq.order...),
		inters:     append([]Interceptor{}, ufeq.inters...),
		predicates: append([]predicate.UserFollowEvent{}, ufeq.predicates...),
		withUser:   ufeq.withUser.Clone(),
		withEvent:  ufeq.withEvent.Clone(),
		// clone intermediate query.
		sql:  ufeq.sql.Clone(),
		path: ufeq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ufeq *UserFollowEventQuery) WithUser(opts ...func(*UserQuery)) *UserFollowEventQuery {
	query := (&UserClient{config: ufeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ufeq.withUser = query
	return ufeq
}

// WithEvent tells the query-builder to eager-load the nodes that are connected to
// the "event" edge. The optional arguments are used to configure the query builder of the edge.
func (ufeq *UserFollowEventQuery) WithEvent(opts ...func(*EventQuery)) *UserFollowEventQuery {
	query := (&EventClient{config: ufeq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ufeq.withEvent = query
	return ufeq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserFollowEvent.Query().
//		GroupBy(userfollowevent.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ufeq *UserFollowEventQuery) GroupBy(field string, fields ...string) *UserFollowEventGroupBy {
	ufeq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserFollowEventGroupBy{build: ufeq}
	grbuild.flds = &ufeq.ctx.Fields
	grbuild.label = userfollowevent.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt,omitempty"`
//	}
//
//	client.UserFollowEvent.Query().
//		Select(userfollowevent.FieldCreatedAt).
//		Scan(ctx, &v)
func (ufeq *UserFollowEventQuery) Select(fields ...string) *UserFollowEventSelect {
	ufeq.ctx.Fields = append(ufeq.ctx.Fields, fields...)
	sbuild := &UserFollowEventSelect{UserFollowEventQuery: ufeq}
	sbuild.label = userfollowevent.Label
	sbuild.flds, sbuild.scan = &ufeq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserFollowEventSelect configured with the given aggregations.
func (ufeq *UserFollowEventQuery) Aggregate(fns ...AggregateFunc) *UserFollowEventSelect {
	return ufeq.Select().Aggregate(fns...)
}

func (ufeq *UserFollowEventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ufeq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ufeq); err != nil {
				return err
			}
		}
	}
	for _, f := range ufeq.ctx.Fields {
		if !userfollowevent.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ufeq.path != nil {
		prev, err := ufeq.path(ctx)
		if err != nil {
			return err
		}
		ufeq.sql = prev
	}
	return nil
}

func (ufeq *UserFollowEventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserFollowEvent, error) {
	var (
		nodes       = []*UserFollowEvent{}
		withFKs     = ufeq.withFKs
		_spec       = ufeq.querySpec()
		loadedTypes = [2]bool{
			ufeq.withUser != nil,
			ufeq.withEvent != nil,
		}
	)
	if ufeq.withUser != nil || ufeq.withEvent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, userfollowevent.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserFollowEvent).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserFollowEvent{config: ufeq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ufeq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ufeq.withUser; query != nil {
		if err := ufeq.loadUser(ctx, query, nodes, nil,
			func(n *UserFollowEvent, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ufeq.withEvent; query != nil {
		if err := ufeq.loadEvent(ctx, query, nodes, nil,
			func(n *UserFollowEvent, e *Event) { n.Edges.Event = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ufeq *UserFollowEventQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserFollowEvent, init func(*UserFollowEvent), assign func(*UserFollowEvent, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*UserFollowEvent)
	for i := range nodes {
		if nodes[i].user_user_follow_events == nil {
			continue
		}
		fk := *nodes[i].user_user_follow_events
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_user_follow_events" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ufeq *UserFollowEventQuery) loadEvent(ctx context.Context, query *EventQuery, nodes []*UserFollowEvent, init func(*UserFollowEvent), assign func(*UserFollowEvent, *Event)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*UserFollowEvent)
	for i := range nodes {
		if nodes[i].user_follow_event_event == nil {
			continue
		}
		fk := *nodes[i].user_follow_event_event
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(event.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_follow_event_event" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ufeq *UserFollowEventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ufeq.querySpec()
	_spec.Node.Columns = ufeq.ctx.Fields
	if len(ufeq.ctx.Fields) > 0 {
		_spec.Unique = ufeq.ctx.Unique != nil && *ufeq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ufeq.driver, _spec)
}

func (ufeq *UserFollowEventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userfollowevent.Table, userfollowevent.Columns, sqlgraph.NewFieldSpec(userfollowevent.FieldID, field.TypeString))
	_spec.From = ufeq.sql
	if unique := ufeq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ufeq.path != nil {
		_spec.Unique = true
	}
	if fields := ufeq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfollowevent.FieldID)
		for i := range fields {
			if fields[i] != userfollowevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ufeq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ufeq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ufeq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ufeq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ufeq *UserFollowEventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ufeq.driver.Dialect())
	t1 := builder.Table(userfollowevent.Table)
	columns := ufeq.ctx.Fields
	if len(columns) == 0 {
		columns = userfollowevent.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ufeq.sql != nil {
		selector = ufeq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ufeq.ctx.Unique != nil && *ufeq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ufeq.predicates {
		p(selector)
	}
	for _, p := range ufeq.order {
		p(selector)
	}
	if offset := ufeq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We cmd
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ufeq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserFollowEventGroupBy is the group-by builder for UserFollowEvent entities.
type UserFollowEventGroupBy struct {
	selector
	build *UserFollowEventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ufegb *UserFollowEventGroupBy) Aggregate(fns ...AggregateFunc) *UserFollowEventGroupBy {
	ufegb.fns = append(ufegb.fns, fns...)
	return ufegb
}

// Scan applies the selector query and scans the result into the given value.
func (ufegb *UserFollowEventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ufegb.build.ctx, "GroupBy")
	if err := ufegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserFollowEventQuery, *UserFollowEventGroupBy](ctx, ufegb.build, ufegb, ufegb.build.inters, v)
}

func (ufegb *UserFollowEventGroupBy) sqlScan(ctx context.Context, root *UserFollowEventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ufegb.fns))
	for _, fn := range ufegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ufegb.flds)+len(ufegb.fns))
		for _, f := range *ufegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ufegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ufegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserFollowEventSelect is the builder for selecting fields of UserFollowEvent entities.
type UserFollowEventSelect struct {
	*UserFollowEventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ufes *UserFollowEventSelect) Aggregate(fns ...AggregateFunc) *UserFollowEventSelect {
	ufes.fns = append(ufes.fns, fns...)
	return ufes
}

// Scan applies the selector query and scans the result into the given value.
func (ufes *UserFollowEventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ufes.ctx, "Select")
	if err := ufes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserFollowEventQuery, *UserFollowEventSelect](ctx, ufes.UserFollowEventQuery, ufes, ufes.inters, v)
}

func (ufes *UserFollowEventSelect) sqlScan(ctx context.Context, root *UserFollowEventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ufes.fns))
	for _, fn := range ufes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ufes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ufes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

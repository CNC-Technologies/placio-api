// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/event"
	"placio-app/ent/ticket"
	"placio-app/ent/ticketoption"
	"placio-app/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TicketCode holds the value of the "ticketCode" field.
	TicketCode string `json:"ticketCode,omitempty"`
	// Status holds the value of the "status" field.
	Status ticket.Status `json:"status,omitempty"`
	// PurchaseTime holds the value of the "purchaseTime" field.
	PurchaseTime time.Time `json:"purchaseTime,omitempty"`
	// ValidationTime holds the value of the "validationTime" field.
	ValidationTime time.Time `json:"validationTime,omitempty"`
	// PurchaserEmail holds the value of the "purchaserEmail" field.
	PurchaserEmail string `json:"purchaserEmail,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges                  TicketEdges `json:"edges"`
	event_tickets          *string
	ticket_option_tickets  *string
	user_purchased_tickets *string
	selectValues           sql.SelectValues
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// TicketOption holds the value of the ticketOption edge.
	TicketOption *TicketOption `json:"ticketOption,omitempty"`
	// Purchaser holds the value of the purchaser edge.
	Purchaser *User `json:"purchaser,omitempty"`
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TicketOptionOrErr returns the TicketOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) TicketOptionOrErr() (*TicketOption, error) {
	if e.loadedTypes[0] {
		if e.TicketOption == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ticketoption.Label}
		}
		return e.TicketOption, nil
	}
	return nil, &NotLoadedError{edge: "ticketOption"}
}

// PurchaserOrErr returns the Purchaser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) PurchaserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Purchaser == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Purchaser, nil
	}
	return nil, &NotLoadedError{edge: "purchaser"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[2] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID, ticket.FieldTicketCode, ticket.FieldStatus, ticket.FieldPurchaserEmail:
			values[i] = new(sql.NullString)
		case ticket.FieldPurchaseTime, ticket.FieldValidationTime, ticket.FieldCreatedAt, ticket.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case ticket.ForeignKeys[0]: // event_tickets
			values[i] = new(sql.NullString)
		case ticket.ForeignKeys[1]: // ticket_option_tickets
			values[i] = new(sql.NullString)
		case ticket.ForeignKeys[2]: // user_purchased_tickets
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case ticket.FieldTicketCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticketCode", values[i])
			} else if value.Valid {
				t.TicketCode = value.String
			}
		case ticket.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = ticket.Status(value.String)
			}
		case ticket.FieldPurchaseTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field purchaseTime", values[i])
			} else if value.Valid {
				t.PurchaseTime = value.Time
			}
		case ticket.FieldValidationTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field validationTime", values[i])
			} else if value.Valid {
				t.ValidationTime = value.Time
			}
		case ticket.FieldPurchaserEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field purchaserEmail", values[i])
			} else if value.Valid {
				t.PurchaserEmail = value.String
			}
		case ticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case ticket.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case ticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_tickets", values[i])
			} else if value.Valid {
				t.event_tickets = new(string)
				*t.event_tickets = value.String
			}
		case ticket.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_option_tickets", values[i])
			} else if value.Valid {
				t.ticket_option_tickets = new(string)
				*t.ticket_option_tickets = value.String
			}
		case ticket.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_purchased_tickets", values[i])
			} else if value.Valid {
				t.user_purchased_tickets = new(string)
				*t.user_purchased_tickets = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTicketOption queries the "ticketOption" edge of the Ticket entity.
func (t *Ticket) QueryTicketOption() *TicketOptionQuery {
	return NewTicketClient(t.config).QueryTicketOption(t)
}

// QueryPurchaser queries the "purchaser" edge of the Ticket entity.
func (t *Ticket) QueryPurchaser() *UserQuery {
	return NewTicketClient(t.config).QueryPurchaser(t)
}

// QueryEvent queries the "event" edge of the Ticket entity.
func (t *Ticket) QueryEvent() *EventQuery {
	return NewTicketClient(t.config).QueryEvent(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("ticketCode=")
	builder.WriteString(t.TicketCode)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("purchaseTime=")
	builder.WriteString(t.PurchaseTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("validationTime=")
	builder.WriteString(t.ValidationTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("purchaserEmail=")
	builder.WriteString(t.PurchaserEmail)
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio_api/accountsettings"
	"placio_api/business"
	"placio_api/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// AccountSettingsUpdate is the builder for updating AccountSettings entities.
type AccountSettingsUpdate struct {
	config
	hooks    []Hook
	mutation *AccountSettingsMutation
}

// Where appends a list predicates to the AccountSettingsUpdate builder.
func (asu *AccountSettingsUpdate) Where(ps ...predicate.AccountSettings) *AccountSettingsUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetTwoFactorAuthentication sets the "TwoFactorAuthentication" field.
func (asu *AccountSettingsUpdate) SetTwoFactorAuthentication(b bool) *AccountSettingsUpdate {
	asu.mutation.SetTwoFactorAuthentication(b)
	return asu
}

// SetBlockedUsers sets the "BlockedUsers" field.
func (asu *AccountSettingsUpdate) SetBlockedUsers(s []string) *AccountSettingsUpdate {
	asu.mutation.SetBlockedUsers(s)
	return asu
}

// AppendBlockedUsers appends s to the "BlockedUsers" field.
func (asu *AccountSettingsUpdate) AppendBlockedUsers(s []string) *AccountSettingsUpdate {
	asu.mutation.AppendBlockedUsers(s)
	return asu
}

// SetMutedUsers sets the "MutedUsers" field.
func (asu *AccountSettingsUpdate) SetMutedUsers(s []string) *AccountSettingsUpdate {
	asu.mutation.SetMutedUsers(s)
	return asu
}

// AppendMutedUsers appends s to the "MutedUsers" field.
func (asu *AccountSettingsUpdate) AppendMutedUsers(s []string) *AccountSettingsUpdate {
	asu.mutation.AppendMutedUsers(s)
	return asu
}

// SetBusinessAccountID sets the "business_account" edge to the Business entity by ID.
func (asu *AccountSettingsUpdate) SetBusinessAccountID(id string) *AccountSettingsUpdate {
	asu.mutation.SetBusinessAccountID(id)
	return asu
}

// SetBusinessAccount sets the "business_account" edge to the Business entity.
func (asu *AccountSettingsUpdate) SetBusinessAccount(b *Business) *AccountSettingsUpdate {
	return asu.SetBusinessAccountID(b.ID)
}

// Mutation returns the AccountSettingsMutation object of the builder.
func (asu *AccountSettingsUpdate) Mutation() *AccountSettingsMutation {
	return asu.mutation
}

// ClearBusinessAccount clears the "business_account" edge to the Business entity.
func (asu *AccountSettingsUpdate) ClearBusinessAccount() *AccountSettingsUpdate {
	asu.mutation.ClearBusinessAccount()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AccountSettingsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AccountSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AccountSettingsUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AccountSettingsUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AccountSettingsUpdate) check() error {
	if _, ok := asu.mutation.BusinessAccountID(); asu.mutation.BusinessAccountCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "AccountSettings.business_account"`)
	}
	return nil
}

func (asu *AccountSettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountsettings.Table, accountsettings.Columns, sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeString))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.TwoFactorAuthentication(); ok {
		_spec.SetField(accountsettings.FieldTwoFactorAuthentication, field.TypeBool, value)
	}
	if value, ok := asu.mutation.BlockedUsers(); ok {
		_spec.SetField(accountsettings.FieldBlockedUsers, field.TypeJSON, value)
	}
	if value, ok := asu.mutation.AppendedBlockedUsers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountsettings.FieldBlockedUsers, value)
		})
	}
	if value, ok := asu.mutation.MutedUsers(); ok {
		_spec.SetField(accountsettings.FieldMutedUsers, field.TypeJSON, value)
	}
	if value, ok := asu.mutation.AppendedMutedUsers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountsettings.FieldMutedUsers, value)
		})
	}
	if asu.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountsettings.BusinessAccountTable,
			Columns: []string{accountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountsettings.BusinessAccountTable,
			Columns: []string{accountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AccountSettingsUpdateOne is the builder for updating a single AccountSettings entity.
type AccountSettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountSettingsMutation
}

// SetTwoFactorAuthentication sets the "TwoFactorAuthentication" field.
func (asuo *AccountSettingsUpdateOne) SetTwoFactorAuthentication(b bool) *AccountSettingsUpdateOne {
	asuo.mutation.SetTwoFactorAuthentication(b)
	return asuo
}

// SetBlockedUsers sets the "BlockedUsers" field.
func (asuo *AccountSettingsUpdateOne) SetBlockedUsers(s []string) *AccountSettingsUpdateOne {
	asuo.mutation.SetBlockedUsers(s)
	return asuo
}

// AppendBlockedUsers appends s to the "BlockedUsers" field.
func (asuo *AccountSettingsUpdateOne) AppendBlockedUsers(s []string) *AccountSettingsUpdateOne {
	asuo.mutation.AppendBlockedUsers(s)
	return asuo
}

// SetMutedUsers sets the "MutedUsers" field.
func (asuo *AccountSettingsUpdateOne) SetMutedUsers(s []string) *AccountSettingsUpdateOne {
	asuo.mutation.SetMutedUsers(s)
	return asuo
}

// AppendMutedUsers appends s to the "MutedUsers" field.
func (asuo *AccountSettingsUpdateOne) AppendMutedUsers(s []string) *AccountSettingsUpdateOne {
	asuo.mutation.AppendMutedUsers(s)
	return asuo
}

// SetBusinessAccountID sets the "business_account" edge to the Business entity by ID.
func (asuo *AccountSettingsUpdateOne) SetBusinessAccountID(id string) *AccountSettingsUpdateOne {
	asuo.mutation.SetBusinessAccountID(id)
	return asuo
}

// SetBusinessAccount sets the "business_account" edge to the Business entity.
func (asuo *AccountSettingsUpdateOne) SetBusinessAccount(b *Business) *AccountSettingsUpdateOne {
	return asuo.SetBusinessAccountID(b.ID)
}

// Mutation returns the AccountSettingsMutation object of the builder.
func (asuo *AccountSettingsUpdateOne) Mutation() *AccountSettingsMutation {
	return asuo.mutation
}

// ClearBusinessAccount clears the "business_account" edge to the Business entity.
func (asuo *AccountSettingsUpdateOne) ClearBusinessAccount() *AccountSettingsUpdateOne {
	asuo.mutation.ClearBusinessAccount()
	return asuo
}

// Where appends a list predicates to the AccountSettingsUpdate builder.
func (asuo *AccountSettingsUpdateOne) Where(ps ...predicate.AccountSettings) *AccountSettingsUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AccountSettingsUpdateOne) Select(field string, fields ...string) *AccountSettingsUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AccountSettings entity.
func (asuo *AccountSettingsUpdateOne) Save(ctx context.Context) (*AccountSettings, error) {
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AccountSettingsUpdateOne) SaveX(ctx context.Context) *AccountSettings {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AccountSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AccountSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AccountSettingsUpdateOne) check() error {
	if _, ok := asuo.mutation.BusinessAccountID(); asuo.mutation.BusinessAccountCleared() && !ok {
		return errors.New(`placio_api: clearing a required unique edge "AccountSettings.business_account"`)
	}
	return nil
}

func (asuo *AccountSettingsUpdateOne) sqlSave(ctx context.Context) (_node *AccountSettings, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accountsettings.Table, accountsettings.Columns, sqlgraph.NewFieldSpec(accountsettings.FieldID, field.TypeString))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`placio_api: missing "AccountSettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountsettings.FieldID)
		for _, f := range fields {
			if !accountsettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("placio_api: invalid field %q for query", f)}
			}
			if f != accountsettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.TwoFactorAuthentication(); ok {
		_spec.SetField(accountsettings.FieldTwoFactorAuthentication, field.TypeBool, value)
	}
	if value, ok := asuo.mutation.BlockedUsers(); ok {
		_spec.SetField(accountsettings.FieldBlockedUsers, field.TypeJSON, value)
	}
	if value, ok := asuo.mutation.AppendedBlockedUsers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountsettings.FieldBlockedUsers, value)
		})
	}
	if value, ok := asuo.mutation.MutedUsers(); ok {
		_spec.SetField(accountsettings.FieldMutedUsers, field.TypeJSON, value)
	}
	if value, ok := asuo.mutation.AppendedMutedUsers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, accountsettings.FieldMutedUsers, value)
		})
	}
	if asuo.mutation.BusinessAccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountsettings.BusinessAccountTable,
			Columns: []string{accountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.BusinessAccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   accountsettings.BusinessAccountTable,
			Columns: []string{accountsettings.BusinessAccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountSettings{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}

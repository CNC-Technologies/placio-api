



// Code generated by ent, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)


import (
	 "placio-app/ent/businessfollowbusiness"
)





// BusinessFollowBusinessDelete is the builder for deleting a BusinessFollowBusiness entity.
type BusinessFollowBusinessDelete struct {
	config
	hooks      []Hook
	mutation   *BusinessFollowBusinessMutation
}

// Where appends a list predicates to the BusinessFollowBusinessDelete builder.
func (bfbd *BusinessFollowBusinessDelete) Where(ps ...predicate.BusinessFollowBusiness) *BusinessFollowBusinessDelete {
	bfbd.mutation.Where(ps...)
	return bfbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bfbd *BusinessFollowBusinessDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bfbd.sqlExec, bfbd.mutation, bfbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bfbd *BusinessFollowBusinessDelete) ExecX(ctx context.Context) int {
	n, err := bfbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}


	
	




func (bfbd *BusinessFollowBusinessDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(businessfollowbusiness.Table, sqlgraph.NewFieldSpec(businessfollowbusiness.FieldID, field.TypeString))
	if ps := bfbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bfbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bfbd.mutation.done = true
	return affected, err
}







// BusinessFollowBusinessDeleteOne is the builder for deleting a single BusinessFollowBusiness entity.
type BusinessFollowBusinessDeleteOne struct {
	bfbd *BusinessFollowBusinessDelete
}

// Where appends a list predicates to the BusinessFollowBusinessDelete builder.
func (bfbdo *BusinessFollowBusinessDeleteOne) Where(ps ...predicate.BusinessFollowBusiness) *BusinessFollowBusinessDeleteOne {
	bfbdo.bfbd.mutation.Where(ps...)
	return bfbdo
}

// Exec executes the deletion query.
func (bfbdo *BusinessFollowBusinessDeleteOne) Exec(ctx context.Context) error {
	n, err := bfbdo.bfbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ businessfollowbusiness.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bfbdo *BusinessFollowBusinessDeleteOne) ExecX(ctx context.Context) {
	if err := bfbdo.Exec(ctx); err != nil {
		panic(err)
	}
}


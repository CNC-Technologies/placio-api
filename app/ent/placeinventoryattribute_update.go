// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/inventoryattribute"
	"placio-app/ent/placeinventory"
	"placio-app/ent/placeinventoryattribute"
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlaceInventoryAttributeUpdate is the builder for updating PlaceInventoryAttribute entities.
type PlaceInventoryAttributeUpdate struct {
	config
	hooks    []Hook
	mutation *PlaceInventoryAttributeMutation
}

// Where appends a list predicates to the PlaceInventoryAttributeUpdate builder.
func (piau *PlaceInventoryAttributeUpdate) Where(ps ...predicate.PlaceInventoryAttribute) *PlaceInventoryAttributeUpdate {
	piau.mutation.Where(ps...)
	return piau
}

// SetValue sets the "value" field.
func (piau *PlaceInventoryAttributeUpdate) SetValue(s string) *PlaceInventoryAttributeUpdate {
	piau.mutation.SetValue(s)
	return piau
}

// SetCategorySpecificValue sets the "category_specific_value" field.
func (piau *PlaceInventoryAttributeUpdate) SetCategorySpecificValue(m map[string]interface{}) *PlaceInventoryAttributeUpdate {
	piau.mutation.SetCategorySpecificValue(m)
	return piau
}

// ClearCategorySpecificValue clears the value of the "category_specific_value" field.
func (piau *PlaceInventoryAttributeUpdate) ClearCategorySpecificValue() *PlaceInventoryAttributeUpdate {
	piau.mutation.ClearCategorySpecificValue()
	return piau
}

// SetInventoryID sets the "inventory" edge to the PlaceInventory entity by ID.
func (piau *PlaceInventoryAttributeUpdate) SetInventoryID(id string) *PlaceInventoryAttributeUpdate {
	piau.mutation.SetInventoryID(id)
	return piau
}

// SetNillableInventoryID sets the "inventory" edge to the PlaceInventory entity by ID if the given value is not nil.
func (piau *PlaceInventoryAttributeUpdate) SetNillableInventoryID(id *string) *PlaceInventoryAttributeUpdate {
	if id != nil {
		piau = piau.SetInventoryID(*id)
	}
	return piau
}

// SetInventory sets the "inventory" edge to the PlaceInventory entity.
func (piau *PlaceInventoryAttributeUpdate) SetInventory(p *PlaceInventory) *PlaceInventoryAttributeUpdate {
	return piau.SetInventoryID(p.ID)
}

// SetAttributeTypeID sets the "attribute_type" edge to the InventoryAttribute entity by ID.
func (piau *PlaceInventoryAttributeUpdate) SetAttributeTypeID(id string) *PlaceInventoryAttributeUpdate {
	piau.mutation.SetAttributeTypeID(id)
	return piau
}

// SetNillableAttributeTypeID sets the "attribute_type" edge to the InventoryAttribute entity by ID if the given value is not nil.
func (piau *PlaceInventoryAttributeUpdate) SetNillableAttributeTypeID(id *string) *PlaceInventoryAttributeUpdate {
	if id != nil {
		piau = piau.SetAttributeTypeID(*id)
	}
	return piau
}

// SetAttributeType sets the "attribute_type" edge to the InventoryAttribute entity.
func (piau *PlaceInventoryAttributeUpdate) SetAttributeType(i *InventoryAttribute) *PlaceInventoryAttributeUpdate {
	return piau.SetAttributeTypeID(i.ID)
}

// Mutation returns the PlaceInventoryAttributeMutation object of the builder.
func (piau *PlaceInventoryAttributeUpdate) Mutation() *PlaceInventoryAttributeMutation {
	return piau.mutation
}

// ClearInventory clears the "inventory" edge to the PlaceInventory entity.
func (piau *PlaceInventoryAttributeUpdate) ClearInventory() *PlaceInventoryAttributeUpdate {
	piau.mutation.ClearInventory()
	return piau
}

// ClearAttributeType clears the "attribute_type" edge to the InventoryAttribute entity.
func (piau *PlaceInventoryAttributeUpdate) ClearAttributeType() *PlaceInventoryAttributeUpdate {
	piau.mutation.ClearAttributeType()
	return piau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piau *PlaceInventoryAttributeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piau.sqlSave, piau.mutation, piau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piau *PlaceInventoryAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := piau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piau *PlaceInventoryAttributeUpdate) Exec(ctx context.Context) error {
	_, err := piau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piau *PlaceInventoryAttributeUpdate) ExecX(ctx context.Context) {
	if err := piau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piau *PlaceInventoryAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(placeinventoryattribute.Table, placeinventoryattribute.Columns, sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString))
	if ps := piau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piau.mutation.Value(); ok {
		_spec.SetField(placeinventoryattribute.FieldValue, field.TypeString, value)
	}
	if value, ok := piau.mutation.CategorySpecificValue(); ok {
		_spec.SetField(placeinventoryattribute.FieldCategorySpecificValue, field.TypeJSON, value)
	}
	if piau.mutation.CategorySpecificValueCleared() {
		_spec.ClearField(placeinventoryattribute.FieldCategorySpecificValue, field.TypeJSON)
	}
	if piau.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventoryattribute.InventoryTable,
			Columns: []string{placeinventoryattribute.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piau.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventoryattribute.InventoryTable,
			Columns: []string{placeinventoryattribute.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piau.mutation.AttributeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventoryattribute.AttributeTypeTable,
			Columns: []string{placeinventoryattribute.AttributeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryattribute.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piau.mutation.AttributeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventoryattribute.AttributeTypeTable,
			Columns: []string{placeinventoryattribute.AttributeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{placeinventoryattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piau.mutation.done = true
	return n, nil
}

// PlaceInventoryAttributeUpdateOne is the builder for updating a single PlaceInventoryAttribute entity.
type PlaceInventoryAttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaceInventoryAttributeMutation
}

// SetValue sets the "value" field.
func (piauo *PlaceInventoryAttributeUpdateOne) SetValue(s string) *PlaceInventoryAttributeUpdateOne {
	piauo.mutation.SetValue(s)
	return piauo
}

// SetCategorySpecificValue sets the "category_specific_value" field.
func (piauo *PlaceInventoryAttributeUpdateOne) SetCategorySpecificValue(m map[string]interface{}) *PlaceInventoryAttributeUpdateOne {
	piauo.mutation.SetCategorySpecificValue(m)
	return piauo
}

// ClearCategorySpecificValue clears the value of the "category_specific_value" field.
func (piauo *PlaceInventoryAttributeUpdateOne) ClearCategorySpecificValue() *PlaceInventoryAttributeUpdateOne {
	piauo.mutation.ClearCategorySpecificValue()
	return piauo
}

// SetInventoryID sets the "inventory" edge to the PlaceInventory entity by ID.
func (piauo *PlaceInventoryAttributeUpdateOne) SetInventoryID(id string) *PlaceInventoryAttributeUpdateOne {
	piauo.mutation.SetInventoryID(id)
	return piauo
}

// SetNillableInventoryID sets the "inventory" edge to the PlaceInventory entity by ID if the given value is not nil.
func (piauo *PlaceInventoryAttributeUpdateOne) SetNillableInventoryID(id *string) *PlaceInventoryAttributeUpdateOne {
	if id != nil {
		piauo = piauo.SetInventoryID(*id)
	}
	return piauo
}

// SetInventory sets the "inventory" edge to the PlaceInventory entity.
func (piauo *PlaceInventoryAttributeUpdateOne) SetInventory(p *PlaceInventory) *PlaceInventoryAttributeUpdateOne {
	return piauo.SetInventoryID(p.ID)
}

// SetAttributeTypeID sets the "attribute_type" edge to the InventoryAttribute entity by ID.
func (piauo *PlaceInventoryAttributeUpdateOne) SetAttributeTypeID(id string) *PlaceInventoryAttributeUpdateOne {
	piauo.mutation.SetAttributeTypeID(id)
	return piauo
}

// SetNillableAttributeTypeID sets the "attribute_type" edge to the InventoryAttribute entity by ID if the given value is not nil.
func (piauo *PlaceInventoryAttributeUpdateOne) SetNillableAttributeTypeID(id *string) *PlaceInventoryAttributeUpdateOne {
	if id != nil {
		piauo = piauo.SetAttributeTypeID(*id)
	}
	return piauo
}

// SetAttributeType sets the "attribute_type" edge to the InventoryAttribute entity.
func (piauo *PlaceInventoryAttributeUpdateOne) SetAttributeType(i *InventoryAttribute) *PlaceInventoryAttributeUpdateOne {
	return piauo.SetAttributeTypeID(i.ID)
}

// Mutation returns the PlaceInventoryAttributeMutation object of the builder.
func (piauo *PlaceInventoryAttributeUpdateOne) Mutation() *PlaceInventoryAttributeMutation {
	return piauo.mutation
}

// ClearInventory clears the "inventory" edge to the PlaceInventory entity.
func (piauo *PlaceInventoryAttributeUpdateOne) ClearInventory() *PlaceInventoryAttributeUpdateOne {
	piauo.mutation.ClearInventory()
	return piauo
}

// ClearAttributeType clears the "attribute_type" edge to the InventoryAttribute entity.
func (piauo *PlaceInventoryAttributeUpdateOne) ClearAttributeType() *PlaceInventoryAttributeUpdateOne {
	piauo.mutation.ClearAttributeType()
	return piauo
}

// Where appends a list predicates to the PlaceInventoryAttributeUpdate builder.
func (piauo *PlaceInventoryAttributeUpdateOne) Where(ps ...predicate.PlaceInventoryAttribute) *PlaceInventoryAttributeUpdateOne {
	piauo.mutation.Where(ps...)
	return piauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piauo *PlaceInventoryAttributeUpdateOne) Select(field string, fields ...string) *PlaceInventoryAttributeUpdateOne {
	piauo.fields = append([]string{field}, fields...)
	return piauo
}

// Save executes the query and returns the updated PlaceInventoryAttribute entity.
func (piauo *PlaceInventoryAttributeUpdateOne) Save(ctx context.Context) (*PlaceInventoryAttribute, error) {
	return withHooks(ctx, piauo.sqlSave, piauo.mutation, piauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piauo *PlaceInventoryAttributeUpdateOne) SaveX(ctx context.Context) *PlaceInventoryAttribute {
	node, err := piauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piauo *PlaceInventoryAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := piauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piauo *PlaceInventoryAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := piauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piauo *PlaceInventoryAttributeUpdateOne) sqlSave(ctx context.Context) (_node *PlaceInventoryAttribute, err error) {
	_spec := sqlgraph.NewUpdateSpec(placeinventoryattribute.Table, placeinventoryattribute.Columns, sqlgraph.NewFieldSpec(placeinventoryattribute.FieldID, field.TypeString))
	id, ok := piauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaceInventoryAttribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, placeinventoryattribute.FieldID)
		for _, f := range fields {
			if !placeinventoryattribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != placeinventoryattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piauo.mutation.Value(); ok {
		_spec.SetField(placeinventoryattribute.FieldValue, field.TypeString, value)
	}
	if value, ok := piauo.mutation.CategorySpecificValue(); ok {
		_spec.SetField(placeinventoryattribute.FieldCategorySpecificValue, field.TypeJSON, value)
	}
	if piauo.mutation.CategorySpecificValueCleared() {
		_spec.ClearField(placeinventoryattribute.FieldCategorySpecificValue, field.TypeJSON)
	}
	if piauo.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventoryattribute.InventoryTable,
			Columns: []string{placeinventoryattribute.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piauo.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventoryattribute.InventoryTable,
			Columns: []string{placeinventoryattribute.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piauo.mutation.AttributeTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventoryattribute.AttributeTypeTable,
			Columns: []string{placeinventoryattribute.AttributeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryattribute.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piauo.mutation.AttributeTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   placeinventoryattribute.AttributeTypeTable,
			Columns: []string{placeinventoryattribute.AttributeTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventoryattribute.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaceInventoryAttribute{config: piauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{placeinventoryattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piauo.mutation.done = true
	return _node, nil
}

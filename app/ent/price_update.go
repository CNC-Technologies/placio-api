// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/plan"
	"placio-app/ent/predicate"
	"placio-app/ent/price"
	"placio-app/ent/subscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PriceUpdate is the builder for updating Price entities.
type PriceUpdate struct {
	config
	hooks    []Hook
	mutation *PriceMutation
}

// Where appends a list predicates to the PriceUpdate builder.
func (pu *PriceUpdate) Where(ps ...predicate.Price) *PriceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPrice sets the "price" field.
func (pu *PriceUpdate) SetPrice(f float64) *PriceUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *PriceUpdate) SetNillablePrice(f *float64) *PriceUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *PriceUpdate) AddPrice(f float64) *PriceUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetCurrency sets the "currency" field.
func (pu *PriceUpdate) SetCurrency(s string) *PriceUpdate {
	pu.mutation.SetCurrency(s)
	return pu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableCurrency(s *string) *PriceUpdate {
	if s != nil {
		pu.SetCurrency(*s)
	}
	return pu
}

// ClearCurrency clears the value of the "currency" field.
func (pu *PriceUpdate) ClearCurrency() *PriceUpdate {
	pu.mutation.ClearCurrency()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PriceUpdate) SetDescription(s string) *PriceUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableDescription(s *string) *PriceUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PriceUpdate) ClearDescription() *PriceUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetType sets the "type" field.
func (pu *PriceUpdate) SetType(pr price.Type) *PriceUpdate {
	pu.mutation.SetType(pr)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableType(pr *price.Type) *PriceUpdate {
	if pr != nil {
		pu.SetType(*pr)
	}
	return pu
}

// SetDuration sets the "duration" field.
func (pu *PriceUpdate) SetDuration(i int) *PriceUpdate {
	pu.mutation.ResetDuration()
	pu.mutation.SetDuration(i)
	return pu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableDuration(i *int) *PriceUpdate {
	if i != nil {
		pu.SetDuration(*i)
	}
	return pu
}

// AddDuration adds i to the "duration" field.
func (pu *PriceUpdate) AddDuration(i int) *PriceUpdate {
	pu.mutation.AddDuration(i)
	return pu
}

// ClearDuration clears the value of the "duration" field.
func (pu *PriceUpdate) ClearDuration() *PriceUpdate {
	pu.mutation.ClearDuration()
	return pu
}

// SetSession sets the "session" field.
func (pu *PriceUpdate) SetSession(i int) *PriceUpdate {
	pu.mutation.ResetSession()
	pu.mutation.SetSession(i)
	return pu
}

// SetNillableSession sets the "session" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableSession(i *int) *PriceUpdate {
	if i != nil {
		pu.SetSession(*i)
	}
	return pu
}

// AddSession adds i to the "session" field.
func (pu *PriceUpdate) AddSession(i int) *PriceUpdate {
	pu.mutation.AddSession(i)
	return pu
}

// ClearSession clears the value of the "session" field.
func (pu *PriceUpdate) ClearSession() *PriceUpdate {
	pu.mutation.ClearSession()
	return pu
}

// SetPlanID sets the "plan" edge to the Plan entity by ID.
func (pu *PriceUpdate) SetPlanID(id string) *PriceUpdate {
	pu.mutation.SetPlanID(id)
	return pu
}

// SetNillablePlanID sets the "plan" edge to the Plan entity by ID if the given value is not nil.
func (pu *PriceUpdate) SetNillablePlanID(id *string) *PriceUpdate {
	if id != nil {
		pu = pu.SetPlanID(*id)
	}
	return pu
}

// SetPlan sets the "plan" edge to the Plan entity.
func (pu *PriceUpdate) SetPlan(p *Plan) *PriceUpdate {
	return pu.SetPlanID(p.ID)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (pu *PriceUpdate) AddSubscriptionIDs(ids ...string) *PriceUpdate {
	pu.mutation.AddSubscriptionIDs(ids...)
	return pu
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (pu *PriceUpdate) AddSubscriptions(s ...*Subscription) *PriceUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSubscriptionIDs(ids...)
}

// Mutation returns the PriceMutation object of the builder.
func (pu *PriceUpdate) Mutation() *PriceMutation {
	return pu.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (pu *PriceUpdate) ClearPlan() *PriceUpdate {
	pu.mutation.ClearPlan()
	return pu
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (pu *PriceUpdate) ClearSubscriptions() *PriceUpdate {
	pu.mutation.ClearSubscriptions()
	return pu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (pu *PriceUpdate) RemoveSubscriptionIDs(ids ...string) *PriceUpdate {
	pu.mutation.RemoveSubscriptionIDs(ids...)
	return pu
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (pu *PriceUpdate) RemoveSubscriptions(s ...*Subscription) *PriceUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PriceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PriceUpdate) check() error {
	if v, ok := pu.mutation.GetType(); ok {
		if err := price.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Price.type": %w`, err)}
		}
	}
	return nil
}

func (pu *PriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(price.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(price.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Currency(); ok {
		_spec.SetField(price.FieldCurrency, field.TypeString, value)
	}
	if pu.mutation.CurrencyCleared() {
		_spec.ClearField(price.FieldCurrency, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(price.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(price.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(price.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Duration(); ok {
		_spec.SetField(price.FieldDuration, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDuration(); ok {
		_spec.AddField(price.FieldDuration, field.TypeInt, value)
	}
	if pu.mutation.DurationCleared() {
		_spec.ClearField(price.FieldDuration, field.TypeInt)
	}
	if value, ok := pu.mutation.Session(); ok {
		_spec.SetField(price.FieldSession, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSession(); ok {
		_spec.AddField(price.FieldSession, field.TypeInt, value)
	}
	if pu.mutation.SessionCleared() {
		_spec.ClearField(price.FieldSession, field.TypeInt)
	}
	if pu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlanTable,
			Columns: []string{price.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlanTable,
			Columns: []string{price.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.SubscriptionsTable,
			Columns: []string{price.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !pu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.SubscriptionsTable,
			Columns: []string{price.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.SubscriptionsTable,
			Columns: []string{price.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PriceUpdateOne is the builder for updating a single Price entity.
type PriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceMutation
}

// SetPrice sets the "price" field.
func (puo *PriceUpdateOne) SetPrice(f float64) *PriceUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillablePrice(f *float64) *PriceUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *PriceUpdateOne) AddPrice(f float64) *PriceUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetCurrency sets the "currency" field.
func (puo *PriceUpdateOne) SetCurrency(s string) *PriceUpdateOne {
	puo.mutation.SetCurrency(s)
	return puo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableCurrency(s *string) *PriceUpdateOne {
	if s != nil {
		puo.SetCurrency(*s)
	}
	return puo
}

// ClearCurrency clears the value of the "currency" field.
func (puo *PriceUpdateOne) ClearCurrency() *PriceUpdateOne {
	puo.mutation.ClearCurrency()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PriceUpdateOne) SetDescription(s string) *PriceUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableDescription(s *string) *PriceUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PriceUpdateOne) ClearDescription() *PriceUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetType sets the "type" field.
func (puo *PriceUpdateOne) SetType(pr price.Type) *PriceUpdateOne {
	puo.mutation.SetType(pr)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableType(pr *price.Type) *PriceUpdateOne {
	if pr != nil {
		puo.SetType(*pr)
	}
	return puo
}

// SetDuration sets the "duration" field.
func (puo *PriceUpdateOne) SetDuration(i int) *PriceUpdateOne {
	puo.mutation.ResetDuration()
	puo.mutation.SetDuration(i)
	return puo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableDuration(i *int) *PriceUpdateOne {
	if i != nil {
		puo.SetDuration(*i)
	}
	return puo
}

// AddDuration adds i to the "duration" field.
func (puo *PriceUpdateOne) AddDuration(i int) *PriceUpdateOne {
	puo.mutation.AddDuration(i)
	return puo
}

// ClearDuration clears the value of the "duration" field.
func (puo *PriceUpdateOne) ClearDuration() *PriceUpdateOne {
	puo.mutation.ClearDuration()
	return puo
}

// SetSession sets the "session" field.
func (puo *PriceUpdateOne) SetSession(i int) *PriceUpdateOne {
	puo.mutation.ResetSession()
	puo.mutation.SetSession(i)
	return puo
}

// SetNillableSession sets the "session" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableSession(i *int) *PriceUpdateOne {
	if i != nil {
		puo.SetSession(*i)
	}
	return puo
}

// AddSession adds i to the "session" field.
func (puo *PriceUpdateOne) AddSession(i int) *PriceUpdateOne {
	puo.mutation.AddSession(i)
	return puo
}

// ClearSession clears the value of the "session" field.
func (puo *PriceUpdateOne) ClearSession() *PriceUpdateOne {
	puo.mutation.ClearSession()
	return puo
}

// SetPlanID sets the "plan" edge to the Plan entity by ID.
func (puo *PriceUpdateOne) SetPlanID(id string) *PriceUpdateOne {
	puo.mutation.SetPlanID(id)
	return puo
}

// SetNillablePlanID sets the "plan" edge to the Plan entity by ID if the given value is not nil.
func (puo *PriceUpdateOne) SetNillablePlanID(id *string) *PriceUpdateOne {
	if id != nil {
		puo = puo.SetPlanID(*id)
	}
	return puo
}

// SetPlan sets the "plan" edge to the Plan entity.
func (puo *PriceUpdateOne) SetPlan(p *Plan) *PriceUpdateOne {
	return puo.SetPlanID(p.ID)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (puo *PriceUpdateOne) AddSubscriptionIDs(ids ...string) *PriceUpdateOne {
	puo.mutation.AddSubscriptionIDs(ids...)
	return puo
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (puo *PriceUpdateOne) AddSubscriptions(s ...*Subscription) *PriceUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSubscriptionIDs(ids...)
}

// Mutation returns the PriceMutation object of the builder.
func (puo *PriceUpdateOne) Mutation() *PriceMutation {
	return puo.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (puo *PriceUpdateOne) ClearPlan() *PriceUpdateOne {
	puo.mutation.ClearPlan()
	return puo
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (puo *PriceUpdateOne) ClearSubscriptions() *PriceUpdateOne {
	puo.mutation.ClearSubscriptions()
	return puo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (puo *PriceUpdateOne) RemoveSubscriptionIDs(ids ...string) *PriceUpdateOne {
	puo.mutation.RemoveSubscriptionIDs(ids...)
	return puo
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (puo *PriceUpdateOne) RemoveSubscriptions(s ...*Subscription) *PriceUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSubscriptionIDs(ids...)
}

// Where appends a list predicates to the PriceUpdate builder.
func (puo *PriceUpdateOne) Where(ps ...predicate.Price) *PriceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PriceUpdateOne) Select(field string, fields ...string) *PriceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Price entity.
func (puo *PriceUpdateOne) Save(ctx context.Context) (*Price, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriceUpdateOne) SaveX(ctx context.Context) *Price {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PriceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PriceUpdateOne) check() error {
	if v, ok := puo.mutation.GetType(); ok {
		if err := price.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Price.type": %w`, err)}
		}
	}
	return nil
}

func (puo *PriceUpdateOne) sqlSave(ctx context.Context) (_node *Price, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Price.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, price.FieldID)
		for _, f := range fields {
			if !price.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != price.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(price.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(price.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Currency(); ok {
		_spec.SetField(price.FieldCurrency, field.TypeString, value)
	}
	if puo.mutation.CurrencyCleared() {
		_spec.ClearField(price.FieldCurrency, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(price.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(price.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(price.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Duration(); ok {
		_spec.SetField(price.FieldDuration, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDuration(); ok {
		_spec.AddField(price.FieldDuration, field.TypeInt, value)
	}
	if puo.mutation.DurationCleared() {
		_spec.ClearField(price.FieldDuration, field.TypeInt)
	}
	if value, ok := puo.mutation.Session(); ok {
		_spec.SetField(price.FieldSession, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSession(); ok {
		_spec.AddField(price.FieldSession, field.TypeInt, value)
	}
	if puo.mutation.SessionCleared() {
		_spec.ClearField(price.FieldSession, field.TypeInt)
	}
	if puo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlanTable,
			Columns: []string{price.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.PlanTable,
			Columns: []string{price.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.SubscriptionsTable,
			Columns: []string{price.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !puo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.SubscriptionsTable,
			Columns: []string{price.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.SubscriptionsTable,
			Columns: []string{price.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Price{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio_api/user"
	"placio_api/userfollowuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFollowUserCreate is the builder for creating a UserFollowUser entity.
type UserFollowUserCreate struct {
	config
	mutation *UserFollowUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "CreatedAt" field.
func (ufuc *UserFollowUserCreate) SetCreatedAt(t time.Time) *UserFollowUserCreate {
	ufuc.mutation.SetCreatedAt(t)
	return ufuc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (ufuc *UserFollowUserCreate) SetNillableCreatedAt(t *time.Time) *UserFollowUserCreate {
	if t != nil {
		ufuc.SetCreatedAt(*t)
	}
	return ufuc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (ufuc *UserFollowUserCreate) SetUpdatedAt(t time.Time) *UserFollowUserCreate {
	ufuc.mutation.SetUpdatedAt(t)
	return ufuc
}

// SetID sets the "id" field.
func (ufuc *UserFollowUserCreate) SetID(s string) *UserFollowUserCreate {
	ufuc.mutation.SetID(s)
	return ufuc
}

// SetFollowerID sets the "follower" edge to the User entity by ID.
func (ufuc *UserFollowUserCreate) SetFollowerID(id string) *UserFollowUserCreate {
	ufuc.mutation.SetFollowerID(id)
	return ufuc
}

// SetNillableFollowerID sets the "follower" edge to the User entity by ID if the given value is not nil.
func (ufuc *UserFollowUserCreate) SetNillableFollowerID(id *string) *UserFollowUserCreate {
	if id != nil {
		ufuc = ufuc.SetFollowerID(*id)
	}
	return ufuc
}

// SetFollower sets the "follower" edge to the User entity.
func (ufuc *UserFollowUserCreate) SetFollower(u *User) *UserFollowUserCreate {
	return ufuc.SetFollowerID(u.ID)
}

// SetFollowedID sets the "followed" edge to the User entity by ID.
func (ufuc *UserFollowUserCreate) SetFollowedID(id string) *UserFollowUserCreate {
	ufuc.mutation.SetFollowedID(id)
	return ufuc
}

// SetNillableFollowedID sets the "followed" edge to the User entity by ID if the given value is not nil.
func (ufuc *UserFollowUserCreate) SetNillableFollowedID(id *string) *UserFollowUserCreate {
	if id != nil {
		ufuc = ufuc.SetFollowedID(*id)
	}
	return ufuc
}

// SetFollowed sets the "followed" edge to the User entity.
func (ufuc *UserFollowUserCreate) SetFollowed(u *User) *UserFollowUserCreate {
	return ufuc.SetFollowedID(u.ID)
}

// Mutation returns the UserFollowUserMutation object of the builder.
func (ufuc *UserFollowUserCreate) Mutation() *UserFollowUserMutation {
	return ufuc.mutation
}

// Save creates the UserFollowUser in the database.
func (ufuc *UserFollowUserCreate) Save(ctx context.Context) (*UserFollowUser, error) {
	ufuc.defaults()
	return withHooks(ctx, ufuc.sqlSave, ufuc.mutation, ufuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufuc *UserFollowUserCreate) SaveX(ctx context.Context) *UserFollowUser {
	v, err := ufuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufuc *UserFollowUserCreate) Exec(ctx context.Context) error {
	_, err := ufuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuc *UserFollowUserCreate) ExecX(ctx context.Context) {
	if err := ufuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufuc *UserFollowUserCreate) defaults() {
	if _, ok := ufuc.mutation.CreatedAt(); !ok {
		v := userfollowuser.DefaultCreatedAt()
		ufuc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufuc *UserFollowUserCreate) check() error {
	if _, ok := ufuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`placio_api: missing required field "UserFollowUser.CreatedAt"`)}
	}
	if _, ok := ufuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`placio_api: missing required field "UserFollowUser.UpdatedAt"`)}
	}
	if v, ok := ufuc.mutation.ID(); ok {
		if err := userfollowuser.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`placio_api: validator failed for field "UserFollowUser.id": %w`, err)}
		}
	}
	return nil
}

func (ufuc *UserFollowUserCreate) sqlSave(ctx context.Context) (*UserFollowUser, error) {
	if err := ufuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserFollowUser.ID type: %T", _spec.ID.Value)
		}
	}
	ufuc.mutation.id = &_node.ID
	ufuc.mutation.done = true
	return _node, nil
}

func (ufuc *UserFollowUserCreate) createSpec() (*UserFollowUser, *sqlgraph.CreateSpec) {
	var (
		_node = &UserFollowUser{config: ufuc.config}
		_spec = sqlgraph.NewCreateSpec(userfollowuser.Table, sqlgraph.NewFieldSpec(userfollowuser.FieldID, field.TypeString))
	)
	if id, ok := ufuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ufuc.mutation.CreatedAt(); ok {
		_spec.SetField(userfollowuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ufuc.mutation.UpdatedAt(); ok {
		_spec.SetField(userfollowuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ufuc.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowuser.FollowerTable,
			Columns: []string{userfollowuser.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_followed_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ufuc.mutation.FollowedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userfollowuser.FollowedTable,
			Columns: []string{userfollowuser.FollowedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_follower_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserFollowUserCreateBulk is the builder for creating many UserFollowUser entities in bulk.
type UserFollowUserCreateBulk struct {
	config
	err      error
	builders []*UserFollowUserCreate
}

// Save creates the UserFollowUser entities in the database.
func (ufucb *UserFollowUserCreateBulk) Save(ctx context.Context) ([]*UserFollowUser, error) {
	if ufucb.err != nil {
		return nil, ufucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ufucb.builders))
	nodes := make([]*UserFollowUser, len(ufucb.builders))
	mutators := make([]Mutator, len(ufucb.builders))
	for i := range ufucb.builders {
		func(i int, root context.Context) {
			builder := ufucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserFollowUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufucb *UserFollowUserCreateBulk) SaveX(ctx context.Context) []*UserFollowUser {
	v, err := ufucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufucb *UserFollowUserCreateBulk) Exec(ctx context.Context) error {
	_, err := ufucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufucb *UserFollowUserCreateBulk) ExecX(ctx context.Context) {
	if err := ufucb.Exec(ctx); err != nil {
		panic(err)
	}
}

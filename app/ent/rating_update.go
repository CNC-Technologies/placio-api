// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/event"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/rating"
	"placio-app/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RatingUpdate is the builder for updating Rating entities.
type RatingUpdate struct {
	config
	hooks    []Hook
	mutation *RatingMutation
}

// Where appends a list predicates to the RatingUpdate builder.
func (ru *RatingUpdate) Where(ps ...predicate.Rating) *RatingUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetScore sets the "score" field.
func (ru *RatingUpdate) SetScore(i int) *RatingUpdate {
	ru.mutation.ResetScore()
	ru.mutation.SetScore(i)
	return ru
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ru *RatingUpdate) SetNillableScore(i *int) *RatingUpdate {
	if i != nil {
		ru.SetScore(*i)
	}
	return ru
}

// AddScore adds i to the "score" field.
func (ru *RatingUpdate) AddScore(i int) *RatingUpdate {
	ru.mutation.AddScore(i)
	return ru
}

// SetReview sets the "review" field.
func (ru *RatingUpdate) SetReview(s string) *RatingUpdate {
	ru.mutation.SetReview(s)
	return ru
}

// SetNillableReview sets the "review" field if the given value is not nil.
func (ru *RatingUpdate) SetNillableReview(s *string) *RatingUpdate {
	if s != nil {
		ru.SetReview(*s)
	}
	return ru
}

// ClearReview clears the value of the "review" field.
func (ru *RatingUpdate) ClearReview() *RatingUpdate {
	ru.mutation.ClearReview()
	return ru
}

// SetRatedAt sets the "ratedAt" field.
func (ru *RatingUpdate) SetRatedAt(t time.Time) *RatingUpdate {
	ru.mutation.SetRatedAt(t)
	return ru
}

// SetNillableRatedAt sets the "ratedAt" field if the given value is not nil.
func (ru *RatingUpdate) SetNillableRatedAt(t *time.Time) *RatingUpdate {
	if t != nil {
		ru.SetRatedAt(*t)
	}
	return ru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ru *RatingUpdate) SetUserID(id string) *RatingUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *RatingUpdate) SetUser(u *User) *RatingUpdate {
	return ru.SetUserID(u.ID)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (ru *RatingUpdate) SetBusinessID(id string) *RatingUpdate {
	ru.mutation.SetBusinessID(id)
	return ru
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (ru *RatingUpdate) SetNillableBusinessID(id *string) *RatingUpdate {
	if id != nil {
		ru = ru.SetBusinessID(*id)
	}
	return ru
}

// SetBusiness sets the "business" edge to the Business entity.
func (ru *RatingUpdate) SetBusiness(b *Business) *RatingUpdate {
	return ru.SetBusinessID(b.ID)
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ru *RatingUpdate) SetPlaceID(id string) *RatingUpdate {
	ru.mutation.SetPlaceID(id)
	return ru
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ru *RatingUpdate) SetNillablePlaceID(id *string) *RatingUpdate {
	if id != nil {
		ru = ru.SetPlaceID(*id)
	}
	return ru
}

// SetPlace sets the "place" edge to the Place entity.
func (ru *RatingUpdate) SetPlace(p *Place) *RatingUpdate {
	return ru.SetPlaceID(p.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (ru *RatingUpdate) SetEventID(id string) *RatingUpdate {
	ru.mutation.SetEventID(id)
	return ru
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (ru *RatingUpdate) SetNillableEventID(id *string) *RatingUpdate {
	if id != nil {
		ru = ru.SetEventID(*id)
	}
	return ru
}

// SetEvent sets the "event" edge to the Event entity.
func (ru *RatingUpdate) SetEvent(e *Event) *RatingUpdate {
	return ru.SetEventID(e.ID)
}

// Mutation returns the RatingMutation object of the builder.
func (ru *RatingUpdate) Mutation() *RatingMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *RatingUpdate) ClearUser() *RatingUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearBusiness clears the "business" edge to the Business entity.
func (ru *RatingUpdate) ClearBusiness() *RatingUpdate {
	ru.mutation.ClearBusiness()
	return ru
}

// ClearPlace clears the "place" edge to the Place entity.
func (ru *RatingUpdate) ClearPlace() *RatingUpdate {
	ru.mutation.ClearPlace()
	return ru
}

// ClearEvent clears the "event" edge to the Event entity.
func (ru *RatingUpdate) ClearEvent() *RatingUpdate {
	ru.mutation.ClearEvent()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RatingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RatingUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RatingUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RatingUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RatingUpdate) check() error {
	if v, ok := ru.mutation.Score(); ok {
		if err := rating.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "Rating.score": %w`, err)}
		}
	}
	if _, ok := ru.mutation.UserID(); ru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Rating.user"`)
	}
	return nil
}

func (ru *RatingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rating.Table, rating.Columns, sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Score(); ok {
		_spec.SetField(rating.FieldScore, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedScore(); ok {
		_spec.AddField(rating.FieldScore, field.TypeInt, value)
	}
	if value, ok := ru.mutation.Review(); ok {
		_spec.SetField(rating.FieldReview, field.TypeString, value)
	}
	if ru.mutation.ReviewCleared() {
		_spec.ClearField(rating.FieldReview, field.TypeString)
	}
	if value, ok := ru.mutation.RatedAt(); ok {
		_spec.SetField(rating.FieldRatedAt, field.TypeTime, value)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.UserTable,
			Columns: []string{rating.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.UserTable,
			Columns: []string{rating.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.BusinessTable,
			Columns: []string{rating.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.BusinessTable,
			Columns: []string{rating.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.PlaceTable,
			Columns: []string{rating.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.PlaceTable,
			Columns: []string{rating.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.EventTable,
			Columns: []string{rating.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.EventTable,
			Columns: []string{rating.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rating.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RatingUpdateOne is the builder for updating a single Rating entity.
type RatingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RatingMutation
}

// SetScore sets the "score" field.
func (ruo *RatingUpdateOne) SetScore(i int) *RatingUpdateOne {
	ruo.mutation.ResetScore()
	ruo.mutation.SetScore(i)
	return ruo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableScore(i *int) *RatingUpdateOne {
	if i != nil {
		ruo.SetScore(*i)
	}
	return ruo
}

// AddScore adds i to the "score" field.
func (ruo *RatingUpdateOne) AddScore(i int) *RatingUpdateOne {
	ruo.mutation.AddScore(i)
	return ruo
}

// SetReview sets the "review" field.
func (ruo *RatingUpdateOne) SetReview(s string) *RatingUpdateOne {
	ruo.mutation.SetReview(s)
	return ruo
}

// SetNillableReview sets the "review" field if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableReview(s *string) *RatingUpdateOne {
	if s != nil {
		ruo.SetReview(*s)
	}
	return ruo
}

// ClearReview clears the value of the "review" field.
func (ruo *RatingUpdateOne) ClearReview() *RatingUpdateOne {
	ruo.mutation.ClearReview()
	return ruo
}

// SetRatedAt sets the "ratedAt" field.
func (ruo *RatingUpdateOne) SetRatedAt(t time.Time) *RatingUpdateOne {
	ruo.mutation.SetRatedAt(t)
	return ruo
}

// SetNillableRatedAt sets the "ratedAt" field if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableRatedAt(t *time.Time) *RatingUpdateOne {
	if t != nil {
		ruo.SetRatedAt(*t)
	}
	return ruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ruo *RatingUpdateOne) SetUserID(id string) *RatingUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *RatingUpdateOne) SetUser(u *User) *RatingUpdateOne {
	return ruo.SetUserID(u.ID)
}

// SetBusinessID sets the "business" edge to the Business entity by ID.
func (ruo *RatingUpdateOne) SetBusinessID(id string) *RatingUpdateOne {
	ruo.mutation.SetBusinessID(id)
	return ruo
}

// SetNillableBusinessID sets the "business" edge to the Business entity by ID if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableBusinessID(id *string) *RatingUpdateOne {
	if id != nil {
		ruo = ruo.SetBusinessID(*id)
	}
	return ruo
}

// SetBusiness sets the "business" edge to the Business entity.
func (ruo *RatingUpdateOne) SetBusiness(b *Business) *RatingUpdateOne {
	return ruo.SetBusinessID(b.ID)
}

// SetPlaceID sets the "place" edge to the Place entity by ID.
func (ruo *RatingUpdateOne) SetPlaceID(id string) *RatingUpdateOne {
	ruo.mutation.SetPlaceID(id)
	return ruo
}

// SetNillablePlaceID sets the "place" edge to the Place entity by ID if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillablePlaceID(id *string) *RatingUpdateOne {
	if id != nil {
		ruo = ruo.SetPlaceID(*id)
	}
	return ruo
}

// SetPlace sets the "place" edge to the Place entity.
func (ruo *RatingUpdateOne) SetPlace(p *Place) *RatingUpdateOne {
	return ruo.SetPlaceID(p.ID)
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (ruo *RatingUpdateOne) SetEventID(id string) *RatingUpdateOne {
	ruo.mutation.SetEventID(id)
	return ruo
}

// SetNillableEventID sets the "event" edge to the Event entity by ID if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableEventID(id *string) *RatingUpdateOne {
	if id != nil {
		ruo = ruo.SetEventID(*id)
	}
	return ruo
}

// SetEvent sets the "event" edge to the Event entity.
func (ruo *RatingUpdateOne) SetEvent(e *Event) *RatingUpdateOne {
	return ruo.SetEventID(e.ID)
}

// Mutation returns the RatingMutation object of the builder.
func (ruo *RatingUpdateOne) Mutation() *RatingMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *RatingUpdateOne) ClearUser() *RatingUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearBusiness clears the "business" edge to the Business entity.
func (ruo *RatingUpdateOne) ClearBusiness() *RatingUpdateOne {
	ruo.mutation.ClearBusiness()
	return ruo
}

// ClearPlace clears the "place" edge to the Place entity.
func (ruo *RatingUpdateOne) ClearPlace() *RatingUpdateOne {
	ruo.mutation.ClearPlace()
	return ruo
}

// ClearEvent clears the "event" edge to the Event entity.
func (ruo *RatingUpdateOne) ClearEvent() *RatingUpdateOne {
	ruo.mutation.ClearEvent()
	return ruo
}

// Where appends a list predicates to the RatingUpdate builder.
func (ruo *RatingUpdateOne) Where(ps ...predicate.Rating) *RatingUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RatingUpdateOne) Select(field string, fields ...string) *RatingUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rating entity.
func (ruo *RatingUpdateOne) Save(ctx context.Context) (*Rating, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RatingUpdateOne) SaveX(ctx context.Context) *Rating {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RatingUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RatingUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RatingUpdateOne) check() error {
	if v, ok := ruo.mutation.Score(); ok {
		if err := rating.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "Rating.score": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.UserID(); ruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Rating.user"`)
	}
	return nil
}

func (ruo *RatingUpdateOne) sqlSave(ctx context.Context) (_node *Rating, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rating.Table, rating.Columns, sqlgraph.NewFieldSpec(rating.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rating.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rating.FieldID)
		for _, f := range fields {
			if !rating.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rating.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Score(); ok {
		_spec.SetField(rating.FieldScore, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedScore(); ok {
		_spec.AddField(rating.FieldScore, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.Review(); ok {
		_spec.SetField(rating.FieldReview, field.TypeString, value)
	}
	if ruo.mutation.ReviewCleared() {
		_spec.ClearField(rating.FieldReview, field.TypeString)
	}
	if value, ok := ruo.mutation.RatedAt(); ok {
		_spec.SetField(rating.FieldRatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.UserTable,
			Columns: []string{rating.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.UserTable,
			Columns: []string{rating.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.BusinessTable,
			Columns: []string{rating.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.BusinessTable,
			Columns: []string{rating.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(business.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.PlaceTable,
			Columns: []string{rating.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.PlaceTable,
			Columns: []string{rating.PlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.EventTable,
			Columns: []string{rating.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rating.EventTable,
			Columns: []string{rating.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rating{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rating.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

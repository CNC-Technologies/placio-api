// Code generated by ent, DO NOT EDIT.

package eventorganizer

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldContainsFold(FieldID, id))
}

// OrganizerID applies equality check predicate on the "organizerID" field. It's identical to OrganizerIDEQ.
func OrganizerID(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEQ(FieldOrganizerID, v))
}

// OrganizerType applies equality check predicate on the "organizerType" field. It's identical to OrganizerTypeEQ.
func OrganizerType(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEQ(FieldOrganizerType, v))
}

// OrganizerIDEQ applies the EQ predicate on the "organizerID" field.
func OrganizerIDEQ(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEQ(FieldOrganizerID, v))
}

// OrganizerIDNEQ applies the NEQ predicate on the "organizerID" field.
func OrganizerIDNEQ(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldNEQ(FieldOrganizerID, v))
}

// OrganizerIDIn applies the In predicate on the "organizerID" field.
func OrganizerIDIn(vs ...string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldIn(FieldOrganizerID, vs...))
}

// OrganizerIDNotIn applies the NotIn predicate on the "organizerID" field.
func OrganizerIDNotIn(vs ...string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldNotIn(FieldOrganizerID, vs...))
}

// OrganizerIDGT applies the GT predicate on the "organizerID" field.
func OrganizerIDGT(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldGT(FieldOrganizerID, v))
}

// OrganizerIDGTE applies the GTE predicate on the "organizerID" field.
func OrganizerIDGTE(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldGTE(FieldOrganizerID, v))
}

// OrganizerIDLT applies the LT predicate on the "organizerID" field.
func OrganizerIDLT(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldLT(FieldOrganizerID, v))
}

// OrganizerIDLTE applies the LTE predicate on the "organizerID" field.
func OrganizerIDLTE(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldLTE(FieldOrganizerID, v))
}

// OrganizerIDContains applies the Contains predicate on the "organizerID" field.
func OrganizerIDContains(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldContains(FieldOrganizerID, v))
}

// OrganizerIDHasPrefix applies the HasPrefix predicate on the "organizerID" field.
func OrganizerIDHasPrefix(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldHasPrefix(FieldOrganizerID, v))
}

// OrganizerIDHasSuffix applies the HasSuffix predicate on the "organizerID" field.
func OrganizerIDHasSuffix(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldHasSuffix(FieldOrganizerID, v))
}

// OrganizerIDEqualFold applies the EqualFold predicate on the "organizerID" field.
func OrganizerIDEqualFold(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEqualFold(FieldOrganizerID, v))
}

// OrganizerIDContainsFold applies the ContainsFold predicate on the "organizerID" field.
func OrganizerIDContainsFold(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldContainsFold(FieldOrganizerID, v))
}

// OrganizerTypeEQ applies the EQ predicate on the "organizerType" field.
func OrganizerTypeEQ(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEQ(FieldOrganizerType, v))
}

// OrganizerTypeNEQ applies the NEQ predicate on the "organizerType" field.
func OrganizerTypeNEQ(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldNEQ(FieldOrganizerType, v))
}

// OrganizerTypeIn applies the In predicate on the "organizerType" field.
func OrganizerTypeIn(vs ...string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldIn(FieldOrganizerType, vs...))
}

// OrganizerTypeNotIn applies the NotIn predicate on the "organizerType" field.
func OrganizerTypeNotIn(vs ...string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldNotIn(FieldOrganizerType, vs...))
}

// OrganizerTypeGT applies the GT predicate on the "organizerType" field.
func OrganizerTypeGT(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldGT(FieldOrganizerType, v))
}

// OrganizerTypeGTE applies the GTE predicate on the "organizerType" field.
func OrganizerTypeGTE(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldGTE(FieldOrganizerType, v))
}

// OrganizerTypeLT applies the LT predicate on the "organizerType" field.
func OrganizerTypeLT(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldLT(FieldOrganizerType, v))
}

// OrganizerTypeLTE applies the LTE predicate on the "organizerType" field.
func OrganizerTypeLTE(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldLTE(FieldOrganizerType, v))
}

// OrganizerTypeContains applies the Contains predicate on the "organizerType" field.
func OrganizerTypeContains(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldContains(FieldOrganizerType, v))
}

// OrganizerTypeHasPrefix applies the HasPrefix predicate on the "organizerType" field.
func OrganizerTypeHasPrefix(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldHasPrefix(FieldOrganizerType, v))
}

// OrganizerTypeHasSuffix applies the HasSuffix predicate on the "organizerType" field.
func OrganizerTypeHasSuffix(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldHasSuffix(FieldOrganizerType, v))
}

// OrganizerTypeEqualFold applies the EqualFold predicate on the "organizerType" field.
func OrganizerTypeEqualFold(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldEqualFold(FieldOrganizerType, v))
}

// OrganizerTypeContainsFold applies the ContainsFold predicate on the "organizerType" field.
func OrganizerTypeContainsFold(v string) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.FieldContainsFold(FieldOrganizerType, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.EventOrganizer {
	return predicate.EventOrganizer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.EventOrganizer {
	return predicate.EventOrganizer(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventOrganizer) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventOrganizer) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventOrganizer) predicate.EventOrganizer {
	return predicate.EventOrganizer(sql.NotPredicates(p))
}

// Code generated by ent, DO NOT EDIT.

package eventorganizer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eventorganizer type in the database.
	Label = "event_organizer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrganizerID holds the string denoting the organizerid field in the database.
	FieldOrganizerID = "organizer_id"
	// FieldOrganizerType holds the string denoting the organizertype field in the database.
	FieldOrganizerType = "organizer_type"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// Table holds the table name of the eventorganizer in the database.
	Table = "event_organizers"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "event_organizers"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_event_organizers"
)

// Columns holds all SQL columns for eventorganizer fields.
var Columns = []string{
	FieldID,
	FieldOrganizerID,
	FieldOrganizerType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "event_organizers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_event_organizers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// OrganizerIDValidator is a validator for the "organizerID" field. It is called by the builders before save.
	OrganizerIDValidator func(string) error
	// OrganizerTypeValidator is a validator for the "organizerType" field. It is called by the builders before save.
	OrganizerTypeValidator func(string) error
)

// OrderOption defines the ordering options for the EventOrganizer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrganizerID orders the results by the organizerID field.
func ByOrganizerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizerID, opts...).ToFunc()
}

// ByOrganizerType orders the results by the organizerType field.
func ByOrganizerType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizerType, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
	)
}

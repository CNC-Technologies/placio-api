// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/user"
	"placio-app/ent/userbusiness"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserBusiness is the model entity for the UserBusiness schema.
type UserBusiness struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// Permissions holds the value of the "permissions" field.
	Permissions string `json:"permissions,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserBusinessQuery when eager-loading is set.
	Edges                    UserBusinessEdges `json:"edges"`
	business_user_businesses *string
	user_user_businesses     *string
	selectValues             sql.SelectValues
}

// UserBusinessEdges holds the relations/edges for other nodes in the graph.
type UserBusinessEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Business holds the value of the business edge.
	Business *Business `json:"business,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserBusinessEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BusinessOrErr returns the Business value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserBusinessEdges) BusinessOrErr() (*Business, error) {
	if e.loadedTypes[1] {
		if e.Business == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: business.Label}
		}
		return e.Business, nil
	}
	return nil, &NotLoadedError{edge: "business"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserBusiness) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userbusiness.FieldID, userbusiness.FieldRole, userbusiness.FieldPermissions:
			values[i] = new(sql.NullString)
		case userbusiness.ForeignKeys[0]: // business_user_businesses
			values[i] = new(sql.NullString)
		case userbusiness.ForeignKeys[1]: // user_user_businesses
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserBusiness fields.
func (ub *UserBusiness) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userbusiness.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ub.ID = value.String
			}
		case userbusiness.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				ub.Role = value.String
			}
		case userbusiness.FieldPermissions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value.Valid {
				ub.Permissions = value.String
			}
		case userbusiness.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_user_businesses", values[i])
			} else if value.Valid {
				ub.business_user_businesses = new(string)
				*ub.business_user_businesses = value.String
			}
		case userbusiness.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_user_businesses", values[i])
			} else if value.Valid {
				ub.user_user_businesses = new(string)
				*ub.user_user_businesses = value.String
			}
		default:
			ub.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserBusiness.
// This includes values selected through modifiers, order, etc.
func (ub *UserBusiness) Value(name string) (ent.Value, error) {
	return ub.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserBusiness entity.
func (ub *UserBusiness) QueryUser() *UserQuery {
	return NewUserBusinessClient(ub.config).QueryUser(ub)
}

// QueryBusiness queries the "business" edge of the UserBusiness entity.
func (ub *UserBusiness) QueryBusiness() *BusinessQuery {
	return NewUserBusinessClient(ub.config).QueryBusiness(ub)
}

// Update returns a builder for updating this UserBusiness.
// Note that you need to call UserBusiness.Unwrap() before calling this method if this UserBusiness
// was returned from a transaction, and the transaction was committed or rolled back.
func (ub *UserBusiness) Update() *UserBusinessUpdateOne {
	return NewUserBusinessClient(ub.config).UpdateOne(ub)
}

// Unwrap unwraps the UserBusiness entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ub *UserBusiness) Unwrap() *UserBusiness {
	_tx, ok := ub.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserBusiness is not a transactional entity")
	}
	ub.config.driver = _tx.drv
	return ub
}

// String implements the fmt.Stringer.
func (ub *UserBusiness) String() string {
	var builder strings.Builder
	builder.WriteString("UserBusiness(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ub.ID))
	builder.WriteString("role=")
	builder.WriteString(ub.Role)
	builder.WriteString(", ")
	builder.WriteString("permissions=")
	builder.WriteString(ub.Permissions)
	builder.WriteByte(')')
	return builder.String()
}

// UserBusinesses is a parsable slice of UserBusiness.
type UserBusinesses []*UserBusiness

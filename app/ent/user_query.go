// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"placio-app/ent/accountwallet"
	"placio-app/ent/booking"
	"placio-app/ent/businessfollowuser"
	"placio-app/ent/category"
	"placio-app/ent/categoryassignment"
	"placio-app/ent/comment"
	"placio-app/ent/event"
	"placio-app/ent/help"
	"placio-app/ent/like"
	"placio-app/ent/notification"
	"placio-app/ent/place"
	"placio-app/ent/post"
	"placio-app/ent/predicate"
	"placio-app/ent/rating"
	"placio-app/ent/reservation"
	"placio-app/ent/reservationblock"
	"placio-app/ent/review"
	"placio-app/ent/transactionhistory"
	"placio-app/ent/user"
	"placio-app/ent/userbusiness"
	"placio-app/ent/userfollowbusiness"
	"placio-app/ent/userfollowevent"
	"placio-app/ent/userfollowplace"
	"placio-app/ent/userfollowuser"
	"placio-app/ent/userlikeplace"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                      *QueryContext
	order                    []user.OrderOption
	inters                   []Interceptor
	predicates               []predicate.User
	withUserBusinesses       *UserBusinessQuery
	withComments             *CommentQuery
	withLikes                *LikeQuery
	withPosts                *PostQuery
	withFollowedUsers        *UserFollowUserQuery
	withFollowerUsers        *UserFollowUserQuery
	withFollowedBusinesses   *UserFollowBusinessQuery
	withFollowerBusinesses   *BusinessFollowUserQuery
	withReviews              *ReviewQuery
	withBookings             *BookingQuery
	withReservations         *ReservationQuery
	withHelps                *HelpQuery
	withCategories           *CategoryQuery
	withPlaces               *PlaceQuery
	withCategoryAssignments  *CategoryAssignmentQuery
	withOwnedEvents          *EventQuery
	withUserFollowEvents     *UserFollowEventQuery
	withFollowedPlaces       *UserFollowPlaceQuery
	withLikedPlaces          *UserLikePlaceQuery
	withRatings              *RatingQuery
	withTransactionHistories *TransactionHistoryQuery
	withReservationBlocks    *ReservationBlockQuery
	withNotifications        *NotificationQuery
	withWallet               *AccountWalletQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryUserBusinesses chains the current query on the "userBusinesses" edge.
func (uq *UserQuery) QueryUserBusinesses() *UserBusinessQuery {
	query := (&UserBusinessClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userbusiness.Table, userbusiness.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserBusinessesTable, user.UserBusinessesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComments chains the current query on the "comments" edge.
func (uq *UserQuery) QueryComments() *CommentQuery {
	query := (&CommentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CommentsTable, user.CommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLikes chains the current query on the "likes" edge.
func (uq *UserQuery) QueryLikes() *LikeQuery {
	query := (&LikeClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(like.Table, like.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LikesTable, user.LikesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPosts chains the current query on the "posts" edge.
func (uq *UserQuery) QueryPosts() *PostQuery {
	query := (&PostClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PostsTable, user.PostsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowedUsers chains the current query on the "followedUsers" edge.
func (uq *UserQuery) QueryFollowedUsers() *UserFollowUserQuery {
	query := (&UserFollowUserClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userfollowuser.Table, userfollowuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FollowedUsersTable, user.FollowedUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowerUsers chains the current query on the "followerUsers" edge.
func (uq *UserQuery) QueryFollowerUsers() *UserFollowUserQuery {
	query := (&UserFollowUserClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userfollowuser.Table, userfollowuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FollowerUsersTable, user.FollowerUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowedBusinesses chains the current query on the "followedBusinesses" edge.
func (uq *UserQuery) QueryFollowedBusinesses() *UserFollowBusinessQuery {
	query := (&UserFollowBusinessClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userfollowbusiness.Table, userfollowbusiness.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FollowedBusinessesTable, user.FollowedBusinessesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowerBusinesses chains the current query on the "followerBusinesses" edge.
func (uq *UserQuery) QueryFollowerBusinesses() *BusinessFollowUserQuery {
	query := (&BusinessFollowUserClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(businessfollowuser.Table, businessfollowuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FollowerBusinessesTable, user.FollowerBusinessesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviews chains the current query on the "reviews" edge.
func (uq *UserQuery) QueryReviews() *ReviewQuery {
	query := (&ReviewClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReviewsTable, user.ReviewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBookings chains the current query on the "bookings" edge.
func (uq *UserQuery) QueryBookings() *BookingQuery {
	query := (&BookingClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(booking.Table, booking.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BookingsTable, user.BookingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReservations chains the current query on the "reservations" edge.
func (uq *UserQuery) QueryReservations() *ReservationQuery {
	query := (&ReservationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(reservation.Table, reservation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReservationsTable, user.ReservationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHelps chains the current query on the "helps" edge.
func (uq *UserQuery) QueryHelps() *HelpQuery {
	query := (&HelpClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(help.Table, help.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.HelpsTable, user.HelpsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategories chains the current query on the "categories" edge.
func (uq *UserQuery) QueryCategories() *CategoryQuery {
	query := (&CategoryClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CategoriesTable, user.CategoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlaces chains the current query on the "places" edge.
func (uq *UserQuery) QueryPlaces() *PlaceQuery {
	query := (&PlaceClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(place.Table, place.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PlacesTable, user.PlacesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategoryAssignments chains the current query on the "categoryAssignments" edge.
func (uq *UserQuery) QueryCategoryAssignments() *CategoryAssignmentQuery {
	query := (&CategoryAssignmentClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(categoryassignment.Table, categoryassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CategoryAssignmentsTable, user.CategoryAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnedEvents chains the current query on the "ownedEvents" edge.
func (uq *UserQuery) QueryOwnedEvents() *EventQuery {
	query := (&EventClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.OwnedEventsTable, user.OwnedEventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserFollowEvents chains the current query on the "userFollowEvents" edge.
func (uq *UserQuery) QueryUserFollowEvents() *UserFollowEventQuery {
	query := (&UserFollowEventClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userfollowevent.Table, userfollowevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserFollowEventsTable, user.UserFollowEventsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowedPlaces chains the current query on the "followedPlaces" edge.
func (uq *UserQuery) QueryFollowedPlaces() *UserFollowPlaceQuery {
	query := (&UserFollowPlaceClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userfollowplace.Table, userfollowplace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FollowedPlacesTable, user.FollowedPlacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLikedPlaces chains the current query on the "likedPlaces" edge.
func (uq *UserQuery) QueryLikedPlaces() *UserLikePlaceQuery {
	query := (&UserLikePlaceClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(userlikeplace.Table, userlikeplace.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.LikedPlacesTable, user.LikedPlacesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRatings chains the current query on the "ratings" edge.
func (uq *UserQuery) QueryRatings() *RatingQuery {
	query := (&RatingClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(rating.Table, rating.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RatingsTable, user.RatingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransactionHistories chains the current query on the "transaction_histories" edge.
func (uq *UserQuery) QueryTransactionHistories() *TransactionHistoryQuery {
	query := (&TransactionHistoryClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(transactionhistory.Table, transactionhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TransactionHistoriesTable, user.TransactionHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReservationBlocks chains the current query on the "reservation_blocks" edge.
func (uq *UserQuery) QueryReservationBlocks() *ReservationBlockQuery {
	query := (&ReservationBlockClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(reservationblock.Table, reservationblock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReservationBlocksTable, user.ReservationBlocksColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifications chains the current query on the "notifications" edge.
func (uq *UserQuery) QueryNotifications() *NotificationQuery {
	query := (&NotificationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.NotificationsTable, user.NotificationsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWallet chains the current query on the "wallet" edge.
func (uq *UserQuery) QueryWallet() *AccountWalletQuery {
	query := (&AccountWalletClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(accountwallet.Table, accountwallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.WalletTable, user.WalletColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) string {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) string {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []string, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, "IDs")
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []string {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                   uq.config,
		ctx:                      uq.ctx.Clone(),
		order:                    append([]user.OrderOption{}, uq.order...),
		inters:                   append([]Interceptor{}, uq.inters...),
		predicates:               append([]predicate.User{}, uq.predicates...),
		withUserBusinesses:       uq.withUserBusinesses.Clone(),
		withComments:             uq.withComments.Clone(),
		withLikes:                uq.withLikes.Clone(),
		withPosts:                uq.withPosts.Clone(),
		withFollowedUsers:        uq.withFollowedUsers.Clone(),
		withFollowerUsers:        uq.withFollowerUsers.Clone(),
		withFollowedBusinesses:   uq.withFollowedBusinesses.Clone(),
		withFollowerBusinesses:   uq.withFollowerBusinesses.Clone(),
		withReviews:              uq.withReviews.Clone(),
		withBookings:             uq.withBookings.Clone(),
		withReservations:         uq.withReservations.Clone(),
		withHelps:                uq.withHelps.Clone(),
		withCategories:           uq.withCategories.Clone(),
		withPlaces:               uq.withPlaces.Clone(),
		withCategoryAssignments:  uq.withCategoryAssignments.Clone(),
		withOwnedEvents:          uq.withOwnedEvents.Clone(),
		withUserFollowEvents:     uq.withUserFollowEvents.Clone(),
		withFollowedPlaces:       uq.withFollowedPlaces.Clone(),
		withLikedPlaces:          uq.withLikedPlaces.Clone(),
		withRatings:              uq.withRatings.Clone(),
		withTransactionHistories: uq.withTransactionHistories.Clone(),
		withReservationBlocks:    uq.withReservationBlocks.Clone(),
		withNotifications:        uq.withNotifications.Clone(),
		withWallet:               uq.withWallet.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithUserBusinesses tells the query-builder to eager-load the nodes that are connected to
// the "userBusinesses" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserBusinesses(opts ...func(*UserBusinessQuery)) *UserQuery {
	query := (&UserBusinessClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserBusinesses = query
	return uq
}

// WithComments tells the query-builder to eager-load the nodes that are connected to
// the "comments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithComments(opts ...func(*CommentQuery)) *UserQuery {
	query := (&CommentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withComments = query
	return uq
}

// WithLikes tells the query-builder to eager-load the nodes that are connected to
// the "likes" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithLikes(opts ...func(*LikeQuery)) *UserQuery {
	query := (&LikeClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withLikes = query
	return uq
}

// WithPosts tells the query-builder to eager-load the nodes that are connected to
// the "posts" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithPosts(opts ...func(*PostQuery)) *UserQuery {
	query := (&PostClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withPosts = query
	return uq
}

// WithFollowedUsers tells the query-builder to eager-load the nodes that are connected to
// the "followedUsers" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFollowedUsers(opts ...func(*UserFollowUserQuery)) *UserQuery {
	query := (&UserFollowUserClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withFollowedUsers = query
	return uq
}

// WithFollowerUsers tells the query-builder to eager-load the nodes that are connected to
// the "followerUsers" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFollowerUsers(opts ...func(*UserFollowUserQuery)) *UserQuery {
	query := (&UserFollowUserClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withFollowerUsers = query
	return uq
}

// WithFollowedBusinesses tells the query-builder to eager-load the nodes that are connected to
// the "followedBusinesses" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFollowedBusinesses(opts ...func(*UserFollowBusinessQuery)) *UserQuery {
	query := (&UserFollowBusinessClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withFollowedBusinesses = query
	return uq
}

// WithFollowerBusinesses tells the query-builder to eager-load the nodes that are connected to
// the "followerBusinesses" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFollowerBusinesses(opts ...func(*BusinessFollowUserQuery)) *UserQuery {
	query := (&BusinessFollowUserClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withFollowerBusinesses = query
	return uq
}

// WithReviews tells the query-builder to eager-load the nodes that are connected to
// the "reviews" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithReviews(opts ...func(*ReviewQuery)) *UserQuery {
	query := (&ReviewClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withReviews = query
	return uq
}

// WithBookings tells the query-builder to eager-load the nodes that are connected to
// the "bookings" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithBookings(opts ...func(*BookingQuery)) *UserQuery {
	query := (&BookingClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withBookings = query
	return uq
}

// WithReservations tells the query-builder to eager-load the nodes that are connected to
// the "reservations" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithReservations(opts ...func(*ReservationQuery)) *UserQuery {
	query := (&ReservationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withReservations = query
	return uq
}

// WithHelps tells the query-builder to eager-load the nodes that are connected to
// the "helps" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithHelps(opts ...func(*HelpQuery)) *UserQuery {
	query := (&HelpClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withHelps = query
	return uq
}

// WithCategories tells the query-builder to eager-load the nodes that are connected to
// the "categories" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCategories(opts ...func(*CategoryQuery)) *UserQuery {
	query := (&CategoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCategories = query
	return uq
}

// WithPlaces tells the query-builder to eager-load the nodes that are connected to
// the "places" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithPlaces(opts ...func(*PlaceQuery)) *UserQuery {
	query := (&PlaceClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withPlaces = query
	return uq
}

// WithCategoryAssignments tells the query-builder to eager-load the nodes that are connected to
// the "categoryAssignments" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithCategoryAssignments(opts ...func(*CategoryAssignmentQuery)) *UserQuery {
	query := (&CategoryAssignmentClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withCategoryAssignments = query
	return uq
}

// WithOwnedEvents tells the query-builder to eager-load the nodes that are connected to
// the "ownedEvents" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithOwnedEvents(opts ...func(*EventQuery)) *UserQuery {
	query := (&EventClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withOwnedEvents = query
	return uq
}

// WithUserFollowEvents tells the query-builder to eager-load the nodes that are connected to
// the "userFollowEvents" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithUserFollowEvents(opts ...func(*UserFollowEventQuery)) *UserQuery {
	query := (&UserFollowEventClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withUserFollowEvents = query
	return uq
}

// WithFollowedPlaces tells the query-builder to eager-load the nodes that are connected to
// the "followedPlaces" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFollowedPlaces(opts ...func(*UserFollowPlaceQuery)) *UserQuery {
	query := (&UserFollowPlaceClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withFollowedPlaces = query
	return uq
}

// WithLikedPlaces tells the query-builder to eager-load the nodes that are connected to
// the "likedPlaces" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithLikedPlaces(opts ...func(*UserLikePlaceQuery)) *UserQuery {
	query := (&UserLikePlaceClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withLikedPlaces = query
	return uq
}

// WithRatings tells the query-builder to eager-load the nodes that are connected to
// the "ratings" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRatings(opts ...func(*RatingQuery)) *UserQuery {
	query := (&RatingClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRatings = query
	return uq
}

// WithTransactionHistories tells the query-builder to eager-load the nodes that are connected to
// the "transaction_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithTransactionHistories(opts ...func(*TransactionHistoryQuery)) *UserQuery {
	query := (&TransactionHistoryClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withTransactionHistories = query
	return uq
}

// WithReservationBlocks tells the query-builder to eager-load the nodes that are connected to
// the "reservation_blocks" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithReservationBlocks(opts ...func(*ReservationBlockQuery)) *UserQuery {
	query := (&ReservationBlockClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withReservationBlocks = query
	return uq
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNotifications(opts ...func(*NotificationQuery)) *UserQuery {
	query := (&NotificationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withNotifications = query
	return uq
}

// WithWallet tells the query-builder to eager-load the nodes that are connected to
// the "wallet" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithWallet(opts ...func(*AccountWalletQuery)) *UserQuery {
	query := (&AccountWalletClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withWallet = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Auth0ID string `json:"auth0_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldAuth0ID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Auth0ID string `json:"auth0_id,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldAuth0ID).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [24]bool{
			uq.withUserBusinesses != nil,
			uq.withComments != nil,
			uq.withLikes != nil,
			uq.withPosts != nil,
			uq.withFollowedUsers != nil,
			uq.withFollowerUsers != nil,
			uq.withFollowedBusinesses != nil,
			uq.withFollowerBusinesses != nil,
			uq.withReviews != nil,
			uq.withBookings != nil,
			uq.withReservations != nil,
			uq.withHelps != nil,
			uq.withCategories != nil,
			uq.withPlaces != nil,
			uq.withCategoryAssignments != nil,
			uq.withOwnedEvents != nil,
			uq.withUserFollowEvents != nil,
			uq.withFollowedPlaces != nil,
			uq.withLikedPlaces != nil,
			uq.withRatings != nil,
			uq.withTransactionHistories != nil,
			uq.withReservationBlocks != nil,
			uq.withNotifications != nil,
			uq.withWallet != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withUserBusinesses; query != nil {
		if err := uq.loadUserBusinesses(ctx, query, nodes,
			func(n *User) { n.Edges.UserBusinesses = []*UserBusiness{} },
			func(n *User, e *UserBusiness) { n.Edges.UserBusinesses = append(n.Edges.UserBusinesses, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withComments; query != nil {
		if err := uq.loadComments(ctx, query, nodes,
			func(n *User) { n.Edges.Comments = []*Comment{} },
			func(n *User, e *Comment) { n.Edges.Comments = append(n.Edges.Comments, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withLikes; query != nil {
		if err := uq.loadLikes(ctx, query, nodes,
			func(n *User) { n.Edges.Likes = []*Like{} },
			func(n *User, e *Like) { n.Edges.Likes = append(n.Edges.Likes, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withPosts; query != nil {
		if err := uq.loadPosts(ctx, query, nodes,
			func(n *User) { n.Edges.Posts = []*Post{} },
			func(n *User, e *Post) { n.Edges.Posts = append(n.Edges.Posts, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFollowedUsers; query != nil {
		if err := uq.loadFollowedUsers(ctx, query, nodes,
			func(n *User) { n.Edges.FollowedUsers = []*UserFollowUser{} },
			func(n *User, e *UserFollowUser) { n.Edges.FollowedUsers = append(n.Edges.FollowedUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFollowerUsers; query != nil {
		if err := uq.loadFollowerUsers(ctx, query, nodes,
			func(n *User) { n.Edges.FollowerUsers = []*UserFollowUser{} },
			func(n *User, e *UserFollowUser) { n.Edges.FollowerUsers = append(n.Edges.FollowerUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFollowedBusinesses; query != nil {
		if err := uq.loadFollowedBusinesses(ctx, query, nodes,
			func(n *User) { n.Edges.FollowedBusinesses = []*UserFollowBusiness{} },
			func(n *User, e *UserFollowBusiness) {
				n.Edges.FollowedBusinesses = append(n.Edges.FollowedBusinesses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withFollowerBusinesses; query != nil {
		if err := uq.loadFollowerBusinesses(ctx, query, nodes,
			func(n *User) { n.Edges.FollowerBusinesses = []*BusinessFollowUser{} },
			func(n *User, e *BusinessFollowUser) {
				n.Edges.FollowerBusinesses = append(n.Edges.FollowerBusinesses, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withReviews; query != nil {
		if err := uq.loadReviews(ctx, query, nodes,
			func(n *User) { n.Edges.Reviews = []*Review{} },
			func(n *User, e *Review) { n.Edges.Reviews = append(n.Edges.Reviews, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withBookings; query != nil {
		if err := uq.loadBookings(ctx, query, nodes,
			func(n *User) { n.Edges.Bookings = []*Booking{} },
			func(n *User, e *Booking) { n.Edges.Bookings = append(n.Edges.Bookings, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withReservations; query != nil {
		if err := uq.loadReservations(ctx, query, nodes,
			func(n *User) { n.Edges.Reservations = []*Reservation{} },
			func(n *User, e *Reservation) { n.Edges.Reservations = append(n.Edges.Reservations, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withHelps; query != nil {
		if err := uq.loadHelps(ctx, query, nodes,
			func(n *User) { n.Edges.Helps = []*Help{} },
			func(n *User, e *Help) { n.Edges.Helps = append(n.Edges.Helps, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCategories; query != nil {
		if err := uq.loadCategories(ctx, query, nodes,
			func(n *User) { n.Edges.Categories = []*Category{} },
			func(n *User, e *Category) { n.Edges.Categories = append(n.Edges.Categories, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withPlaces; query != nil {
		if err := uq.loadPlaces(ctx, query, nodes,
			func(n *User) { n.Edges.Places = []*Place{} },
			func(n *User, e *Place) { n.Edges.Places = append(n.Edges.Places, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withCategoryAssignments; query != nil {
		if err := uq.loadCategoryAssignments(ctx, query, nodes,
			func(n *User) { n.Edges.CategoryAssignments = []*CategoryAssignment{} },
			func(n *User, e *CategoryAssignment) {
				n.Edges.CategoryAssignments = append(n.Edges.CategoryAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withOwnedEvents; query != nil {
		if err := uq.loadOwnedEvents(ctx, query, nodes, nil,
			func(n *User, e *Event) { n.Edges.OwnedEvents = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withUserFollowEvents; query != nil {
		if err := uq.loadUserFollowEvents(ctx, query, nodes,
			func(n *User) { n.Edges.UserFollowEvents = []*UserFollowEvent{} },
			func(n *User, e *UserFollowEvent) { n.Edges.UserFollowEvents = append(n.Edges.UserFollowEvents, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFollowedPlaces; query != nil {
		if err := uq.loadFollowedPlaces(ctx, query, nodes,
			func(n *User) { n.Edges.FollowedPlaces = []*UserFollowPlace{} },
			func(n *User, e *UserFollowPlace) { n.Edges.FollowedPlaces = append(n.Edges.FollowedPlaces, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withLikedPlaces; query != nil {
		if err := uq.loadLikedPlaces(ctx, query, nodes,
			func(n *User) { n.Edges.LikedPlaces = []*UserLikePlace{} },
			func(n *User, e *UserLikePlace) { n.Edges.LikedPlaces = append(n.Edges.LikedPlaces, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withRatings; query != nil {
		if err := uq.loadRatings(ctx, query, nodes,
			func(n *User) { n.Edges.Ratings = []*Rating{} },
			func(n *User, e *Rating) { n.Edges.Ratings = append(n.Edges.Ratings, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withTransactionHistories; query != nil {
		if err := uq.loadTransactionHistories(ctx, query, nodes,
			func(n *User) { n.Edges.TransactionHistories = []*TransactionHistory{} },
			func(n *User, e *TransactionHistory) {
				n.Edges.TransactionHistories = append(n.Edges.TransactionHistories, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withReservationBlocks; query != nil {
		if err := uq.loadReservationBlocks(ctx, query, nodes,
			func(n *User) { n.Edges.ReservationBlocks = []*ReservationBlock{} },
			func(n *User, e *ReservationBlock) { n.Edges.ReservationBlocks = append(n.Edges.ReservationBlocks, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withNotifications; query != nil {
		if err := uq.loadNotifications(ctx, query, nodes,
			func(n *User) { n.Edges.Notifications = []*Notification{} },
			func(n *User, e *Notification) { n.Edges.Notifications = append(n.Edges.Notifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withWallet; query != nil {
		if err := uq.loadWallet(ctx, query, nodes, nil,
			func(n *User, e *AccountWallet) { n.Edges.Wallet = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadUserBusinesses(ctx context.Context, query *UserBusinessQuery, nodes []*User, init func(*User), assign func(*User, *UserBusiness)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserBusiness(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserBusinessesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_user_businesses
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_user_businesses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_user_businesses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadComments(ctx context.Context, query *CommentQuery, nodes []*User, init func(*User), assign func(*User, *Comment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Comment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CommentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_comments
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_comments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_comments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadLikes(ctx context.Context, query *LikeQuery, nodes []*User, init func(*User), assign func(*User, *Like)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Like(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.LikesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_likes
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_likes" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_likes" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadPosts(ctx context.Context, query *PostQuery, nodes []*User, init func(*User), assign func(*User, *Post)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Post(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.PostsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_posts
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_posts" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_posts" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFollowedUsers(ctx context.Context, query *UserFollowUserQuery, nodes []*User, init func(*User), assign func(*User, *UserFollowUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserFollowUser(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.FollowedUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_followed_users
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_followed_users" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_followed_users" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFollowerUsers(ctx context.Context, query *UserFollowUserQuery, nodes []*User, init func(*User), assign func(*User, *UserFollowUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserFollowUser(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.FollowerUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_follower_users
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_follower_users" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_follower_users" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFollowedBusinesses(ctx context.Context, query *UserFollowBusinessQuery, nodes []*User, init func(*User), assign func(*User, *UserFollowBusiness)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserFollowBusiness(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.FollowedBusinessesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_followed_businesses
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_followed_businesses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_followed_businesses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFollowerBusinesses(ctx context.Context, query *BusinessFollowUserQuery, nodes []*User, init func(*User), assign func(*User, *BusinessFollowUser)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BusinessFollowUser(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.FollowerBusinessesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_follower_businesses
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_follower_businesses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_follower_businesses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadReviews(ctx context.Context, query *ReviewQuery, nodes []*User, init func(*User), assign func(*User, *Review)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Review(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ReviewsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_reviews
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_reviews" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_reviews" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadBookings(ctx context.Context, query *BookingQuery, nodes []*User, init func(*User), assign func(*User, *Booking)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Booking(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.BookingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_bookings
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_bookings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_bookings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadReservations(ctx context.Context, query *ReservationQuery, nodes []*User, init func(*User), assign func(*User, *Reservation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Reservation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ReservationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_reservations
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_reservations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_reservations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadHelps(ctx context.Context, query *HelpQuery, nodes []*User, init func(*User), assign func(*User, *Help)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(help.FieldUserID)
	}
	query.Where(predicate.Help(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.HelpsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadCategories(ctx context.Context, query *CategoryQuery, nodes []*User, init func(*User), assign func(*User, *Category)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Category(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CategoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_categories
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_categories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_categories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadPlaces(ctx context.Context, query *PlaceQuery, nodes []*User, init func(*User), assign func(*User, *Place)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*User)
	nids := make(map[string]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.PlacesTable)
		s.Join(joinT).On(s.C(place.FieldID), joinT.C(user.PlacesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.PlacesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.PlacesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Place](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "places" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadCategoryAssignments(ctx context.Context, query *CategoryAssignmentQuery, nodes []*User, init func(*User), assign func(*User, *CategoryAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(categoryassignment.FieldEntityID)
	}
	query.Where(predicate.CategoryAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.CategoryAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EntityID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "entity_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadOwnedEvents(ctx context.Context, query *EventQuery, nodes []*User, init func(*User), assign func(*User, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.OwnedEventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_owned_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_owned_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_owned_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadUserFollowEvents(ctx context.Context, query *UserFollowEventQuery, nodes []*User, init func(*User), assign func(*User, *UserFollowEvent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserFollowEvent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.UserFollowEventsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_user_follow_events
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_user_follow_events" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_user_follow_events" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFollowedPlaces(ctx context.Context, query *UserFollowPlaceQuery, nodes []*User, init func(*User), assign func(*User, *UserFollowPlace)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserFollowPlace(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.FollowedPlacesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_followed_places
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_followed_places" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_followed_places" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadLikedPlaces(ctx context.Context, query *UserLikePlaceQuery, nodes []*User, init func(*User), assign func(*User, *UserLikePlace)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.UserLikePlace(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.LikedPlacesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_liked_places
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_liked_places" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_liked_places" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRatings(ctx context.Context, query *RatingQuery, nodes []*User, init func(*User), assign func(*User, *Rating)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Rating(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RatingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_ratings
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_ratings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_ratings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadTransactionHistories(ctx context.Context, query *TransactionHistoryQuery, nodes []*User, init func(*User), assign func(*User, *TransactionHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TransactionHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.TransactionHistoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_transaction_histories
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_transaction_histories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_transaction_histories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadReservationBlocks(ctx context.Context, query *ReservationBlockQuery, nodes []*User, init func(*User), assign func(*User, *ReservationBlock)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReservationBlock(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ReservationBlocksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_reservation_blocks
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_reservation_blocks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_reservation_blocks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadNotifications(ctx context.Context, query *NotificationQuery, nodes []*User, init func(*User), assign func(*User, *Notification)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*User)
	nids := make(map[string]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.NotificationsTable)
		s.Join(joinT).On(s.C(notification.FieldID), joinT.C(user.NotificationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.NotificationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.NotificationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Notification](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "notifications" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadWallet(ctx context.Context, query *AccountWalletQuery, nodes []*User, init func(*User), assign func(*User, *AccountWallet)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.AccountWallet(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.WalletColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_wallet
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_wallet" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_wallet" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

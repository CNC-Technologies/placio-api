// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/media"
	"placio-app/ent/menu"
	"placio-app/ent/menuitem"
	"placio-app/ent/orderitem"
	"placio-app/ent/placeinventory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuItemCreate is the builder for creating a MenuItem entity.
type MenuItemCreate struct {
	config
	mutation *MenuItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mic *MenuItemCreate) SetName(s string) *MenuItemCreate {
	mic.mutation.SetName(s)
	return mic
}

// SetDescription sets the "description" field.
func (mic *MenuItemCreate) SetDescription(s string) *MenuItemCreate {
	mic.mutation.SetDescription(s)
	return mic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableDescription(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetDescription(*s)
	}
	return mic
}

// SetPrice sets the "price" field.
func (mic *MenuItemCreate) SetPrice(f float64) *MenuItemCreate {
	mic.mutation.SetPrice(f)
	return mic
}

// SetCurrency sets the "currency" field.
func (mic *MenuItemCreate) SetCurrency(s string) *MenuItemCreate {
	mic.mutation.SetCurrency(s)
	return mic
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableCurrency(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetCurrency(*s)
	}
	return mic
}

// SetIsAvailable sets the "is_available" field.
func (mic *MenuItemCreate) SetIsAvailable(b bool) *MenuItemCreate {
	mic.mutation.SetIsAvailable(b)
	return mic
}

// SetNillableIsAvailable sets the "is_available" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableIsAvailable(b *bool) *MenuItemCreate {
	if b != nil {
		mic.SetIsAvailable(*b)
	}
	return mic
}

// SetPreparationTime sets the "preparation_time" field.
func (mic *MenuItemCreate) SetPreparationTime(i int) *MenuItemCreate {
	mic.mutation.SetPreparationTime(i)
	return mic
}

// SetNillablePreparationTime sets the "preparation_time" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillablePreparationTime(i *int) *MenuItemCreate {
	if i != nil {
		mic.SetPreparationTime(*i)
	}
	return mic
}

// SetOptions sets the "options" field.
func (mic *MenuItemCreate) SetOptions(s []string) *MenuItemCreate {
	mic.mutation.SetOptions(s)
	return mic
}

// SetDeletedAt sets the "deleted_at" field.
func (mic *MenuItemCreate) SetDeletedAt(s string) *MenuItemCreate {
	mic.mutation.SetDeletedAt(s)
	return mic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableDeletedAt(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetDeletedAt(*s)
	}
	return mic
}

// SetType sets the "type" field.
func (mic *MenuItemCreate) SetType(m menuitem.Type) *MenuItemCreate {
	mic.mutation.SetType(m)
	return mic
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableType(m *menuitem.Type) *MenuItemCreate {
	if m != nil {
		mic.SetType(*m)
	}
	return mic
}

// SetStatus sets the "status" field.
func (mic *MenuItemCreate) SetStatus(m menuitem.Status) *MenuItemCreate {
	mic.mutation.SetStatus(m)
	return mic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableStatus(m *menuitem.Status) *MenuItemCreate {
	if m != nil {
		mic.SetStatus(*m)
	}
	return mic
}

// SetDrinkType sets the "DrinkType" field.
func (mic *MenuItemCreate) SetDrinkType(mt menuitem.DrinkType) *MenuItemCreate {
	mic.mutation.SetDrinkType(mt)
	return mic
}

// SetNillableDrinkType sets the "DrinkType" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableDrinkType(mt *menuitem.DrinkType) *MenuItemCreate {
	if mt != nil {
		mic.SetDrinkType(*mt)
	}
	return mic
}

// SetDietaryType sets the "DietaryType" field.
func (mic *MenuItemCreate) SetDietaryType(mt menuitem.DietaryType) *MenuItemCreate {
	mic.mutation.SetDietaryType(mt)
	return mic
}

// SetNillableDietaryType sets the "DietaryType" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableDietaryType(mt *menuitem.DietaryType) *MenuItemCreate {
	if mt != nil {
		mic.SetDietaryType(*mt)
	}
	return mic
}

// SetIsDeleted sets the "is_deleted" field.
func (mic *MenuItemCreate) SetIsDeleted(b bool) *MenuItemCreate {
	mic.mutation.SetIsDeleted(b)
	return mic
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableIsDeleted(b *bool) *MenuItemCreate {
	if b != nil {
		mic.SetIsDeleted(*b)
	}
	return mic
}

// SetCalories sets the "calories" field.
func (mic *MenuItemCreate) SetCalories(i int) *MenuItemCreate {
	mic.mutation.SetCalories(i)
	return mic
}

// SetNillableCalories sets the "calories" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableCalories(i *int) *MenuItemCreate {
	if i != nil {
		mic.SetCalories(*i)
	}
	return mic
}

// SetServeSize sets the "serve_size" field.
func (mic *MenuItemCreate) SetServeSize(i int) *MenuItemCreate {
	mic.mutation.SetServeSize(i)
	return mic
}

// SetNillableServeSize sets the "serve_size" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableServeSize(i *int) *MenuItemCreate {
	if i != nil {
		mic.SetServeSize(*i)
	}
	return mic
}

// SetAvailableFrom sets the "available_from" field.
func (mic *MenuItemCreate) SetAvailableFrom(t time.Time) *MenuItemCreate {
	mic.mutation.SetAvailableFrom(t)
	return mic
}

// SetNillableAvailableFrom sets the "available_from" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableAvailableFrom(t *time.Time) *MenuItemCreate {
	if t != nil {
		mic.SetAvailableFrom(*t)
	}
	return mic
}

// SetAvailableUntil sets the "available_until" field.
func (mic *MenuItemCreate) SetAvailableUntil(t time.Time) *MenuItemCreate {
	mic.mutation.SetAvailableUntil(t)
	return mic
}

// SetNillableAvailableUntil sets the "available_until" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableAvailableUntil(t *time.Time) *MenuItemCreate {
	if t != nil {
		mic.SetAvailableUntil(*t)
	}
	return mic
}

// SetImageURL sets the "image_url" field.
func (mic *MenuItemCreate) SetImageURL(s string) *MenuItemCreate {
	mic.mutation.SetImageURL(s)
	return mic
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableImageURL(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetImageURL(*s)
	}
	return mic
}

// SetSpicinessLevel sets the "spiciness_level" field.
func (mic *MenuItemCreate) SetSpicinessLevel(ml menuitem.SpicinessLevel) *MenuItemCreate {
	mic.mutation.SetSpicinessLevel(ml)
	return mic
}

// SetNillableSpicinessLevel sets the "spiciness_level" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableSpicinessLevel(ml *menuitem.SpicinessLevel) *MenuItemCreate {
	if ml != nil {
		mic.SetSpicinessLevel(*ml)
	}
	return mic
}

// SetAllergens sets the "allergens" field.
func (mic *MenuItemCreate) SetAllergens(s []string) *MenuItemCreate {
	mic.mutation.SetAllergens(s)
	return mic
}

// SetChefSpecialNote sets the "chef_special_note" field.
func (mic *MenuItemCreate) SetChefSpecialNote(s string) *MenuItemCreate {
	mic.mutation.SetChefSpecialNote(s)
	return mic
}

// SetNillableChefSpecialNote sets the "chef_special_note" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableChefSpecialNote(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetChefSpecialNote(*s)
	}
	return mic
}

// SetRating sets the "rating" field.
func (mic *MenuItemCreate) SetRating(i int) *MenuItemCreate {
	mic.mutation.SetRating(i)
	return mic
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableRating(i *int) *MenuItemCreate {
	if i != nil {
		mic.SetRating(*i)
	}
	return mic
}

// SetReviewCount sets the "review_count" field.
func (mic *MenuItemCreate) SetReviewCount(i int) *MenuItemCreate {
	mic.mutation.SetReviewCount(i)
	return mic
}

// SetNillableReviewCount sets the "review_count" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableReviewCount(i *int) *MenuItemCreate {
	if i != nil {
		mic.SetReviewCount(*i)
	}
	return mic
}

// SetCategory sets the "category" field.
func (mic *MenuItemCreate) SetCategory(s string) *MenuItemCreate {
	mic.mutation.SetCategory(s)
	return mic
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableCategory(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetCategory(*s)
	}
	return mic
}

// SetOrderCount sets the "order_count" field.
func (mic *MenuItemCreate) SetOrderCount(i int) *MenuItemCreate {
	mic.mutation.SetOrderCount(i)
	return mic
}

// SetNillableOrderCount sets the "order_count" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableOrderCount(i *int) *MenuItemCreate {
	if i != nil {
		mic.SetOrderCount(*i)
	}
	return mic
}

// SetSku sets the "sku" field.
func (mic *MenuItemCreate) SetSku(s string) *MenuItemCreate {
	mic.mutation.SetSku(s)
	return mic
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableSku(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetSku(*s)
	}
	return mic
}

// SetIsFeatured sets the "is_featured" field.
func (mic *MenuItemCreate) SetIsFeatured(b bool) *MenuItemCreate {
	mic.mutation.SetIsFeatured(b)
	return mic
}

// SetNillableIsFeatured sets the "is_featured" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableIsFeatured(b *bool) *MenuItemCreate {
	if b != nil {
		mic.SetIsFeatured(*b)
	}
	return mic
}

// SetIsNew sets the "is_new" field.
func (mic *MenuItemCreate) SetIsNew(b bool) *MenuItemCreate {
	mic.mutation.SetIsNew(b)
	return mic
}

// SetNillableIsNew sets the "is_new" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableIsNew(b *bool) *MenuItemCreate {
	if b != nil {
		mic.SetIsNew(*b)
	}
	return mic
}

// SetIsSeasonal sets the "is_seasonal" field.
func (mic *MenuItemCreate) SetIsSeasonal(b bool) *MenuItemCreate {
	mic.mutation.SetIsSeasonal(b)
	return mic
}

// SetNillableIsSeasonal sets the "is_seasonal" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableIsSeasonal(b *bool) *MenuItemCreate {
	if b != nil {
		mic.SetIsSeasonal(*b)
	}
	return mic
}

// SetSeason sets the "season" field.
func (mic *MenuItemCreate) SetSeason(s string) *MenuItemCreate {
	mic.mutation.SetSeason(s)
	return mic
}

// SetNillableSeason sets the "season" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableSeason(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetSeason(*s)
	}
	return mic
}

// SetDiscountPercentage sets the "discount_percentage" field.
func (mic *MenuItemCreate) SetDiscountPercentage(i int) *MenuItemCreate {
	mic.mutation.SetDiscountPercentage(i)
	return mic
}

// SetNillableDiscountPercentage sets the "discount_percentage" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableDiscountPercentage(i *int) *MenuItemCreate {
	if i != nil {
		mic.SetDiscountPercentage(*i)
	}
	return mic
}

// SetPromotionDescription sets the "promotion_description" field.
func (mic *MenuItemCreate) SetPromotionDescription(s string) *MenuItemCreate {
	mic.mutation.SetPromotionDescription(s)
	return mic
}

// SetNillablePromotionDescription sets the "promotion_description" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillablePromotionDescription(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetPromotionDescription(*s)
	}
	return mic
}

// SetPromotionStart sets the "promotion_start" field.
func (mic *MenuItemCreate) SetPromotionStart(t time.Time) *MenuItemCreate {
	mic.mutation.SetPromotionStart(t)
	return mic
}

// SetNillablePromotionStart sets the "promotion_start" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillablePromotionStart(t *time.Time) *MenuItemCreate {
	if t != nil {
		mic.SetPromotionStart(*t)
	}
	return mic
}

// SetPromotionEnd sets the "promotion_end" field.
func (mic *MenuItemCreate) SetPromotionEnd(t time.Time) *MenuItemCreate {
	mic.mutation.SetPromotionEnd(t)
	return mic
}

// SetNillablePromotionEnd sets the "promotion_end" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillablePromotionEnd(t *time.Time) *MenuItemCreate {
	if t != nil {
		mic.SetPromotionEnd(*t)
	}
	return mic
}

// SetTags sets the "tags" field.
func (mic *MenuItemCreate) SetTags(s []string) *MenuItemCreate {
	mic.mutation.SetTags(s)
	return mic
}

// SetRelatedItems sets the "related_items" field.
func (mic *MenuItemCreate) SetRelatedItems(s []string) *MenuItemCreate {
	mic.mutation.SetRelatedItems(s)
	return mic
}

// SetID sets the "id" field.
func (mic *MenuItemCreate) SetID(s string) *MenuItemCreate {
	mic.mutation.SetID(s)
	return mic
}

// AddMenuIDs adds the "menu" edge to the Menu entity by IDs.
func (mic *MenuItemCreate) AddMenuIDs(ids ...string) *MenuItemCreate {
	mic.mutation.AddMenuIDs(ids...)
	return mic
}

// AddMenu adds the "menu" edges to the Menu entity.
func (mic *MenuItemCreate) AddMenu(m ...*Menu) *MenuItemCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mic.AddMenuIDs(ids...)
}

// SetInventoryID sets the "inventory" edge to the PlaceInventory entity by ID.
func (mic *MenuItemCreate) SetInventoryID(id string) *MenuItemCreate {
	mic.mutation.SetInventoryID(id)
	return mic
}

// SetNillableInventoryID sets the "inventory" edge to the PlaceInventory entity by ID if the given value is not nil.
func (mic *MenuItemCreate) SetNillableInventoryID(id *string) *MenuItemCreate {
	if id != nil {
		mic = mic.SetInventoryID(*id)
	}
	return mic
}

// SetInventory sets the "inventory" edge to the PlaceInventory entity.
func (mic *MenuItemCreate) SetInventory(p *PlaceInventory) *MenuItemCreate {
	return mic.SetInventoryID(p.ID)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (mic *MenuItemCreate) AddMediumIDs(ids ...string) *MenuItemCreate {
	mic.mutation.AddMediumIDs(ids...)
	return mic
}

// AddMedia adds the "media" edges to the Media entity.
func (mic *MenuItemCreate) AddMedia(m ...*Media) *MenuItemCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mic.AddMediumIDs(ids...)
}

// AddOrderItemIDs adds the "order_items" edge to the OrderItem entity by IDs.
func (mic *MenuItemCreate) AddOrderItemIDs(ids ...string) *MenuItemCreate {
	mic.mutation.AddOrderItemIDs(ids...)
	return mic
}

// AddOrderItems adds the "order_items" edges to the OrderItem entity.
func (mic *MenuItemCreate) AddOrderItems(o ...*OrderItem) *MenuItemCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return mic.AddOrderItemIDs(ids...)
}

// Mutation returns the MenuItemMutation object of the builder.
func (mic *MenuItemCreate) Mutation() *MenuItemMutation {
	return mic.mutation
}

// Save creates the MenuItem in the database.
func (mic *MenuItemCreate) Save(ctx context.Context) (*MenuItem, error) {
	mic.defaults()
	return withHooks(ctx, mic.sqlSave, mic.mutation, mic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mic *MenuItemCreate) SaveX(ctx context.Context) *MenuItem {
	v, err := mic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mic *MenuItemCreate) Exec(ctx context.Context) error {
	_, err := mic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mic *MenuItemCreate) ExecX(ctx context.Context) {
	if err := mic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mic *MenuItemCreate) defaults() {
	if _, ok := mic.mutation.IsAvailable(); !ok {
		v := menuitem.DefaultIsAvailable
		mic.mutation.SetIsAvailable(v)
	}
	if _, ok := mic.mutation.IsDeleted(); !ok {
		v := menuitem.DefaultIsDeleted
		mic.mutation.SetIsDeleted(v)
	}
	if _, ok := mic.mutation.IsFeatured(); !ok {
		v := menuitem.DefaultIsFeatured
		mic.mutation.SetIsFeatured(v)
	}
	if _, ok := mic.mutation.IsNew(); !ok {
		v := menuitem.DefaultIsNew
		mic.mutation.SetIsNew(v)
	}
	if _, ok := mic.mutation.IsSeasonal(); !ok {
		v := menuitem.DefaultIsSeasonal
		mic.mutation.SetIsSeasonal(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mic *MenuItemCreate) check() error {
	if _, ok := mic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MenuItem.name"`)}
	}
	if _, ok := mic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "MenuItem.price"`)}
	}
	if _, ok := mic.mutation.IsAvailable(); !ok {
		return &ValidationError{Name: "is_available", err: errors.New(`ent: missing required field "MenuItem.is_available"`)}
	}
	if v, ok := mic.mutation.GetType(); ok {
		if err := menuitem.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MenuItem.type": %w`, err)}
		}
	}
	if v, ok := mic.mutation.Status(); ok {
		if err := menuitem.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "MenuItem.status": %w`, err)}
		}
	}
	if v, ok := mic.mutation.DrinkType(); ok {
		if err := menuitem.DrinkTypeValidator(v); err != nil {
			return &ValidationError{Name: "DrinkType", err: fmt.Errorf(`ent: validator failed for field "MenuItem.DrinkType": %w`, err)}
		}
	}
	if v, ok := mic.mutation.DietaryType(); ok {
		if err := menuitem.DietaryTypeValidator(v); err != nil {
			return &ValidationError{Name: "DietaryType", err: fmt.Errorf(`ent: validator failed for field "MenuItem.DietaryType": %w`, err)}
		}
	}
	if _, ok := mic.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "MenuItem.is_deleted"`)}
	}
	if v, ok := mic.mutation.SpicinessLevel(); ok {
		if err := menuitem.SpicinessLevelValidator(v); err != nil {
			return &ValidationError{Name: "spiciness_level", err: fmt.Errorf(`ent: validator failed for field "MenuItem.spiciness_level": %w`, err)}
		}
	}
	if v, ok := mic.mutation.ID(); ok {
		if err := menuitem.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "MenuItem.id": %w`, err)}
		}
	}
	return nil
}

func (mic *MenuItemCreate) sqlSave(ctx context.Context) (*MenuItem, error) {
	if err := mic.check(); err != nil {
		return nil, err
	}
	_node, _spec := mic.createSpec()
	if err := sqlgraph.CreateNode(ctx, mic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MenuItem.ID type: %T", _spec.ID.Value)
		}
	}
	mic.mutation.id = &_node.ID
	mic.mutation.done = true
	return _node, nil
}

func (mic *MenuItemCreate) createSpec() (*MenuItem, *sqlgraph.CreateSpec) {
	var (
		_node = &MenuItem{config: mic.config}
		_spec = sqlgraph.NewCreateSpec(menuitem.Table, sqlgraph.NewFieldSpec(menuitem.FieldID, field.TypeString))
	)
	if id, ok := mic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mic.mutation.Name(); ok {
		_spec.SetField(menuitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mic.mutation.Description(); ok {
		_spec.SetField(menuitem.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mic.mutation.Price(); ok {
		_spec.SetField(menuitem.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := mic.mutation.Currency(); ok {
		_spec.SetField(menuitem.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := mic.mutation.IsAvailable(); ok {
		_spec.SetField(menuitem.FieldIsAvailable, field.TypeBool, value)
		_node.IsAvailable = value
	}
	if value, ok := mic.mutation.PreparationTime(); ok {
		_spec.SetField(menuitem.FieldPreparationTime, field.TypeInt, value)
		_node.PreparationTime = value
	}
	if value, ok := mic.mutation.Options(); ok {
		_spec.SetField(menuitem.FieldOptions, field.TypeJSON, value)
		_node.Options = value
	}
	if value, ok := mic.mutation.DeletedAt(); ok {
		_spec.SetField(menuitem.FieldDeletedAt, field.TypeString, value)
		_node.DeletedAt = value
	}
	if value, ok := mic.mutation.GetType(); ok {
		_spec.SetField(menuitem.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mic.mutation.Status(); ok {
		_spec.SetField(menuitem.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mic.mutation.DrinkType(); ok {
		_spec.SetField(menuitem.FieldDrinkType, field.TypeEnum, value)
		_node.DrinkType = value
	}
	if value, ok := mic.mutation.DietaryType(); ok {
		_spec.SetField(menuitem.FieldDietaryType, field.TypeEnum, value)
		_node.DietaryType = value
	}
	if value, ok := mic.mutation.IsDeleted(); ok {
		_spec.SetField(menuitem.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := mic.mutation.Calories(); ok {
		_spec.SetField(menuitem.FieldCalories, field.TypeInt, value)
		_node.Calories = value
	}
	if value, ok := mic.mutation.ServeSize(); ok {
		_spec.SetField(menuitem.FieldServeSize, field.TypeInt, value)
		_node.ServeSize = value
	}
	if value, ok := mic.mutation.AvailableFrom(); ok {
		_spec.SetField(menuitem.FieldAvailableFrom, field.TypeTime, value)
		_node.AvailableFrom = value
	}
	if value, ok := mic.mutation.AvailableUntil(); ok {
		_spec.SetField(menuitem.FieldAvailableUntil, field.TypeTime, value)
		_node.AvailableUntil = value
	}
	if value, ok := mic.mutation.ImageURL(); ok {
		_spec.SetField(menuitem.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := mic.mutation.SpicinessLevel(); ok {
		_spec.SetField(menuitem.FieldSpicinessLevel, field.TypeEnum, value)
		_node.SpicinessLevel = value
	}
	if value, ok := mic.mutation.Allergens(); ok {
		_spec.SetField(menuitem.FieldAllergens, field.TypeJSON, value)
		_node.Allergens = value
	}
	if value, ok := mic.mutation.ChefSpecialNote(); ok {
		_spec.SetField(menuitem.FieldChefSpecialNote, field.TypeString, value)
		_node.ChefSpecialNote = value
	}
	if value, ok := mic.mutation.Rating(); ok {
		_spec.SetField(menuitem.FieldRating, field.TypeInt, value)
		_node.Rating = value
	}
	if value, ok := mic.mutation.ReviewCount(); ok {
		_spec.SetField(menuitem.FieldReviewCount, field.TypeInt, value)
		_node.ReviewCount = value
	}
	if value, ok := mic.mutation.Category(); ok {
		_spec.SetField(menuitem.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := mic.mutation.OrderCount(); ok {
		_spec.SetField(menuitem.FieldOrderCount, field.TypeInt, value)
		_node.OrderCount = value
	}
	if value, ok := mic.mutation.Sku(); ok {
		_spec.SetField(menuitem.FieldSku, field.TypeString, value)
		_node.Sku = value
	}
	if value, ok := mic.mutation.IsFeatured(); ok {
		_spec.SetField(menuitem.FieldIsFeatured, field.TypeBool, value)
		_node.IsFeatured = value
	}
	if value, ok := mic.mutation.IsNew(); ok {
		_spec.SetField(menuitem.FieldIsNew, field.TypeBool, value)
		_node.IsNew = value
	}
	if value, ok := mic.mutation.IsSeasonal(); ok {
		_spec.SetField(menuitem.FieldIsSeasonal, field.TypeBool, value)
		_node.IsSeasonal = value
	}
	if value, ok := mic.mutation.Season(); ok {
		_spec.SetField(menuitem.FieldSeason, field.TypeString, value)
		_node.Season = value
	}
	if value, ok := mic.mutation.DiscountPercentage(); ok {
		_spec.SetField(menuitem.FieldDiscountPercentage, field.TypeInt, value)
		_node.DiscountPercentage = value
	}
	if value, ok := mic.mutation.PromotionDescription(); ok {
		_spec.SetField(menuitem.FieldPromotionDescription, field.TypeString, value)
		_node.PromotionDescription = value
	}
	if value, ok := mic.mutation.PromotionStart(); ok {
		_spec.SetField(menuitem.FieldPromotionStart, field.TypeTime, value)
		_node.PromotionStart = value
	}
	if value, ok := mic.mutation.PromotionEnd(); ok {
		_spec.SetField(menuitem.FieldPromotionEnd, field.TypeTime, value)
		_node.PromotionEnd = value
	}
	if value, ok := mic.mutation.Tags(); ok {
		_spec.SetField(menuitem.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := mic.mutation.RelatedItems(); ok {
		_spec.SetField(menuitem.FieldRelatedItems, field.TypeJSON, value)
		_node.RelatedItems = value
	}
	if nodes := mic.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menuitem.MenuTable,
			Columns: menuitem.MenuPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mic.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   menuitem.InventoryTable,
			Columns: []string{menuitem.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(placeinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mic.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menuitem.MediaTable,
			Columns: []string{menuitem.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mic.mutation.OrderItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   menuitem.OrderItemsTable,
			Columns: menuitem.OrderItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MenuItemCreateBulk is the builder for creating many MenuItem entities in bulk.
type MenuItemCreateBulk struct {
	config
	err      error
	builders []*MenuItemCreate
}

// Save creates the MenuItem entities in the database.
func (micb *MenuItemCreateBulk) Save(ctx context.Context) ([]*MenuItem, error) {
	if micb.err != nil {
		return nil, micb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(micb.builders))
	nodes := make([]*MenuItem, len(micb.builders))
	mutators := make([]Mutator, len(micb.builders))
	for i := range micb.builders {
		func(i int, root context.Context) {
			builder := micb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, micb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, micb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, micb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (micb *MenuItemCreateBulk) SaveX(ctx context.Context) []*MenuItem {
	v, err := micb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (micb *MenuItemCreateBulk) Exec(ctx context.Context) error {
	_, err := micb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (micb *MenuItemCreateBulk) ExecX(ctx context.Context) {
	if err := micb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio_api/like"
	"placio_api/media"
	"placio_api/post"
	"placio_api/review"
	"placio_api/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Like is the model entity for the Like schema.
type Like struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// True for like, False for dislike
	Like bool `json:"like,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikeQuery when eager-loading is set.
	Edges        LikeEdges `json:"edges"`
	like_review  *string
	like_media   *string
	like_post    *string
	post_likes   *string
	review_likes *string
	user_likes   *string
	selectValues sql.SelectValues
}

// LikeEdges holds the relations/edges for other nodes in the graph.
type LikeEdges struct {
	// The user who liked/disliked the review/media.
	User *User `json:"user,omitempty"`
	// The review that was liked/disliked.
	Review *Review `json:"review,omitempty"`
	// The media content that was liked/disliked.
	Media *Media `json:"media,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ReviewOrErr returns the Review value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeEdges) ReviewOrErr() (*Review, error) {
	if e.loadedTypes[1] {
		if e.Review == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: review.Label}
		}
		return e.Review, nil
	}
	return nil, &NotLoadedError{edge: "review"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeEdges) MediaOrErr() (*Media, error) {
	if e.loadedTypes[2] {
		if e.Media == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: media.Label}
		}
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[3] {
		if e.Post == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Like) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case like.FieldLike:
			values[i] = new(sql.NullBool)
		case like.FieldID:
			values[i] = new(sql.NullString)
		case like.FieldCreatedAt, like.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case like.ForeignKeys[0]: // like_review
			values[i] = new(sql.NullString)
		case like.ForeignKeys[1]: // like_media
			values[i] = new(sql.NullString)
		case like.ForeignKeys[2]: // like_post
			values[i] = new(sql.NullString)
		case like.ForeignKeys[3]: // post_likes
			values[i] = new(sql.NullString)
		case like.ForeignKeys[4]: // review_likes
			values[i] = new(sql.NullString)
		case like.ForeignKeys[5]: // user_likes
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Like fields.
func (l *Like) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case like.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				l.ID = value.String
			}
		case like.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case like.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case like.FieldLike:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field like", values[i])
			} else if value.Valid {
				l.Like = value.Bool
			}
		case like.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field like_review", values[i])
			} else if value.Valid {
				l.like_review = new(string)
				*l.like_review = value.String
			}
		case like.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field like_media", values[i])
			} else if value.Valid {
				l.like_media = new(string)
				*l.like_media = value.String
			}
		case like.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field like_post", values[i])
			} else if value.Valid {
				l.like_post = new(string)
				*l.like_post = value.String
			}
		case like.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_likes", values[i])
			} else if value.Valid {
				l.post_likes = new(string)
				*l.post_likes = value.String
			}
		case like.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review_likes", values[i])
			} else if value.Valid {
				l.review_likes = new(string)
				*l.review_likes = value.String
			}
		case like.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_likes", values[i])
			} else if value.Valid {
				l.user_likes = new(string)
				*l.user_likes = value.String
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Like.
// This includes values selected through modifiers, order, etc.
func (l *Like) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Like entity.
func (l *Like) QueryUser() *UserQuery {
	return NewLikeClient(l.config).QueryUser(l)
}

// QueryReview queries the "review" edge of the Like entity.
func (l *Like) QueryReview() *ReviewQuery {
	return NewLikeClient(l.config).QueryReview(l)
}

// QueryMedia queries the "media" edge of the Like entity.
func (l *Like) QueryMedia() *MediaQuery {
	return NewLikeClient(l.config).QueryMedia(l)
}

// QueryPost queries the "post" edge of the Like entity.
func (l *Like) QueryPost() *PostQuery {
	return NewLikeClient(l.config).QueryPost(l)
}

// Update returns a builder for updating this Like.
// Note that you need to call Like.Unwrap() before calling this method if this Like
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Like) Update() *LikeUpdateOne {
	return NewLikeClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the Like entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Like) Unwrap() *Like {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("placio_api: Like is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Like) String() string {
	var builder strings.Builder
	builder.WriteString("Like(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("createdAt=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("like=")
	builder.WriteString(fmt.Sprintf("%v", l.Like))
	builder.WriteByte(')')
	return builder.String()
}

// Likes is a parsable slice of Like.
type Likes []*Like

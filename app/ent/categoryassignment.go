// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio-app/ent/business"
	"placio-app/ent/category"
	"placio-app/ent/categoryassignment"
	"placio-app/ent/place"
	"placio-app/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CategoryAssignment is the model entity for the CategoryAssignment schema.
type CategoryAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// This represents the ID of User, Business or Place entity
	EntityID string `json:"entity_id,omitempty"`
	// This represents the type of entity: User, Business, or Place
	EntityType string `json:"entity_type,omitempty"`
	// This represents the ID of the category
	CategoryID string `json:"category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CategoryAssignmentQuery when eager-loading is set.
	Edges                            CategoryAssignmentEdges `json:"edges"`
	event_event_category_assignments *string
	selectValues                     sql.SelectValues
}

// CategoryAssignmentEdges holds the relations/edges for other nodes in the graph.
type CategoryAssignmentEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Business holds the value of the business edge.
	Business *Business `json:"business,omitempty"`
	// Place holds the value of the place edge.
	Place *Place `json:"place,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryAssignmentEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BusinessOrErr returns the Business value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryAssignmentEdges) BusinessOrErr() (*Business, error) {
	if e.loadedTypes[1] {
		if e.Business == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: business.Label}
		}
		return e.Business, nil
	}
	return nil, &NotLoadedError{edge: "business"}
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryAssignmentEdges) PlaceOrErr() (*Place, error) {
	if e.loadedTypes[2] {
		if e.Place == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: place.Label}
		}
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CategoryAssignmentEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[3] {
		if e.Category == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CategoryAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case categoryassignment.FieldID, categoryassignment.FieldEntityID, categoryassignment.FieldEntityType, categoryassignment.FieldCategoryID:
			values[i] = new(sql.NullString)
		case categoryassignment.ForeignKeys[0]: // event_event_category_assignments
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CategoryAssignment fields.
func (ca *CategoryAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case categoryassignment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ca.ID = value.String
			}
		case categoryassignment.FieldEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_id", values[i])
			} else if value.Valid {
				ca.EntityID = value.String
			}
		case categoryassignment.FieldEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entity_type", values[i])
			} else if value.Valid {
				ca.EntityType = value.String
			}
		case categoryassignment.FieldCategoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				ca.CategoryID = value.String
			}
		case categoryassignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_event_category_assignments", values[i])
			} else if value.Valid {
				ca.event_event_category_assignments = new(string)
				*ca.event_event_category_assignments = value.String
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CategoryAssignment.
// This includes values selected through modifiers, order, etc.
func (ca *CategoryAssignment) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the CategoryAssignment entity.
func (ca *CategoryAssignment) QueryUser() *UserQuery {
	return NewCategoryAssignmentClient(ca.config).QueryUser(ca)
}

// QueryBusiness queries the "business" edge of the CategoryAssignment entity.
func (ca *CategoryAssignment) QueryBusiness() *BusinessQuery {
	return NewCategoryAssignmentClient(ca.config).QueryBusiness(ca)
}

// QueryPlace queries the "place" edge of the CategoryAssignment entity.
func (ca *CategoryAssignment) QueryPlace() *PlaceQuery {
	return NewCategoryAssignmentClient(ca.config).QueryPlace(ca)
}

// QueryCategory queries the "category" edge of the CategoryAssignment entity.
func (ca *CategoryAssignment) QueryCategory() *CategoryQuery {
	return NewCategoryAssignmentClient(ca.config).QueryCategory(ca)
}

// Update returns a builder for updating this CategoryAssignment.
// Note that you need to call CategoryAssignment.Unwrap() before calling this method if this CategoryAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CategoryAssignment) Update() *CategoryAssignmentUpdateOne {
	return NewCategoryAssignmentClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CategoryAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CategoryAssignment) Unwrap() *CategoryAssignment {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CategoryAssignment is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CategoryAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("CategoryAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("entity_id=")
	builder.WriteString(ca.EntityID)
	builder.WriteString(", ")
	builder.WriteString("entity_type=")
	builder.WriteString(ca.EntityType)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(ca.CategoryID)
	builder.WriteByte(')')
	return builder.String()
}

// CategoryAssignments is a parsable slice of CategoryAssignment.
type CategoryAssignments []*CategoryAssignment


// Code generated by ent, DO NOT EDIT.



	

package order




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)


const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
		// FieldID holds the string denoting the id field in the database.
		FieldID = "id"
		// FieldCreatedAt holds the string denoting the created_at field in the database.
		FieldCreatedAt = "created_at"
		// FieldUpdatedAt holds the string denoting the updated_at field in the database.
		FieldUpdatedAt = "updated_at"
		// FieldStatus holds the string denoting the status field in the database.
		FieldStatus = "status"
		// FieldTotalAmount holds the string denoting the total_amount field in the database.
		FieldTotalAmount = "total_amount"
		// FieldAdditionalInfo holds the string denoting the additional_info field in the database.
		FieldAdditionalInfo = "additional_info"
		// FieldDeletedAt holds the string denoting the deleted_at field in the database.
		FieldDeletedAt = "deleted_at"
		// FieldIsDeleted holds the string denoting the is_deleted field in the database.
		FieldIsDeleted = "is_deleted"
		// EdgeUser holds the string denoting the user edge name in mutations.
		EdgeUser = "user"
		// EdgeOrderItems holds the string denoting the order_items edge name in mutations.
		EdgeOrderItems = "order_items"
		// EdgeTable holds the string denoting the table edge name in mutations.
		EdgeTable = "table"
	// Table holds the table name of the order in the database.
	Table = "orders"
		// UserTable is the table that holds the user relation/edge.
		UserTable = "orders"
			// UserInverseTable is the table name for the User entity.
			// It exists in this package in order to avoid circular dependency with the "user" package.
			UserInverseTable = "users"
			// UserColumn is the table column denoting the user relation/edge.
			UserColumn = "user_orders"
		// OrderItemsTable is the table that holds the order_items relation/edge. The primary key declared below.
		OrderItemsTable = "order_order_items"
			// OrderItemsInverseTable is the table name for the OrderItem entity.
			// It exists in this package in order to avoid circular dependency with the "orderitem" package.
			OrderItemsInverseTable = "order_items"
		// TableTable is the table that holds the table relation/edge. The primary key declared below.
		TableTable = "place_table_orders"
			// TableInverseTable is the table name for the PlaceTable entity.
			// It exists in this package in order to avoid circular dependency with the "placetable" package.
			TableInverseTable = "place_tables"

)



	
	// Columns holds all SQL columns for order fields.
	var Columns = []string{
			FieldID,
			FieldCreatedAt,
			FieldUpdatedAt,
			FieldStatus,
			FieldTotalAmount,
			FieldAdditionalInfo,
			FieldDeletedAt,
			FieldIsDeleted,
	}
	
	
		// ForeignKeys holds the SQL foreign-keys that are owned by the "orders"
		// table and are not defined as standalone fields in the schema.
		var ForeignKeys = []string{
				"user_orders",
		}
	

	
		var (
					// OrderItemsPrimaryKey and OrderItemsColumn2 are the table columns denoting the
					// primary key for the order_items relation (M2M).
					OrderItemsPrimaryKey = []string{"order_id", "order_item_id"}
					// TablePrimaryKey and TableColumn2 are the table columns denoting the
					// primary key for the table relation (M2M).
					TablePrimaryKey = []string{"place_table_id", "order_id"}
		)
	





	
// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
		for i := range ForeignKeys {
			if column == ForeignKeys[i] {
				return true
			}
		}
	return false
}









	var (
				// DefaultCreatedAt holds the default value on creation for the "created_at" field.
				DefaultCreatedAt func() time.Time
				// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
				DefaultUpdatedAt func() time.Time
				// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
				UpdateDefaultUpdatedAt func() time.Time
				// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
				DefaultIsDeleted bool
				// IDValidator is a validator for the "id" field. It is called by the builders before save.
				IDValidator func (string) error
	)




	
	
	
		
		
		// Status defines the type for the "status" enum field.
		type Status string
					// StatusPending is the default value of the Status enum.
					const DefaultStatus = StatusPending

		// Status values.
		const (
				StatusPending Status = "pending"
				StatusConfirmed Status = "confirmed"
				StatusCompleted Status = "completed"
				StatusCancelled Status = "cancelled"
		)

		func (s Status) String() string {
			return string(s)
		}
	


	
	// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
	func StatusValidator(s Status) error {
		switch s {
			case StatusPending,StatusConfirmed,StatusCompleted,StatusCancelled:
				return nil
			default:
				return fmt.Errorf("order: invalid enum value for status field: %q", s)
		}
	}



// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

	
	
		// ByID orders the results by the id field.
		func ByID(opts ...sql.OrderTermOption) OrderOption {
			return sql.OrderByField(FieldID, opts...).ToFunc()
		}
	
			// ByCreatedAt orders the results by the created_at field.
			func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
			}
			// ByUpdatedAt orders the results by the updated_at field.
			func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
			}
			// ByStatus orders the results by the status field.
			func ByStatus(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldStatus, opts...).ToFunc()
			}
			// ByTotalAmount orders the results by the total_amount field.
			func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
			}
			// ByDeletedAt orders the results by the deleted_at field.
			func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
			}
			// ByIsDeleted orders the results by the is_deleted field.
			func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
				return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
			}
			// ByUserField orders the results by user field.
			func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
				return func(s *sql.Selector) {
					sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
				}
			}
			// ByOrderItemsCount orders the results by order_items count.
			func ByOrderItemsCount(opts ...sql.OrderTermOption) OrderOption {
				return func(s *sql.Selector) {
					sqlgraph.OrderByNeighborsCount(s, newOrderItemsStep(), opts...)
				}
			}

			// ByOrderItems orders the results by order_items terms.
			func ByOrderItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
				return func(s *sql.Selector) {
					sqlgraph.OrderByNeighborTerms(s, newOrderItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
				}
			}
			// ByTableCount orders the results by table count.
			func ByTableCount(opts ...sql.OrderTermOption) OrderOption {
				return func(s *sql.Selector) {
					sqlgraph.OrderByNeighborsCount(s, newTableStep(), opts...)
				}
			}

			// ByTable orders the results by table terms.
			func ByTable(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
				return func(s *sql.Selector) {
					sqlgraph.OrderByNeighborTerms(s, newTableStep(), append([]sql.OrderTerm{term}, terms...)...)
				}
			}
		func newUserStep() *sqlgraph.Step {
			return sqlgraph.NewStep(
					sqlgraph.From(Table, FieldID),
						sqlgraph.To(UserInverseTable, FieldID),
				sqlgraph.Edge(sqlgraph.M2O, true, UserTable,UserColumn),
			)
		}
		func newOrderItemsStep() *sqlgraph.Step {
			return sqlgraph.NewStep(
					sqlgraph.From(Table, FieldID),
						sqlgraph.To(OrderItemsInverseTable, FieldID),
				sqlgraph.Edge(sqlgraph.M2M, false, OrderItemsTable,OrderItemsPrimaryKey...),
			)
		}
		func newTableStep() *sqlgraph.Step {
			return sqlgraph.NewStep(
					sqlgraph.From(Table, FieldID),
						sqlgraph.To(TableInverseTable, FieldID),
				sqlgraph.Edge(sqlgraph.M2M, true, TableTable,TablePrimaryKey...),
			)
		}








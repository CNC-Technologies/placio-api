// Code generated by ent, DO NOT EDIT.

package placetable

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldContainsFold(FieldID, id))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldEQ(FieldNumber, v))
}

// QrCode applies equality check predicate on the "qr_code" field. It's identical to QrCodeEQ.
func QrCode(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldEQ(FieldQrCode, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldLTE(FieldNumber, v))
}

// QrCodeEQ applies the EQ predicate on the "qr_code" field.
func QrCodeEQ(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldEQ(FieldQrCode, v))
}

// QrCodeNEQ applies the NEQ predicate on the "qr_code" field.
func QrCodeNEQ(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldNEQ(FieldQrCode, v))
}

// QrCodeIn applies the In predicate on the "qr_code" field.
func QrCodeIn(vs ...string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldIn(FieldQrCode, vs...))
}

// QrCodeNotIn applies the NotIn predicate on the "qr_code" field.
func QrCodeNotIn(vs ...string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldNotIn(FieldQrCode, vs...))
}

// QrCodeGT applies the GT predicate on the "qr_code" field.
func QrCodeGT(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldGT(FieldQrCode, v))
}

// QrCodeGTE applies the GTE predicate on the "qr_code" field.
func QrCodeGTE(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldGTE(FieldQrCode, v))
}

// QrCodeLT applies the LT predicate on the "qr_code" field.
func QrCodeLT(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldLT(FieldQrCode, v))
}

// QrCodeLTE applies the LTE predicate on the "qr_code" field.
func QrCodeLTE(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldLTE(FieldQrCode, v))
}

// QrCodeContains applies the Contains predicate on the "qr_code" field.
func QrCodeContains(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldContains(FieldQrCode, v))
}

// QrCodeHasPrefix applies the HasPrefix predicate on the "qr_code" field.
func QrCodeHasPrefix(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldHasPrefix(FieldQrCode, v))
}

// QrCodeHasSuffix applies the HasSuffix predicate on the "qr_code" field.
func QrCodeHasSuffix(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldHasSuffix(FieldQrCode, v))
}

// QrCodeIsNil applies the IsNil predicate on the "qr_code" field.
func QrCodeIsNil() predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldIsNull(FieldQrCode))
}

// QrCodeNotNil applies the NotNil predicate on the "qr_code" field.
func QrCodeNotNil() predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldNotNull(FieldQrCode))
}

// QrCodeEqualFold applies the EqualFold predicate on the "qr_code" field.
func QrCodeEqualFold(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldEqualFold(FieldQrCode, v))
}

// QrCodeContainsFold applies the ContainsFold predicate on the "qr_code" field.
func QrCodeContainsFold(v string) predicate.PlaceTable {
	return predicate.PlaceTable(sql.FieldContainsFold(FieldQrCode, v))
}

// HasPlace applies the HasEdge predicate on the "place" edge.
func HasPlace() predicate.PlaceTable {
	return predicate.PlaceTable(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlaceTable, PlaceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
func HasPlaceWith(preds ...predicate.Place) predicate.PlaceTable {
	return predicate.PlaceTable(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.PlaceTable {
	return predicate.PlaceTable(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, OrdersTable, OrdersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.PlaceTable {
	return predicate.PlaceTable(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlaceTable) predicate.PlaceTable {
	return predicate.PlaceTable(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlaceTable) predicate.PlaceTable {
	return predicate.PlaceTable(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlaceTable) predicate.PlaceTable {
	return predicate.PlaceTable(sql.NotPredicates(p))
}

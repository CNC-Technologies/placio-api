// Code generated by ent, DO NOT EDIT.

package businessfollowbusiness

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the businessfollowbusiness type in the database.
	Label = "business_follow_business"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFollower holds the string denoting the follower edge name in mutations.
	EdgeFollower = "follower"
	// EdgeFollowed holds the string denoting the followed edge name in mutations.
	EdgeFollowed = "followed"
	// Table holds the table name of the businessfollowbusiness in the database.
	Table = "business_follow_businesses"
	// FollowerTable is the table that holds the follower relation/edge.
	FollowerTable = "business_follow_businesses"
	// FollowerInverseTable is the table name for the Business entity.
	// It exists in this package in order to avoid circular dependency with the "business" package.
	FollowerInverseTable = "businesses"
	// FollowerColumn is the table column denoting the follower relation/edge.
	FollowerColumn = "business_followed_businesses"
	// FollowedTable is the table that holds the followed relation/edge.
	FollowedTable = "business_follow_businesses"
	// FollowedInverseTable is the table name for the Business entity.
	// It exists in this package in order to avoid circular dependency with the "business" package.
	FollowedInverseTable = "businesses"
	// FollowedColumn is the table column denoting the followed relation/edge.
	FollowedColumn = "business_follower_businesses"
)

// Columns holds all SQL columns for businessfollowbusiness fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "business_follow_businesses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"business_followed_businesses",
	"business_follower_businesses",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "UpdatedAt" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the BusinessFollowBusiness queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFollowerField orders the results by follower field.
func ByFollowerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowerStep(), sql.OrderByField(field, opts...))
	}
}

// ByFollowedField orders the results by followed field.
func ByFollowedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowedStep(), sql.OrderByField(field, opts...))
	}
}
func newFollowerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FollowerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FollowerTable, FollowerColumn),
	)
}
func newFollowedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FollowedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FollowedTable, FollowedColumn),
	)
}

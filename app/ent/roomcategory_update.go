// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"placio-app/ent/amenity"
	"placio-app/ent/media"
	"placio-app/ent/place"
	"placio-app/ent/predicate"
	"placio-app/ent/room"
	"placio-app/ent/roomcategory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomCategoryUpdate is the builder for updating RoomCategory entities.
type RoomCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *RoomCategoryMutation
}

// Where appends a list predicates to the RoomCategoryUpdate builder.
func (rcu *RoomCategoryUpdate) Where(ps ...predicate.RoomCategory) *RoomCategoryUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetName sets the "name" field.
func (rcu *RoomCategoryUpdate) SetName(s string) *RoomCategoryUpdate {
	rcu.mutation.SetName(s)
	return rcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcu *RoomCategoryUpdate) SetNillableName(s *string) *RoomCategoryUpdate {
	if s != nil {
		rcu.SetName(*s)
	}
	return rcu
}

// SetDescription sets the "description" field.
func (rcu *RoomCategoryUpdate) SetDescription(s string) *RoomCategoryUpdate {
	rcu.mutation.SetDescription(s)
	return rcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcu *RoomCategoryUpdate) SetNillableDescription(s *string) *RoomCategoryUpdate {
	if s != nil {
		rcu.SetDescription(*s)
	}
	return rcu
}

// ClearDescription clears the value of the "description" field.
func (rcu *RoomCategoryUpdate) ClearDescription() *RoomCategoryUpdate {
	rcu.mutation.ClearDescription()
	return rcu
}

// SetPrice sets the "price" field.
func (rcu *RoomCategoryUpdate) SetPrice(s string) *RoomCategoryUpdate {
	rcu.mutation.SetPrice(s)
	return rcu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (rcu *RoomCategoryUpdate) SetNillablePrice(s *string) *RoomCategoryUpdate {
	if s != nil {
		rcu.SetPrice(*s)
	}
	return rcu
}

// ClearPrice clears the value of the "price" field.
func (rcu *RoomCategoryUpdate) ClearPrice() *RoomCategoryUpdate {
	rcu.mutation.ClearPrice()
	return rcu
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (rcu *RoomCategoryUpdate) AddPlaceIDs(ids ...string) *RoomCategoryUpdate {
	rcu.mutation.AddPlaceIDs(ids...)
	return rcu
}

// AddPlace adds the "place" edges to the Place entity.
func (rcu *RoomCategoryUpdate) AddPlace(p ...*Place) *RoomCategoryUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rcu.AddPlaceIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (rcu *RoomCategoryUpdate) AddRoomIDs(ids ...string) *RoomCategoryUpdate {
	rcu.mutation.AddRoomIDs(ids...)
	return rcu
}

// AddRooms adds the "rooms" edges to the Room entity.
func (rcu *RoomCategoryUpdate) AddRooms(r ...*Room) *RoomCategoryUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddRoomIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (rcu *RoomCategoryUpdate) AddMediumIDs(ids ...string) *RoomCategoryUpdate {
	rcu.mutation.AddMediumIDs(ids...)
	return rcu
}

// AddMedia adds the "media" edges to the Media entity.
func (rcu *RoomCategoryUpdate) AddMedia(m ...*Media) *RoomCategoryUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return rcu.AddMediumIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (rcu *RoomCategoryUpdate) AddAmenityIDs(ids ...string) *RoomCategoryUpdate {
	rcu.mutation.AddAmenityIDs(ids...)
	return rcu
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (rcu *RoomCategoryUpdate) AddAmenities(a ...*Amenity) *RoomCategoryUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcu.AddAmenityIDs(ids...)
}

// Mutation returns the RoomCategoryMutation object of the builder.
func (rcu *RoomCategoryUpdate) Mutation() *RoomCategoryMutation {
	return rcu.mutation
}

// ClearPlace clears all "place" edges to the Place entity.
func (rcu *RoomCategoryUpdate) ClearPlace() *RoomCategoryUpdate {
	rcu.mutation.ClearPlace()
	return rcu
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (rcu *RoomCategoryUpdate) RemovePlaceIDs(ids ...string) *RoomCategoryUpdate {
	rcu.mutation.RemovePlaceIDs(ids...)
	return rcu
}

// RemovePlace removes "place" edges to Place entities.
func (rcu *RoomCategoryUpdate) RemovePlace(p ...*Place) *RoomCategoryUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rcu.RemovePlaceIDs(ids...)
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (rcu *RoomCategoryUpdate) ClearRooms() *RoomCategoryUpdate {
	rcu.mutation.ClearRooms()
	return rcu
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (rcu *RoomCategoryUpdate) RemoveRoomIDs(ids ...string) *RoomCategoryUpdate {
	rcu.mutation.RemoveRoomIDs(ids...)
	return rcu
}

// RemoveRooms removes "rooms" edges to Room entities.
func (rcu *RoomCategoryUpdate) RemoveRooms(r ...*Room) *RoomCategoryUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveRoomIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (rcu *RoomCategoryUpdate) ClearMedia() *RoomCategoryUpdate {
	rcu.mutation.ClearMedia()
	return rcu
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (rcu *RoomCategoryUpdate) RemoveMediumIDs(ids ...string) *RoomCategoryUpdate {
	rcu.mutation.RemoveMediumIDs(ids...)
	return rcu
}

// RemoveMedia removes "media" edges to Media entities.
func (rcu *RoomCategoryUpdate) RemoveMedia(m ...*Media) *RoomCategoryUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return rcu.RemoveMediumIDs(ids...)
}

// ClearAmenities clears all "amenities" edges to the Amenity entity.
func (rcu *RoomCategoryUpdate) ClearAmenities() *RoomCategoryUpdate {
	rcu.mutation.ClearAmenities()
	return rcu
}

// RemoveAmenityIDs removes the "amenities" edge to Amenity entities by IDs.
func (rcu *RoomCategoryUpdate) RemoveAmenityIDs(ids ...string) *RoomCategoryUpdate {
	rcu.mutation.RemoveAmenityIDs(ids...)
	return rcu
}

// RemoveAmenities removes "amenities" edges to Amenity entities.
func (rcu *RoomCategoryUpdate) RemoveAmenities(a ...*Amenity) *RoomCategoryUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcu.RemoveAmenityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RoomCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RoomCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RoomCategoryUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RoomCategoryUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcu *RoomCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(roomcategory.Table, roomcategory.Columns, sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Name(); ok {
		_spec.SetField(roomcategory.FieldName, field.TypeString, value)
	}
	if value, ok := rcu.mutation.Description(); ok {
		_spec.SetField(roomcategory.FieldDescription, field.TypeString, value)
	}
	if rcu.mutation.DescriptionCleared() {
		_spec.ClearField(roomcategory.FieldDescription, field.TypeString)
	}
	if value, ok := rcu.mutation.Price(); ok {
		_spec.SetField(roomcategory.FieldPrice, field.TypeString, value)
	}
	if rcu.mutation.PriceCleared() {
		_spec.ClearField(roomcategory.FieldPrice, field.TypeString)
	}
	if rcu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   roomcategory.PlaceTable,
			Columns: roomcategory.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !rcu.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   roomcategory.PlaceTable,
			Columns: roomcategory.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   roomcategory.PlaceTable,
			Columns: roomcategory.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.RoomsTable,
			Columns: roomcategory.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !rcu.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.RoomsTable,
			Columns: roomcategory.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.RoomsTable,
			Columns: roomcategory.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.MediaTable,
			Columns: roomcategory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedMediaIDs(); len(nodes) > 0 && !rcu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.MediaTable,
			Columns: roomcategory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.MediaTable,
			Columns: roomcategory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.AmenitiesTable,
			Columns: roomcategory.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedAmenitiesIDs(); len(nodes) > 0 && !rcu.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.AmenitiesTable,
			Columns: roomcategory.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.AmenitiesTable,
			Columns: roomcategory.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// RoomCategoryUpdateOne is the builder for updating a single RoomCategory entity.
type RoomCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoomCategoryMutation
}

// SetName sets the "name" field.
func (rcuo *RoomCategoryUpdateOne) SetName(s string) *RoomCategoryUpdateOne {
	rcuo.mutation.SetName(s)
	return rcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rcuo *RoomCategoryUpdateOne) SetNillableName(s *string) *RoomCategoryUpdateOne {
	if s != nil {
		rcuo.SetName(*s)
	}
	return rcuo
}

// SetDescription sets the "description" field.
func (rcuo *RoomCategoryUpdateOne) SetDescription(s string) *RoomCategoryUpdateOne {
	rcuo.mutation.SetDescription(s)
	return rcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rcuo *RoomCategoryUpdateOne) SetNillableDescription(s *string) *RoomCategoryUpdateOne {
	if s != nil {
		rcuo.SetDescription(*s)
	}
	return rcuo
}

// ClearDescription clears the value of the "description" field.
func (rcuo *RoomCategoryUpdateOne) ClearDescription() *RoomCategoryUpdateOne {
	rcuo.mutation.ClearDescription()
	return rcuo
}

// SetPrice sets the "price" field.
func (rcuo *RoomCategoryUpdateOne) SetPrice(s string) *RoomCategoryUpdateOne {
	rcuo.mutation.SetPrice(s)
	return rcuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (rcuo *RoomCategoryUpdateOne) SetNillablePrice(s *string) *RoomCategoryUpdateOne {
	if s != nil {
		rcuo.SetPrice(*s)
	}
	return rcuo
}

// ClearPrice clears the value of the "price" field.
func (rcuo *RoomCategoryUpdateOne) ClearPrice() *RoomCategoryUpdateOne {
	rcuo.mutation.ClearPrice()
	return rcuo
}

// AddPlaceIDs adds the "place" edge to the Place entity by IDs.
func (rcuo *RoomCategoryUpdateOne) AddPlaceIDs(ids ...string) *RoomCategoryUpdateOne {
	rcuo.mutation.AddPlaceIDs(ids...)
	return rcuo
}

// AddPlace adds the "place" edges to the Place entity.
func (rcuo *RoomCategoryUpdateOne) AddPlace(p ...*Place) *RoomCategoryUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rcuo.AddPlaceIDs(ids...)
}

// AddRoomIDs adds the "rooms" edge to the Room entity by IDs.
func (rcuo *RoomCategoryUpdateOne) AddRoomIDs(ids ...string) *RoomCategoryUpdateOne {
	rcuo.mutation.AddRoomIDs(ids...)
	return rcuo
}

// AddRooms adds the "rooms" edges to the Room entity.
func (rcuo *RoomCategoryUpdateOne) AddRooms(r ...*Room) *RoomCategoryUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddRoomIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (rcuo *RoomCategoryUpdateOne) AddMediumIDs(ids ...string) *RoomCategoryUpdateOne {
	rcuo.mutation.AddMediumIDs(ids...)
	return rcuo
}

// AddMedia adds the "media" edges to the Media entity.
func (rcuo *RoomCategoryUpdateOne) AddMedia(m ...*Media) *RoomCategoryUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return rcuo.AddMediumIDs(ids...)
}

// AddAmenityIDs adds the "amenities" edge to the Amenity entity by IDs.
func (rcuo *RoomCategoryUpdateOne) AddAmenityIDs(ids ...string) *RoomCategoryUpdateOne {
	rcuo.mutation.AddAmenityIDs(ids...)
	return rcuo
}

// AddAmenities adds the "amenities" edges to the Amenity entity.
func (rcuo *RoomCategoryUpdateOne) AddAmenities(a ...*Amenity) *RoomCategoryUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcuo.AddAmenityIDs(ids...)
}

// Mutation returns the RoomCategoryMutation object of the builder.
func (rcuo *RoomCategoryUpdateOne) Mutation() *RoomCategoryMutation {
	return rcuo.mutation
}

// ClearPlace clears all "place" edges to the Place entity.
func (rcuo *RoomCategoryUpdateOne) ClearPlace() *RoomCategoryUpdateOne {
	rcuo.mutation.ClearPlace()
	return rcuo
}

// RemovePlaceIDs removes the "place" edge to Place entities by IDs.
func (rcuo *RoomCategoryUpdateOne) RemovePlaceIDs(ids ...string) *RoomCategoryUpdateOne {
	rcuo.mutation.RemovePlaceIDs(ids...)
	return rcuo
}

// RemovePlace removes "place" edges to Place entities.
func (rcuo *RoomCategoryUpdateOne) RemovePlace(p ...*Place) *RoomCategoryUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rcuo.RemovePlaceIDs(ids...)
}

// ClearRooms clears all "rooms" edges to the Room entity.
func (rcuo *RoomCategoryUpdateOne) ClearRooms() *RoomCategoryUpdateOne {
	rcuo.mutation.ClearRooms()
	return rcuo
}

// RemoveRoomIDs removes the "rooms" edge to Room entities by IDs.
func (rcuo *RoomCategoryUpdateOne) RemoveRoomIDs(ids ...string) *RoomCategoryUpdateOne {
	rcuo.mutation.RemoveRoomIDs(ids...)
	return rcuo
}

// RemoveRooms removes "rooms" edges to Room entities.
func (rcuo *RoomCategoryUpdateOne) RemoveRooms(r ...*Room) *RoomCategoryUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveRoomIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (rcuo *RoomCategoryUpdateOne) ClearMedia() *RoomCategoryUpdateOne {
	rcuo.mutation.ClearMedia()
	return rcuo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (rcuo *RoomCategoryUpdateOne) RemoveMediumIDs(ids ...string) *RoomCategoryUpdateOne {
	rcuo.mutation.RemoveMediumIDs(ids...)
	return rcuo
}

// RemoveMedia removes "media" edges to Media entities.
func (rcuo *RoomCategoryUpdateOne) RemoveMedia(m ...*Media) *RoomCategoryUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return rcuo.RemoveMediumIDs(ids...)
}

// ClearAmenities clears all "amenities" edges to the Amenity entity.
func (rcuo *RoomCategoryUpdateOne) ClearAmenities() *RoomCategoryUpdateOne {
	rcuo.mutation.ClearAmenities()
	return rcuo
}

// RemoveAmenityIDs removes the "amenities" edge to Amenity entities by IDs.
func (rcuo *RoomCategoryUpdateOne) RemoveAmenityIDs(ids ...string) *RoomCategoryUpdateOne {
	rcuo.mutation.RemoveAmenityIDs(ids...)
	return rcuo
}

// RemoveAmenities removes "amenities" edges to Amenity entities.
func (rcuo *RoomCategoryUpdateOne) RemoveAmenities(a ...*Amenity) *RoomCategoryUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rcuo.RemoveAmenityIDs(ids...)
}

// Where appends a list predicates to the RoomCategoryUpdate builder.
func (rcuo *RoomCategoryUpdateOne) Where(ps ...predicate.RoomCategory) *RoomCategoryUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RoomCategoryUpdateOne) Select(field string, fields ...string) *RoomCategoryUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RoomCategory entity.
func (rcuo *RoomCategoryUpdateOne) Save(ctx context.Context) (*RoomCategory, error) {
	return withHooks(ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RoomCategoryUpdateOne) SaveX(ctx context.Context) *RoomCategory {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RoomCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RoomCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rcuo *RoomCategoryUpdateOne) sqlSave(ctx context.Context) (_node *RoomCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(roomcategory.Table, roomcategory.Columns, sqlgraph.NewFieldSpec(roomcategory.FieldID, field.TypeString))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoomCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roomcategory.FieldID)
		for _, f := range fields {
			if !roomcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roomcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Name(); ok {
		_spec.SetField(roomcategory.FieldName, field.TypeString, value)
	}
	if value, ok := rcuo.mutation.Description(); ok {
		_spec.SetField(roomcategory.FieldDescription, field.TypeString, value)
	}
	if rcuo.mutation.DescriptionCleared() {
		_spec.ClearField(roomcategory.FieldDescription, field.TypeString)
	}
	if value, ok := rcuo.mutation.Price(); ok {
		_spec.SetField(roomcategory.FieldPrice, field.TypeString, value)
	}
	if rcuo.mutation.PriceCleared() {
		_spec.ClearField(roomcategory.FieldPrice, field.TypeString)
	}
	if rcuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   roomcategory.PlaceTable,
			Columns: roomcategory.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedPlaceIDs(); len(nodes) > 0 && !rcuo.mutation.PlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   roomcategory.PlaceTable,
			Columns: roomcategory.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.PlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   roomcategory.PlaceTable,
			Columns: roomcategory.PlacePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(place.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.RoomsTable,
			Columns: roomcategory.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedRoomsIDs(); len(nodes) > 0 && !rcuo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.RoomsTable,
			Columns: roomcategory.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.RoomsTable,
			Columns: roomcategory.RoomsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.MediaTable,
			Columns: roomcategory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !rcuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.MediaTable,
			Columns: roomcategory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.MediaTable,
			Columns: roomcategory.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.AmenitiesTable,
			Columns: roomcategory.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedAmenitiesIDs(); len(nodes) > 0 && !rcuo.mutation.AmenitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.AmenitiesTable,
			Columns: roomcategory.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.AmenitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   roomcategory.AmenitiesTable,
			Columns: roomcategory.AmenitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amenity.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RoomCategory{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}

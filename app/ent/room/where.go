// Code generated by ent, DO NOT EDIT.

package room

import (
	"placio-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldName, v))
}

// RoomNumber applies equality check predicate on the "room_number" field. It's identical to RoomNumberEQ.
func RoomNumber(v int) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomNumber, v))
}

// RoomType applies equality check predicate on the "room_type" field. It's identical to RoomTypeEQ.
func RoomType(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomType, v))
}

// RoomStatus applies equality check predicate on the "room_status" field. It's identical to RoomStatusEQ.
func RoomStatus(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomStatus, v))
}

// RoomRating applies equality check predicate on the "room_rating" field. It's identical to RoomRatingEQ.
func RoomRating(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomRating, v))
}

// RoomPrice applies equality check predicate on the "room_price" field. It's identical to RoomPriceEQ.
func RoomPrice(v float64) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomPrice, v))
}

// GuestCapacity applies equality check predicate on the "guest_capacity" field. It's identical to GuestCapacityEQ.
func GuestCapacity(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldGuestCapacity, v))
}

// QrCode applies equality check predicate on the "qr_code" field. It's identical to QrCodeEQ.
func QrCode(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldQrCode, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldDescription, v))
}

// Availability applies equality check predicate on the "availability" field. It's identical to AvailabilityEQ.
func Availability(v bool) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldAvailability, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldImage, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldName, v))
}

// RoomNumberEQ applies the EQ predicate on the "room_number" field.
func RoomNumberEQ(v int) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomNumber, v))
}

// RoomNumberNEQ applies the NEQ predicate on the "room_number" field.
func RoomNumberNEQ(v int) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldRoomNumber, v))
}

// RoomNumberIn applies the In predicate on the "room_number" field.
func RoomNumberIn(vs ...int) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldRoomNumber, vs...))
}

// RoomNumberNotIn applies the NotIn predicate on the "room_number" field.
func RoomNumberNotIn(vs ...int) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldRoomNumber, vs...))
}

// RoomNumberGT applies the GT predicate on the "room_number" field.
func RoomNumberGT(v int) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldRoomNumber, v))
}

// RoomNumberGTE applies the GTE predicate on the "room_number" field.
func RoomNumberGTE(v int) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldRoomNumber, v))
}

// RoomNumberLT applies the LT predicate on the "room_number" field.
func RoomNumberLT(v int) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldRoomNumber, v))
}

// RoomNumberLTE applies the LTE predicate on the "room_number" field.
func RoomNumberLTE(v int) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldRoomNumber, v))
}

// RoomNumberIsNil applies the IsNil predicate on the "room_number" field.
func RoomNumberIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldRoomNumber))
}

// RoomNumberNotNil applies the NotNil predicate on the "room_number" field.
func RoomNumberNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldRoomNumber))
}

// RoomTypeEQ applies the EQ predicate on the "room_type" field.
func RoomTypeEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomType, v))
}

// RoomTypeNEQ applies the NEQ predicate on the "room_type" field.
func RoomTypeNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldRoomType, v))
}

// RoomTypeIn applies the In predicate on the "room_type" field.
func RoomTypeIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldRoomType, vs...))
}

// RoomTypeNotIn applies the NotIn predicate on the "room_type" field.
func RoomTypeNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldRoomType, vs...))
}

// RoomTypeGT applies the GT predicate on the "room_type" field.
func RoomTypeGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldRoomType, v))
}

// RoomTypeGTE applies the GTE predicate on the "room_type" field.
func RoomTypeGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldRoomType, v))
}

// RoomTypeLT applies the LT predicate on the "room_type" field.
func RoomTypeLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldRoomType, v))
}

// RoomTypeLTE applies the LTE predicate on the "room_type" field.
func RoomTypeLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldRoomType, v))
}

// RoomTypeContains applies the Contains predicate on the "room_type" field.
func RoomTypeContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldRoomType, v))
}

// RoomTypeHasPrefix applies the HasPrefix predicate on the "room_type" field.
func RoomTypeHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldRoomType, v))
}

// RoomTypeHasSuffix applies the HasSuffix predicate on the "room_type" field.
func RoomTypeHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldRoomType, v))
}

// RoomTypeIsNil applies the IsNil predicate on the "room_type" field.
func RoomTypeIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldRoomType))
}

// RoomTypeNotNil applies the NotNil predicate on the "room_type" field.
func RoomTypeNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldRoomType))
}

// RoomTypeEqualFold applies the EqualFold predicate on the "room_type" field.
func RoomTypeEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldRoomType, v))
}

// RoomTypeContainsFold applies the ContainsFold predicate on the "room_type" field.
func RoomTypeContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldRoomType, v))
}

// RoomStatusEQ applies the EQ predicate on the "room_status" field.
func RoomStatusEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomStatus, v))
}

// RoomStatusNEQ applies the NEQ predicate on the "room_status" field.
func RoomStatusNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldRoomStatus, v))
}

// RoomStatusIn applies the In predicate on the "room_status" field.
func RoomStatusIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldRoomStatus, vs...))
}

// RoomStatusNotIn applies the NotIn predicate on the "room_status" field.
func RoomStatusNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldRoomStatus, vs...))
}

// RoomStatusGT applies the GT predicate on the "room_status" field.
func RoomStatusGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldRoomStatus, v))
}

// RoomStatusGTE applies the GTE predicate on the "room_status" field.
func RoomStatusGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldRoomStatus, v))
}

// RoomStatusLT applies the LT predicate on the "room_status" field.
func RoomStatusLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldRoomStatus, v))
}

// RoomStatusLTE applies the LTE predicate on the "room_status" field.
func RoomStatusLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldRoomStatus, v))
}

// RoomStatusContains applies the Contains predicate on the "room_status" field.
func RoomStatusContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldRoomStatus, v))
}

// RoomStatusHasPrefix applies the HasPrefix predicate on the "room_status" field.
func RoomStatusHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldRoomStatus, v))
}

// RoomStatusHasSuffix applies the HasSuffix predicate on the "room_status" field.
func RoomStatusHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldRoomStatus, v))
}

// RoomStatusIsNil applies the IsNil predicate on the "room_status" field.
func RoomStatusIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldRoomStatus))
}

// RoomStatusNotNil applies the NotNil predicate on the "room_status" field.
func RoomStatusNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldRoomStatus))
}

// RoomStatusEqualFold applies the EqualFold predicate on the "room_status" field.
func RoomStatusEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldRoomStatus, v))
}

// RoomStatusContainsFold applies the ContainsFold predicate on the "room_status" field.
func RoomStatusContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldRoomStatus, v))
}

// RoomRatingEQ applies the EQ predicate on the "room_rating" field.
func RoomRatingEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomRating, v))
}

// RoomRatingNEQ applies the NEQ predicate on the "room_rating" field.
func RoomRatingNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldRoomRating, v))
}

// RoomRatingIn applies the In predicate on the "room_rating" field.
func RoomRatingIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldRoomRating, vs...))
}

// RoomRatingNotIn applies the NotIn predicate on the "room_rating" field.
func RoomRatingNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldRoomRating, vs...))
}

// RoomRatingGT applies the GT predicate on the "room_rating" field.
func RoomRatingGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldRoomRating, v))
}

// RoomRatingGTE applies the GTE predicate on the "room_rating" field.
func RoomRatingGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldRoomRating, v))
}

// RoomRatingLT applies the LT predicate on the "room_rating" field.
func RoomRatingLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldRoomRating, v))
}

// RoomRatingLTE applies the LTE predicate on the "room_rating" field.
func RoomRatingLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldRoomRating, v))
}

// RoomRatingContains applies the Contains predicate on the "room_rating" field.
func RoomRatingContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldRoomRating, v))
}

// RoomRatingHasPrefix applies the HasPrefix predicate on the "room_rating" field.
func RoomRatingHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldRoomRating, v))
}

// RoomRatingHasSuffix applies the HasSuffix predicate on the "room_rating" field.
func RoomRatingHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldRoomRating, v))
}

// RoomRatingIsNil applies the IsNil predicate on the "room_rating" field.
func RoomRatingIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldRoomRating))
}

// RoomRatingNotNil applies the NotNil predicate on the "room_rating" field.
func RoomRatingNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldRoomRating))
}

// RoomRatingEqualFold applies the EqualFold predicate on the "room_rating" field.
func RoomRatingEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldRoomRating, v))
}

// RoomRatingContainsFold applies the ContainsFold predicate on the "room_rating" field.
func RoomRatingContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldRoomRating, v))
}

// RoomPriceEQ applies the EQ predicate on the "room_price" field.
func RoomPriceEQ(v float64) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldRoomPrice, v))
}

// RoomPriceNEQ applies the NEQ predicate on the "room_price" field.
func RoomPriceNEQ(v float64) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldRoomPrice, v))
}

// RoomPriceIn applies the In predicate on the "room_price" field.
func RoomPriceIn(vs ...float64) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldRoomPrice, vs...))
}

// RoomPriceNotIn applies the NotIn predicate on the "room_price" field.
func RoomPriceNotIn(vs ...float64) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldRoomPrice, vs...))
}

// RoomPriceGT applies the GT predicate on the "room_price" field.
func RoomPriceGT(v float64) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldRoomPrice, v))
}

// RoomPriceGTE applies the GTE predicate on the "room_price" field.
func RoomPriceGTE(v float64) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldRoomPrice, v))
}

// RoomPriceLT applies the LT predicate on the "room_price" field.
func RoomPriceLT(v float64) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldRoomPrice, v))
}

// RoomPriceLTE applies the LTE predicate on the "room_price" field.
func RoomPriceLTE(v float64) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldRoomPrice, v))
}

// RoomPriceIsNil applies the IsNil predicate on the "room_price" field.
func RoomPriceIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldRoomPrice))
}

// RoomPriceNotNil applies the NotNil predicate on the "room_price" field.
func RoomPriceNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldRoomPrice))
}

// GuestCapacityEQ applies the EQ predicate on the "guest_capacity" field.
func GuestCapacityEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldGuestCapacity, v))
}

// GuestCapacityNEQ applies the NEQ predicate on the "guest_capacity" field.
func GuestCapacityNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldGuestCapacity, v))
}

// GuestCapacityIn applies the In predicate on the "guest_capacity" field.
func GuestCapacityIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldGuestCapacity, vs...))
}

// GuestCapacityNotIn applies the NotIn predicate on the "guest_capacity" field.
func GuestCapacityNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldGuestCapacity, vs...))
}

// GuestCapacityGT applies the GT predicate on the "guest_capacity" field.
func GuestCapacityGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldGuestCapacity, v))
}

// GuestCapacityGTE applies the GTE predicate on the "guest_capacity" field.
func GuestCapacityGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldGuestCapacity, v))
}

// GuestCapacityLT applies the LT predicate on the "guest_capacity" field.
func GuestCapacityLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldGuestCapacity, v))
}

// GuestCapacityLTE applies the LTE predicate on the "guest_capacity" field.
func GuestCapacityLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldGuestCapacity, v))
}

// GuestCapacityContains applies the Contains predicate on the "guest_capacity" field.
func GuestCapacityContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldGuestCapacity, v))
}

// GuestCapacityHasPrefix applies the HasPrefix predicate on the "guest_capacity" field.
func GuestCapacityHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldGuestCapacity, v))
}

// GuestCapacityHasSuffix applies the HasSuffix predicate on the "guest_capacity" field.
func GuestCapacityHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldGuestCapacity, v))
}

// GuestCapacityIsNil applies the IsNil predicate on the "guest_capacity" field.
func GuestCapacityIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldGuestCapacity))
}

// GuestCapacityNotNil applies the NotNil predicate on the "guest_capacity" field.
func GuestCapacityNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldGuestCapacity))
}

// GuestCapacityEqualFold applies the EqualFold predicate on the "guest_capacity" field.
func GuestCapacityEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldGuestCapacity, v))
}

// GuestCapacityContainsFold applies the ContainsFold predicate on the "guest_capacity" field.
func GuestCapacityContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldGuestCapacity, v))
}

// QrCodeEQ applies the EQ predicate on the "qr_code" field.
func QrCodeEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldQrCode, v))
}

// QrCodeNEQ applies the NEQ predicate on the "qr_code" field.
func QrCodeNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldQrCode, v))
}

// QrCodeIn applies the In predicate on the "qr_code" field.
func QrCodeIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldQrCode, vs...))
}

// QrCodeNotIn applies the NotIn predicate on the "qr_code" field.
func QrCodeNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldQrCode, vs...))
}

// QrCodeGT applies the GT predicate on the "qr_code" field.
func QrCodeGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldQrCode, v))
}

// QrCodeGTE applies the GTE predicate on the "qr_code" field.
func QrCodeGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldQrCode, v))
}

// QrCodeLT applies the LT predicate on the "qr_code" field.
func QrCodeLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldQrCode, v))
}

// QrCodeLTE applies the LTE predicate on the "qr_code" field.
func QrCodeLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldQrCode, v))
}

// QrCodeContains applies the Contains predicate on the "qr_code" field.
func QrCodeContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldQrCode, v))
}

// QrCodeHasPrefix applies the HasPrefix predicate on the "qr_code" field.
func QrCodeHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldQrCode, v))
}

// QrCodeHasSuffix applies the HasSuffix predicate on the "qr_code" field.
func QrCodeHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldQrCode, v))
}

// QrCodeIsNil applies the IsNil predicate on the "qr_code" field.
func QrCodeIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldQrCode))
}

// QrCodeNotNil applies the NotNil predicate on the "qr_code" field.
func QrCodeNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldQrCode))
}

// QrCodeEqualFold applies the EqualFold predicate on the "qr_code" field.
func QrCodeEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldQrCode, v))
}

// QrCodeContainsFold applies the ContainsFold predicate on the "qr_code" field.
func QrCodeContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldQrCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldStatus, vs...))
}

// ExtrasIsNil applies the IsNil predicate on the "extras" field.
func ExtrasIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldExtras))
}

// ExtrasNotNil applies the NotNil predicate on the "extras" field.
func ExtrasNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldExtras))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldDescription, v))
}

// AvailabilityEQ applies the EQ predicate on the "availability" field.
func AvailabilityEQ(v bool) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldAvailability, v))
}

// AvailabilityNEQ applies the NEQ predicate on the "availability" field.
func AvailabilityNEQ(v bool) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldAvailability, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.Room {
	return predicate.Room(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.Room {
	return predicate.Room(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldImage, v))
}

// HasPlace applies the HasEdge predicate on the "place" edge.
func HasPlace() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, PlaceTable, PlacePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaceWith applies the HasEdge predicate on the "place" edge with a given conditions (other predicates).
func HasPlaceWith(preds ...predicate.Place) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newPlaceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoomCategory applies the HasEdge predicate on the "room_category" edge.
func HasRoomCategory() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RoomCategoryTable, RoomCategoryPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomCategoryWith applies the HasEdge predicate on the "room_category" edge with a given conditions (other predicates).
func HasRoomCategoryWith(preds ...predicate.RoomCategory) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newRoomCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBookings applies the HasEdge predicate on the "bookings" edge.
func HasBookings() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BookingsTable, BookingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookingsWith applies the HasEdge predicate on the "bookings" edge with a given conditions (other predicates).
func HasBookingsWith(preds ...predicate.Booking) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newBookingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAmenities applies the HasEdge predicate on the "amenities" edge.
func HasAmenities() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AmenitiesTable, AmenitiesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAmenitiesWith applies the HasEdge predicate on the "amenities" edge with a given conditions (other predicates).
func HasAmenitiesWith(preds ...predicate.Amenity) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newAmenitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, MediaTable, MediaPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReservations applies the HasEdge predicate on the "reservations" edge.
func HasReservations() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReservationsTable, ReservationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReservationsWith applies the HasEdge predicate on the "reservations" edge with a given conditions (other predicates).
func HasReservationsWith(preds ...predicate.Reservation) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newReservationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Room) predicate.Room {
	return predicate.Room(sql.NotPredicates(p))
}

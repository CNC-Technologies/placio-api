// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"placio_api/place"
	"placio_api/user"
	"placio_api/userlikeplace"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserLikePlace is the model entity for the UserLikePlace schema.
type UserLikePlace struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserLikePlaceQuery when eager-loading is set.
	Edges                 UserLikePlaceEdges `json:"edges"`
	user_liked_places     *string
	user_like_place_place *string
	selectValues          sql.SelectValues
}

// UserLikePlaceEdges holds the relations/edges for other nodes in the graph.
type UserLikePlaceEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Place holds the value of the place edge.
	Place *Place `json:"place,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLikePlaceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PlaceOrErr returns the Place value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLikePlaceEdges) PlaceOrErr() (*Place, error) {
	if e.loadedTypes[1] {
		if e.Place == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: place.Label}
		}
		return e.Place, nil
	}
	return nil, &NotLoadedError{edge: "place"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLikePlace) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userlikeplace.FieldID:
			values[i] = new(sql.NullString)
		case userlikeplace.FieldCreatedAt, userlikeplace.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userlikeplace.ForeignKeys[0]: // user_liked_places
			values[i] = new(sql.NullString)
		case userlikeplace.ForeignKeys[1]: // user_like_place_place
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLikePlace fields.
func (ulp *UserLikePlace) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userlikeplace.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ulp.ID = value.String
			}
		case userlikeplace.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				ulp.CreatedAt = value.Time
			}
		case userlikeplace.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				ulp.UpdatedAt = value.Time
			}
		case userlikeplace.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_liked_places", values[i])
			} else if value.Valid {
				ulp.user_liked_places = new(string)
				*ulp.user_liked_places = value.String
			}
		case userlikeplace.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_like_place_place", values[i])
			} else if value.Valid {
				ulp.user_like_place_place = new(string)
				*ulp.user_like_place_place = value.String
			}
		default:
			ulp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserLikePlace.
// This includes values selected through modifiers, order, etc.
func (ulp *UserLikePlace) Value(name string) (ent.Value, error) {
	return ulp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserLikePlace entity.
func (ulp *UserLikePlace) QueryUser() *UserQuery {
	return NewUserLikePlaceClient(ulp.config).QueryUser(ulp)
}

// QueryPlace queries the "place" edge of the UserLikePlace entity.
func (ulp *UserLikePlace) QueryPlace() *PlaceQuery {
	return NewUserLikePlaceClient(ulp.config).QueryPlace(ulp)
}

// Update returns a builder for updating this UserLikePlace.
// Note that you need to call UserLikePlace.Unwrap() before calling this method if this UserLikePlace
// was returned from a transaction, and the transaction was committed or rolled back.
func (ulp *UserLikePlace) Update() *UserLikePlaceUpdateOne {
	return NewUserLikePlaceClient(ulp.config).UpdateOne(ulp)
}

// Unwrap unwraps the UserLikePlace entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ulp *UserLikePlace) Unwrap() *UserLikePlace {
	_tx, ok := ulp.config.driver.(*txDriver)
	if !ok {
		panic("placio_api: UserLikePlace is not a transactional entity")
	}
	ulp.config.driver = _tx.drv
	return ulp
}

// String implements the fmt.Stringer.
func (ulp *UserLikePlace) String() string {
	var builder strings.Builder
	builder.WriteString("UserLikePlace(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ulp.ID))
	builder.WriteString("CreatedAt=")
	builder.WriteString(ulp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(ulp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserLikePlaces is a parsable slice of UserLikePlace.
type UserLikePlaces []*UserLikePlace

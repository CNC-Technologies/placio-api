



// Code generated by ent, DO NOT EDIT.



package ent



	
import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"sync"
	"time"
		"placio-app/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"database/sql/driver"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"
			 "placio-app/ent/transactionhistory"
			 "placio-app/ent/placeinventory"
			 "placio-app/ent/user"

)




		// TransactionHistory is the model entity for the TransactionHistory schema.
type TransactionHistory struct {
	config `json:"-"`
		// ID of the ent.
		ID string `json:"id,omitempty"`
		// TransactionType holds the value of the "transaction_type" field.
		TransactionType transactionhistory.TransactionType `json:"transaction_type,omitempty"`
		// Quantity holds the value of the "quantity" field.
		Quantity int `json:"quantity,omitempty"`
		// Date holds the value of the "date" field.
		Date time.Time `json:"date,omitempty"`
		// Edges holds the relations/edges for other nodes in the graph.
		// The values are being populated by the TransactionHistoryQuery when eager-loading is set.
		Edges TransactionHistoryEdges `json:"edges"`
		place_inventory_transaction_histories *string
		user_transaction_histories *string
	selectValues sql.SelectValues

}
// TransactionHistoryEdges holds the relations/edges for other nodes in the graph.
type TransactionHistoryEdges struct {
		// PlaceInventory holds the value of the place_inventory edge.
		PlaceInventory *PlaceInventory `json:"place_inventory,omitempty"`
		// User holds the value of the user edge.
		User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool


}
	// PlaceInventoryOrErr returns the PlaceInventory value or an error if the edge
	// was not loaded in eager-loading, or loaded but was not found.
	func (e TransactionHistoryEdges) PlaceInventoryOrErr() (*PlaceInventory, error) {
		if e.loadedTypes[0] {
				if e.PlaceInventory == nil {
					// Edge was loaded but was not found.
					return nil, &NotFoundError{label: placeinventory.Label}
				}
			return e.PlaceInventory, nil
		}
		return nil, &NotLoadedError{edge: "place_inventory"}
	}
	// UserOrErr returns the User value or an error if the edge
	// was not loaded in eager-loading, or loaded but was not found.
	func (e TransactionHistoryEdges) UserOrErr() (*User, error) {
		if e.loadedTypes[1] {
				if e.User == nil {
					// Edge was loaded but was not found.
					return nil, &NotFoundError{label: user.Label}
				}
			return e.User, nil
		}
		return nil, &NotLoadedError{edge: "user"}
	}







	
	


	
	
		
	
	
	

	
	
	
	

	
	
	
	


// scanValues returns the types for scanning values from sql.Rows.
func (*TransactionHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
				case transactionhistory.FieldQuantity:
					values[i] = new(sql.NullInt64)
				case transactionhistory.FieldID,transactionhistory.FieldTransactionType:
					values[i] = new(sql.NullString)
				case transactionhistory.FieldDate:
					values[i] = new(sql.NullTime)
				case transactionhistory.ForeignKeys[0]: // place_inventory_transaction_histories
					values[i] = new(sql.NullString)
				case transactionhistory.ForeignKeys[1]: // user_transaction_histories
					values[i] = new(sql.NullString)
			default:
				values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TransactionHistory fields.
func (th *TransactionHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
			case transactionhistory.FieldID:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
					th.ID = value.String
		}
			case transactionhistory.FieldTransactionType:
					if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field transaction_type", values[i])
			} else if value.Valid {
					th.TransactionType = transactionhistory.TransactionType(value.String)
		}
			case transactionhistory.FieldQuantity:
					if value, ok := values[i].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
					th.Quantity = int(value.Int64)
		}
			case transactionhistory.FieldDate:
					if value, ok := values[i].(*sql.NullTime); !ok {
			return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
					th.Date = value.Time
		}
			case transactionhistory.ForeignKeys[0]:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field place_inventory_transaction_histories", values[i])
			} else if value.Valid {
					th.place_inventory_transaction_histories = new(string)
					*th.place_inventory_transaction_histories = value.String
		}
			case transactionhistory.ForeignKeys[1]:
						if value, ok := values[i].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field user_transaction_histories", values[i])
			} else if value.Valid {
					th.user_transaction_histories = new(string)
					*th.user_transaction_histories = value.String
		}
		default:
			th.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TransactionHistory.
// This includes values selected through modifiers, order, etc.
func (th *TransactionHistory) Value(name string) (ent.Value, error) {
	return th.selectValues.Get(name)
}





	
	// QueryPlaceInventory queries the "place_inventory" edge of the TransactionHistory entity.
	func (th *TransactionHistory) QueryPlaceInventory() *PlaceInventoryQuery {
		return NewTransactionHistoryClient(th.config).QueryPlaceInventory(th)
	}

	
	// QueryUser queries the "user" edge of the TransactionHistory entity.
	func (th *TransactionHistory) QueryUser() *UserQuery {
		return NewTransactionHistoryClient(th.config).QueryUser(th)
	}


// Update returns a builder for updating this TransactionHistory.
// Note that you need to call TransactionHistory.Unwrap() before calling this method if this TransactionHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (th *TransactionHistory) Update() *TransactionHistoryUpdateOne {
	return NewTransactionHistoryClient(th.config).UpdateOne(th)
}

// Unwrap unwraps the TransactionHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (th *TransactionHistory) Unwrap() *TransactionHistory {
	_tx, ok := th.config.driver.(*txDriver)
	if !ok {
		panic("ent: TransactionHistory is not a transactional entity")
	}
	th.config.driver = _tx.drv
	return th
}


	

	// String implements the fmt.Stringer.
	func (th *TransactionHistory) String() string {
		var builder strings.Builder
		builder.WriteString("TransactionHistory(")
			builder.WriteString(fmt.Sprintf("id=%v, ", th.ID))
					builder.WriteString("transaction_type=")
						builder.WriteString(fmt.Sprintf("%v", th.TransactionType))
				builder.WriteString(", ")
					builder.WriteString("quantity=")
						builder.WriteString(fmt.Sprintf("%v", th.Quantity))
				builder.WriteString(", ")
					builder.WriteString("date=")
						builder.WriteString(th.Date.Format(time.ANSIC))
		builder.WriteByte(')')
		return builder.String()
	}







// TransactionHistories is a parsable slice of TransactionHistory.
type TransactionHistories []*TransactionHistory


	
	


